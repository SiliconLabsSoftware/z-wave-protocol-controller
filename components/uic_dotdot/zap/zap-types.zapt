/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @file zap-types.h
 * @defgroup zap ZAP (ZigBee Automation Platform)
 * @ingroup unify_components
 * @brief Types used by autogenerated code using ZAP
 *
 * @{
 */

{{zap_header}}

#include <stdint.h>
#include <stdbool.h>

#ifndef __ZAP_GEN_TYPE__
#define __ZAP_GEN_TYPE__

// FIXME Type-workarounds where ZAP fails to properly create our required types.
// FIXME: change key128 to typedef struct key128 {char x[16];} key128;
typedef char* key128;
typedef uint64_t EUI64;
typedef uint32_t UTC;
typedef uint16_t DrlkPINUserID;
typedef uint16_t DrlkRFIDUserID;
typedef uint16_t DrlkTotalUserID;
typedef uint8_t DrlkWeekDayScheduleID;
typedef uint8_t DrlkYearDayScheduleID;
typedef uint8_t DrlkHolidayScheduleID;
typedef uint8_t leveloptions; // map8
typedef uint8_t cccoloroptions; // map8
typedef uint8_t cccolorloopdirection; // map8
typedef uint16_t CCMinMiredsField;
typedef uint16_t CCMaxMiredsField;
typedef uint16_t TLRangeBeginEnd;
typedef uint16_t attribId;
typedef uint16_t SGroupId;
typedef const char* SSceneName;
typedef uint16_t clusterId;
typedef uint16_t OTAImageType;

// ZCL attribute types
enum {
{{#zcl_atomics}}
{{ident}}ZCL_{{asDelimitedMacro name}}_ATTRIBUTE_TYPE = {{asHex atomicId 2}}, // {{description}}
{{/zcl_atomics}}
};


// ZCL attribute sizes
#define ZAP_GENERATED_ATTRIBUTE_SIZES { \
{{#zcl_atomics}}
{{#if size}}
{{ident}}ZCL_{{asDelimitedMacro name}}_ATTRIBUTE_TYPE, {{size}}, \
{{/if}}
{{/zcl_atomics}}
}

// ZCL enums
{{#zcl_enums}}

// Enum for {{label}}
typedef enum {
{{#zcl_enum_items}}
{{ident}}ZCL_{{asDelimitedMacro parent.label}}_{{asDelimitedMacro label}} = {{value}},
{{/zcl_enum_items}}
} {{asType label}};
{{/zcl_enums}}

// ZCL bitmaps
{{#zcl_bitmaps}}
{{#zcl_bitmap_items}}
#define {{asDelimitedMacro parent.label}}_{{asDelimitedMacro label}} ({{mask}})
#define {{asDelimitedMacro parent.label}}_{{asDelimitedMacro label}}_OFFSET ({{asOffset mask}})
{{/zcl_bitmap_items}}
{{/zcl_bitmaps}}

// ZCL Structs
{{#zcl_structs}}

// Struct for {{label}}
typedef struct _{{asType label}} {
{{#zcl_struct_items}}
{{ident}}{{asUnderlyingType type}} {{asSymbol label}};
{{/zcl_struct_items}}
} {{asType label}};
{{/zcl_structs}}

#endif
/** @} end zap-types */
