/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}
/**
 * @defgroup dotdot_mqtt_attributes DotDot Attributes Serializer
 * @ingroup dotdot_mqtt
 *
 * @brief This component provides helper functions for parsing the
 * Attribute space of topics and generates Unify json payloads sent over MQTT.
 *
 * @{
 */

#ifndef DOTDOT_MQTT_ATTRIBUTES_H
#define DOTDOT_MQTT_ATTRIBUTES_H

#include <stdint.h>
#include <stdbool.h>

#include "sl_status.h"
#include "uic_typedefs.h"
#include "zap-types.h"
#include "uic_mqtt.h"


/** @brief Attribute value updated type */
typedef enum {
  /** The Desired value of an attribute has been updated */
  UCL_DESIRED_UPDATED   = 0x01,
  /** The Reported value of an attribute has been updated */
  UCL_REPORTED_UPDATED  = 0x02,
} {{dotdot_prefix}}_attribute_update_type_t;

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
// Callback types used by the {{asSnakeCaseLower label}} cluster
{{#zcl_attributes}}
typedef sl_status_t (*{{asAttributeCallback this}}_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  {{dotdot_prefix}}_attribute_update_type_t update_type,
{{#if (isMonotonousArray label)}}
  size_t {{asSnakeCaseLower label}}_count,
  {{#if_is_enum type}}
  {{enumType type}}* {{asSnakeCaseLower label}}
  {{else}}
  {{#unless (isString type)}}const {{/unless}}{{asUnderlyingType type}}* {{asSnakeCaseLower label}}
  {{/if_is_enum}}
{{else}}
  {{#if_is_enum type}}
  {{enumType type}} {{asSnakeCaseLower label}}
  {{else}}
  {{asUnderlyingType type}} {{asSnakeCaseLower label}}
  {{/if_is_enum}}
{{/if}}
);
{{/zcl_attributes}}
{{/if}}
{{/zcl_clusters}}

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

{{#zcl_clusters}}
{{#if (supportedCluster label)}}

/**
 *  Initializes the attributes features for the {{label}} cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t {{dotdot_prefix}}_{{asSnakeCaseLower label}}_attributes_init();

{{#zcl_attributes}}
/**
 * Setup callback to be called when a
 * {{parent.label}}/Attributes/{{asSnakeCaseLower label}}/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void {{asAttributeCallback this}}_set(const {{asAttributeCallback this}}_t callback);
{{/zcl_attributes}}

{{/if}}
{{/zcl_clusters}}

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // DOTDOT_MQTT_ATTRIBUTES_H
/** @} end dotdot_mqtt_attributes */
