/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}

// Includes from this component
#include "aoxpc_attribute_store_network_helper.h"
#include "aoxpc_attribute_store_defined_attribute_types.h"

// Generic includes
#include <stdlib.h>
#include <string.h>

// Unify components
#include "sl_log.h"
#include "dotdot_mqtt.h"
#include "attribute_store_helper.h"

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster {{label}}
////////////////////////////////////////////////////////////////////////////////

{{#zcl_attributes}}

// IsSupported function for {{parent.label}}::{{label}}
bool {{asAttributeIsSupportedFunction parent.label label}} (
  const aoa_id_t unid, dotdot_endpoint_id_t endpoint) {
  attribute_store_node_t endpoint_node =
    aoxpc_attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t attribute_node =
    attribute_store_get_first_child_by_type(endpoint_node,
                                          {{asAttributeIdDefine parent.label label}});

  return (attribute_node != ATTRIBUTE_STORE_INVALID_NODE);
}

{{#if (isMonotonousArray label)}}
// Get count function for {{parent.label}}::{{label}}
size_t {{asAttributeGetCountFunction parent.label label}}(
  const aoa_id_t unid,
  const dotdot_endpoint_id_t endpoint) {
  attribute_store_node_t endpoint_node =
    aoxpc_attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t attribute_node =
    attribute_store_get_first_child_by_type(endpoint_node,
                                          {{asAttributeIdDefine parent.label label}});

  // Assuming only the right type is stored under the attribute node.
  return attribute_store_get_node_child_count(attribute_node);
}

// Get function for {{parent.label}}::{{label}} single element in array.
sl_status_t {{asAttributeGetFunction parent.label label}}(
  const aoa_id_t unid,
  const dotdot_endpoint_id_t endpoint,
  {{#if (isString type)}}char* value{{else}}{{asUnderlyingType type}} *value{{/if}},
  size_t index) {

  attribute_store_node_t endpoint_node =
    aoxpc_attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t attribute_node =
    attribute_store_get_first_child_by_type(endpoint_node,
                                          {{asAttributeIdDefine parent.label label}});

  attribute_store_node_t child_node =
    attribute_store_get_node_child_by_type(attribute_node,
                                          {{asAttributeIdDefine parent.label label}},
                                          index);

  {{#if (isString type)}}
  return attribute_store_get_reported_string(child_node,
                                             value,
                                             ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  {{else}}
  return attribute_store_get_reported(child_node,
                                      value,
                                      sizeof({{asUnderlyingType type}}));
  {{/if}}
}

{{else}}
// Get function for {{parent.label}}::{{label}}
sl_status_t {{asAttributeGetFunction parent.label label}}(
  const aoa_id_t unid,
  const dotdot_endpoint_id_t endpoint,
  {{#if (isString type)}}char* value{{else}}{{asUnderlyingType type}} *value{{/if}}) {

  attribute_store_node_t endpoint_node =
    aoxpc_attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t attribute_node =
    attribute_store_get_first_child_by_type(endpoint_node,
                                          {{asAttributeIdDefine parent.label label}});

  {{#if (isString type)}}
  return attribute_store_get_reported_string(attribute_node,
                                             value,
                                             ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  {{else}}
  return attribute_store_get_reported(attribute_node,
                                      value,
                                      sizeof({{asUnderlyingType type}}));
  {{/if}}

}
{{/if}}


// Set function for {{parent.label}}::{{label}}
sl_status_t {{asAttributeSetFunction parent.label label}}(
  const aoa_id_t unid,
  const dotdot_endpoint_id_t endpoint,
  {{#if (isMonotonousArray label)}}size_t new_{{asSnakeCaseLower label}}_count,
  {{asUnderlyingType type}}* new_{{asSnakeCaseLower label}}
  {{else}}{{asUnderlyingType type}} new_{{asSnakeCaseLower label}}{{/if}}) {

  attribute_store_node_t endpoint_node =
    aoxpc_attribute_store_network_helper_create_endpoint_node(unid, endpoint);

  attribute_store_node_t attribute_node =
    attribute_store_get_first_child_by_type(endpoint_node,
                                          {{asAttributeIdDefine parent.label label}});

  if (attribute_node == ATTRIBUTE_STORE_INVALID_NODE) {
    attribute_node = attribute_store_add_node({{asAttributeIdDefine parent.label label}},
                                              endpoint_node);
  }
  {{#if (isMonotonousArray label)}}
  // Wipe all the children under the array holder:
  attribute_store_delete_all_children(attribute_node);
  sl_status_t set_status = SL_STATUS_OK;
  for (size_t i = 0; i< new_{{asSnakeCaseLower label}}_count;i++){
    attribute_store_node_t child_node = attribute_store_add_node(
                                          {{asAttributeIdDefine parent.label label}},
                                          attribute_node);
    {{#if (isString type)}}
    set_status = attribute_store_set_reported_string(child_node,
                                                     new_{{asSnakeCaseLower label}}[i]);
    {{else}}

    set_status = attribute_store_set_reported(child_node,
                                              (uint8_t *)&new_{{asSnakeCaseLower label}}[i],
                                              sizeof({{asUnderlyingType type}}));
    {{/if}}

    if (set_status != SL_STATUS_OK) {
      return set_status;
    }
  }
  return set_status;

  {{else}}
    {{#if (isString type)}}
    return attribute_store_set_reported_string(attribute_node,
                                               new_{{asSnakeCaseLower label}}));
    {{else}}
    return attribute_store_set_reported(attribute_node,
                                        (uint8_t *)&new_{{asSnakeCaseLower label}},
                                        sizeof({{asUnderlyingType type}}));
    {{/if}}
  {{/if}}
}

{{/zcl_attributes}}
{{/if}}
{{/zcl_clusters}}