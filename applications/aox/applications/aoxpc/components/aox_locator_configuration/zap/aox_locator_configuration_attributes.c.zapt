/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}

// Includes from this component
#include "aox_locator_configuration.h"
#include "aox_locator_configuration_internal.h"

// Generic includes
#include <stdlib.h>
#include <string.h>

// Unify components
#include "sl_log.h"
#include "dotdot_mqtt.h"
#include "attribute_store.h"

// AoXPC components
#include "aoxpc_unid.h"
#include "aoxpc_attribute_store_defined_attribute_types.h"

#define LOG_TAG "aox_locator_configuration"
#define BASE_TOPIC_FORMAT "ucl/by-unid/%s/ep%d"
#define MAXIMUM_BASE_TOPIC_SIZE 200

// Private variables
static aox_locator_attributes_t attribute_configuration = {};

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_attributes}}
  {{#if (isAttributeSupported parent.label label)}}
    {{#if (isMonotonousArray label)}}
/**
 * @brief frees up the memory allocated previous for the {{parent.label}} {{label}} Attribute
 *
 */
static void {{asSnakeCaseLower parent.label}}_clear_allocated_{{asSnakeCaseLower label}}(){
  if (attribute_configuration.{{asSnakeCaseLower label}}_count == 0) {
    return;
  }
      {{#if (isString type)}}
  for (size_t i = 0; i < attribute_configuration.{{asSnakeCaseLower label}}_count; i++){
    free(attribute_configuration.{{asSnakeCaseLower label}}[i]);
  }
      {{/if}}
  free(attribute_configuration.{{asSnakeCaseLower label}});
  attribute_configuration.{{asSnakeCaseLower label}}_count = 0;
  attribute_configuration.{{asSnakeCaseLower label}} = NULL;
}
    {{else}}
      {{#if (isString type)}}
/**
 * @brief frees up the memory allocated previous for the {{parent.label}} {{label}} Attribute
 *
 */
static void {{asSnakeCaseLower parent.label}}_clear_allocated_{{asSnakeCaseLower label}}() {
  if (attribute_configuration.{{asSnakeCaseLower label}} == NULL) {
    return;
  }
  free(attribute_configuration.{{asSnakeCaseLower label}});
  attribute_configuration.{{asSnakeCaseLower label}} = NULL;
}
      {{/if}}
    {{/if}}
  {{/if}}
{{/zcl_attributes}}
{{/if}}
{{/zcl_clusters}}

sl_status_t aox_locator_write_attributes_callback(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  uic_mqtt_dotdot_callback_call_type_t call_type,
  uic_mqtt_dotdot_aox_locator_state_t state,
  uic_mqtt_dotdot_aox_locator_updated_state_t updated_state)
{
  // If dotdot MQTT asks if this command is supported, we say yes.
  if (call_type == UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK) {
    return SL_STATUS_OK;
  }

  // Addressing validation (UNID/EP)
  if (false == is_aoxpc_unid(unid)) {
    sl_log_debug(LOG_TAG,
                 "Received WriteAttributes not addressed to our "
                 "UNID (%s). Ignoring.",
                 unid);
    return SL_STATUS_FAIL;
  } else if (endpoint != AOXPC_ENDPOINT_ID) {
    sl_log_debug(LOG_TAG,
                 "Received WriteAttributes command for non-supported"
                 "Endpoint ID (%d). Ignoring.",
                 endpoint);
    return SL_STATUS_FAIL;
  }

  // Accept the new configuration
  bool configuration_updated = false;

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_attributes}}
  if (updated_state.{{asSnakeCaseLower label}} == true) {
  {{#if (isAttributeSupported parent.label label)}}
    // Update our configuration
    configuration_updated = true;
    sl_log_debug(LOG_TAG,"Updating {{asSnakeCaseLower parent.label}}::{{asSnakeCaseLower label}}");
    {{#if (isMonotonousArray label)}}
    {{asSnakeCaseLower parent.label}}_clear_allocated_{{asSnakeCaseLower label}}();
    if (state.{{asSnakeCaseLower label}}_count != 0) {
      attribute_configuration.{{asSnakeCaseLower label}} = malloc(sizeof({{asUnderlyingType type}}) * state.{{asSnakeCaseLower label}}_count);
      for (size_t i = 0; i < state.{{asSnakeCaseLower label}}_count; i++) {
        {{#if (isString type)}}
        // String copy
        size_t string_size = strlen(state.{{asSnakeCaseLower label}}[i])+1;
        attribute_configuration.{{asSnakeCaseLower label}}[i]= NULL;
        attribute_configuration.{{asSnakeCaseLower label}}[i] = malloc(string_size);
        strncpy(attribute_configuration.{{asSnakeCaseLower label}}[i], state.{{asSnakeCaseLower label}}[i], string_size);
        attribute_configuration.{{asSnakeCaseLower label}}[i][string_size-1] = '\0';
        {{else}}
        attribute_configuration.{{asSnakeCaseLower label}}[i] = state.{{asSnakeCaseLower label}}[i];
        {{/if}}
      }
    }
      attribute_configuration.{{asSnakeCaseLower label}}_count = state.{{asSnakeCaseLower label}}_count;
    {{else}}
      {{#if (isString type)}}
  {{asSnakeCaseLower parent.label}}_clear_allocated_{{asSnakeCaseLower label}}();
  size_t string_size = strlen(state.{{asSnakeCaseLower label}})+1;
  attribute_configuration.{{asSnakeCaseLower label}} = malloc(string_size);
  strncpy(attribute_configuration.{{asSnakeCaseLower label}}, state.{{asSnakeCaseLower label}}, string_size);
  attribute_configuration.{{asSnakeCaseLower label}}[string_size-1] = '\0';
      {{else}}
  attribute_configuration.{{asSnakeCaseLower label}} = state.{{asSnakeCaseLower label}};
      {{/if}}
    {{/if}}
  {{else}}
  sl_log_debug(LOG_TAG, "Received a WriteAttribute command for a non-supported "
                        "attribute: {{asSnakeCaseLower parent.label}}::{{label}}. Ignoring.");
  {{/if}}
  }
{{/zcl_attributes}}

  // Callback listeners, then push an MQTT update
  if (configuration_updated == true){
    {{asSnakeCaseLower label}}_notify_configuration_was_updated();
    publish_{{asSnakeCaseLower label}}_attributes_to_mqtt();
  }

{{/if}}
{{/zcl_clusters}}
  return SL_STATUS_OK;
}

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
sl_status_t publish_{{asSnakeCaseLower label}}_attributes_to_mqtt()
{
  char base_topic[MAXIMUM_BASE_TOPIC_SIZE];
  aoa_id_t unid = "";
  if (SL_STATUS_OK != get_aoxpc_unid(unid)) {
    sl_log_debug(LOG_TAG,
              "AoXPC UNID not known. Skipping MQTT publication of "
              "{{label}} cluster attributes.");
    return SL_STATUS_FAIL;
  }
  snprintf(base_topic, sizeof(base_topic), BASE_TOPIC_FORMAT, unid, AOXPC_ENDPOINT_ID);

  sl_status_t publish_status = SL_STATUS_OK;


{{#zcl_attributes}}
  {{#if (isAttributeSupported parent.label label)}}
    {{#if (isMonotonousArray label)}}
    publish_status |=
      uic_mqtt_dotdot_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_publish(
        base_topic,
        attribute_configuration.{{asSnakeCaseLower label}}_count,
        {{#if (isString type)}}(const char**){{/if}}attribute_configuration.{{asSnakeCaseLower label}},
        UCL_MQTT_PUBLISH_TYPE_ALL
      );
    {{else}}
      publish_status |=
        uic_mqtt_dotdot_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_publish(
          base_topic,
          attribute_configuration.{{asSnakeCaseLower label}},
          UCL_MQTT_PUBLISH_TYPE_ALL
      );
    {{/if}}
  {{/if}}
{{/zcl_attributes}}
  // Don't forget the special ClusterRevision attribute.
  uic_mqtt_dotdot_{{asSnakeCaseLower label}}_publish_cluster_revision(base_topic, {{revision}});

{{/if}}
{{/zcl_clusters}}


  return publish_status;
}

{{#zcl_clusters}}
{{#if (supportedCluster label)}}

// Load from attribute store
sl_status_t {{asSnakeCaseLower label}}_load_attributes_from_attribute_store(void) {
  aoa_id_t aoxpc_unid = {};
  if (SL_STATUS_OK != get_aoxpc_unid(aoxpc_unid)) {
    sl_log_error(LOG_TAG,
                 "Could not retrieve AoXPC UNID. "
                 "The {{label}} configuration will not be loaded from the Attribute Store.");
    return SL_STATUS_FAIL;
  }
  {{#zcl_attributes}}
  {{#if (isAttributeSupported parent.label label)}}
  if (true == {{asAttributeIsSupportedFunction parent.label label}}(aoxpc_unid, AOXPC_ENDPOINT_ID)) {
    // It exists in the attribute store, load its value
    {{#if (isMonotonousArray label)}}
    // MonotonousArray
    sl_status_t load_status = SL_STATUS_OK;
      {{#if (isString type)}}
    char **array = NULL;
      {{else}}
    {{asUnderlyingType type}}* array = NULL;
      {{/if}}
    size_t array_size = {{asAttributeGetCountFunction parent.label label}}(aoxpc_unid, AOXPC_ENDPOINT_ID);
    if (array_size > 0) {
      {{#if (isString type)}}
      array = malloc(array_size * sizeof(char *));
      {{else}}
      array = malloc(array_size * sizeof({{asUnderlyingType type}}));
      {{/if}}
    }
    for (size_t i = 0 ; i < array_size ; i++) {
      {{#if (isString type)}}
      array[i] = malloc(sizeof(char)*ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
      load_status |= {{asAttributeGetFunction parent.label label}}(aoxpc_unid,
                                                                  AOXPC_ENDPOINT_ID,
                                                                  array[i],
                                                                  i);
      {{else}}
      load_status |= {{asAttributeGetFunction parent.label label}}(aoxpc_unid,
                                                                  AOXPC_ENDPOINT_ID,
                                                                  &array[i],
                                                                  i);
      {{/if}}
    }
    // Set it in the config:
    if (load_status == SL_STATUS_OK) {
      {{asSnakeCaseLower parent.label}}_set_{{asSnakeCaseLower label}}_attribute(
        array_size,
        {{#if (isString type)}}(const char**){{/if}}array);
    }
    //Free the malloc'ed memory
    {{#if (isString type)}}
    for (size_t i = 0 ; i < array_size ; i++) {
      free(array[i]);
    }
    {{/if}}
    if (array_size > 0) {
      free(array);
    }

    {{else}} // Not a MonotonousArray
      {{#if (isString type)}}
    char* value[ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH] = {};
      {{else}}
      {{asUnderlyingType type}} value;
      {{/if}}
    sl_status_t load_status =
      {{asAttributeGetFunction parent.label label}}(aoxpc_unid,
                                                    AOXPC_ENDPOINT_ID,
                                                    &value);
    // Set it in the config:
    if (load_status == SL_STATUS_OK) {
      {{asSnakeCaseLower parent.label}}_set_{{asSnakeCaseLower label}}_attribute(value);
    }
    {{/if}}
  }
  {{/if}}
  {{/zcl_attributes}}
  sl_log_debug(LOG_TAG,
              "Loaded {{label}} configuration from the Attribute Store successfully.");
  return SL_STATUS_OK;
}

// Store in attribute store
sl_status_t {{asSnakeCaseLower label}}_store_attributes_in_attribute_store(void) {
  aoa_id_t aoxpc_unid = {};
  if (SL_STATUS_OK != get_aoxpc_unid(aoxpc_unid)) {
    sl_log_error(LOG_TAG,
                 "Could not retrieve AoXPC UNID. "
                 "The {{label}} configuration will not be stored in the Attribute Store.");
    return SL_STATUS_FAIL;
  }
  {{#zcl_attributes}}
  {{#if (isAttributeSupported parent.label label)}}
    // Save {{label}} in the Attribute Store
    {{asAttributeSetFunction parent.label label}}(
      aoxpc_unid,
      AOXPC_ENDPOINT_ID,
      {{#if (isMonotonousArray label)}}attribute_configuration.{{asSnakeCaseLower label}}_count,{{/if}}
      {{#if (isString type)}}(const char**){{/if}}attribute_configuration.{{asSnakeCaseLower label}});
  {{/if}}
  {{/zcl_attributes}}
  sl_log_debug(LOG_TAG,
              "Saved {{label}} configuration to the Attribute Store successfully.");
  return SL_STATUS_OK;
}

{{#zcl_attributes}}
{{#if (isAttributeSupported parent.label label)}}
/**
 * @brief Sets the {{parent.label}} {{label}} Attribute
 *
 * @returns SL_STATUS_OK if successful, any other status code in case of error
 */
sl_status_t {{asSnakeCaseLower parent.label}}_set_{{asSnakeCaseLower label}}_attribute(
  {{#if (isMonotonousArray label)}}
  size_t {{asSnakeCaseLower label}}_count,
    {{#if_is_enum type}}
  {{enumType type}} {{asSnakeCaseLower label}}
    {{else if (isString type)}}
  const char** {{asSnakeCaseLower label}}
    {{else}}
  const {{asUnderlyingType type}}* {{asSnakeCaseLower label}}
    {{/if_is_enum}}
  {{else}}
    {{#if (isString type)}}
  const char* {{asSnakeCaseLower label}}
    {{else}}
  {{asUnderlyingType type}} {{asSnakeCaseLower label}}
    {{/if}}
  {{/if}}
){
  {{#if (isMonotonousArray label)}}
  {{asSnakeCaseLower parent.label}}_clear_allocated_{{asSnakeCaseLower label}}();
  attribute_configuration.{{asSnakeCaseLower label}}_count = {{asSnakeCaseLower label}}_count;
    {{#if_is_enum type}}
  attribute_configuration.{{asSnakeCaseLower label}} = malloc(sizeof({{enumType type}}) * {{asSnakeCaseLower label}}_count);
    {{else}}
  attribute_configuration.{{asSnakeCaseLower label}} = malloc(sizeof({{asUnderlyingType type}}) * {{asSnakeCaseLower label}}_count);
    {{/if_is_enum}}

  for (size_t i = 0; i<{{asSnakeCaseLower label}}_count;i++) {
    {{#if (isString type)}}
    size_t string_size = strlen({{asSnakeCaseLower label}}[i])+1;
    attribute_configuration.{{asSnakeCaseLower label}}[i]= NULL;
    attribute_configuration.{{asSnakeCaseLower label}}[i] = malloc(string_size);
    strncpy(attribute_configuration.{{asSnakeCaseLower label}}[i], {{asSnakeCaseLower label}}[i], string_size);
    attribute_configuration.{{asSnakeCaseLower label}}[i][string_size-1] = '\0';
    {{else}}
    attribute_configuration.{{asSnakeCaseLower label}}[i] = {{asSnakeCaseLower label}}[i];
    {{/if}}
  }
  {{else}}
    {{#if (isString type)}}
  {{asSnakeCaseLower parent.label}}_clear_allocated_{{asSnakeCaseLower label}}();
  size_t string_size = strlen({{asSnakeCaseLower label}})+1;
  attribute_configuration.{{asSnakeCaseLower label}} = malloc(string_size);
  strncpy(attribute_configuration.{{asSnakeCaseLower label}}, {{asSnakeCaseLower label}}, string_size);
  attribute_configuration.{{asSnakeCaseLower label}}[string_size-1] = '\0';
    {{else}}
  attribute_configuration.{{asSnakeCaseLower label}} = {{asSnakeCaseLower label}};
    {{/if}}
  {{/if}}

  // Publish to MQTT (No need to give an update notification to the application)
  publish_{{asSnakeCaseLower parent.label}}_attributes_to_mqtt();
  return SL_STATUS_OK;
}
{{/if}}
{{/zcl_attributes}}
{{/if}}
{{/zcl_clusters}}

sl_status_t aox_locator_reset_configuration() {
  // Free up already allocated memory, if any
{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_attributes}}
  {{#if (isAttributeSupported parent.label label)}}
    {{#if (isMonotonousArray label)}}
  {{asSnakeCaseLower parent.label}}_clear_allocated_{{asSnakeCaseLower label}}();
    {{else}}
      {{#if (isString type)}}
  {{asSnakeCaseLower parent.label}}_clear_allocated_{{asSnakeCaseLower label}}();
      {{/if}}
    {{/if}}
  {{/if}}
{{/zcl_attributes}}
{{/if}}
{{/zcl_clusters}}

  // Set the variables to 0.
  memset(&attribute_configuration,0,sizeof(attribute_configuration));
  return SL_STATUS_OK;
}

const aox_locator_attributes_t *aox_locator_configuration_get_configuration(){
  return &attribute_configuration;
}
