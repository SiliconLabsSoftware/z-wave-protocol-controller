From d4c8c5dc7793c0733b0f2c1989e416571ab489e9 Mon Sep 17 00:00:00 2001
From: Philippe Coval <philippe.coval@silabs.com>
Date: Tue, 16 Sep 2025 14:47:10 +0200
Subject: [PATCH] UIC-3437: Generated files for ScheduleEntryLock using latest
 zap

Relate-to: https://github.com/project-chip/zap/releases/download/v2025.07.24/zap-linux-x64.deb
Signed-off-by: Philippe Coval <philippe.coval@silabs.com>
---
 .../src/eed_attribute_store_clusters.c        |   32 +
 .../src/eed_dotdot_create_clusters.cpp        |   87 +
 .../include/dotdot_attribute_id_definitions.h |    9 +
 .../dotdot_cluster_command_id_definitions.h   |   13 +
 .../include/dotdot_cluster_id_definitions.h   |    4 +
 .../readme_ucl_mqtt_reference.md              | 1301 ++++++++
 .../src/dotdot_attribute_id_definitions.c     |   79 +
 .../src/dotdot_cluster_id_definitions.c       |    5 +
 .../zap-generated/include/dotdot_mqtt.h       |  638 +++-
 .../include/dotdot_mqtt_generated_commands.h  |  192 +-
 .../include/dotdot_mqtt_group_commands.h      |  158 +-
 .../include/dotdot_mqtt_send_commands.h       |  360 +-
 ...dotdot_mqtt_supported_generated_commands.h |   14 +-
 .../zap-generated/src/dotdot_mqtt.cpp         | 2964 ++++++++++++++---
 .../zap-generated/src/dotdot_mqtt.hpp         |  192 +-
 .../src/dotdot_mqtt_command_helpers.cpp       |  696 +++-
 .../src/dotdot_mqtt_command_helpers.hpp       |  312 +-
 .../src/dotdot_mqtt_generated_commands.cpp    |  324 +-
 .../src/dotdot_mqtt_group_commands.cpp        | 1260 ++++++-
 .../src/dotdot_mqtt_send_commands.cpp         |  664 +++-
 ...tdot_mqtt_supported_generated_commands.cpp |   36 +-
 .../test/dotdot_mqtt_test.include             |  230 +-
 .../test/unify_dotdot_attribute_store_test.c  |  582 +++-
 .../test/unify_dotdot_attribute_store_test.h  |   30 +-
 24 files changed, 9339 insertions(+), 843 deletions(-)

diff --git a/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_attribute_store_clusters.c b/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_attribute_store_clusters.c
index 981d5e7ef4..6b5125b658 100644
--- a/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_attribute_store_clusters.c
+++ b/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_attribute_store_clusters.c
@@ -2723,6 +2723,38 @@ sl_status_t eed_attribute_store_clusters_init()
     &on_zcl_desired_value_update,
     DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE,
     DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_WEEK_DAY,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_YEAR_DAY,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_SIGNTZO,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_HOURTZO,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_MINUTETZO,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_SIGN,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_MINUTE,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_NUMBER_OF_SLOTS_DAILY_REPEATING,
+    DESIRED_ATTRIBUTE);
   attribute_store_register_callback_by_type_and_state(
     &on_zcl_desired_value_update,
     DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE,
diff --git a/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_dotdot_create_clusters.cpp b/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_dotdot_create_clusters.cpp
index 0a74dd6e3e..8c320aad1e 100644
--- a/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_dotdot_create_clusters.cpp
+++ b/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_dotdot_create_clusters.cpp
@@ -4056,6 +4056,57 @@ void dotdot_create_unify_thermostat_wrapper(const dotdot_unid_t unid, const dotd
 
 }
 
+void dotdot_create_unify_schedule_entry_lock_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
+    // Create and set a default value if undefined.
+    dotdot_create_unify_schedule_entry_lock_slots_week_day(unid,endpoint_id);
+    if (false == dotdot_unify_schedule_entry_lock_slots_week_day_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_unify_schedule_entry_lock_slots_week_day(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_unify_schedule_entry_lock_slots_year_day(unid,endpoint_id);
+    if (false == dotdot_unify_schedule_entry_lock_slots_year_day_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_unify_schedule_entry_lock_slots_year_day(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_unify_schedule_entry_lock_signtzo(unid,endpoint_id);
+    if (false == dotdot_unify_schedule_entry_lock_signtzo_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_unify_schedule_entry_lock_signtzo(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_unify_schedule_entry_lock_hourtzo(unid,endpoint_id);
+    if (false == dotdot_unify_schedule_entry_lock_hourtzo_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_unify_schedule_entry_lock_hourtzo(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_unify_schedule_entry_lock_minutetzo(unid,endpoint_id);
+    if (false == dotdot_unify_schedule_entry_lock_minutetzo_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_unify_schedule_entry_lock_minutetzo(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_unify_schedule_entry_lock_dst_offset_sign(unid,endpoint_id);
+    if (false == dotdot_unify_schedule_entry_lock_dst_offset_sign_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_unify_schedule_entry_lock_dst_offset_sign(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_unify_schedule_entry_lock_dst_offset_minute(unid,endpoint_id);
+    if (false == dotdot_unify_schedule_entry_lock_dst_offset_minute_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_unify_schedule_entry_lock_dst_offset_minute(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_unify_schedule_entry_lock_number_of_slots_daily_repeating(unid,endpoint_id);
+    if (false == dotdot_unify_schedule_entry_lock_number_of_slots_daily_repeating_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_unify_schedule_entry_lock_number_of_slots_daily_repeating(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
+        }
+
+}
+
 void dotdot_create_unify_humidity_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
     // Create and set a default value if undefined.
     dotdot_create_unify_humidity_control_reporting_mode(unid,endpoint_id);
@@ -6598,6 +6649,40 @@ void dotdot_unretain_unify_thermostat_wrapper(const dotdot_unid_t unid, const do
     uic_mqtt_dotdot_unify_thermostat_publish_empty_supported_commands(unid, endpoint_id);
 }
 
+void dotdot_unretain_unify_schedule_entry_lock_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
+    char base_topic[256];
+    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
+    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_slots_week_day_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_WEEK_DAY).delete_node();
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_slots_year_day_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_YEAR_DAY).delete_node();
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_signtzo_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_SIGNTZO).delete_node();
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_hourtzo_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_HOURTZO).delete_node();
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_minutetzo_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_MINUTETZO).delete_node();
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_dst_offset_sign_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_SIGN).delete_node();
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_dst_offset_minute_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_MINUTE).delete_node();
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_number_of_slots_daily_repeating_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_SCHEDULE_ENTRY_LOCK_NUMBER_OF_SLOTS_DAILY_REPEATING).delete_node();
+
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_unretain_cluster_revision(base_topic);
+    uic_mqtt_dotdot_unify_schedule_entry_lock_publish_empty_supported_commands(unid, endpoint_id);
+}
+
 void dotdot_unretain_unify_humidity_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
     char base_topic[256];
     snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
@@ -6743,6 +6828,7 @@ std::map<std::string, eed_cluster_attribute_wrapper> CreateClusterMap = {
 { "Descriptor", dotdot_create_descriptor_wrapper },
 { "UnifyFanControl", dotdot_create_unify_fan_control_wrapper },
 { "UnifyThermostat", dotdot_create_unify_thermostat_wrapper },
+{ "UnifyScheduleEntryLock", dotdot_create_unify_schedule_entry_lock_wrapper },
 { "UnifyHumidityControl", dotdot_create_unify_humidity_control_wrapper },
 };
 
@@ -6795,5 +6881,6 @@ std::map<std::string, eed_cluster_attribute_wrapper> CreateUnretainMap = {
 { "Descriptor", dotdot_unretain_descriptor_wrapper },
 { "UnifyFanControl", dotdot_unretain_unify_fan_control_wrapper },
 { "UnifyThermostat", dotdot_unretain_unify_thermostat_wrapper },
+{ "UnifyScheduleEntryLock", dotdot_unretain_unify_schedule_entry_lock_wrapper },
 { "UnifyHumidityControl", dotdot_unretain_unify_humidity_control_wrapper },
 };
\ No newline at end of file
diff --git a/components/uic_dotdot/zap-generated/include/dotdot_attribute_id_definitions.h b/components/uic_dotdot/zap-generated/include/dotdot_attribute_id_definitions.h
index 52a9683a3b..eca5efe3e4 100644
--- a/components/uic_dotdot/zap-generated/include/dotdot_attribute_id_definitions.h
+++ b/components/uic_dotdot/zap-generated/include/dotdot_attribute_id_definitions.h
@@ -867,6 +867,15 @@ typedef enum {
 #define DOTDOT_UNIFY_THERMOSTAT_THERMOSTAT_MODE_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x1)
 #define DOTDOT_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x2)
 #define DOTDOT_UNIFY_THERMOSTAT_OPERATING_STATE_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x3)
+// Definitions for cluster: UnifyScheduleEntryLock
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_WEEK_DAY_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x1)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_YEAR_DAY_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x2)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SIGNTZO_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x3)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_HOURTZO_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x4)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_MINUTETZO_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x5)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_SIGN_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x6)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_MINUTE_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x7)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_NUMBER_OF_SLOTS_DAILY_REPEATING_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x8)
 // Definitions for cluster: UnifyHumidityControl
 #define DOTDOT_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x1)
 #define DOTDOT_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x2)
diff --git a/components/uic_dotdot/zap-generated/include/dotdot_cluster_command_id_definitions.h b/components/uic_dotdot/zap-generated/include/dotdot_cluster_command_id_definitions.h
index c63d48c45f..d67925ccb1 100644
--- a/components/uic_dotdot/zap-generated/include/dotdot_cluster_command_id_definitions.h
+++ b/components/uic_dotdot/zap-generated/include/dotdot_cluster_command_id_definitions.h
@@ -373,6 +373,19 @@
 
 // Commands for cluster: UnifyThermostat
 
+// Commands for cluster: UnifyScheduleEntryLock
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_ENABLE_SET_COMMAND_ID (0x1)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_WEEK_DAY_REPORT_COMMAND_ID (0x1)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_ENABLE_ALL_SET_COMMAND_ID (0x2)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_YEAR_DAY_REPORT_COMMAND_ID (0x2)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_WEEK_DAY_SET_COMMAND_ID (0x3)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_REPORT_COMMAND_ID (0x3)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_WEEK_DAY_GET_COMMAND_ID (0x4)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_YEAR_DAY_SET_COMMAND_ID (0x5)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_YEAR_DAY_GET_COMMAND_ID (0x6)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_SET_COMMAND_ID (0x7)
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DAILY_REPEATING_GET_COMMAND_ID (0x8)
+
 // Commands for cluster: UnifyHumidityControl
 #define DOTDOT_UNIFY_HUMIDITY_CONTROL_MODE_SET_COMMAND_ID (0x1)
 #define DOTDOT_UNIFY_HUMIDITY_CONTROL_SETPOINT_SET_COMMAND_ID (0x2)
diff --git a/components/uic_dotdot/zap-generated/include/dotdot_cluster_id_definitions.h b/components/uic_dotdot/zap-generated/include/dotdot_cluster_id_definitions.h
index 7432fce84e..b32935c29f 100644
--- a/components/uic_dotdot/zap-generated/include/dotdot_cluster_id_definitions.h
+++ b/components/uic_dotdot/zap-generated/include/dotdot_cluster_id_definitions.h
@@ -266,6 +266,10 @@
 #define DOTDOT_UNIFY_THERMOSTAT_CLUSTER_ID ((dotdot_cluster_id_t)0xFD15)
 
 
+// Definitions for cluster: UnifyScheduleEntryLock
+#define DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_CLUSTER_ID ((dotdot_cluster_id_t)0xFD21)
+
+
 // Definitions for cluster: UnifyHumidityControl
 #define DOTDOT_UNIFY_HUMIDITY_CONTROL_CLUSTER_ID ((dotdot_cluster_id_t)0xFDA0)
 
diff --git a/components/uic_dotdot/zap-generated/readme_ucl_mqtt_reference.md b/components/uic_dotdot/zap-generated/readme_ucl_mqtt_reference.md
index 82dfa2097d..4842178313 100644
--- a/components/uic_dotdot/zap-generated/readme_ucl_mqtt_reference.md
+++ b/components/uic_dotdot/zap-generated/readme_ucl_mqtt_reference.md
@@ -53568,6 +53568,1307 @@ mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyThermostat/Commands/ForceReadAttr
 <br><br><br>
 
 
+<!-- -->
+<!-- -->
+<!-- NEW Page Cluster Support -->
+<!-- -->
+<!-- -->
+\page unify_schedule_entry_lock UnifyScheduleEntryLock Cluster
+The following commands and attributes are accepted as JSON payloads for the
+UnifyScheduleEntryLock cluster.
+
+<br><br>
+
+<!-- -->
+<!--  START OF UnifyScheduleEntryLock Attributes Section -->
+<!-- -->
+\section unify_schedule_entry_lock_attrs UnifyScheduleEntryLock Attributes
+The following attribute topics are used to retrieve the UnifyScheduleEntryLock cluster state.
+
+<br>
+
+\subsection unify_schedule_entry_lock_attr_slots_week_day UnifyScheduleEntryLock/SlotsWeekDay Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Attributes/SlotsWeekDay/Reported
+[PREFIX]/UnifyScheduleEntryLock/Attributes/SlotsWeekDay/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster SlotsWeekDay Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SlotsWeekDay attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UnifyScheduleEntryLock/Attributes/SlotsWeekDay/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/SlotsWeekDay/Desired { "value": <DESIRED_SLOTS_WEEK_DAY>}
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/SlotsWeekDay/Reported { "value": <REPORTED_SLOTS_WEEK_DAY>}
+
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_attr_slots_year_day UnifyScheduleEntryLock/SlotsYearDay Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Attributes/SlotsYearDay/Reported
+[PREFIX]/UnifyScheduleEntryLock/Attributes/SlotsYearDay/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster SlotsYearDay Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SlotsYearDay attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UnifyScheduleEntryLock/Attributes/SlotsYearDay/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/SlotsYearDay/Desired { "value": <DESIRED_SLOTS_YEAR_DAY>}
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/SlotsYearDay/Reported { "value": <REPORTED_SLOTS_YEAR_DAY>}
+
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_attr_signtzo UnifyScheduleEntryLock/SignTZO Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Attributes/SignTZO/Reported
+[PREFIX]/UnifyScheduleEntryLock/Attributes/SignTZO/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster SignTZO Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SignTZO attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UnifyScheduleEntryLock/Attributes/SignTZO/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/SignTZO/Desired { "value": <DESIRED_SIGNTZO>}
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/SignTZO/Reported { "value": <REPORTED_SIGNTZO>}
+
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_attr_hourtzo UnifyScheduleEntryLock/HourTZO Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Attributes/HourTZO/Reported
+[PREFIX]/UnifyScheduleEntryLock/Attributes/HourTZO/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster HourTZO Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for HourTZO attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UnifyScheduleEntryLock/Attributes/HourTZO/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/HourTZO/Desired { "value": <DESIRED_HOURTZO>}
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/HourTZO/Reported { "value": <REPORTED_HOURTZO>}
+
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_attr_minutetzo UnifyScheduleEntryLock/MinuteTZO Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Attributes/MinuteTZO/Reported
+[PREFIX]/UnifyScheduleEntryLock/Attributes/MinuteTZO/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster MinuteTZO Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for MinuteTZO attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UnifyScheduleEntryLock/Attributes/MinuteTZO/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/MinuteTZO/Desired { "value": <DESIRED_MINUTETZO>}
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/MinuteTZO/Reported { "value": <REPORTED_MINUTETZO>}
+
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_attr_dst_offset_sign UnifyScheduleEntryLock/DSTOffsetSign Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Attributes/DSTOffsetSign/Reported
+[PREFIX]/UnifyScheduleEntryLock/Attributes/DSTOffsetSign/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster DSTOffsetSign Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for DSTOffsetSign attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UnifyScheduleEntryLock/Attributes/DSTOffsetSign/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/DSTOffsetSign/Desired { "value": <DESIRED_DST_OFFSET_SIGN>}
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/DSTOffsetSign/Reported { "value": <REPORTED_DST_OFFSET_SIGN>}
+
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_attr_dst_offset_minute UnifyScheduleEntryLock/DSTOffsetMinute Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Attributes/DSTOffsetMinute/Reported
+[PREFIX]/UnifyScheduleEntryLock/Attributes/DSTOffsetMinute/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster DSTOffsetMinute Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for DSTOffsetMinute attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UnifyScheduleEntryLock/Attributes/DSTOffsetMinute/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/DSTOffsetMinute/Desired { "value": <DESIRED_DST_OFFSET_MINUTE>}
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/DSTOffsetMinute/Reported { "value": <REPORTED_DST_OFFSET_MINUTE>}
+
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_attr_number_of_slots_daily_repeating UnifyScheduleEntryLock/NumberOfSlotsDailyRepeating Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Attributes/NumberOfSlotsDailyRepeating/Reported
+[PREFIX]/UnifyScheduleEntryLock/Attributes/NumberOfSlotsDailyRepeating/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster NumberOfSlotsDailyRepeating Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for NumberOfSlotsDailyRepeating attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UnifyScheduleEntryLock/Attributes/NumberOfSlotsDailyRepeating/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/NumberOfSlotsDailyRepeating/Desired { "value": <DESIRED_NUMBER_OF_SLOTS_DAILY_REPEATING>}
+ucl/by-unid/<UNID>/ep0/UnifyScheduleEntryLock/Attributes/NumberOfSlotsDailyRepeating/Reported { "value": <REPORTED_NUMBER_OF_SLOTS_DAILY_REPEATING>}
+
+```
+
+<br><br>
+
+
+\subsection unify_schedule_entry_lock_attr_cluster_revision UnifyScheduleEntryLock/ClusterRevision Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Attributes/ClusterRevision/Reported
+[PREFIX]/UnifyScheduleEntryLock/Attributes/ClusterRevision/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster ClusterRevision Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for ClusterRevision attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Attributes/ClusterRevision/+'
+# Example output
+ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Attributes/ClusterRevision/Desired { "value": <DESIRED_CLUSTER_REVISION> }
+ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Attributes/ClusterRevision/Reported { "value": <REPORTED_CLUSTER_REVISION> }
+```
+
+<!-- -->
+<!--  END OF UnifyScheduleEntryLock Attributes Section -->
+<!-- -->
+
+<br><br>
+
+<!-- -->
+<!-- START OF UnifyScheduleEntryLock Supported Commands Section -->
+<!-- -->
+\section unify_schedule_entry_lock_recv_cmd_support UnifyScheduleEntryLock Command Support
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/SupportedCommands
+[PREFIX]/UnifyScheduleEntryLock/SupportedGeneratedCommands
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Command Support Properties",
+  "type": "object",
+  "properties": {
+      "value": {
+          "type": "array",
+          "items" : {
+            "type": "string",
+            "enum": [
+              "EnableSet",
+              "WeekDayReport",
+              "EnableAllSet",
+              "YearDayReport",
+              "WeekDaySet",
+              "DailyRepeatingReport",
+              "WeekDayGet",
+              "YearDaySet",
+              "YearDayGet",
+              "DailyRepeatingSet",
+              "DailyRepeatingGet",
+              "WriteAttributes",
+              "ForceReadAttributes"
+            ]
+          }
+        }
+      }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To see supported commands for UnifyScheduleEntryLock cluster under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/SupportedCommands'
+# Example output
+ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/SupportedCommands { "value": ["EnableSet","EnableAllSet","WeekDaySet","WeekDayGet","YearDaySet","YearDayGet","DailyRepeatingSet","DailyRepeatingGet","WriteAttributes", "ForceReadAttributes"] }
+```
+
+To see supported generated commands for UnifyScheduleEntryLock cluster under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/SupportedGeneratedCommands'
+# Example output
+ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/SupportedGeneratedCommands { "value": ["WeekDayReport","YearDayReport","DailyRepeatingReport",] }
+```
+
+<!-- -->
+<!-- END OF UnifyScheduleEntryLock Supported Commands Section -->
+<!-- -->
+
+<br><br>
+
+<!-- -->
+<!-- START OF UnifyScheduleEntryLock Commands Section -->
+<!-- -->
+\section unify_schedule_entry_lock_cmds UnifyScheduleEntryLock Commands
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_enable_set_cmd UnifyScheduleEntryLock/EnableSet Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/EnableSet
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/EnableSet
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster EnableSet Command Properties",
+  "type": "object",
+  "properties": {
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "Enabled": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserIdentifier",
+    "Enabled"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/EnableSet command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/EnableSet' -m  '{ "UserIdentifier": <USER_IDENTIFIER_VALUE>,"Enabled": <ENABLED_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/EnableSet generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/EnableSet'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_week_day_report_cmd UnifyScheduleEntryLock/WeekDayReport Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/WeekDayReport
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/WeekDayReport
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster WeekDayReport Command Properties",
+  "type": "object",
+  "properties": {
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "ScheduleSlotID": {
+      "type": "integer"
+    },
+    "DayOfWeek": {
+      "type": "integer"
+    },
+    "StartHour": {
+      "type": "integer"
+    },
+    "StartMinute": {
+      "type": "integer"
+    },
+    "StopHour": {
+      "type": "integer"
+    },
+    "StopMinute": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserIdentifier",
+    "ScheduleSlotID",
+    "DayOfWeek",
+    "StartHour",
+    "StartMinute",
+    "StopHour",
+    "StopMinute"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/WeekDayReport command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/WeekDayReport' -m  '{ "UserIdentifier": <USER_IDENTIFIER_VALUE>,"ScheduleSlotID": <SCHEDULE_SLOTID_VALUE>,"DayOfWeek": <DAY_OF_WEEK_VALUE>,"StartHour": <START_HOUR_VALUE>,"StartMinute": <START_MINUTE_VALUE>,"StopHour": <STOP_HOUR_VALUE>,"StopMinute": <STOP_MINUTE_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/WeekDayReport generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/WeekDayReport'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_enable_all_set_cmd UnifyScheduleEntryLock/EnableAllSet Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/EnableAllSet
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/EnableAllSet
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster EnableAllSet Command Properties",
+  "type": "object",
+  "properties": {
+    "Enabled": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "Enabled"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/EnableAllSet command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/EnableAllSet' -m  '{ "Enabled": <ENABLED_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/EnableAllSet generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/EnableAllSet'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_year_day_report_cmd UnifyScheduleEntryLock/YearDayReport Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/YearDayReport
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/YearDayReport
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster YearDayReport Command Properties",
+  "type": "object",
+  "properties": {
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "ScheduleSlotID": {
+      "type": "integer"
+    },
+    "StartYear": {
+      "type": "integer"
+    },
+    "StartMonth": {
+      "type": "integer"
+    },
+    "StartDay": {
+      "type": "integer"
+    },
+    "StartHour": {
+      "type": "integer"
+    },
+    "StartMinute": {
+      "type": "integer"
+    },
+    "StopYear": {
+      "type": "integer"
+    },
+    "StopMonth": {
+      "type": "integer"
+    },
+    "StopDay": {
+      "type": "integer"
+    },
+    "StopHour": {
+      "type": "integer"
+    },
+    "StopMinute": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserIdentifier",
+    "ScheduleSlotID",
+    "StartYear",
+    "StartMonth",
+    "StartDay",
+    "StartHour",
+    "StartMinute",
+    "StopYear",
+    "StopMonth",
+    "StopDay",
+    "StopHour",
+    "StopMinute"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/YearDayReport command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/YearDayReport' -m  '{ "UserIdentifier": <USER_IDENTIFIER_VALUE>,"ScheduleSlotID": <SCHEDULE_SLOTID_VALUE>,"StartYear": <START_YEAR_VALUE>,"StartMonth": <START_MONTH_VALUE>,"StartDay": <START_DAY_VALUE>,"StartHour": <START_HOUR_VALUE>,"StartMinute": <START_MINUTE_VALUE>,"StopYear": <STOP_YEAR_VALUE>,"StopMonth": <STOP_MONTH_VALUE>,"StopDay": <STOP_DAY_VALUE>,"StopHour": <STOP_HOUR_VALUE>,"StopMinute": <STOP_MINUTE_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/YearDayReport generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/YearDayReport'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_week_day_set_cmd UnifyScheduleEntryLock/WeekDaySet Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/WeekDaySet
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/WeekDaySet
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster WeekDaySet Command Properties",
+  "type": "object",
+  "properties": {
+    "SetAction": {
+      "type": "integer"
+    },
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "ScheduleSlotID": {
+      "type": "integer"
+    },
+    "DayOfWeek": {
+      "type": "integer"
+    },
+    "StartHour": {
+      "type": "integer"
+    },
+    "StartMinute": {
+      "type": "integer"
+    },
+    "StopHour": {
+      "type": "integer"
+    },
+    "StopMinute": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "SetAction",
+    "UserIdentifier",
+    "ScheduleSlotID",
+    "DayOfWeek",
+    "StartHour",
+    "StartMinute",
+    "StopHour",
+    "StopMinute"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/WeekDaySet command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/WeekDaySet' -m  '{ "SetAction": <SET_ACTION_VALUE>,"UserIdentifier": <USER_IDENTIFIER_VALUE>,"ScheduleSlotID": <SCHEDULE_SLOTID_VALUE>,"DayOfWeek": <DAY_OF_WEEK_VALUE>,"StartHour": <START_HOUR_VALUE>,"StartMinute": <START_MINUTE_VALUE>,"StopHour": <STOP_HOUR_VALUE>,"StopMinute": <STOP_MINUTE_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/WeekDaySet generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/WeekDaySet'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_daily_repeating_report_cmd UnifyScheduleEntryLock/DailyRepeatingReport Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/DailyRepeatingReport
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingReport
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster DailyRepeatingReport Command Properties",
+  "type": "object",
+  "properties": {
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "ScheduleSlotID": {
+      "type": "integer"
+    },
+    "WeekDayBitmask": {
+      "type": "integer"
+    },
+    "StartHour": {
+      "type": "integer"
+    },
+    "StartMinute": {
+      "type": "integer"
+    },
+    "DurationHour": {
+      "type": "integer"
+    },
+    "DurationMinute": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserIdentifier",
+    "ScheduleSlotID",
+    "WeekDayBitmask",
+    "StartHour",
+    "StartMinute",
+    "DurationHour",
+    "DurationMinute"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/DailyRepeatingReport command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/DailyRepeatingReport' -m  '{ "UserIdentifier": <USER_IDENTIFIER_VALUE>,"ScheduleSlotID": <SCHEDULE_SLOTID_VALUE>,"WeekDayBitmask": <WEEK_DAY_BITMASK_VALUE>,"StartHour": <START_HOUR_VALUE>,"StartMinute": <START_MINUTE_VALUE>,"DurationHour": <DURATION_HOUR_VALUE>,"DurationMinute": <DURATION_MINUTE_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/DailyRepeatingReport generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingReport'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_week_day_get_cmd UnifyScheduleEntryLock/WeekDayGet Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/WeekDayGet
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/WeekDayGet
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster WeekDayGet Command Properties",
+  "type": "object",
+  "properties": {
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "ScheduleSlotID": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserIdentifier",
+    "ScheduleSlotID"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/WeekDayGet command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/WeekDayGet' -m  '{ "UserIdentifier": <USER_IDENTIFIER_VALUE>,"ScheduleSlotID": <SCHEDULE_SLOTID_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/WeekDayGet generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/WeekDayGet'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_year_day_set_cmd UnifyScheduleEntryLock/YearDaySet Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/YearDaySet
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/YearDaySet
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster YearDaySet Command Properties",
+  "type": "object",
+  "properties": {
+    "SetAction": {
+      "type": "integer"
+    },
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "ScheduleSlotID": {
+      "type": "integer"
+    },
+    "StartYear": {
+      "type": "integer"
+    },
+    "StartDay": {
+      "type": "integer"
+    },
+    "StartHour": {
+      "type": "integer"
+    },
+    "StartMonth": {
+      "type": "integer"
+    },
+    "StartMinute": {
+      "type": "integer"
+    },
+    "StopYear": {
+      "type": "integer"
+    },
+    "StopMonth": {
+      "type": "integer"
+    },
+    "StopDay": {
+      "type": "integer"
+    },
+    "StopHour": {
+      "type": "integer"
+    },
+    "StopMinute": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "SetAction",
+    "UserIdentifier",
+    "ScheduleSlotID",
+    "StartYear",
+    "StartDay",
+    "StartHour",
+    "StartMonth",
+    "StartMinute",
+    "StopYear",
+    "StopMonth",
+    "StopDay",
+    "StopHour",
+    "StopMinute"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/YearDaySet command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/YearDaySet' -m  '{ "SetAction": <SET_ACTION_VALUE>,"UserIdentifier": <USER_IDENTIFIER_VALUE>,"ScheduleSlotID": <SCHEDULE_SLOTID_VALUE>,"StartYear": <START_YEAR_VALUE>,"StartDay": <START_DAY_VALUE>,"StartHour": <START_HOUR_VALUE>,"StartMonth": <START_MONTH_VALUE>,"StartMinute": <START_MINUTE_VALUE>,"StopYear": <STOP_YEAR_VALUE>,"StopMonth": <STOP_MONTH_VALUE>,"StopDay": <STOP_DAY_VALUE>,"StopHour": <STOP_HOUR_VALUE>,"StopMinute": <STOP_MINUTE_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/YearDaySet generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/YearDaySet'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_year_day_get_cmd UnifyScheduleEntryLock/YearDayGet Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/YearDayGet
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/YearDayGet
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster YearDayGet Command Properties",
+  "type": "object",
+  "properties": {
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "ScheduleSlotID": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserIdentifier",
+    "ScheduleSlotID"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/YearDayGet command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/YearDayGet' -m  '{ "UserIdentifier": <USER_IDENTIFIER_VALUE>,"ScheduleSlotID": <SCHEDULE_SLOTID_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/YearDayGet generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/YearDayGet'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_daily_repeating_set_cmd UnifyScheduleEntryLock/DailyRepeatingSet Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/DailyRepeatingSet
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingSet
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster DailyRepeatingSet Command Properties",
+  "type": "object",
+  "properties": {
+    "SetAction": {
+      "type": "integer"
+    },
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "ScheduleSlotID": {
+      "type": "integer"
+    },
+    "WeekDayBitmask": {
+      "type": "integer"
+    },
+    "StartHour": {
+      "type": "integer"
+    },
+    "StartMinute": {
+      "type": "integer"
+    },
+    "DurationHour": {
+      "type": "integer"
+    },
+    "DurationMinute": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "SetAction",
+    "UserIdentifier",
+    "ScheduleSlotID",
+    "WeekDayBitmask",
+    "StartHour",
+    "StartMinute",
+    "DurationHour",
+    "DurationMinute"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/DailyRepeatingSet command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/DailyRepeatingSet' -m  '{ "SetAction": <SET_ACTION_VALUE>,"UserIdentifier": <USER_IDENTIFIER_VALUE>,"ScheduleSlotID": <SCHEDULE_SLOTID_VALUE>,"WeekDayBitmask": <WEEK_DAY_BITMASK_VALUE>,"StartHour": <START_HOUR_VALUE>,"StartMinute": <START_MINUTE_VALUE>,"DurationHour": <DURATION_HOUR_VALUE>,"DurationMinute": <DURATION_MINUTE_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/DailyRepeatingSet generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingSet'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_daily_repeating_get_cmd UnifyScheduleEntryLock/DailyRepeatingGet Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/DailyRepeatingGet
+[PREFIX]/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingGet
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster DailyRepeatingGet Command Properties",
+  "type": "object",
+  "properties": {
+    "UserIdentifier": {
+      "type": "integer"
+    },
+    "ScheduleSlotID": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserIdentifier",
+    "ScheduleSlotID"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UnifyScheduleEntryLock/DailyRepeatingGet command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/DailyRepeatingGet' -m  '{ "UserIdentifier": <USER_IDENTIFIER_VALUE>,"ScheduleSlotID": <SCHEDULE_SLOTID_VALUE> }'
+```
+
+To receive a UnifyScheduleEntryLock/DailyRepeatingGet generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingGet'
+```
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_write_attr_cmd UnifyScheduleEntryLock/WriteAttributes Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/WriteAttributes
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster WriteAttributes Command Properties",
+  "type": "object",
+  "properties": {
+    "SlotsWeekDay": {
+      "type": "integer"
+    },
+    "SlotsYearDay": {
+      "type": "integer"
+    },
+    "SignTZO": {
+      "type": "integer"
+    },
+    "HourTZO": {
+      "type": "integer"
+    },
+    "MinuteTZO": {
+      "type": "integer"
+    },
+    "DSTOffsetSign": {
+      "type": "integer"
+    },
+    "DSTOffsetMinute": {
+      "type": "integer"
+    },
+    "NumberOfSlotsDailyRepeating": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To update all UnifyScheduleEntryLock attributes under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/WriteAttributes' -m  '{ "SlotsWeekDay": <SLOTS_WEEK_DAY_VALUE> ,"SlotsYearDay": <SLOTS_YEAR_DAY_VALUE> ,"SignTZO": <SIGNTZO_VALUE> ,"HourTZO": <HOURTZO_VALUE> ,"MinuteTZO": <MINUTETZO_VALUE> ,"DSTOffsetSign": <DST_OFFSET_SIGN_VALUE> ,"DSTOffsetMinute": <DST_OFFSET_MINUTE_VALUE> ,"NumberOfSlotsDailyRepeating": <NUMBER_OF_SLOTS_DAILY_REPEATING_VALUE>  }'
+```
+
+> NOTE: Specify only the list of attributes to write in this command.
+> Unspecified attributes will not be updated.
+
+<br><br>
+
+\subsection unify_schedule_entry_lock_force_read_attr_cmd UnifyScheduleEntryLock/ForceReadAttributes Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UnifyScheduleEntryLock/Commands/ForceReadAttributes
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UnifyScheduleEntryLock Cluster ForceReadAttributes Command Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "array"
+      "items": {
+        "type": "string",
+        "enum": [
+          "SlotsWeekDay",
+          "SlotsYearDay",
+          "SignTZO",
+          "HourTZO",
+          "MinuteTZO",
+          "DSTOffsetSign",
+          "DSTOffsetMinute",
+          "NumberOfSlotsDailyRepeating"
+        ]
+      }
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To force read all UnifyScheduleEntryLock attributes under the by-unid topic space (by sending an empty array):
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/ForceReadAttributes' -m  '{ "value": [] }'
+```
+
+To force read one of the UnifyScheduleEntryLock attributes under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyScheduleEntryLock/Commands/ForceReadAttributes' -m  '{ "value": ["SlotsWeekDay"] }'
+```
+
+<!-- -->
+<!-- END OF UnifyScheduleEntryLock Commands Section -->
+<!-- -->
+
+<br><br><br>
+
+
 <!-- -->
 <!-- -->
 <!-- NEW Page Cluster Support -->
diff --git a/components/uic_dotdot/zap-generated/src/dotdot_attribute_id_definitions.c b/components/uic_dotdot/zap-generated/src/dotdot_attribute_id_definitions.c
index 98ebe6435d..05e39a871d 100644
--- a/components/uic_dotdot/zap-generated/src/dotdot_attribute_id_definitions.c
+++ b/components/uic_dotdot/zap-generated/src/dotdot_attribute_id_definitions.c
@@ -2068,6 +2068,31 @@ const char *uic_dotdot_get_attribute_name(dotdot_cluster_id_t cluster_id,
           return "Unknown";
       }
       // clang-format off
+    case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_CLUSTER_ID:
+      // clang-format on
+      switch (attribute_id) {
+        // clang-format off
+        case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_WEEK_DAY_ATTRIBUTE_ID:
+          return "SlotsWeekDay";
+        case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_YEAR_DAY_ATTRIBUTE_ID:
+          return "SlotsYearDay";
+        case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SIGNTZO_ATTRIBUTE_ID:
+          return "SignTZO";
+        case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_HOURTZO_ATTRIBUTE_ID:
+          return "HourTZO";
+        case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_MINUTETZO_ATTRIBUTE_ID:
+          return "MinuteTZO";
+        case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_SIGN_ATTRIBUTE_ID:
+          return "DSTOffsetSign";
+        case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_MINUTE_ATTRIBUTE_ID:
+          return "DSTOffsetMinute";
+        case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_NUMBER_OF_SLOTS_DAILY_REPEATING_ATTRIBUTE_ID:
+          return "NumberOfSlotsDailyRepeating";
+          // clang-format on
+        default:
+          return "Unknown";
+      }
+      // clang-format off
     case DOTDOT_UNIFY_HUMIDITY_CONTROL_CLUSTER_ID:
       // clang-format on
       switch (attribute_id) {
@@ -4529,6 +4554,32 @@ dotdot_attribute_id_t
         return DOTDOT_UNIFY_THERMOSTAT_OPERATING_STATE_ATTRIBUTE_ID;
       }
     break;
+    case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_CLUSTER_ID:
+      if (strcmp ("SlotsWeekDay", attribute_name) == 0) {
+        return DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_WEEK_DAY_ATTRIBUTE_ID;
+      }
+      if (strcmp ("SlotsYearDay", attribute_name) == 0) {
+        return DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_YEAR_DAY_ATTRIBUTE_ID;
+      }
+      if (strcmp ("SignTZO", attribute_name) == 0) {
+        return DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SIGNTZO_ATTRIBUTE_ID;
+      }
+      if (strcmp ("HourTZO", attribute_name) == 0) {
+        return DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_HOURTZO_ATTRIBUTE_ID;
+      }
+      if (strcmp ("MinuteTZO", attribute_name) == 0) {
+        return DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_MINUTETZO_ATTRIBUTE_ID;
+      }
+      if (strcmp ("DSTOffsetSign", attribute_name) == 0) {
+        return DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_SIGN_ATTRIBUTE_ID;
+      }
+      if (strcmp ("DSTOffsetMinute", attribute_name) == 0) {
+        return DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_MINUTE_ATTRIBUTE_ID;
+      }
+      if (strcmp ("NumberOfSlotsDailyRepeating", attribute_name) == 0) {
+        return DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_NUMBER_OF_SLOTS_DAILY_REPEATING_ATTRIBUTE_ID;
+      }
+    break;
     case DOTDOT_UNIFY_HUMIDITY_CONTROL_CLUSTER_ID:
       if (strcmp ("ReportingMode", attribute_name) == 0) {
         return DOTDOT_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE_ATTRIBUTE_ID;
@@ -6648,6 +6699,31 @@ dotdot_attribute_json_type_t
           return JSON_TYPE_UNKNOWN;
       }
       // clang-format off
+    case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_CLUSTER_ID:
+      // clang-format on
+      switch (attribute_id) {
+        // clang-format off
+        case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_WEEK_DAY_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SLOTS_YEAR_DAY_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_SIGNTZO_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_HOURTZO_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_MINUTETZO_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_SIGN_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_DST_OFFSET_MINUTE_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_NUMBER_OF_SLOTS_DAILY_REPEATING_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                  // clang-format on
+        default:
+          return JSON_TYPE_UNKNOWN;
+      }
+      // clang-format off
     case DOTDOT_UNIFY_HUMIDITY_CONTROL_CLUSTER_ID:
       // clang-format on
       switch (attribute_id) {
@@ -7046,6 +7122,9 @@ bool uic_dotdot_attribute_is_enum(dotdot_cluster_id_t cluster_id,
     }
   }
 
+  if (64801 == cluster_id) {
+  }
+
   if (64928 == cluster_id) {
     if (1 == attribute_id) {
       return true;
diff --git a/components/uic_dotdot/zap-generated/src/dotdot_cluster_id_definitions.c b/components/uic_dotdot/zap-generated/src/dotdot_cluster_id_definitions.c
index 4c251d9e02..d97e241b48 100644
--- a/components/uic_dotdot/zap-generated/src/dotdot_cluster_id_definitions.c
+++ b/components/uic_dotdot/zap-generated/src/dotdot_cluster_id_definitions.c
@@ -134,6 +134,8 @@ const char* uic_dotdot_get_cluster_name(dotdot_cluster_id_t cluster_id) {
     return "UnifyFanControl";
   case DOTDOT_UNIFY_THERMOSTAT_CLUSTER_ID:
     return "UnifyThermostat";
+  case DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_CLUSTER_ID:
+    return "UnifyScheduleEntryLock";
   case DOTDOT_UNIFY_HUMIDITY_CONTROL_CLUSTER_ID:
     return "UnifyHumidityControl";
   default:
@@ -316,6 +318,9 @@ dotdot_cluster_id_t uic_dotdot_get_cluster_id(const char* cluster_name) {
  if (strcmp ("UnifyThermostat", cluster_name) == 0) {
    return DOTDOT_UNIFY_THERMOSTAT_CLUSTER_ID;
  }
+ if (strcmp ("UnifyScheduleEntryLock", cluster_name) == 0) {
+   return DOTDOT_UNIFY_SCHEDULE_ENTRY_LOCK_CLUSTER_ID;
+ }
  if (strcmp ("UnifyHumidityControl", cluster_name) == 0) {
    return DOTDOT_UNIFY_HUMIDITY_CONTROL_CLUSTER_ID;
  }
diff --git a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt.h b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt.h
index f0fdd07d2b..2c4220eecd 100644
--- a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt.h
+++ b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt.h
@@ -40140,7 +40140,16 @@ void uic_mqtt_dotdot_unify_thermostat_publish_empty_supported_commands(
   const dotdot_unid_t unid
   ,dotdot_endpoint_id_t endpoint);
 // Callback types used by the unify_schedule_entry_lock cluster
-typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t)(
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t)(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t call_type,
+    uint8_t user_identifier,
+
+    uint8_t enabled
+
+);
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
@@ -40159,12 +40168,17 @@ typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_l
     uint8_t stop_minute
 
 );
-typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t)(
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t set_action,
+    uint8_t enabled
 
+);
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t)(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t user_identifier,
 
     uint8_t schedule_slotid,
@@ -40190,7 +40204,96 @@ typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_l
     uint8_t stop_minute
 
 );
-typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t)(
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t)(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t call_type,
+    uint8_t set_action,
+
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid,
+
+    uint8_t day_of_week,
+
+    uint8_t start_hour,
+
+    uint8_t start_minute,
+
+    uint8_t stop_hour,
+
+    uint8_t stop_minute
+
+);
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t)(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t call_type,
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid,
+
+    uint8_t week_day_bitmask,
+
+    uint8_t start_hour,
+
+    uint8_t start_minute,
+
+    uint8_t duration_hour,
+
+    uint8_t duration_minute
+
+);
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t)(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t call_type,
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid
+
+);
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t)(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t call_type,
+    uint8_t set_action,
+
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid,
+
+    uint8_t start_year,
+
+    uint8_t start_day,
+
+    uint8_t start_hour,
+
+    uint8_t start_month,
+
+    uint8_t start_minute,
+
+    uint8_t stop_year,
+
+    uint8_t stop_month,
+
+    uint8_t stop_day,
+
+    uint8_t stop_hour,
+
+    uint8_t stop_minute
+
+);
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t)(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t call_type,
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid
+
+);
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
@@ -40210,6 +40313,15 @@ typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_l
 
     uint8_t duration_minute
 
+);
+typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t)(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t call_type,
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid
+
 );
 
 typedef struct {
@@ -40251,7 +40363,16 @@ typedef sl_status_t (*uic_mqtt_dotdot_unify_schedule_entry_lock_force_read_attri
 
 
 /**
- * @brief Command fields for UnifyScheduleEntryLock/ScheduleEntryLockWeekDayReport
+ * @brief Command fields for UnifyScheduleEntryLock/EnableSet
+ */
+typedef struct {
+  uint8_t user_identifier;
+
+  uint8_t enabled;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t;
+
+/**
+ * @brief Command fields for UnifyScheduleEntryLock/WeekDayReport
  */
 typedef struct {
   uint8_t user_identifier;
@@ -40267,14 +40388,19 @@ typedef struct {
   uint8_t stop_hour;
 
   uint8_t stop_minute;
-} uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t;
 
 /**
- * @brief Command fields for UnifyScheduleEntryLock/ScheduleEntryLockYearDayReport
+ * @brief Command fields for UnifyScheduleEntryLock/EnableAllSet
  */
 typedef struct {
-  uint8_t set_action;
+  uint8_t enabled;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t;
 
+/**
+ * @brief Command fields for UnifyScheduleEntryLock/YearDayReport
+ */
+typedef struct {
   uint8_t user_identifier;
 
   uint8_t schedule_slotid;
@@ -40298,10 +40424,10 @@ typedef struct {
   uint8_t stop_hour;
 
   uint8_t stop_minute;
-} uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t;
 
 /**
- * @brief Command fields for UnifyScheduleEntryLock/ScheduleEntryLockDailyRepeatingReport
+ * @brief Command fields for UnifyScheduleEntryLock/WeekDaySet
  */
 typedef struct {
   uint8_t set_action;
@@ -40310,6 +40436,25 @@ typedef struct {
 
   uint8_t schedule_slotid;
 
+  uint8_t day_of_week;
+
+  uint8_t start_hour;
+
+  uint8_t start_minute;
+
+  uint8_t stop_hour;
+
+  uint8_t stop_minute;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t;
+
+/**
+ * @brief Command fields for UnifyScheduleEntryLock/DailyRepeatingReport
+ */
+typedef struct {
+  uint8_t user_identifier;
+
+  uint8_t schedule_slotid;
+
   uint8_t week_day_bitmask;
 
   uint8_t start_hour;
@@ -40319,129 +40464,528 @@ typedef struct {
   uint8_t duration_hour;
 
   uint8_t duration_minute;
-} uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t;
+
+/**
+ * @brief Command fields for UnifyScheduleEntryLock/WeekDayGet
+ */
+typedef struct {
+  uint8_t user_identifier;
 
+  uint8_t schedule_slotid;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t;
+
+/**
+ * @brief Command fields for UnifyScheduleEntryLock/YearDaySet
+ */
+typedef struct {
+  uint8_t set_action;
+
+  uint8_t user_identifier;
+
+  uint8_t schedule_slotid;
+
+  uint8_t start_year;
+
+  uint8_t start_day;
+
+  uint8_t start_hour;
+
+  uint8_t start_month;
+
+  uint8_t start_minute;
+
+  uint8_t stop_year;
+
+  uint8_t stop_month;
+
+  uint8_t stop_day;
 
+  uint8_t stop_hour;
+
+  uint8_t stop_minute;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t;
+
+/**
+ * @brief Command fields for UnifyScheduleEntryLock/YearDayGet
+ */
+typedef struct {
+  uint8_t user_identifier;
+
+  uint8_t schedule_slotid;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t;
+
+/**
+ * @brief Command fields for UnifyScheduleEntryLock/DailyRepeatingSet
+ */
+typedef struct {
+  uint8_t set_action;
+
+  uint8_t user_identifier;
+
+  uint8_t schedule_slotid;
+
+  uint8_t week_day_bitmask;
+
+  uint8_t start_hour;
+
+  uint8_t start_minute;
+
+  uint8_t duration_hour;
+
+  uint8_t duration_minute;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t;
+
+/**
+ * @brief Command fields for UnifyScheduleEntryLock/DailyRepeatingGet
+ */
+typedef struct {
+  uint8_t user_identifier;
+
+  uint8_t schedule_slotid;
+} uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t;
+
+
+/**
+ * @brief Setup callback to be called when a
+ * UnifyScheduleEntryLock/Commands/enable_set is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * UnifyScheduleEntryLock/Commands/enable_set is received.
+ *
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * UnifyScheduleEntryLock/Commands/enable_set is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_clear();
+
+/**
+ * @brief Setup callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/enable_set is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/enable_set is received.
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * +/UnifyScheduleEntryLock/GeneratedCommands/enable_set is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback_clear();
+/**
+ * @brief Setup callback to be called when a
+ * UnifyScheduleEntryLock/Commands/week_day_report is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * UnifyScheduleEntryLock/Commands/week_day_report is received.
+ *
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * UnifyScheduleEntryLock/Commands/week_day_report is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_clear();
+
+/**
+ * @brief Setup callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/week_day_report is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/week_day_report is received.
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * +/UnifyScheduleEntryLock/GeneratedCommands/week_day_report is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback_clear();
+/**
+ * @brief Setup callback to be called when a
+ * UnifyScheduleEntryLock/Commands/enable_all_set is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * UnifyScheduleEntryLock/Commands/enable_all_set is received.
+ *
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * UnifyScheduleEntryLock/Commands/enable_all_set is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_clear();
+
+/**
+ * @brief Setup callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/enable_all_set is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/enable_all_set is received.
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * +/UnifyScheduleEntryLock/GeneratedCommands/enable_all_set is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback_clear();
+/**
+ * @brief Setup callback to be called when a
+ * UnifyScheduleEntryLock/Commands/year_day_report is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * UnifyScheduleEntryLock/Commands/year_day_report is received.
+ *
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * UnifyScheduleEntryLock/Commands/year_day_report is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_clear();
+
+/**
+ * @brief Setup callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/year_day_report is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/year_day_report is received.
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * +/UnifyScheduleEntryLock/GeneratedCommands/year_day_report is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback_clear();
+/**
+ * @brief Setup callback to be called when a
+ * UnifyScheduleEntryLock/Commands/week_day_set is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * UnifyScheduleEntryLock/Commands/week_day_set is received.
+ *
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * UnifyScheduleEntryLock/Commands/week_day_set is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_clear();
+
+/**
+ * @brief Setup callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/week_day_set is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/week_day_set is received.
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * +/UnifyScheduleEntryLock/GeneratedCommands/week_day_set is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback_clear();
+/**
+ * @brief Setup callback to be called when a
+ * UnifyScheduleEntryLock/Commands/daily_repeating_report is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * UnifyScheduleEntryLock/Commands/daily_repeating_report is received.
+ *
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * UnifyScheduleEntryLock/Commands/daily_repeating_report is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_clear();
+
+/**
+ * @brief Setup callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/daily_repeating_report is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/daily_repeating_report is received.
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * +/UnifyScheduleEntryLock/GeneratedCommands/daily_repeating_report is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback_clear();
+/**
+ * @brief Setup callback to be called when a
+ * UnifyScheduleEntryLock/Commands/week_day_get is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * UnifyScheduleEntryLock/Commands/week_day_get is received.
+ *
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * UnifyScheduleEntryLock/Commands/week_day_get is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_clear();
+
+/**
+ * @brief Setup callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/week_day_get is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/week_day_get is received.
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * +/UnifyScheduleEntryLock/GeneratedCommands/week_day_get is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback_clear();
+/**
+ * @brief Setup callback to be called when a
+ * UnifyScheduleEntryLock/Commands/year_day_set is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * UnifyScheduleEntryLock/Commands/year_day_set is received.
+ *
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * UnifyScheduleEntryLock/Commands/year_day_set is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_clear();
+
+/**
+ * @brief Setup callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/year_day_set is received.
+ *
+ * Setting this callback will not overwrite the previous set callback
+ * @param callback      Function to be called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t callback);
+/**
+ * @brief Unsets callback to be called when a
+ * +/UnifyScheduleEntryLock/GeneratedCommands/year_day_set is received.
+ * @param callback      Function to be no longer called on command reception
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t callback);
+/**
+ * @brief Clears all callbacks registered for when
+ * +/UnifyScheduleEntryLock/GeneratedCommands/year_day_set is received.
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback_clear();
 /**
  * @brief Setup callback to be called when a
- * UnifyScheduleEntryLock/Commands/schedule_entry_lock_week_day_report is received.
+ * UnifyScheduleEntryLock/Commands/year_day_get is received.
  *
  * Setting this callback will not overwrite the previous set callback
  * @param callback      Function to be called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t callback);
 /**
  * @brief Unsets callback to be called when a
- * UnifyScheduleEntryLock/Commands/schedule_entry_lock_week_day_report is received.
+ * UnifyScheduleEntryLock/Commands/year_day_get is received.
  *
  * @param callback      Function to be no longer called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t callback);
 /**
  * @brief Clears all callbacks registered for when
- * UnifyScheduleEntryLock/Commands/schedule_entry_lock_week_day_report is received.
+ * UnifyScheduleEntryLock/Commands/year_day_get is received.
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_clear();
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_clear();
 
 /**
  * @brief Setup callback to be called when a
- * +/UnifyScheduleEntryLock/GeneratedCommands/schedule_entry_lock_week_day_report is received.
+ * +/UnifyScheduleEntryLock/GeneratedCommands/year_day_get is received.
  *
  * Setting this callback will not overwrite the previous set callback
  * @param callback      Function to be called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t callback);
 /**
  * @brief Unsets callback to be called when a
- * +/UnifyScheduleEntryLock/GeneratedCommands/schedule_entry_lock_week_day_report is received.
+ * +/UnifyScheduleEntryLock/GeneratedCommands/year_day_get is received.
  * @param callback      Function to be no longer called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t callback);
 /**
  * @brief Clears all callbacks registered for when
- * +/UnifyScheduleEntryLock/GeneratedCommands/schedule_entry_lock_week_day_report is received.
+ * +/UnifyScheduleEntryLock/GeneratedCommands/year_day_get is received.
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback_clear();
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback_clear();
 /**
  * @brief Setup callback to be called when a
- * UnifyScheduleEntryLock/Commands/schedule_entry_lock_year_day_report is received.
+ * UnifyScheduleEntryLock/Commands/daily_repeating_set is received.
  *
  * Setting this callback will not overwrite the previous set callback
  * @param callback      Function to be called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t callback);
 /**
  * @brief Unsets callback to be called when a
- * UnifyScheduleEntryLock/Commands/schedule_entry_lock_year_day_report is received.
+ * UnifyScheduleEntryLock/Commands/daily_repeating_set is received.
  *
  * @param callback      Function to be no longer called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t callback);
 /**
  * @brief Clears all callbacks registered for when
- * UnifyScheduleEntryLock/Commands/schedule_entry_lock_year_day_report is received.
+ * UnifyScheduleEntryLock/Commands/daily_repeating_set is received.
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_clear();
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_clear();
 
 /**
  * @brief Setup callback to be called when a
- * +/UnifyScheduleEntryLock/GeneratedCommands/schedule_entry_lock_year_day_report is received.
+ * +/UnifyScheduleEntryLock/GeneratedCommands/daily_repeating_set is received.
  *
  * Setting this callback will not overwrite the previous set callback
  * @param callback      Function to be called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t callback);
 /**
  * @brief Unsets callback to be called when a
- * +/UnifyScheduleEntryLock/GeneratedCommands/schedule_entry_lock_year_day_report is received.
+ * +/UnifyScheduleEntryLock/GeneratedCommands/daily_repeating_set is received.
  * @param callback      Function to be no longer called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t callback);
 /**
  * @brief Clears all callbacks registered for when
- * +/UnifyScheduleEntryLock/GeneratedCommands/schedule_entry_lock_year_day_report is received.
+ * +/UnifyScheduleEntryLock/GeneratedCommands/daily_repeating_set is received.
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback_clear();
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback_clear();
 /**
  * @brief Setup callback to be called when a
- * UnifyScheduleEntryLock/Commands/schedule_entry_lock_daily_repeating_report is received.
+ * UnifyScheduleEntryLock/Commands/daily_repeating_get is received.
  *
  * Setting this callback will not overwrite the previous set callback
  * @param callback      Function to be called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t callback);
 /**
  * @brief Unsets callback to be called when a
- * UnifyScheduleEntryLock/Commands/schedule_entry_lock_daily_repeating_report is received.
+ * UnifyScheduleEntryLock/Commands/daily_repeating_get is received.
  *
  * @param callback      Function to be no longer called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t callback);
 /**
  * @brief Clears all callbacks registered for when
- * UnifyScheduleEntryLock/Commands/schedule_entry_lock_daily_repeating_report is received.
+ * UnifyScheduleEntryLock/Commands/daily_repeating_get is received.
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_clear();
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_clear();
 
 /**
  * @brief Setup callback to be called when a
- * +/UnifyScheduleEntryLock/GeneratedCommands/schedule_entry_lock_daily_repeating_report is received.
+ * +/UnifyScheduleEntryLock/GeneratedCommands/daily_repeating_get is received.
  *
  * Setting this callback will not overwrite the previous set callback
  * @param callback      Function to be called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t callback);
 /**
  * @brief Unsets callback to be called when a
- * +/UnifyScheduleEntryLock/GeneratedCommands/schedule_entry_lock_daily_repeating_report is received.
+ * +/UnifyScheduleEntryLock/GeneratedCommands/daily_repeating_get is received.
  * @param callback      Function to be no longer called on command reception
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback);
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t callback);
 /**
  * @brief Clears all callbacks registered for when
- * +/UnifyScheduleEntryLock/GeneratedCommands/schedule_entry_lock_daily_repeating_report is received.
+ * +/UnifyScheduleEntryLock/GeneratedCommands/daily_repeating_get is received.
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback_clear();
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback_clear();
 
 /**
  * @brief Setup a callback for WriteAttribute to be called when a
diff --git a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_generated_commands.h b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_generated_commands.h
index 04e8e6b1a2..deea8690b7 100644
--- a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_generated_commands.h
+++ b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_generated_commands.h
@@ -4998,11 +4998,11 @@ void uic_mqtt_dotdot_unify_thermostat_publish_generated_write_attributes_command
 );
 
 /**
- * @brief Publishes an incoming/generated ScheduleEntryLockWeekDayReport command for
+ * @brief Publishes an incoming/generated EnableSet command for
  * the UnifyScheduleEntryLock cluster.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockWeekDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/EnableSet
  *
  * @param unid      The UNID of the node that sent us the command.
  * 
@@ -5012,18 +5012,18 @@ void uic_mqtt_dotdot_unify_thermostat_publish_generated_write_attributes_command
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_lock_week_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_enable_set_command(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
   
 );
 /**
- * @brief Publishes an incoming/generated ScheduleEntryLockYearDayReport command for
+ * @brief Publishes an incoming/generated WeekDayReport command for
  * the UnifyScheduleEntryLock cluster.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockYearDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/WeekDayReport
  *
  * @param unid      The UNID of the node that sent us the command.
  * 
@@ -5033,18 +5033,18 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_lock_year_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_week_day_report_command(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
   
 );
 /**
- * @brief Publishes an incoming/generated ScheduleEntryLockDailyRepeatingReport command for
+ * @brief Publishes an incoming/generated EnableAllSet command for
  * the UnifyScheduleEntryLock cluster.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockDailyRepeatingReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/EnableAllSet
  *
  * @param unid      The UNID of the node that sent us the command.
  * 
@@ -5054,10 +5054,178 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_lock_daily_repeating_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_enable_all_set_command(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
+  
+);
+/**
+ * @brief Publishes an incoming/generated YearDayReport command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/YearDayReport
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_year_day_report_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+  
+);
+/**
+ * @brief Publishes an incoming/generated WeekDaySet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/WeekDaySet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_week_day_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
+  
+);
+/**
+ * @brief Publishes an incoming/generated DailyRepeatingReport command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingReport
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_daily_repeating_report_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+  
+);
+/**
+ * @brief Publishes an incoming/generated WeekDayGet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/WeekDayGet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_week_day_get_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+  
+);
+/**
+ * @brief Publishes an incoming/generated YearDaySet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/YearDaySet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_year_day_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+  
+);
+/**
+ * @brief Publishes an incoming/generated YearDayGet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/YearDayGet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_year_day_get_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
+  
+);
+/**
+ * @brief Publishes an incoming/generated DailyRepeatingSet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingSet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_daily_repeating_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
+  
+);
+/**
+ * @brief Publishes an incoming/generated DailyRepeatingGet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingGet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_daily_repeating_get_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
   
 );
 
diff --git a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_group_commands.h b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_group_commands.h
index 7220d03d38..1695f8ab8a 100644
--- a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_group_commands.h
+++ b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_group_commands.h
@@ -3710,52 +3710,180 @@ void uic_mqtt_dotdot_by_group_unify_thermostat_write_attributes_callback_set(
 
 
 /**
- * @brief Callback signature for by-group UnifyScheduleEntryLock::ScheduleEntryLockWeekDayReport command.
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::EnableSet command.
  */
-typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t)(
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback_t)(
     const dotdot_group_id_t group_id,
-    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
 );
 
 /**
  * Setup handler to be called when a
- * ucl/by-group/+/UnifyScheduleEntryLock/schedule_entry_lock_week_day_report is received.
+ * ucl/by-group/+/UnifyScheduleEntryLock/enable_set is received.
  * Setting this callback will overwrite the previous set callback.
  *
  */
-void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback);
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback_t callback);
 
 /**
- * @brief Callback signature for by-group UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport command.
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::WeekDayReport command.
  */
-typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t)(
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback_t)(
     const dotdot_group_id_t group_id,
-    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
 );
 
 /**
  * Setup handler to be called when a
- * ucl/by-group/+/UnifyScheduleEntryLock/schedule_entry_lock_year_day_report is received.
+ * ucl/by-group/+/UnifyScheduleEntryLock/week_day_report is received.
  * Setting this callback will overwrite the previous set callback.
  *
  */
-void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback);
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback_t callback);
 
 /**
- * @brief Callback signature for by-group UnifyScheduleEntryLock::ScheduleEntryLockDailyRepeatingReport command.
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::EnableAllSet command.
  */
-typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t)(
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback_t)(
     const dotdot_group_id_t group_id,
-    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
 );
 
 /**
  * Setup handler to be called when a
- * ucl/by-group/+/UnifyScheduleEntryLock/schedule_entry_lock_daily_repeating_report is received.
+ * ucl/by-group/+/UnifyScheduleEntryLock/enable_all_set is received.
  * Setting this callback will overwrite the previous set callback.
  *
  */
-void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback);
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback_t callback);
+
+/**
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::YearDayReport command.
+ */
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback_t)(
+    const dotdot_group_id_t group_id,
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+);
+
+/**
+ * Setup handler to be called when a
+ * ucl/by-group/+/UnifyScheduleEntryLock/year_day_report is received.
+ * Setting this callback will overwrite the previous set callback.
+ *
+ */
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback_t callback);
+
+/**
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::WeekDaySet command.
+ */
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback_t)(
+    const dotdot_group_id_t group_id,
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
+);
+
+/**
+ * Setup handler to be called when a
+ * ucl/by-group/+/UnifyScheduleEntryLock/week_day_set is received.
+ * Setting this callback will overwrite the previous set callback.
+ *
+ */
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback_t callback);
+
+/**
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::DailyRepeatingReport command.
+ */
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback_t)(
+    const dotdot_group_id_t group_id,
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+);
+
+/**
+ * Setup handler to be called when a
+ * ucl/by-group/+/UnifyScheduleEntryLock/daily_repeating_report is received.
+ * Setting this callback will overwrite the previous set callback.
+ *
+ */
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback_t callback);
+
+/**
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::WeekDayGet command.
+ */
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback_t)(
+    const dotdot_group_id_t group_id,
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+);
+
+/**
+ * Setup handler to be called when a
+ * ucl/by-group/+/UnifyScheduleEntryLock/week_day_get is received.
+ * Setting this callback will overwrite the previous set callback.
+ *
+ */
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback_t callback);
+
+/**
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::YearDaySet command.
+ */
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback_t)(
+    const dotdot_group_id_t group_id,
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+);
+
+/**
+ * Setup handler to be called when a
+ * ucl/by-group/+/UnifyScheduleEntryLock/year_day_set is received.
+ * Setting this callback will overwrite the previous set callback.
+ *
+ */
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback_t callback);
+
+/**
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::YearDayGet command.
+ */
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback_t)(
+    const dotdot_group_id_t group_id,
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
+);
+
+/**
+ * Setup handler to be called when a
+ * ucl/by-group/+/UnifyScheduleEntryLock/year_day_get is received.
+ * Setting this callback will overwrite the previous set callback.
+ *
+ */
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback_t callback);
+
+/**
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::DailyRepeatingSet command.
+ */
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback_t)(
+    const dotdot_group_id_t group_id,
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
+);
+
+/**
+ * Setup handler to be called when a
+ * ucl/by-group/+/UnifyScheduleEntryLock/daily_repeating_set is received.
+ * Setting this callback will overwrite the previous set callback.
+ *
+ */
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback_t callback);
+
+/**
+ * @brief Callback signature for by-group UnifyScheduleEntryLock::DailyRepeatingGet command.
+ */
+typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback_t)(
+    const dotdot_group_id_t group_id,
+    const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
+);
+
+/**
+ * Setup handler to be called when a
+ * ucl/by-group/+/UnifyScheduleEntryLock/daily_repeating_get is received.
+ * Setting this callback will overwrite the previous set callback.
+ *
+ */
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback_t callback);
 
 typedef void (*uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback_t)(
     const dotdot_group_id_t group_id,
diff --git a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_send_commands.h b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_send_commands.h
index 098475c6d2..09d4aea8f6 100644
--- a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_send_commands.h
+++ b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_send_commands.h
@@ -7109,11 +7109,11 @@ void uic_mqtt_dotdot_unify_fan_control_publish_turn_off_command_to_group(
   uint16_t destination_group_id
 );
 /**
- * @brief Sends/Publishes a ScheduleEntryLockWeekDayReport command for
+ * @brief Sends/Publishes a EnableSet command for
  * the UnifyScheduleEntryLock cluster to a destination.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/EnableSet
  *
  * @param destination_unid      The UNID of the node that should receive the command.
  * 
@@ -7123,36 +7123,36 @@ void uic_mqtt_dotdot_unify_fan_control_publish_turn_off_command_to_group(
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_week_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_enable_set_command(
   const dotdot_unid_t destination_unid,
   const dotdot_endpoint_id_t destination_endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
   
 );
 
 /**
- * @brief Sends/Publishes a ScheduleEntryLockWeekDayReport command for
+ * @brief Sends/Publishes a EnableSet command for
  * the UnifyScheduleEntryLock cluster to a group.
  *
  * Publication will be made at the following topic
- * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/EnableSet
  *
  * @param destination_group_id  The GroupID that should receive the command.
  * 
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_week_day_report_command_to_group(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_enable_set_command_to_group(
   uint16_t destination_group_id,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
   
 );
 /**
- * @brief Sends/Publishes a ScheduleEntryLockYearDayReport command for
+ * @brief Sends/Publishes a WeekDayReport command for
  * the UnifyScheduleEntryLock cluster to a destination.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/WeekDayReport
  *
  * @param destination_unid      The UNID of the node that should receive the command.
  * 
@@ -7162,36 +7162,36 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_week_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_year_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_report_command(
   const dotdot_unid_t destination_unid,
   const dotdot_endpoint_id_t destination_endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
   
 );
 
 /**
- * @brief Sends/Publishes a ScheduleEntryLockYearDayReport command for
+ * @brief Sends/Publishes a WeekDayReport command for
  * the UnifyScheduleEntryLock cluster to a group.
  *
  * Publication will be made at the following topic
- * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/WeekDayReport
  *
  * @param destination_group_id  The GroupID that should receive the command.
  * 
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_year_day_report_command_to_group(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_report_command_to_group(
   uint16_t destination_group_id,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
   
 );
 /**
- * @brief Sends/Publishes a ScheduleEntryLockDailyRepeatingReport command for
+ * @brief Sends/Publishes a EnableAllSet command for
  * the UnifyScheduleEntryLock cluster to a destination.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/EnableAllSet
  *
  * @param destination_unid      The UNID of the node that should receive the command.
  * 
@@ -7201,28 +7201,340 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_year_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_daily_repeating_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_enable_all_set_command(
   const dotdot_unid_t destination_unid,
   const dotdot_endpoint_id_t destination_endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
   
 );
 
 /**
- * @brief Sends/Publishes a ScheduleEntryLockDailyRepeatingReport command for
+ * @brief Sends/Publishes a EnableAllSet command for
  * the UnifyScheduleEntryLock cluster to a group.
  *
  * Publication will be made at the following topic
- * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/EnableAllSet
  *
  * @param destination_group_id  The GroupID that should receive the command.
  * 
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_daily_repeating_report_command_to_group(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_enable_all_set_command_to_group(
   uint16_t destination_group_id,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
+  
+);
+/**
+ * @brief Sends/Publishes a YearDayReport command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/YearDayReport
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_report_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+  
+);
+
+/**
+ * @brief Sends/Publishes a YearDayReport command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/YearDayReport
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_report_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+  
+);
+/**
+ * @brief Sends/Publishes a WeekDaySet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/WeekDaySet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_set_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
+  
+);
+
+/**
+ * @brief Sends/Publishes a WeekDaySet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/WeekDaySet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_set_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
+  
+);
+/**
+ * @brief Sends/Publishes a DailyRepeatingReport command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/DailyRepeatingReport
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_report_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+  
+);
+
+/**
+ * @brief Sends/Publishes a DailyRepeatingReport command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/DailyRepeatingReport
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_report_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+  
+);
+/**
+ * @brief Sends/Publishes a WeekDayGet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/WeekDayGet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_get_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+  
+);
+
+/**
+ * @brief Sends/Publishes a WeekDayGet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/WeekDayGet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_get_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+  
+);
+/**
+ * @brief Sends/Publishes a YearDaySet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/YearDaySet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_set_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+  
+);
+
+/**
+ * @brief Sends/Publishes a YearDaySet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/YearDaySet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_set_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+  
+);
+/**
+ * @brief Sends/Publishes a YearDayGet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/YearDayGet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_get_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
+  
+);
+
+/**
+ * @brief Sends/Publishes a YearDayGet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/YearDayGet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_get_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
+  
+);
+/**
+ * @brief Sends/Publishes a DailyRepeatingSet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/DailyRepeatingSet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_set_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
+  
+);
+
+/**
+ * @brief Sends/Publishes a DailyRepeatingSet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/DailyRepeatingSet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_set_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
+  
+);
+/**
+ * @brief Sends/Publishes a DailyRepeatingGet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/DailyRepeatingGet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_get_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
+  
+);
+
+/**
+ * @brief Sends/Publishes a DailyRepeatingGet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/DailyRepeatingGet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_get_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
   
 );
 /**
diff --git a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_supported_generated_commands.h b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_supported_generated_commands.h
index 3778a1ec8c..d54fd5cd0b 100644
--- a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_supported_generated_commands.h
+++ b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_supported_generated_commands.h
@@ -1696,9 +1696,17 @@ void uic_mqtt_dotdot_unify_thermostat_publish_supported_generated_commands(
  * @brief Struct containing the list of commands for UnifyScheduleEntryLock
  */
 typedef struct _uic_mqtt_dotdot_unify_schedule_entry_lock_supported_commands_ {
-  bool schedule_entry_lock_week_day_report;
-  bool schedule_entry_lock_year_day_report;
-  bool schedule_entry_lock_daily_repeating_report;
+  bool enable_set;
+  bool week_day_report;
+  bool enable_all_set;
+  bool year_day_report;
+  bool week_day_set;
+  bool daily_repeating_report;
+  bool week_day_get;
+  bool year_day_set;
+  bool year_day_get;
+  bool daily_repeating_set;
+  bool daily_repeating_get;
   bool write_attributes;
 } uic_mqtt_dotdot_unify_schedule_entry_lock_supported_commands_t;
 
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.cpp
index a9ce13461d..5e796f77f2 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.cpp
@@ -93962,114 +93962,394 @@ sl_status_t uic_mqtt_dotdot_unify_thermostat_init()
 }
 
 // Callbacks pointers
-static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback;
-static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback;
-static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback;
-static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback;
-static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback;
-static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback;
+static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback;
 static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback;
 static std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_force_read_attributes_callback_t> uic_mqtt_dotdot_unify_schedule_entry_lock_force_read_attributes_callback;
 
 // Callbacks setters
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t callback)
 {
   if (callback != nullptr) {
-    uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback.insert(callback);
+    uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback.insert(callback);
   }
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t callback)
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback.erase(callback);
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback.erase(callback);
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_clear()
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_clear()
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback.clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback.clear();
 }
-std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback()
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback()
 {
-  return uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback;
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback;
 }
 
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t callback)
 {
   if (callback != nullptr) {
-    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback.insert(callback);
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback.insert(callback);
   }
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t callback)
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback.erase(callback);
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback.erase(callback);
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback_clear()
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback_clear()
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback.clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback.clear();
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t callback)
 {
   if (callback != nullptr) {
-    uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback.insert(callback);
+    uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback.insert(callback);
   }
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t callback)
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback.erase(callback);
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback.erase(callback);
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_clear()
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_clear()
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback.clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback.clear();
 }
-std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback()
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback()
 {
-  return uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback;
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback;
 }
 
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t callback)
 {
   if (callback != nullptr) {
-    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback.insert(callback);
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback.insert(callback);
   }
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t callback)
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback.erase(callback);
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback.erase(callback);
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback_clear()
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback_clear()
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback.clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback.clear();
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t callback)
 {
   if (callback != nullptr) {
-    uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback.insert(callback);
+    uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback.insert(callback);
   }
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t callback)
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback.erase(callback);
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback.erase(callback);
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_clear()
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_clear()
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback.clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback.clear();
 }
-std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback()
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback()
 {
-  return uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback;
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback;
 }
 
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t callback)
 {
   if (callback != nullptr) {
-    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback.insert(callback);
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback.insert(callback);
   }
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t callback)
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback.erase(callback);
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback.erase(callback);
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback_clear()
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback_clear()
 {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback.clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback.clear();
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback.clear();
+}
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback()
+{
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback;
+}
+
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback.clear();
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback.clear();
+}
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback()
+{
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback;
+}
+
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback.clear();
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback.clear();
+}
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback()
+{
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback;
+}
+
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback.clear();
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback.clear();
+}
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback()
+{
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback;
+}
+
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback.clear();
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback.clear();
+}
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback()
+{
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback;
+}
+
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback.clear();
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback.clear();
+}
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback()
+{
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback;
+}
+
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback.clear();
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback.clear();
+}
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback()
+{
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback;
+}
+
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback.clear();
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback.clear();
+}
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t>& get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback()
+{
+  return uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback;
+}
+
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback_set(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t callback)
+{
+  if (callback != nullptr) {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback.insert(callback);
+  }
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback_unset(const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t callback)
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback.erase(callback);
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback_clear()
+{
+  uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback.clear();
 }
 
 void uic_mqtt_dotdot_set_unify_schedule_entry_lock_write_attributes_callback(
@@ -94111,13 +94391,13 @@ void uic_mqtt_dotdot_clear_unify_schedule_entry_lock_force_read_attributes_callb
 }
 
 
-// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport
-void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_week_day_report(
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/EnableSet
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_enable_set(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback.empty())) {
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback.empty())) {
     return;
   }
 
@@ -94131,12 +94411,7 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_week_day_r
   }
 
   uint8_t user_identifier = {};
-  uint8_t schedule_slotid = {};
-  uint8_t day_of_week = {};
-  uint8_t start_hour = {};
-  uint8_t start_minute = {};
-  uint8_t stop_hour = {};
-  uint8_t stop_minute = {};
+  uint8_t enabled = {};
 
 
   nlohmann::json jsn;
@@ -94144,69 +94419,49 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_week_day_r
     jsn = nlohmann::json::parse(std::string(message));
 
   
-    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_week_day_report(
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_set(
       jsn,
       user_identifier,
 
-      schedule_slotid,
-
-      day_of_week,
-
-      start_hour,
-
-      start_minute,
-
-      stop_hour,
-
-      stop_minute
+      enabled
       );
 
   } catch (const nlohmann::json::parse_error& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "ScheduleEntryLockWeekDayReport");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "EnableSet");
     return;
   } catch (const nlohmann::json::exception& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockWeekDayReport", e.what());
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableSet", e.what());
     return;
   } catch (const std::exception& e) {
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockWeekDayReport", "");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableSet", "");
     return;
   }
 
 
 
-  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback){
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback){
     callback(
       static_cast<dotdot_unid_t>(unid.c_str()),
       endpoint,
       UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
       user_identifier,
   
-      schedule_slotid,
-  
-      day_of_week,
-  
-      start_hour,
-  
-      start_minute,
-  
-      stop_hour,
-  
-      stop_minute
+      enabled
   
     );
   }
 
 }
 
-// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockWeekDayReport
-static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entry_lock_week_day_report(
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/EnableSet
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_enable_set(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback.empty())) {
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback.empty())) {
     return;
   }
 
@@ -94220,12 +94475,7 @@ static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entr
   }
 
   uint8_t user_identifier = {};
-  uint8_t schedule_slotid = {};
-  uint8_t day_of_week = {};
-  uint8_t start_hour = {};
-  uint8_t start_minute = {};
-  uint8_t stop_hour = {};
-  uint8_t stop_minute = {};
+  uint8_t enabled = {};
 
 
   nlohmann::json jsn;
@@ -94233,70 +94483,50 @@ static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entr
     jsn = nlohmann::json::parse(std::string(message));
 
   
-    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_week_day_report(
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_set(
       jsn,
       user_identifier,
 
-      schedule_slotid,
-
-      day_of_week,
-
-      start_hour,
-
-      start_minute,
-
-      stop_hour,
-
-      stop_minute
+      enabled
       );
 
   } catch (const nlohmann::json::parse_error& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "ScheduleEntryLockWeekDayReport");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "EnableSet");
     return;
   } catch (const nlohmann::json::exception& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockWeekDayReport", e.what());
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableSet", e.what());
     return;
   } catch (const std::exception& e) {
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockWeekDayReport", "");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableSet", "");
     return;
   }
 
 
 
 
-  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback){
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback){
     callback(
       static_cast<dotdot_unid_t>(unid.c_str()),
       endpoint,
       UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
       user_identifier,
   
-      schedule_slotid,
-  
-      day_of_week,
-  
-      start_hour,
-  
-      start_minute,
-  
-      stop_hour,
-  
-      stop_minute
+      enabled
   
     );
   }
 }
 
 
-// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport
-void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_year_day_report(
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WeekDayReport
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_report(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback.empty())) {
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback.empty())) {
     return;
   }
 
@@ -94309,17 +94539,11 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_year_day_r
     return;
   }
 
-  uint8_t set_action = {};
   uint8_t user_identifier = {};
   uint8_t schedule_slotid = {};
-  uint8_t start_year = {};
-  uint8_t start_month = {};
-  uint8_t start_day = {};
+  uint8_t day_of_week = {};
   uint8_t start_hour = {};
   uint8_t start_minute = {};
-  uint8_t stop_year = {};
-  uint8_t stop_month = {};
-  uint8_t stop_day = {};
   uint8_t stop_hour = {};
   uint8_t stop_minute = {};
 
@@ -94329,30 +94553,18 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_year_day_r
     jsn = nlohmann::json::parse(std::string(message));
 
   
-    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_year_day_report(
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_report(
       jsn,
-      set_action,
-
       user_identifier,
 
       schedule_slotid,
 
-      start_year,
-
-      start_month,
-
-      start_day,
+      day_of_week,
 
       start_hour,
 
       start_minute,
 
-      stop_year,
-
-      stop_month,
-
-      stop_day,
-
       stop_hour,
 
       stop_minute
@@ -94360,46 +94572,34 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_year_day_r
 
   } catch (const nlohmann::json::parse_error& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "ScheduleEntryLockYearDayReport");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WeekDayReport");
     return;
   } catch (const nlohmann::json::exception& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockYearDayReport", e.what());
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayReport", e.what());
     return;
   } catch (const std::exception& e) {
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockYearDayReport", "");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayReport", "");
     return;
   }
 
 
 
-  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback){
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback){
     callback(
       static_cast<dotdot_unid_t>(unid.c_str()),
       endpoint,
       UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
-      set_action,
-  
       user_identifier,
   
       schedule_slotid,
   
-      start_year,
-  
-      start_month,
-  
-      start_day,
+      day_of_week,
   
       start_hour,
   
       start_minute,
   
-      stop_year,
-  
-      stop_month,
-  
-      stop_day,
-  
       stop_hour,
   
       stop_minute
@@ -94409,13 +94609,13 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_year_day_r
 
 }
 
-// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockYearDayReport
-static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entry_lock_year_day_report(
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/WeekDayReport
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_week_day_report(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback.empty())) {
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback.empty())) {
     return;
   }
 
@@ -94428,17 +94628,11 @@ static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entr
     return;
   }
 
-  uint8_t set_action = {};
   uint8_t user_identifier = {};
   uint8_t schedule_slotid = {};
-  uint8_t start_year = {};
-  uint8_t start_month = {};
-  uint8_t start_day = {};
+  uint8_t day_of_week = {};
   uint8_t start_hour = {};
   uint8_t start_minute = {};
-  uint8_t stop_year = {};
-  uint8_t stop_month = {};
-  uint8_t stop_day = {};
   uint8_t stop_hour = {};
   uint8_t stop_minute = {};
 
@@ -94448,30 +94642,18 @@ static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entr
     jsn = nlohmann::json::parse(std::string(message));
 
   
-    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_year_day_report(
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_report(
       jsn,
-      set_action,
-
       user_identifier,
 
       schedule_slotid,
 
-      start_year,
-
-      start_month,
-
-      start_day,
+      day_of_week,
 
       start_hour,
 
       start_minute,
 
-      stop_year,
-
-      stop_month,
-
-      stop_day,
-
       stop_hour,
 
       stop_minute
@@ -94479,47 +94661,35 @@ static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entr
 
   } catch (const nlohmann::json::parse_error& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "ScheduleEntryLockYearDayReport");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WeekDayReport");
     return;
   } catch (const nlohmann::json::exception& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockYearDayReport", e.what());
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayReport", e.what());
     return;
   } catch (const std::exception& e) {
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockYearDayReport", "");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayReport", "");
     return;
   }
 
 
 
 
-  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback){
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback){
     callback(
       static_cast<dotdot_unid_t>(unid.c_str()),
       endpoint,
       UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
-      set_action,
-  
       user_identifier,
   
       schedule_slotid,
   
-      start_year,
-  
-      start_month,
-  
-      start_day,
+      day_of_week,
   
       start_hour,
   
       start_minute,
   
-      stop_year,
-  
-      stop_month,
-  
-      stop_day,
-  
       stop_hour,
   
       stop_minute
@@ -94529,13 +94699,13 @@ static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entr
 }
 
 
-// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport
-void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report(
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/EnableAllSet
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_enable_all_set(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback.empty())) {
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback.empty())) {
     return;
   }
 
@@ -94548,14 +94718,7 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_daily_repe
     return;
   }
 
-  uint8_t set_action = {};
-  uint8_t user_identifier = {};
-  uint8_t schedule_slotid = {};
-  uint8_t week_day_bitmask = {};
-  uint8_t start_hour = {};
-  uint8_t start_minute = {};
-  uint8_t duration_hour = {};
-  uint8_t duration_minute = {};
+  uint8_t enabled = {};
 
 
   nlohmann::json jsn;
@@ -94563,73 +94726,105 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_daily_repe
     jsn = nlohmann::json::parse(std::string(message));
 
   
-    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report(
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_all_set(
       jsn,
-      set_action,
+      enabled
+      );
 
-      user_identifier,
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "EnableAllSet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableAllSet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableAllSet", "");
+    return;
+  }
 
-      schedule_slotid,
 
-      week_day_bitmask,
 
-      start_hour,
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      enabled
+  
+    );
+  }
 
-      start_minute,
+}
 
-      duration_hour,
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/EnableAllSet
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_enable_all_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback.empty())) {
+    return;
+  }
 
-      duration_minute
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t enabled = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_all_set(
+      jsn,
+      enabled
       );
 
   } catch (const nlohmann::json::parse_error& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "ScheduleEntryLockDailyRepeatingReport");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "EnableAllSet");
     return;
   } catch (const nlohmann::json::exception& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockDailyRepeatingReport", e.what());
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableAllSet", e.what());
     return;
   } catch (const std::exception& e) {
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockDailyRepeatingReport", "");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableAllSet", "");
     return;
   }
 
 
 
-  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback){
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback){
     callback(
       static_cast<dotdot_unid_t>(unid.c_str()),
       endpoint,
       UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
-      set_action,
-  
-      user_identifier,
-  
-      schedule_slotid,
-  
-      week_day_bitmask,
-  
-      start_hour,
-  
-      start_minute,
-  
-      duration_hour,
-  
-      duration_minute
+      enabled
   
     );
   }
-
 }
 
-// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockDailyRepeatingReport
-static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report(
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/YearDayReport
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_report(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback.empty())) {
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback.empty())) {
     return;
   }
 
@@ -94642,14 +94837,18 @@ static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entr
     return;
   }
 
-  uint8_t set_action = {};
   uint8_t user_identifier = {};
   uint8_t schedule_slotid = {};
-  uint8_t week_day_bitmask = {};
+  uint8_t start_year = {};
+  uint8_t start_month = {};
+  uint8_t start_day = {};
   uint8_t start_hour = {};
   uint8_t start_minute = {};
-  uint8_t duration_hour = {};
-  uint8_t duration_minute = {};
+  uint8_t stop_year = {};
+  uint8_t stop_month = {};
+  uint8_t stop_day = {};
+  uint8_t stop_hour = {};
+  uint8_t stop_minute = {};
 
 
   nlohmann::json jsn;
@@ -94657,78 +94856,89 @@ static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entr
     jsn = nlohmann::json::parse(std::string(message));
 
   
-    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report(
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_report(
       jsn,
-      set_action,
-
       user_identifier,
 
       schedule_slotid,
 
-      week_day_bitmask,
+      start_year,
+
+      start_month,
+
+      start_day,
 
       start_hour,
 
       start_minute,
 
-      duration_hour,
+      stop_year,
 
-      duration_minute
+      stop_month,
+
+      stop_day,
+
+      stop_hour,
+
+      stop_minute
       );
 
   } catch (const nlohmann::json::parse_error& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "ScheduleEntryLockDailyRepeatingReport");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "YearDayReport");
     return;
   } catch (const nlohmann::json::exception& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockDailyRepeatingReport", e.what());
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayReport", e.what());
     return;
   } catch (const std::exception& e) {
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockDailyRepeatingReport", "");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayReport", "");
     return;
   }
 
 
 
-
-  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback){
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback){
     callback(
       static_cast<dotdot_unid_t>(unid.c_str()),
       endpoint,
       UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
-      set_action,
-  
       user_identifier,
   
       schedule_slotid,
   
-      week_day_bitmask,
+      start_year,
+  
+      start_month,
+  
+      start_day,
   
       start_hour,
   
       start_minute,
   
-      duration_hour,
+      stop_year,
   
-      duration_minute
+      stop_month,
+  
+      stop_day,
+  
+      stop_hour,
+  
+      stop_minute
   
     );
   }
-}
 
+}
 
-// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WriteAttributes
-void uic_mqtt_dotdot_on_unify_schedule_entry_lock_WriteAttributes(
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/YearDayReport
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_year_day_report(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if (uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback.empty()) {
-    return;
-  }
-
-  if (message_length == 0) {
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback.empty())) {
     return;
   }
 
@@ -94741,66 +94951,1368 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_WriteAttributes(
     return;
   }
 
-  uic_mqtt_dotdot_unify_schedule_entry_lock_state_t new_state = {};
-  uic_mqtt_dotdot_unify_schedule_entry_lock_updated_state_t new_updated_state = {};
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+  uint8_t start_year = {};
+  uint8_t start_month = {};
+  uint8_t start_day = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t stop_year = {};
+  uint8_t stop_month = {};
+  uint8_t stop_day = {};
+  uint8_t stop_hour = {};
+  uint8_t stop_minute = {};
 
 
   nlohmann::json jsn;
   try {
     jsn = nlohmann::json::parse(std::string(message));
 
-    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_write_attributes(
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_report(
       jsn,
-      new_state,
-      new_updated_state
-    );
+      user_identifier,
+
+      schedule_slotid,
+
+      start_year,
+
+      start_month,
+
+      start_day,
+
+      start_hour,
+
+      start_minute,
+
+      stop_year,
+
+      stop_month,
+
+      stop_day,
+
+      stop_hour,
+
+      stop_minute
+      );
+
   } catch (const nlohmann::json::parse_error& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WriteAttributes");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "YearDayReport");
     return;
   } catch (const nlohmann::json::exception& e) {
     // Catch JSON object field parsing errors
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WriteAttributes", e.what());
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayReport", e.what());
     return;
   } catch (const std::exception& e) {
-    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WriteAttributes", "");
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayReport", "");
     return;
   }
 
-  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback){
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback){
     callback(
       static_cast<dotdot_unid_t>(unid.c_str()),
       endpoint,
       UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
-      new_state,
-      new_updated_state
+      user_identifier,
+  
+      schedule_slotid,
+  
+      start_year,
+  
+      start_month,
+  
+      start_day,
+  
+      start_hour,
+  
+      start_minute,
+  
+      stop_year,
+  
+      stop_month,
+  
+      stop_day,
+  
+      stop_hour,
+  
+      stop_minute
+  
     );
   }
-
 }
 
-static void uic_mqtt_dotdot_on_unify_schedule_entry_lock_force_read_attributes(
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WeekDaySet
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_set(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  uint8_t endpoint = 0;
-  std::string unid;
-
-  if ((message_length == 0) || (uic_mqtt_dotdot_unify_schedule_entry_lock_force_read_attributes_callback.empty())) {
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback.empty())) {
     return;
   }
 
-  if(! uic_dotdot_mqtt::parse_topic(topic, unid, endpoint)) {
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
     sl_log_debug(LOG_TAG,
                 "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
                 topic);
     return;
   }
 
-  try {
-    uic_mqtt_dotdot_unify_schedule_entry_lock_updated_state_t force_update = {0};
-    bool trigger_handler = false;
+  uint8_t set_action = {};
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+  uint8_t day_of_week = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t stop_hour = {};
+  uint8_t stop_minute = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_set(
+      jsn,
+      set_action,
+
+      user_identifier,
+
+      schedule_slotid,
+
+      day_of_week,
+
+      start_hour,
+
+      start_minute,
+
+      stop_hour,
+
+      stop_minute
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WeekDaySet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDaySet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDaySet", "");
+    return;
+  }
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      set_action,
+  
+      user_identifier,
+  
+      schedule_slotid,
+  
+      day_of_week,
+  
+      start_hour,
+  
+      start_minute,
+  
+      stop_hour,
+  
+      stop_minute
+  
+    );
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/WeekDaySet
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_week_day_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t set_action = {};
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+  uint8_t day_of_week = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t stop_hour = {};
+  uint8_t stop_minute = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_set(
+      jsn,
+      set_action,
+
+      user_identifier,
+
+      schedule_slotid,
+
+      day_of_week,
+
+      start_hour,
+
+      start_minute,
+
+      stop_hour,
+
+      stop_minute
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WeekDaySet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDaySet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDaySet", "");
+    return;
+  }
+
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      set_action,
+  
+      user_identifier,
+  
+      schedule_slotid,
+  
+      day_of_week,
+  
+      start_hour,
+  
+      start_minute,
+  
+      stop_hour,
+  
+      stop_minute
+  
+    );
+  }
+}
+
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/DailyRepeatingReport
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_report(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+  uint8_t week_day_bitmask = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t duration_hour = {};
+  uint8_t duration_minute = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_report(
+      jsn,
+      user_identifier,
+
+      schedule_slotid,
+
+      week_day_bitmask,
+
+      start_hour,
+
+      start_minute,
+
+      duration_hour,
+
+      duration_minute
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "DailyRepeatingReport");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingReport", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingReport", "");
+    return;
+  }
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      user_identifier,
+  
+      schedule_slotid,
+  
+      week_day_bitmask,
+  
+      start_hour,
+  
+      start_minute,
+  
+      duration_hour,
+  
+      duration_minute
+  
+    );
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingReport
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_daily_repeating_report(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+  uint8_t week_day_bitmask = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t duration_hour = {};
+  uint8_t duration_minute = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_report(
+      jsn,
+      user_identifier,
+
+      schedule_slotid,
+
+      week_day_bitmask,
+
+      start_hour,
+
+      start_minute,
+
+      duration_hour,
+
+      duration_minute
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "DailyRepeatingReport");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingReport", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingReport", "");
+    return;
+  }
+
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      user_identifier,
+  
+      schedule_slotid,
+  
+      week_day_bitmask,
+  
+      start_hour,
+  
+      start_minute,
+  
+      duration_hour,
+  
+      duration_minute
+  
+    );
+  }
+}
+
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WeekDayGet
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_get(
+      jsn,
+      user_identifier,
+
+      schedule_slotid
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WeekDayGet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayGet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayGet", "");
+    return;
+  }
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      user_identifier,
+  
+      schedule_slotid
+  
+    );
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/WeekDayGet
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_week_day_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_get(
+      jsn,
+      user_identifier,
+
+      schedule_slotid
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WeekDayGet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayGet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayGet", "");
+    return;
+  }
+
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      user_identifier,
+  
+      schedule_slotid
+  
+    );
+  }
+}
+
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/YearDaySet
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t set_action = {};
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+  uint8_t start_year = {};
+  uint8_t start_day = {};
+  uint8_t start_hour = {};
+  uint8_t start_month = {};
+  uint8_t start_minute = {};
+  uint8_t stop_year = {};
+  uint8_t stop_month = {};
+  uint8_t stop_day = {};
+  uint8_t stop_hour = {};
+  uint8_t stop_minute = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_set(
+      jsn,
+      set_action,
+
+      user_identifier,
+
+      schedule_slotid,
+
+      start_year,
+
+      start_day,
+
+      start_hour,
+
+      start_month,
+
+      start_minute,
+
+      stop_year,
+
+      stop_month,
+
+      stop_day,
+
+      stop_hour,
+
+      stop_minute
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "YearDaySet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDaySet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDaySet", "");
+    return;
+  }
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      set_action,
+  
+      user_identifier,
+  
+      schedule_slotid,
+  
+      start_year,
+  
+      start_day,
+  
+      start_hour,
+  
+      start_month,
+  
+      start_minute,
+  
+      stop_year,
+  
+      stop_month,
+  
+      stop_day,
+  
+      stop_hour,
+  
+      stop_minute
+  
+    );
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/YearDaySet
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_year_day_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t set_action = {};
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+  uint8_t start_year = {};
+  uint8_t start_day = {};
+  uint8_t start_hour = {};
+  uint8_t start_month = {};
+  uint8_t start_minute = {};
+  uint8_t stop_year = {};
+  uint8_t stop_month = {};
+  uint8_t stop_day = {};
+  uint8_t stop_hour = {};
+  uint8_t stop_minute = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_set(
+      jsn,
+      set_action,
+
+      user_identifier,
+
+      schedule_slotid,
+
+      start_year,
+
+      start_day,
+
+      start_hour,
+
+      start_month,
+
+      start_minute,
+
+      stop_year,
+
+      stop_month,
+
+      stop_day,
+
+      stop_hour,
+
+      stop_minute
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "YearDaySet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDaySet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDaySet", "");
+    return;
+  }
+
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      set_action,
+  
+      user_identifier,
+  
+      schedule_slotid,
+  
+      start_year,
+  
+      start_day,
+  
+      start_hour,
+  
+      start_month,
+  
+      start_minute,
+  
+      stop_year,
+  
+      stop_month,
+  
+      stop_day,
+  
+      stop_hour,
+  
+      stop_minute
+  
+    );
+  }
+}
+
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/YearDayGet
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_get(
+      jsn,
+      user_identifier,
+
+      schedule_slotid
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "YearDayGet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayGet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayGet", "");
+    return;
+  }
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      user_identifier,
+  
+      schedule_slotid
+  
+    );
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/YearDayGet
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_year_day_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_get(
+      jsn,
+      user_identifier,
+
+      schedule_slotid
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "YearDayGet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayGet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayGet", "");
+    return;
+  }
+
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      user_identifier,
+  
+      schedule_slotid
+  
+    );
+  }
+}
+
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/DailyRepeatingSet
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t set_action = {};
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+  uint8_t week_day_bitmask = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t duration_hour = {};
+  uint8_t duration_minute = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_set(
+      jsn,
+      set_action,
+
+      user_identifier,
+
+      schedule_slotid,
+
+      week_day_bitmask,
+
+      start_hour,
+
+      start_minute,
+
+      duration_hour,
+
+      duration_minute
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "DailyRepeatingSet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingSet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingSet", "");
+    return;
+  }
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      set_action,
+  
+      user_identifier,
+  
+      schedule_slotid,
+  
+      week_day_bitmask,
+  
+      start_hour,
+  
+      start_minute,
+  
+      duration_hour,
+  
+      duration_minute
+  
+    );
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingSet
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_daily_repeating_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t set_action = {};
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+  uint8_t week_day_bitmask = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t duration_hour = {};
+  uint8_t duration_minute = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_set(
+      jsn,
+      set_action,
+
+      user_identifier,
+
+      schedule_slotid,
+
+      week_day_bitmask,
+
+      start_hour,
+
+      start_minute,
+
+      duration_hour,
+
+      duration_minute
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "DailyRepeatingSet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingSet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingSet", "");
+    return;
+  }
+
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      set_action,
+  
+      user_identifier,
+  
+      schedule_slotid,
+  
+      week_day_bitmask,
+  
+      start_hour,
+  
+      start_minute,
+  
+      duration_hour,
+  
+      duration_minute
+  
+    );
+  }
+}
+
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/DailyRepeatingGet
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_get(
+      jsn,
+      user_identifier,
+
+      schedule_slotid
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "DailyRepeatingGet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingGet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingGet", "");
+    return;
+  }
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      user_identifier,
+  
+      schedule_slotid
+  
+    );
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingGet
+static void uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_daily_repeating_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (message_length == 0 || (uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback.empty())) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uint8_t user_identifier = {};
+  uint8_t schedule_slotid = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+  
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_get(
+      jsn,
+      user_identifier,
+
+      schedule_slotid
+      );
+
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "DailyRepeatingGet");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingGet", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingGet", "");
+    return;
+  }
+
+
+
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      user_identifier,
+  
+      schedule_slotid
+  
+    );
+  }
+}
+
+
+// Callback function for incoming publications on ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WriteAttributes
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_WriteAttributes(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback.empty()) {
+    return;
+  }
+
+  if (message_length == 0) {
+    return;
+  }
+
+  std::string unid;
+  uint8_t endpoint = 0; // Default value for endpoint-less topics.
+  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  uic_mqtt_dotdot_unify_schedule_entry_lock_state_t new_state = {};
+  uic_mqtt_dotdot_unify_schedule_entry_lock_updated_state_t new_updated_state = {};
+
+
+  nlohmann::json jsn;
+  try {
+    jsn = nlohmann::json::parse(std::string(message));
+
+    uic_mqtt_dotdot_parse_unify_schedule_entry_lock_write_attributes(
+      jsn,
+      new_state,
+      new_updated_state
+    );
+  } catch (const nlohmann::json::parse_error& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WriteAttributes");
+    return;
+  } catch (const nlohmann::json::exception& e) {
+    // Catch JSON object field parsing errors
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WriteAttributes", e.what());
+    return;
+  } catch (const std::exception& e) {
+    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WriteAttributes", "");
+    return;
+  }
+
+  for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback){
+    callback(
+      static_cast<dotdot_unid_t>(unid.c_str()),
+      endpoint,
+      UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
+      new_state,
+      new_updated_state
+    );
+  }
+
+}
+
+static void uic_mqtt_dotdot_on_unify_schedule_entry_lock_force_read_attributes(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  uint8_t endpoint = 0;
+  std::string unid;
+
+  if ((message_length == 0) || (uic_mqtt_dotdot_unify_schedule_entry_lock_force_read_attributes_callback.empty())) {
+    return;
+  }
+
+  if(! uic_dotdot_mqtt::parse_topic(topic, unid, endpoint)) {
+    sl_log_debug(LOG_TAG,
+                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  try {
+    uic_mqtt_dotdot_unify_schedule_entry_lock_updated_state_t force_update = {0};
+    bool trigger_handler = false;
 
     nlohmann::json jsn = nlohmann::json::parse(std::string(message));
     std::vector<std::string> attributes = jsn["value"].get<std::vector<std::string>>();
@@ -95428,29 +96940,93 @@ sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_init()
     subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/ForceReadAttributes";
     uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_force_read_attributes);
   }
-  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback.empty()) {
-    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_week_day_report);
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/EnableSet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_enable_set);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/EnableSet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_enable_set);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/WeekDayReport";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_report);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_report_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/WeekDayReport";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_week_day_report);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/EnableAllSet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_enable_all_set);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_enable_all_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/EnableAllSet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_enable_all_set);
   }
-  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_week_day_report_callback.empty()) {
-    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockWeekDayReport";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entry_lock_week_day_report);
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/YearDayReport";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_report);
   }
-  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback.empty()) {
-    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_year_day_report);
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_report_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/YearDayReport";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_year_day_report);
   }
-  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_year_day_report_callback.empty()) {
-    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockYearDayReport";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entry_lock_year_day_report);
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/WeekDaySet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_set);
   }
-  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback.empty()) {
-    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report);
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/WeekDaySet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_week_day_set);
   }
-  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_schedule_entry_lock_daily_repeating_report_callback.empty()) {
-    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockDailyRepeatingReport";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report);
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/DailyRepeatingReport";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_report);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_report_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingReport";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_daily_repeating_report);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/WeekDayGet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_get);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_week_day_get_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/WeekDayGet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_week_day_get);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/YearDaySet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_set);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/YearDaySet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_year_day_set);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/YearDayGet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_get);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_year_day_get_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/YearDayGet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_year_day_get);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/DailyRepeatingSet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_set);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_set_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingSet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_daily_repeating_set);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/Commands/DailyRepeatingGet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_get);
+  }
+  if (!uic_mqtt_dotdot_unify_schedule_entry_lock_generated_daily_repeating_get_callback.empty()) {
+    subscription_topic = base_topic + "UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingGet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_generated_unify_schedule_entry_lock_daily_repeating_get);
   }
 
   // Init the attributes for that cluster
@@ -111296,48 +112872,194 @@ void uic_mqtt_dotdot_unify_thermostat_publish_empty_supported_commands(
                      strlen(EMPTY_VALUE_ARRAY),
                      true);
   }
-}
+}
+
+// Publishing Cluster Revision for UnifyScheduleEntryLock Cluster
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_cluster_revision(const char* base_topic, uint16_t value)
+{
+  std::string cluster_topic = std::string(base_topic) + "/UnifyScheduleEntryLock/Attributes/ClusterRevision";
+  // Publish Desired
+  std::string pub_topic_des = cluster_topic + "/Desired";
+  std::string payload = std::string(R"({"value": )")
+    + std::to_string(value) + std::string("}");
+  uic_mqtt_publish(pub_topic_des.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    true);
+  // Publish Reported
+  std::string pub_topic_rep = cluster_topic + "/Reported";
+  uic_mqtt_publish(pub_topic_rep.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    true);
+}
+
+// Unretain Cluster Revision for UnifyScheduleEntryLock Cluster
+void uic_mqtt_dotdot_unify_schedule_entry_lock_unretain_cluster_revision(const char* base_topic)
+{
+  // clang-format on
+  std::string cluster_topic
+    = std::string(base_topic)
+      + "/UnifyScheduleEntryLock/Attributes/ClusterRevision";
+  // Publish Desired
+  std::string desired_topic = cluster_topic + "/Desired";
+  uic_mqtt_publish(desired_topic.c_str(), NULL, 0, true);
+  // Publish Reported
+  std::string reported_topic = cluster_topic + "/Reported";
+  uic_mqtt_publish(reported_topic.c_str(), NULL, 0, true);
+  // clang-format off
+}
+
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_is_supported(
+  const dotdot_unid_t unid,
+  dotdot_endpoint_id_t endpoint_id)
+{
+    uint8_t user_identifier_value;
+    memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+    uint8_t enabled_value;
+    memset(&enabled_value, 0x00, sizeof(enabled_value));
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback) {
+      if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    ,
+        user_identifier_value,
+    
+        enabled_value
+    
+        ) == SL_STATUS_OK) {
+      return true;
+    }
+  }
+
+  return false;
+}
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_is_supported(
+  const dotdot_unid_t unid,
+  dotdot_endpoint_id_t endpoint_id)
+{
+    uint8_t user_identifier_value;
+    memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+    uint8_t schedule_slotid_value;
+    memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+    uint8_t day_of_week_value;
+    memset(&day_of_week_value, 0x00, sizeof(day_of_week_value));
+    uint8_t start_hour_value;
+    memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+    uint8_t start_minute_value;
+    memset(&start_minute_value, 0x00, sizeof(start_minute_value));
+    uint8_t stop_hour_value;
+    memset(&stop_hour_value, 0x00, sizeof(stop_hour_value));
+    uint8_t stop_minute_value;
+    memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback) {
+      if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    ,
+        user_identifier_value,
+    
+        schedule_slotid_value,
+    
+        day_of_week_value,
+    
+        start_hour_value,
+    
+        start_minute_value,
+    
+        stop_hour_value,
+    
+        stop_minute_value
+    
+        ) == SL_STATUS_OK) {
+      return true;
+    }
+  }
+
+  return false;
+}
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_is_supported(
+  const dotdot_unid_t unid,
+  dotdot_endpoint_id_t endpoint_id)
+{
+    uint8_t enabled_value;
+    memset(&enabled_value, 0x00, sizeof(enabled_value));
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback) {
+      if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    ,
+        enabled_value
+    
+        ) == SL_STATUS_OK) {
+      return true;
+    }
+  }
 
-// Publishing Cluster Revision for UnifyScheduleEntryLock Cluster
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_cluster_revision(const char* base_topic, uint16_t value)
-{
-  std::string cluster_topic = std::string(base_topic) + "/UnifyScheduleEntryLock/Attributes/ClusterRevision";
-  // Publish Desired
-  std::string pub_topic_des = cluster_topic + "/Desired";
-  std::string payload = std::string(R"({"value": )")
-    + std::to_string(value) + std::string("}");
-  uic_mqtt_publish(pub_topic_des.c_str(),
-                    payload.c_str(),
-                    payload.size(),
-                    true);
-  // Publish Reported
-  std::string pub_topic_rep = cluster_topic + "/Reported";
-  uic_mqtt_publish(pub_topic_rep.c_str(),
-                    payload.c_str(),
-                    payload.size(),
-                    true);
+  return false;
 }
-
-// Unretain Cluster Revision for UnifyScheduleEntryLock Cluster
-void uic_mqtt_dotdot_unify_schedule_entry_lock_unretain_cluster_revision(const char* base_topic)
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_is_supported(
+  const dotdot_unid_t unid,
+  dotdot_endpoint_id_t endpoint_id)
 {
-  // clang-format on
-  std::string cluster_topic
-    = std::string(base_topic)
-      + "/UnifyScheduleEntryLock/Attributes/ClusterRevision";
-  // Publish Desired
-  std::string desired_topic = cluster_topic + "/Desired";
-  uic_mqtt_publish(desired_topic.c_str(), NULL, 0, true);
-  // Publish Reported
-  std::string reported_topic = cluster_topic + "/Reported";
-  uic_mqtt_publish(reported_topic.c_str(), NULL, 0, true);
-  // clang-format off
-}
+    uint8_t user_identifier_value;
+    memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+    uint8_t schedule_slotid_value;
+    memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+    uint8_t start_year_value;
+    memset(&start_year_value, 0x00, sizeof(start_year_value));
+    uint8_t start_month_value;
+    memset(&start_month_value, 0x00, sizeof(start_month_value));
+    uint8_t start_day_value;
+    memset(&start_day_value, 0x00, sizeof(start_day_value));
+    uint8_t start_hour_value;
+    memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+    uint8_t start_minute_value;
+    memset(&start_minute_value, 0x00, sizeof(start_minute_value));
+    uint8_t stop_year_value;
+    memset(&stop_year_value, 0x00, sizeof(stop_year_value));
+    uint8_t stop_month_value;
+    memset(&stop_month_value, 0x00, sizeof(stop_month_value));
+    uint8_t stop_day_value;
+    memset(&stop_day_value, 0x00, sizeof(stop_day_value));
+    uint8_t stop_hour_value;
+    memset(&stop_hour_value, 0x00, sizeof(stop_hour_value));
+    uint8_t stop_minute_value;
+    memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback) {
+      if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    ,
+        user_identifier_value,
+    
+        schedule_slotid_value,
+    
+        start_year_value,
+    
+        start_month_value,
+    
+        start_day_value,
+    
+        start_hour_value,
+    
+        start_minute_value,
+    
+        stop_year_value,
+    
+        stop_month_value,
+    
+        stop_day_value,
+    
+        stop_hour_value,
+    
+        stop_minute_value
+    
+        ) == SL_STATUS_OK) {
+      return true;
+    }
+  }
 
-static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_is_supported(
+  return false;
+}
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
+    uint8_t set_action_value;
+    memset(&set_action_value, 0x00, sizeof(set_action_value));
     uint8_t user_identifier_value;
     memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
     uint8_t schedule_slotid_value;
@@ -111352,9 +113074,11 @@ static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
     memset(&stop_hour_value, 0x00, sizeof(stop_hour_value));
     uint8_t stop_minute_value;
     memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
-    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback) {
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
     ,
+        set_action_value,
+    
         user_identifier_value,
     
         schedule_slotid_value,
@@ -111376,7 +113100,71 @@ static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
 
   return false;
 }
-static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_is_supported(
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_is_supported(
+  const dotdot_unid_t unid,
+  dotdot_endpoint_id_t endpoint_id)
+{
+    uint8_t user_identifier_value;
+    memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+    uint8_t schedule_slotid_value;
+    memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+    uint8_t week_day_bitmask_value;
+    memset(&week_day_bitmask_value, 0x00, sizeof(week_day_bitmask_value));
+    uint8_t start_hour_value;
+    memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+    uint8_t start_minute_value;
+    memset(&start_minute_value, 0x00, sizeof(start_minute_value));
+    uint8_t duration_hour_value;
+    memset(&duration_hour_value, 0x00, sizeof(duration_hour_value));
+    uint8_t duration_minute_value;
+    memset(&duration_minute_value, 0x00, sizeof(duration_minute_value));
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback) {
+      if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    ,
+        user_identifier_value,
+    
+        schedule_slotid_value,
+    
+        week_day_bitmask_value,
+    
+        start_hour_value,
+    
+        start_minute_value,
+    
+        duration_hour_value,
+    
+        duration_minute_value
+    
+        ) == SL_STATUS_OK) {
+      return true;
+    }
+  }
+
+  return false;
+}
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_is_supported(
+  const dotdot_unid_t unid,
+  dotdot_endpoint_id_t endpoint_id)
+{
+    uint8_t user_identifier_value;
+    memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+    uint8_t schedule_slotid_value;
+    memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback) {
+      if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    ,
+        user_identifier_value,
+    
+        schedule_slotid_value
+    
+        ) == SL_STATUS_OK) {
+      return true;
+    }
+  }
+
+  return false;
+}
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
@@ -111388,12 +113176,12 @@ static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
     memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
     uint8_t start_year_value;
     memset(&start_year_value, 0x00, sizeof(start_year_value));
-    uint8_t start_month_value;
-    memset(&start_month_value, 0x00, sizeof(start_month_value));
     uint8_t start_day_value;
     memset(&start_day_value, 0x00, sizeof(start_day_value));
     uint8_t start_hour_value;
     memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+    uint8_t start_month_value;
+    memset(&start_month_value, 0x00, sizeof(start_month_value));
     uint8_t start_minute_value;
     memset(&start_minute_value, 0x00, sizeof(start_minute_value));
     uint8_t stop_year_value;
@@ -111406,7 +113194,7 @@ static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
     memset(&stop_hour_value, 0x00, sizeof(stop_hour_value));
     uint8_t stop_minute_value;
     memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
-    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback) {
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
     ,
         set_action_value,
@@ -111417,12 +113205,12 @@ static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
     
         start_year_value,
     
-        start_month_value,
-    
         start_day_value,
     
         start_hour_value,
     
+        start_month_value,
+    
         start_minute_value,
     
         stop_year_value,
@@ -111442,7 +113230,29 @@ static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
 
   return false;
 }
-static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_is_supported(
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_is_supported(
+  const dotdot_unid_t unid,
+  dotdot_endpoint_id_t endpoint_id)
+{
+    uint8_t user_identifier_value;
+    memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+    uint8_t schedule_slotid_value;
+    memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback) {
+      if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    ,
+        user_identifier_value,
+    
+        schedule_slotid_value
+    
+        ) == SL_STATUS_OK) {
+      return true;
+    }
+  }
+
+  return false;
+}
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
@@ -111462,7 +113272,7 @@ static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
     memset(&duration_hour_value, 0x00, sizeof(duration_hour_value));
     uint8_t duration_minute_value;
     memset(&duration_minute_value, 0x00, sizeof(duration_minute_value));
-    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback) {
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
     ,
         set_action_value,
@@ -111488,6 +113298,28 @@ static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
 
   return false;
 }
+static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_is_supported(
+  const dotdot_unid_t unid,
+  dotdot_endpoint_id_t endpoint_id)
+{
+    uint8_t user_identifier_value;
+    memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+    uint8_t schedule_slotid_value;
+    memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+    for (const auto& callback: uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback) {
+      if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    ,
+        user_identifier_value,
+    
+        schedule_slotid_value
+    
+        ) == SL_STATUS_OK) {
+      return true;
+    }
+  }
+
+  return false;
+}
 
 static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_is_supported(
   const dotdot_unid_t unid,
@@ -111525,39 +113357,95 @@ static inline bool uic_mqtt_dotdot_unify_schedule_entry_lock_force_read_attribut
       return true;
     }
   }
-  return false;
-}
-
-// Publishing Supported Commands for UnifyScheduleEntryLock Cluster
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_supported_commands(
-  const dotdot_unid_t unid,
-  dotdot_endpoint_id_t endpoint_id)
-{
-  std::stringstream ss;
-  bool first_command = true;
-  ss.str("");
-
-  // check if there is callback for each command
-  if (uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_is_supported(unid, endpoint_id)) {
+  return false;
+}
+
+// Publishing Supported Commands for UnifyScheduleEntryLock Cluster
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_supported_commands(
+  const dotdot_unid_t unid,
+  dotdot_endpoint_id_t endpoint_id)
+{
+  std::stringstream ss;
+  bool first_command = true;
+  ss.str("");
+
+  // check if there is callback for each command
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_is_supported(unid, endpoint_id)) {
+    if (first_command == false) {
+      ss << ", ";
+    }
+    first_command = false;
+    ss << R"("EnableSet")";
+  }
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_is_supported(unid, endpoint_id)) {
+    if (first_command == false) {
+      ss << ", ";
+    }
+    first_command = false;
+    ss << R"("WeekDayReport")";
+  }
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_is_supported(unid, endpoint_id)) {
+    if (first_command == false) {
+      ss << ", ";
+    }
+    first_command = false;
+    ss << R"("EnableAllSet")";
+  }
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_is_supported(unid, endpoint_id)) {
+    if (first_command == false) {
+      ss << ", ";
+    }
+    first_command = false;
+    ss << R"("YearDayReport")";
+  }
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_is_supported(unid, endpoint_id)) {
+    if (first_command == false) {
+      ss << ", ";
+    }
+    first_command = false;
+    ss << R"("WeekDaySet")";
+  }
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_is_supported(unid, endpoint_id)) {
+    if (first_command == false) {
+      ss << ", ";
+    }
+    first_command = false;
+    ss << R"("DailyRepeatingReport")";
+  }
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_is_supported(unid, endpoint_id)) {
+    if (first_command == false) {
+      ss << ", ";
+    }
+    first_command = false;
+    ss << R"("WeekDayGet")";
+  }
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_is_supported(unid, endpoint_id)) {
+    if (first_command == false) {
+      ss << ", ";
+    }
+    first_command = false;
+    ss << R"("YearDaySet")";
+  }
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_is_supported(unid, endpoint_id)) {
     if (first_command == false) {
       ss << ", ";
     }
     first_command = false;
-    ss << R"("ScheduleEntryLockWeekDayReport")";
+    ss << R"("YearDayGet")";
   }
-  if (uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_is_supported(unid, endpoint_id)) {
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_is_supported(unid, endpoint_id)) {
     if (first_command == false) {
       ss << ", ";
     }
     first_command = false;
-    ss << R"("ScheduleEntryLockYearDayReport")";
+    ss << R"("DailyRepeatingSet")";
   }
-  if (uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_is_supported(unid, endpoint_id)) {
+  if (uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_is_supported(unid, endpoint_id)) {
     if (first_command == false) {
       ss << ", ";
     }
     first_command = false;
-    ss << R"("ScheduleEntryLockDailyRepeatingReport")";
+    ss << R"("DailyRepeatingGet")";
   }
 
   // Check for a WriteAttributes Callback
@@ -118468,11 +120356,299 @@ void uic_mqtt_dotdot_unify_fan_control_publish_generated_turn_off_command(
                     false);
 }
 /**
- * @brief Publishes an incoming/generated ScheduleEntryLockWeekDayReport command for
+ * @brief Publishes an incoming/generated EnableSet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/EnableSet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_enable_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/EnableSet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_enable_set_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated WeekDayReport command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/WeekDayReport
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_week_day_report_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/WeekDayReport";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_week_day_report_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated EnableAllSet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/EnableAllSet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_enable_all_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/EnableAllSet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_enable_all_set_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated YearDayReport command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/YearDayReport
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_year_day_report_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/YearDayReport";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_report_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated WeekDaySet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/WeekDaySet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_week_day_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/WeekDaySet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_week_day_set_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated DailyRepeatingReport command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingReport
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_daily_repeating_report_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingReport";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_report_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated WeekDayGet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/WeekDayGet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_week_day_get_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/WeekDayGet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_week_day_get_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated YearDaySet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/YearDaySet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_year_day_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/YearDaySet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_set_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated YearDayGet command for
  * the UnifyScheduleEntryLock cluster.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockWeekDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/YearDayGet
  *
  * @param unid      The UNID of the node that sent us the command.
  * 
@@ -118482,19 +120658,19 @@ void uic_mqtt_dotdot_unify_fan_control_publish_generated_turn_off_command(
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_lock_week_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_year_day_get_command(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
   
 ) {
   // Create the topic
   std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
                       std::to_string(endpoint) + "/";
-  topic += "UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockWeekDayReport";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/YearDayGet";
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_year_day_get_command(
     fields);
 
   // Publish our command
@@ -118504,11 +120680,11 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
                     false);
 }
 /**
- * @brief Publishes an incoming/generated ScheduleEntryLockYearDayReport command for
+ * @brief Publishes an incoming/generated DailyRepeatingSet command for
  * the UnifyScheduleEntryLock cluster.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockYearDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingSet
  *
  * @param unid      The UNID of the node that sent us the command.
  * 
@@ -118518,19 +120694,19 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_lock_year_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_daily_repeating_set_command(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
   
 ) {
   // Create the topic
   std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
                       std::to_string(endpoint) + "/";
-  topic += "UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockYearDayReport";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingSet";
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_set_command(
     fields);
 
   // Publish our command
@@ -118540,11 +120716,11 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
                     false);
 }
 /**
- * @brief Publishes an incoming/generated ScheduleEntryLockDailyRepeatingReport command for
+ * @brief Publishes an incoming/generated DailyRepeatingGet command for
  * the UnifyScheduleEntryLock cluster.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockDailyRepeatingReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingGet
  *
  * @param unid      The UNID of the node that sent us the command.
  * 
@@ -118554,19 +120730,19 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_lock_daily_repeating_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_daily_repeating_get_command(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
   
 ) {
   // Create the topic
   std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
                       std::to_string(endpoint) + "/";
-  topic += "UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockDailyRepeatingReport";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingGet";
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_get_command(
     fields);
 
   // Publish our command
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.hpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.hpp
index bb5785ac9c..400b1cc45d 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.hpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.hpp
@@ -5070,22 +5070,43 @@ void uic_mqtt_dotdot_on_unify_fan_control_WriteAttributes(
   const size_t message_length);
 
 
+// clang-format on
+
+/**
+ * @brief Retrieves the container with callback pointers for by-unid
+ * /Commands/WriteAttributes messages
+ *
+ * @returns std::set of callbacks.
+ */
+std::set<uic_mqtt_dotdot_unify_thermostat_write_attributes_callback_t> & get_uic_mqtt_dotdot_unify_thermostat_write_attributes_callback();
+
+/**
+ * @brief MQTT Subscribe handler for incoming publications on:
+ * ucl/by-unid/+/+/UnifyThermostat/Commands/WriteAttributes
+ */
+// clang-format off
+void uic_mqtt_dotdot_on_unify_thermostat_WriteAttributes(
+  const char *topic,
+  const char *message,
+  const size_t message_length);
+
+
 // clang-format on
 
 /**
  * @brief Retrieves the container with callbacks pointer for
- * by-unid UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport messages
+ * by-unid UnifyScheduleEntryLock/Commands/EnableSet messages
  *
  * @returns std::set of callbacks.
  */
-std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback();
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback();
 
 /**
  * @brief MQTT Subscribe handler for incoming publications on:
- * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/EnableSet
  */
 // clang-format off
-void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_week_day_report(
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_enable_set(
   const char *topic,
   const char *message,
   const size_t message_length);
@@ -5093,18 +5114,18 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_week_day_r
 
 /**
  * @brief Retrieves the container with callbacks pointer for
- * by-unid UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport messages
+ * by-unid UnifyScheduleEntryLock/Commands/WeekDayReport messages
  *
  * @returns std::set of callbacks.
  */
-std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback();
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback();
 
 /**
  * @brief MQTT Subscribe handler for incoming publications on:
- * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WeekDayReport
  */
 // clang-format off
-void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_year_day_report(
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_report(
   const char *topic,
   const char *message,
   const size_t message_length);
@@ -5112,42 +5133,173 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_year_day_r
 
 /**
  * @brief Retrieves the container with callbacks pointer for
- * by-unid UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport messages
+ * by-unid UnifyScheduleEntryLock/Commands/EnableAllSet messages
  *
  * @returns std::set of callbacks.
  */
-std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback();
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback();
 
 /**
  * @brief MQTT Subscribe handler for incoming publications on:
- * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/EnableAllSet
  */
 // clang-format off
-void uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report(
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_enable_all_set(
   const char *topic,
   const char *message,
   const size_t message_length);
 // clang-format on
 
 /**
- * @brief Retrieves the container with callback pointers for by-unid
- * /Commands/WriteAttributes messages
+ * @brief Retrieves the container with callbacks pointer for
+ * by-unid UnifyScheduleEntryLock/Commands/YearDayReport messages
  *
  * @returns std::set of callbacks.
  */
-std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback_t> & get_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback();
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback();
 
 /**
  * @brief MQTT Subscribe handler for incoming publications on:
- * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WriteAttributes
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/YearDayReport
  */
 // clang-format off
-void uic_mqtt_dotdot_on_unify_schedule_entry_lock_WriteAttributes(
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_report(
+  const char *topic,
+  const char *message,
+  const size_t message_length);
+// clang-format on
+
+/**
+ * @brief Retrieves the container with callbacks pointer for
+ * by-unid UnifyScheduleEntryLock/Commands/WeekDaySet messages
+ *
+ * @returns std::set of callbacks.
+ */
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback();
+
+/**
+ * @brief MQTT Subscribe handler for incoming publications on:
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WeekDaySet
+ */
+// clang-format off
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length);
+// clang-format on
+
+/**
+ * @brief Retrieves the container with callbacks pointer for
+ * by-unid UnifyScheduleEntryLock/Commands/DailyRepeatingReport messages
+ *
+ * @returns std::set of callbacks.
+ */
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback();
+
+/**
+ * @brief MQTT Subscribe handler for incoming publications on:
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/DailyRepeatingReport
+ */
+// clang-format off
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_report(
+  const char *topic,
+  const char *message,
+  const size_t message_length);
+// clang-format on
+
+/**
+ * @brief Retrieves the container with callbacks pointer for
+ * by-unid UnifyScheduleEntryLock/Commands/WeekDayGet messages
+ *
+ * @returns std::set of callbacks.
+ */
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback();
+
+/**
+ * @brief MQTT Subscribe handler for incoming publications on:
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WeekDayGet
+ */
+// clang-format off
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length);
+// clang-format on
+
+/**
+ * @brief Retrieves the container with callbacks pointer for
+ * by-unid UnifyScheduleEntryLock/Commands/YearDaySet messages
+ *
+ * @returns std::set of callbacks.
+ */
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback();
+
+/**
+ * @brief MQTT Subscribe handler for incoming publications on:
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/YearDaySet
+ */
+// clang-format off
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length);
+// clang-format on
+
+/**
+ * @brief Retrieves the container with callbacks pointer for
+ * by-unid UnifyScheduleEntryLock/Commands/YearDayGet messages
+ *
+ * @returns std::set of callbacks.
+ */
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback();
+
+/**
+ * @brief MQTT Subscribe handler for incoming publications on:
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/YearDayGet
+ */
+// clang-format off
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_get(
   const char *topic,
   const char *message,
   const size_t message_length);
+// clang-format on
 
+/**
+ * @brief Retrieves the container with callbacks pointer for
+ * by-unid UnifyScheduleEntryLock/Commands/DailyRepeatingSet messages
+ *
+ * @returns std::set of callbacks.
+ */
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback();
+
+/**
+ * @brief MQTT Subscribe handler for incoming publications on:
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/DailyRepeatingSet
+ */
+// clang-format off
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length);
+// clang-format on
+
+/**
+ * @brief Retrieves the container with callbacks pointer for
+ * by-unid UnifyScheduleEntryLock/Commands/DailyRepeatingGet messages
+ *
+ * @returns std::set of callbacks.
+ */
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t> &get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback();
 
+/**
+ * @brief MQTT Subscribe handler for incoming publications on:
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/DailyRepeatingGet
+ */
+// clang-format off
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length);
 // clang-format on
 
 /**
@@ -5156,14 +5308,14 @@ void uic_mqtt_dotdot_on_unify_schedule_entry_lock_WriteAttributes(
  *
  * @returns std::set of callbacks.
  */
-std::set<uic_mqtt_dotdot_unify_thermostat_write_attributes_callback_t> & get_uic_mqtt_dotdot_unify_thermostat_write_attributes_callback();
+std::set<uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback_t> & get_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback();
 
 /**
  * @brief MQTT Subscribe handler for incoming publications on:
- * ucl/by-unid/+/+/UnifyThermostat/Commands/WriteAttributes
+ * ucl/by-unid/+/+/UnifyScheduleEntryLock/Commands/WriteAttributes
  */
 // clang-format off
-void uic_mqtt_dotdot_on_unify_thermostat_WriteAttributes(
+void uic_mqtt_dotdot_on_unify_schedule_entry_lock_WriteAttributes(
   const char *topic,
   const char *message,
   const size_t message_length);
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.cpp
index 9d5eb3d4a7..1da48e495d 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.cpp
@@ -14523,9 +14523,59 @@ void uic_mqtt_dotdot_parse_unify_thermostat_write_attributes(
 }
 
 
-std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_command(
+std::string get_json_payload_for_unify_schedule_entry_lock_enable_set_command(
   
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
+  
+){
+  bool command_with_no_fields = true;
+
+  // Create a JSON payload from all the parameters
+  nlohmann::json json_payload;
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["UserIdentifier"] = nlohmann::json(fields->user_identifier);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["Enabled"] = nlohmann::json(fields->enabled);
+
+  // Get the string
+  if (command_with_no_fields == true) {
+    return std::string("{}");
+  }
+  // Payload may contain data from end nodes, which we cannot control, thus we handle if there are non-utf8 characters
+  return json_payload.dump(-1, ' ', false, nlohmann::detail::error_handler_t::replace);
+}
+
+
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_set(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+  
+  uint8_t &enabled
+  
+) {
+
+  if (jsn.at("UserIdentifier").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  user_identifier = jsn.at("UserIdentifier").get< uint8_t >();
+      if (jsn.at("Enabled").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  enabled = jsn.at("Enabled").get< uint8_t >();
+    }
+
+
+std::string get_json_payload_for_unify_schedule_entry_lock_week_day_report_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
   
 ){
   bool command_with_no_fields = true;
@@ -14570,7 +14620,7 @@ std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_w
 }
 
 
-void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_week_day_report(
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_report(
   nlohmann::json &jsn,
   uint8_t &user_identifier,
   
@@ -14633,9 +14683,9 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_week_da
     }
 
 
-std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_command(
+std::string get_json_payload_for_unify_schedule_entry_lock_enable_all_set_command(
   
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
   
 ){
   bool command_with_no_fields = true;
@@ -14645,7 +14695,41 @@ std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_y
   command_with_no_fields = false;
   // Single Value
   // Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["SetAction"] = nlohmann::json(fields->set_action);
+  json_payload["Enabled"] = nlohmann::json(fields->enabled);
+
+  // Get the string
+  if (command_with_no_fields == true) {
+    return std::string("{}");
+  }
+  // Payload may contain data from end nodes, which we cannot control, thus we handle if there are non-utf8 characters
+  return json_payload.dump(-1, ' ', false, nlohmann::detail::error_handler_t::replace);
+}
+
+
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_all_set(
+  nlohmann::json &jsn,
+  uint8_t &enabled
+  
+) {
+
+  if (jsn.at("Enabled").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  enabled = jsn.at("Enabled").get< uint8_t >();
+    }
+
+
+std::string get_json_payload_for_unify_schedule_entry_lock_year_day_report_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+  
+){
+  bool command_with_no_fields = true;
+
+  // Create a JSON payload from all the parameters
+  nlohmann::json json_payload;
   command_with_no_fields = false;
   // Single Value
   // Non-enum and non-bitmask (struct, string or scalar)
@@ -14704,10 +14788,8 @@ std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_y
 }
 
 
-void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_year_day_report(
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_report(
   nlohmann::json &jsn,
-  uint8_t &set_action,
-  
   uint8_t &user_identifier,
   
   uint8_t &schedule_slotid,
@@ -14734,13 +14816,7 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_year_da
   
 ) {
 
-  if (jsn.at("SetAction").is_null()) {
-    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
-    return;
-  }
-        
-  set_action = jsn.at("SetAction").get< uint8_t >();
-      if (jsn.at("UserIdentifier").is_null()) {
+  if (jsn.at("UserIdentifier").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
@@ -14815,9 +14891,9 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_year_da
     }
 
 
-std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_command(
+std::string get_json_payload_for_unify_schedule_entry_lock_week_day_set_command(
   
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
   
 ){
   bool command_with_no_fields = true;
@@ -14839,7 +14915,7 @@ std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_d
   command_with_no_fields = false;
   // Single Value
   // Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["WeekDayBitmask"] = nlohmann::json(fields->week_day_bitmask);
+  json_payload["DayOfWeek"] = nlohmann::json(fields->day_of_week);
   command_with_no_fields = false;
   // Single Value
   // Non-enum and non-bitmask (struct, string or scalar)
@@ -14847,19 +14923,15 @@ std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_d
   command_with_no_fields = false;
   // Single Value
   // Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["StartMonth"] = nlohmann::json(fields->start_month);
-  command_with_no_fields = false;
-  // Single Value
-  // Non-enum and non-bitmask (struct, string or scalar)
   json_payload["StartMinute"] = nlohmann::json(fields->start_minute);
   command_with_no_fields = false;
   // Single Value
   // Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["DurationHour"] = nlohmann::json(fields->duration_hour);
+  json_payload["StopHour"] = nlohmann::json(fields->stop_hour);
   command_with_no_fields = false;
   // Single Value
   // Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["DurationMinute"] = nlohmann::json(fields->duration_minute);
+  json_payload["StopMinute"] = nlohmann::json(fields->stop_minute);
 
   // Get the string
   if (command_with_no_fields == true) {
@@ -14870,7 +14942,7 @@ std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_d
 }
 
 
-void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report(
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_set(
   nlohmann::json &jsn,
   uint8_t &set_action,
   
@@ -14878,15 +14950,15 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_r
   
   uint8_t &schedule_slotid,
   
-  uint8_t &week_day_bitmask,
+  uint8_t &day_of_week,
   
   uint8_t &start_hour,
   
   uint8_t &start_minute,
   
-  uint8_t &duration_hour,
+  uint8_t &stop_hour,
   
-  uint8_t &duration_minute
+  uint8_t &stop_minute
   
 ) {
 
@@ -14908,24 +14980,128 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_r
   }
         
   schedule_slotid = jsn.at("ScheduleSlotID").get< uint8_t >();
-      if (jsn.at("WeekDayBitmask").is_null()) {
+      if (jsn.at("DayOfWeek").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  week_day_bitmask = jsn.at("WeekDayBitmask").get< uint8_t >();
+  day_of_week = jsn.at("DayOfWeek").get< uint8_t >();
       if (jsn.at("StartHour").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
   start_hour = jsn.at("StartHour").get< uint8_t >();
-      if (jsn.at("StartMonth").is_null()) {
+      if (jsn.at("StartMinute").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  start_month = jsn.at("StartMonth").get< uint8_t >();
+  start_minute = jsn.at("StartMinute").get< uint8_t >();
+      if (jsn.at("StopHour").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  stop_hour = jsn.at("StopHour").get< uint8_t >();
+      if (jsn.at("StopMinute").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  stop_minute = jsn.at("StopMinute").get< uint8_t >();
+    }
+
+
+std::string get_json_payload_for_unify_schedule_entry_lock_daily_repeating_report_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+  
+){
+  bool command_with_no_fields = true;
+
+  // Create a JSON payload from all the parameters
+  nlohmann::json json_payload;
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["UserIdentifier"] = nlohmann::json(fields->user_identifier);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["ScheduleSlotID"] = nlohmann::json(fields->schedule_slotid);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["WeekDayBitmask"] = nlohmann::json(fields->week_day_bitmask);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StartHour"] = nlohmann::json(fields->start_hour);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StartMinute"] = nlohmann::json(fields->start_minute);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["DurationHour"] = nlohmann::json(fields->duration_hour);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["DurationMinute"] = nlohmann::json(fields->duration_minute);
+
+  // Get the string
+  if (command_with_no_fields == true) {
+    return std::string("{}");
+  }
+  // Payload may contain data from end nodes, which we cannot control, thus we handle if there are non-utf8 characters
+  return json_payload.dump(-1, ' ', false, nlohmann::detail::error_handler_t::replace);
+}
+
+
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_report(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+  
+  uint8_t &schedule_slotid,
+  
+  uint8_t &week_day_bitmask,
+  
+  uint8_t &start_hour,
+  
+  uint8_t &start_minute,
+  
+  uint8_t &duration_hour,
+  
+  uint8_t &duration_minute
+  
+) {
+
+  if (jsn.at("UserIdentifier").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  user_identifier = jsn.at("UserIdentifier").get< uint8_t >();
+      if (jsn.at("ScheduleSlotID").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  schedule_slotid = jsn.at("ScheduleSlotID").get< uint8_t >();
+      if (jsn.at("WeekDayBitmask").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  week_day_bitmask = jsn.at("WeekDayBitmask").get< uint8_t >();
+      if (jsn.at("StartHour").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  start_hour = jsn.at("StartHour").get< uint8_t >();
       if (jsn.at("StartMinute").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14947,6 +15123,460 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_r
     }
 
 
+std::string get_json_payload_for_unify_schedule_entry_lock_week_day_get_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+  
+){
+  bool command_with_no_fields = true;
+
+  // Create a JSON payload from all the parameters
+  nlohmann::json json_payload;
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["UserIdentifier"] = nlohmann::json(fields->user_identifier);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["ScheduleSlotID"] = nlohmann::json(fields->schedule_slotid);
+
+  // Get the string
+  if (command_with_no_fields == true) {
+    return std::string("{}");
+  }
+  // Payload may contain data from end nodes, which we cannot control, thus we handle if there are non-utf8 characters
+  return json_payload.dump(-1, ' ', false, nlohmann::detail::error_handler_t::replace);
+}
+
+
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_get(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+  
+  uint8_t &schedule_slotid
+  
+) {
+
+  if (jsn.at("UserIdentifier").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  user_identifier = jsn.at("UserIdentifier").get< uint8_t >();
+      if (jsn.at("ScheduleSlotID").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  schedule_slotid = jsn.at("ScheduleSlotID").get< uint8_t >();
+    }
+
+
+std::string get_json_payload_for_unify_schedule_entry_lock_year_day_set_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+  
+){
+  bool command_with_no_fields = true;
+
+  // Create a JSON payload from all the parameters
+  nlohmann::json json_payload;
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["SetAction"] = nlohmann::json(fields->set_action);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["UserIdentifier"] = nlohmann::json(fields->user_identifier);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["ScheduleSlotID"] = nlohmann::json(fields->schedule_slotid);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StartYear"] = nlohmann::json(fields->start_year);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StartDay"] = nlohmann::json(fields->start_day);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StartHour"] = nlohmann::json(fields->start_hour);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StartMonth"] = nlohmann::json(fields->start_month);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StartMinute"] = nlohmann::json(fields->start_minute);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StopYear"] = nlohmann::json(fields->stop_year);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StopMonth"] = nlohmann::json(fields->stop_month);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StopDay"] = nlohmann::json(fields->stop_day);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StopHour"] = nlohmann::json(fields->stop_hour);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StopMinute"] = nlohmann::json(fields->stop_minute);
+
+  // Get the string
+  if (command_with_no_fields == true) {
+    return std::string("{}");
+  }
+  // Payload may contain data from end nodes, which we cannot control, thus we handle if there are non-utf8 characters
+  return json_payload.dump(-1, ' ', false, nlohmann::detail::error_handler_t::replace);
+}
+
+
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_set(
+  nlohmann::json &jsn,
+  uint8_t &set_action,
+  
+  uint8_t &user_identifier,
+  
+  uint8_t &schedule_slotid,
+  
+  uint8_t &start_year,
+  
+  uint8_t &start_day,
+  
+  uint8_t &start_hour,
+  
+  uint8_t &start_month,
+  
+  uint8_t &start_minute,
+  
+  uint8_t &stop_year,
+  
+  uint8_t &stop_month,
+  
+  uint8_t &stop_day,
+  
+  uint8_t &stop_hour,
+  
+  uint8_t &stop_minute
+  
+) {
+
+  if (jsn.at("SetAction").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  set_action = jsn.at("SetAction").get< uint8_t >();
+      if (jsn.at("UserIdentifier").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  user_identifier = jsn.at("UserIdentifier").get< uint8_t >();
+      if (jsn.at("ScheduleSlotID").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  schedule_slotid = jsn.at("ScheduleSlotID").get< uint8_t >();
+      if (jsn.at("StartYear").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  start_year = jsn.at("StartYear").get< uint8_t >();
+      if (jsn.at("StartDay").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  start_day = jsn.at("StartDay").get< uint8_t >();
+      if (jsn.at("StartHour").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  start_hour = jsn.at("StartHour").get< uint8_t >();
+      if (jsn.at("StartMonth").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  start_month = jsn.at("StartMonth").get< uint8_t >();
+      if (jsn.at("StartMinute").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  start_minute = jsn.at("StartMinute").get< uint8_t >();
+      if (jsn.at("StopYear").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  stop_year = jsn.at("StopYear").get< uint8_t >();
+      if (jsn.at("StopMonth").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  stop_month = jsn.at("StopMonth").get< uint8_t >();
+      if (jsn.at("StopDay").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  stop_day = jsn.at("StopDay").get< uint8_t >();
+      if (jsn.at("StopHour").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  stop_hour = jsn.at("StopHour").get< uint8_t >();
+      if (jsn.at("StopMinute").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  stop_minute = jsn.at("StopMinute").get< uint8_t >();
+    }
+
+
+std::string get_json_payload_for_unify_schedule_entry_lock_year_day_get_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
+  
+){
+  bool command_with_no_fields = true;
+
+  // Create a JSON payload from all the parameters
+  nlohmann::json json_payload;
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["UserIdentifier"] = nlohmann::json(fields->user_identifier);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["ScheduleSlotID"] = nlohmann::json(fields->schedule_slotid);
+
+  // Get the string
+  if (command_with_no_fields == true) {
+    return std::string("{}");
+  }
+  // Payload may contain data from end nodes, which we cannot control, thus we handle if there are non-utf8 characters
+  return json_payload.dump(-1, ' ', false, nlohmann::detail::error_handler_t::replace);
+}
+
+
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_get(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+  
+  uint8_t &schedule_slotid
+  
+) {
+
+  if (jsn.at("UserIdentifier").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  user_identifier = jsn.at("UserIdentifier").get< uint8_t >();
+      if (jsn.at("ScheduleSlotID").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  schedule_slotid = jsn.at("ScheduleSlotID").get< uint8_t >();
+    }
+
+
+std::string get_json_payload_for_unify_schedule_entry_lock_daily_repeating_set_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
+  
+){
+  bool command_with_no_fields = true;
+
+  // Create a JSON payload from all the parameters
+  nlohmann::json json_payload;
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["SetAction"] = nlohmann::json(fields->set_action);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["UserIdentifier"] = nlohmann::json(fields->user_identifier);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["ScheduleSlotID"] = nlohmann::json(fields->schedule_slotid);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["WeekDayBitmask"] = nlohmann::json(fields->week_day_bitmask);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StartHour"] = nlohmann::json(fields->start_hour);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["StartMinute"] = nlohmann::json(fields->start_minute);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["DurationHour"] = nlohmann::json(fields->duration_hour);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["DurationMinute"] = nlohmann::json(fields->duration_minute);
+
+  // Get the string
+  if (command_with_no_fields == true) {
+    return std::string("{}");
+  }
+  // Payload may contain data from end nodes, which we cannot control, thus we handle if there are non-utf8 characters
+  return json_payload.dump(-1, ' ', false, nlohmann::detail::error_handler_t::replace);
+}
+
+
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_set(
+  nlohmann::json &jsn,
+  uint8_t &set_action,
+  
+  uint8_t &user_identifier,
+  
+  uint8_t &schedule_slotid,
+  
+  uint8_t &week_day_bitmask,
+  
+  uint8_t &start_hour,
+  
+  uint8_t &start_minute,
+  
+  uint8_t &duration_hour,
+  
+  uint8_t &duration_minute
+  
+) {
+
+  if (jsn.at("SetAction").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  set_action = jsn.at("SetAction").get< uint8_t >();
+      if (jsn.at("UserIdentifier").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  user_identifier = jsn.at("UserIdentifier").get< uint8_t >();
+      if (jsn.at("ScheduleSlotID").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  schedule_slotid = jsn.at("ScheduleSlotID").get< uint8_t >();
+      if (jsn.at("WeekDayBitmask").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  week_day_bitmask = jsn.at("WeekDayBitmask").get< uint8_t >();
+      if (jsn.at("StartHour").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  start_hour = jsn.at("StartHour").get< uint8_t >();
+      if (jsn.at("StartMinute").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  start_minute = jsn.at("StartMinute").get< uint8_t >();
+      if (jsn.at("DurationHour").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  duration_hour = jsn.at("DurationHour").get< uint8_t >();
+      if (jsn.at("DurationMinute").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  duration_minute = jsn.at("DurationMinute").get< uint8_t >();
+    }
+
+
+std::string get_json_payload_for_unify_schedule_entry_lock_daily_repeating_get_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
+  
+){
+  bool command_with_no_fields = true;
+
+  // Create a JSON payload from all the parameters
+  nlohmann::json json_payload;
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["UserIdentifier"] = nlohmann::json(fields->user_identifier);
+  command_with_no_fields = false;
+  // Single Value
+  // Non-enum and non-bitmask (struct, string or scalar)
+  json_payload["ScheduleSlotID"] = nlohmann::json(fields->schedule_slotid);
+
+  // Get the string
+  if (command_with_no_fields == true) {
+    return std::string("{}");
+  }
+  // Payload may contain data from end nodes, which we cannot control, thus we handle if there are non-utf8 characters
+  return json_payload.dump(-1, ' ', false, nlohmann::detail::error_handler_t::replace);
+}
+
+
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_get(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+  
+  uint8_t &schedule_slotid
+  
+) {
+
+  if (jsn.at("UserIdentifier").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  user_identifier = jsn.at("UserIdentifier").get< uint8_t >();
+      if (jsn.at("ScheduleSlotID").is_null()) {
+    sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
+    return;
+  }
+        
+  schedule_slotid = jsn.at("ScheduleSlotID").get< uint8_t >();
+    }
+
+
 /**
  * @brief JSON parser for ::WriteAttributes command arguments.
  *
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.hpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.hpp
index 31a79e1ade..7213b5a3b8 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.hpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.hpp
@@ -6031,25 +6031,55 @@ void uic_mqtt_dotdot_parse_unify_thermostat_write_attributes(
 
 /**
  * @brief Private helper function that will create a JSON string based on the
- * fields of a UnifyScheduleEntryLock ScheduleEntryLockWeekDayReport command
+ * fields of a UnifyScheduleEntryLock EnableSet command
  * 
  * @param fields       Struct pointer with the list of fields for the command
  * 
  * @returns std::string that contains JSON payload
  */
-std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_command(
+std::string get_json_payload_for_unify_schedule_entry_lock_enable_set_command(
   
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
   
 );
 
 
 /**
- * @brief JSON parser for UnifyScheduleEntryLock ScheduleEntryLockWeekDayReport command arguments.
+ * @brief JSON parser for UnifyScheduleEntryLock EnableSet command arguments.
  *
  * Parse incoming JSON object to populate command arguments passed in by reference.
  */
-void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_week_day_report(
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_set(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+
+  uint8_t &enabled
+
+);
+
+
+
+/**
+ * @brief Private helper function that will create a JSON string based on the
+ * fields of a UnifyScheduleEntryLock WeekDayReport command
+ * 
+ * @param fields       Struct pointer with the list of fields for the command
+ * 
+ * @returns std::string that contains JSON payload
+ */
+std::string get_json_payload_for_unify_schedule_entry_lock_week_day_report_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
+  
+);
+
+
+/**
+ * @brief JSON parser for UnifyScheduleEntryLock WeekDayReport command arguments.
+ *
+ * Parse incoming JSON object to populate command arguments passed in by reference.
+ */
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_report(
   nlohmann::json &jsn,
   uint8_t &user_identifier,
 
@@ -6071,28 +6101,54 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_week_da
 
 /**
  * @brief Private helper function that will create a JSON string based on the
- * fields of a UnifyScheduleEntryLock ScheduleEntryLockYearDayReport command
+ * fields of a UnifyScheduleEntryLock EnableAllSet command
  * 
  * @param fields       Struct pointer with the list of fields for the command
  * 
  * @returns std::string that contains JSON payload
  */
-std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_command(
+std::string get_json_payload_for_unify_schedule_entry_lock_enable_all_set_command(
   
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
   
 );
 
 
 /**
- * @brief JSON parser for UnifyScheduleEntryLock ScheduleEntryLockYearDayReport command arguments.
+ * @brief JSON parser for UnifyScheduleEntryLock EnableAllSet command arguments.
  *
  * Parse incoming JSON object to populate command arguments passed in by reference.
  */
-void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_year_day_report(
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_all_set(
   nlohmann::json &jsn,
-  uint8_t &set_action,
+  uint8_t &enabled
+
+);
+
+
+
+/**
+ * @brief Private helper function that will create a JSON string based on the
+ * fields of a UnifyScheduleEntryLock YearDayReport command
+ * 
+ * @param fields       Struct pointer with the list of fields for the command
+ * 
+ * @returns std::string that contains JSON payload
+ */
+std::string get_json_payload_for_unify_schedule_entry_lock_year_day_report_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+  
+);
 
+
+/**
+ * @brief JSON parser for UnifyScheduleEntryLock YearDayReport command arguments.
+ *
+ * Parse incoming JSON object to populate command arguments passed in by reference.
+ */
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_report(
+  nlohmann::json &jsn,
   uint8_t &user_identifier,
 
   uint8_t &schedule_slotid,
@@ -6123,25 +6179,25 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_year_da
 
 /**
  * @brief Private helper function that will create a JSON string based on the
- * fields of a UnifyScheduleEntryLock ScheduleEntryLockDailyRepeatingReport command
+ * fields of a UnifyScheduleEntryLock WeekDaySet command
  * 
  * @param fields       Struct pointer with the list of fields for the command
  * 
  * @returns std::string that contains JSON payload
  */
-std::string get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_command(
+std::string get_json_payload_for_unify_schedule_entry_lock_week_day_set_command(
   
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
   
 );
 
 
 /**
- * @brief JSON parser for UnifyScheduleEntryLock ScheduleEntryLockDailyRepeatingReport command arguments.
+ * @brief JSON parser for UnifyScheduleEntryLock WeekDaySet command arguments.
  *
  * Parse incoming JSON object to populate command arguments passed in by reference.
  */
-void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report(
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_set(
   nlohmann::json &jsn,
   uint8_t &set_action,
 
@@ -6149,6 +6205,46 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_r
 
   uint8_t &schedule_slotid,
 
+  uint8_t &day_of_week,
+
+  uint8_t &start_hour,
+
+  uint8_t &start_minute,
+
+  uint8_t &stop_hour,
+
+  uint8_t &stop_minute
+
+);
+
+
+
+/**
+ * @brief Private helper function that will create a JSON string based on the
+ * fields of a UnifyScheduleEntryLock DailyRepeatingReport command
+ * 
+ * @param fields       Struct pointer with the list of fields for the command
+ * 
+ * @returns std::string that contains JSON payload
+ */
+std::string get_json_payload_for_unify_schedule_entry_lock_daily_repeating_report_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+  
+);
+
+
+/**
+ * @brief JSON parser for UnifyScheduleEntryLock DailyRepeatingReport command arguments.
+ *
+ * Parse incoming JSON object to populate command arguments passed in by reference.
+ */
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_report(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+
+  uint8_t &schedule_slotid,
+
   uint8_t &week_day_bitmask,
 
   uint8_t &start_hour,
@@ -6163,6 +6259,190 @@ void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_r
 
 
 
+/**
+ * @brief Private helper function that will create a JSON string based on the
+ * fields of a UnifyScheduleEntryLock WeekDayGet command
+ * 
+ * @param fields       Struct pointer with the list of fields for the command
+ * 
+ * @returns std::string that contains JSON payload
+ */
+std::string get_json_payload_for_unify_schedule_entry_lock_week_day_get_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+  
+);
+
+
+/**
+ * @brief JSON parser for UnifyScheduleEntryLock WeekDayGet command arguments.
+ *
+ * Parse incoming JSON object to populate command arguments passed in by reference.
+ */
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_get(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+
+  uint8_t &schedule_slotid
+
+);
+
+
+
+/**
+ * @brief Private helper function that will create a JSON string based on the
+ * fields of a UnifyScheduleEntryLock YearDaySet command
+ * 
+ * @param fields       Struct pointer with the list of fields for the command
+ * 
+ * @returns std::string that contains JSON payload
+ */
+std::string get_json_payload_for_unify_schedule_entry_lock_year_day_set_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+  
+);
+
+
+/**
+ * @brief JSON parser for UnifyScheduleEntryLock YearDaySet command arguments.
+ *
+ * Parse incoming JSON object to populate command arguments passed in by reference.
+ */
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_set(
+  nlohmann::json &jsn,
+  uint8_t &set_action,
+
+  uint8_t &user_identifier,
+
+  uint8_t &schedule_slotid,
+
+  uint8_t &start_year,
+
+  uint8_t &start_day,
+
+  uint8_t &start_hour,
+
+  uint8_t &start_month,
+
+  uint8_t &start_minute,
+
+  uint8_t &stop_year,
+
+  uint8_t &stop_month,
+
+  uint8_t &stop_day,
+
+  uint8_t &stop_hour,
+
+  uint8_t &stop_minute
+
+);
+
+
+
+/**
+ * @brief Private helper function that will create a JSON string based on the
+ * fields of a UnifyScheduleEntryLock YearDayGet command
+ * 
+ * @param fields       Struct pointer with the list of fields for the command
+ * 
+ * @returns std::string that contains JSON payload
+ */
+std::string get_json_payload_for_unify_schedule_entry_lock_year_day_get_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
+  
+);
+
+
+/**
+ * @brief JSON parser for UnifyScheduleEntryLock YearDayGet command arguments.
+ *
+ * Parse incoming JSON object to populate command arguments passed in by reference.
+ */
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_get(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+
+  uint8_t &schedule_slotid
+
+);
+
+
+
+/**
+ * @brief Private helper function that will create a JSON string based on the
+ * fields of a UnifyScheduleEntryLock DailyRepeatingSet command
+ * 
+ * @param fields       Struct pointer with the list of fields for the command
+ * 
+ * @returns std::string that contains JSON payload
+ */
+std::string get_json_payload_for_unify_schedule_entry_lock_daily_repeating_set_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
+  
+);
+
+
+/**
+ * @brief JSON parser for UnifyScheduleEntryLock DailyRepeatingSet command arguments.
+ *
+ * Parse incoming JSON object to populate command arguments passed in by reference.
+ */
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_set(
+  nlohmann::json &jsn,
+  uint8_t &set_action,
+
+  uint8_t &user_identifier,
+
+  uint8_t &schedule_slotid,
+
+  uint8_t &week_day_bitmask,
+
+  uint8_t &start_hour,
+
+  uint8_t &start_minute,
+
+  uint8_t &duration_hour,
+
+  uint8_t &duration_minute
+
+);
+
+
+
+/**
+ * @brief Private helper function that will create a JSON string based on the
+ * fields of a UnifyScheduleEntryLock DailyRepeatingGet command
+ * 
+ * @param fields       Struct pointer with the list of fields for the command
+ * 
+ * @returns std::string that contains JSON payload
+ */
+std::string get_json_payload_for_unify_schedule_entry_lock_daily_repeating_get_command(
+  
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
+  
+);
+
+
+/**
+ * @brief JSON parser for UnifyScheduleEntryLock DailyRepeatingGet command arguments.
+ *
+ * Parse incoming JSON object to populate command arguments passed in by reference.
+ */
+void uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_get(
+  nlohmann::json &jsn,
+  uint8_t &user_identifier,
+
+  uint8_t &schedule_slotid
+
+);
+
+
+
 /**
  * @brief JSON parser for UnifyScheduleEntryLock WriteAttributes command arguments.
  *
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_generated_commands.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_generated_commands.cpp
index 03c7efb978..581108431c 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_generated_commands.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_generated_commands.cpp
@@ -11236,11 +11236,11 @@ void uic_mqtt_dotdot_unify_thermostat_publish_generated_write_attributes_command
 }
 
 /**
- * @brief Publishes an incoming/generated ScheduleEntryLockWeekDayReport command for
+ * @brief Publishes an incoming/generated EnableSet command for
  * the UnifyScheduleEntryLock cluster.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockWeekDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/EnableSet
  *
  * @param unid      The UNID of the node that sent us the command.
  * 
@@ -11250,19 +11250,19 @@ void uic_mqtt_dotdot_unify_thermostat_publish_generated_write_attributes_command
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_lock_week_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_enable_set_command(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
   
 ) {
   // Create the topic
   std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
                       std::to_string(endpoint) + "/";
-  topic += "UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockWeekDayReport";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/EnableSet";
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_enable_set_command(
     fields);
 
   // Publish our command
@@ -11272,11 +11272,11 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
                     false);
 }
 /**
- * @brief Publishes an incoming/generated ScheduleEntryLockYearDayReport command for
+ * @brief Publishes an incoming/generated WeekDayReport command for
  * the UnifyScheduleEntryLock cluster.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockYearDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/WeekDayReport
  *
  * @param unid      The UNID of the node that sent us the command.
  * 
@@ -11286,19 +11286,19 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_lock_year_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_week_day_report_command(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
   
 ) {
   // Create the topic
   std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
                       std::to_string(endpoint) + "/";
-  topic += "UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockYearDayReport";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/WeekDayReport";
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_week_day_report_command(
     fields);
 
   // Publish our command
@@ -11308,11 +11308,11 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
                     false);
 }
 /**
- * @brief Publishes an incoming/generated ScheduleEntryLockDailyRepeatingReport command for
+ * @brief Publishes an incoming/generated EnableAllSet command for
  * the UnifyScheduleEntryLock cluster.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockDailyRepeatingReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/EnableAllSet
  *
  * @param unid      The UNID of the node that sent us the command.
  * 
@@ -11322,19 +11322,307 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_schedule_entry_lock_daily_repeating_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_enable_all_set_command(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
   
 ) {
   // Create the topic
   std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
                       std::to_string(endpoint) + "/";
-  topic += "UnifyScheduleEntryLock/GeneratedCommands/ScheduleEntryLockDailyRepeatingReport";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/EnableAllSet";
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_enable_all_set_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated YearDayReport command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/YearDayReport
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_year_day_report_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/YearDayReport";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_report_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated WeekDaySet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/WeekDaySet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_week_day_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/WeekDaySet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_week_day_set_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated DailyRepeatingReport command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingReport
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_daily_repeating_report_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingReport";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_report_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated WeekDayGet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/WeekDayGet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_week_day_get_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/WeekDayGet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_week_day_get_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated YearDaySet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/YearDaySet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_year_day_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/YearDaySet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_set_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated YearDayGet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/YearDayGet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_year_day_get_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/YearDayGet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_get_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated DailyRepeatingSet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingSet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_daily_repeating_set_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingSet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_set_command(
+    fields);
+
+  // Publish our command
+  uic_mqtt_publish(topic.c_str(),
+                    payload.c_str(),
+                    payload.size(),
+                    false);
+}
+/**
+ * @brief Publishes an incoming/generated DailyRepeatingGet command for
+ * the UnifyScheduleEntryLock cluster.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingGet
+ *
+ * @param unid      The UNID of the node that sent us the command.
+ * 
+ * @param endpoint  The Endpoint ID of the node that sent us the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_generated_daily_repeating_get_command(
+  const dotdot_unid_t unid,
+  const dotdot_endpoint_id_t endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
+                      std::to_string(endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/GeneratedCommands/DailyRepeatingGet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_get_command(
     fields);
 
   // Publish our command
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_group_commands.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_group_commands.cpp
index 76008f3cbf..defeb60be8 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_group_commands.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_group_commands.cpp
@@ -368,9 +368,17 @@ static uic_mqtt_dotdot_by_group_unify_fan_control_write_attributes_callback_t ui
 static uic_mqtt_dotdot_by_group_unify_thermostat_write_attributes_callback_t uic_mqtt_dotdot_by_group_unify_thermostat_write_attributes_callback = nullptr;
 
 
-static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback = nullptr;
-static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback = nullptr;
-static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback = nullptr;
+static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback = nullptr;
 static uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback = nullptr;
 
 
@@ -1894,21 +1902,69 @@ void uic_mqtt_dotdot_by_group_unify_thermostat_write_attributes_callback_set(
 
 // Callbacks setters
 
-void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback)
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback_t callback)
 {
-  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback = callback;
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback = callback;
 }
 
 
-void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback)
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback_t callback)
 {
-  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback = callback;
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback = callback;
 }
 
 
-void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback)
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback_t callback)
 {
-  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback = callback;
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback = callback;
+}
+
+
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback_t callback)
+{
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback = callback;
+}
+
+
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback_t callback)
+{
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback = callback;
+}
+
+
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback_t callback)
+{
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback = callback;
+}
+
+
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback_t callback)
+{
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback = callback;
+}
+
+
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback_t callback)
+{
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback = callback;
+}
+
+
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback_t callback)
+{
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback = callback;
+}
+
+
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback_t callback)
+{
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback = callback;
+}
+
+
+void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback_set(const uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback_t callback)
+{
+  uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback = callback;
 }
 
 void uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback_set(
@@ -23460,13 +23516,104 @@ sl_status_t uic_mqtt_dotdot_by_group_unify_thermostat_init()
 
 
 
-// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport
-static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report(
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/EnableSet
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_enable_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback == nullptr)) {
+    return;
+  }
+  if (message_length == 0) {
+    return;
+  }
+
+  dotdot_group_id_t group_id = 0U;
+  if(!uic_dotdot_mqtt::parse_topic_group_id(topic,group_id)) {
+    sl_log_debug(LOG_TAG,
+                "Failed to parse GroupId from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  // Pass to command-specific callback if set. Otherwise, pass to
+  // group-dispatch callback
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback != nullptr) {
+
+    
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t fields;
+
+
+      nlohmann::json jsn;
+      try {
+        jsn = nlohmann::json::parse(std::string(message));
+
+      
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_set(
+          jsn,
+          fields.user_identifier,
+              
+          fields.enabled
+              );
+
+      // Populate list fields from vector or string types
+      
+
+      } catch (const nlohmann::json::parse_error& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "EnableSet");
+        return;
+      } catch (const nlohmann::json::exception& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableSet", e.what());
+        return;
+      } catch (const std::exception& e) {
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableSet", "");
+        return;
+      }
+
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback(
+        group_id,
+        &fields
+      );
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback().empty())) {
+    // group-dispatch callback only called if the command-specific by-unid
+    // callback is set
+    try {
+      nlohmann::json jsn = nlohmann::json::parse(std::string(message));
+      if (jsn.find("UserIdentifier") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::EnableSet: Missing command-argument: UserIdentifier\n");
+        return;
+      }
+      if (jsn.find("Enabled") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::EnableSet: Missing command-argument: Enabled\n");
+        return;
+      }
+
+      group_dispatch_callback(
+        group_id,
+        "UnifyScheduleEntryLock",
+        "EnableSet",
+        message,
+        message_length,
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_enable_set);
+
+    } catch (...) {
+      sl_log_debug(LOG_TAG, "EnableSet: Unable to parse JSON payload.\n");
+      return;
+    }
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/WeekDayReport
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_week_day_report(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback == nullptr)) {
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback == nullptr)) {
     return;
   }
   if (message_length == 0) {
@@ -23483,10 +23630,10 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
 
   // Pass to command-specific callback if set. Otherwise, pass to
   // group-dispatch callback
-  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback != nullptr) {
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback != nullptr) {
 
     
-    uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t fields;
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t fields;
 
 
       nlohmann::json jsn;
@@ -23494,7 +23641,7 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
         jsn = nlohmann::json::parse(std::string(message));
 
       
-        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_week_day_report(
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_report(
           jsn,
           fields.user_identifier,
               
@@ -23516,78 +23663,78 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
 
       } catch (const nlohmann::json::parse_error& e) {
         // Catch JSON object field parsing errors
-        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "ScheduleEntryLockWeekDayReport");
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WeekDayReport");
         return;
       } catch (const nlohmann::json::exception& e) {
         // Catch JSON object field parsing errors
-        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockWeekDayReport", e.what());
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayReport", e.what());
         return;
       } catch (const std::exception& e) {
-        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockWeekDayReport", "");
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayReport", "");
         return;
       }
 
-      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback(
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback(
         group_id,
         &fields
       );
-  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback().empty())) {
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback().empty())) {
     // group-dispatch callback only called if the command-specific by-unid
     // callback is set
     try {
       nlohmann::json jsn = nlohmann::json::parse(std::string(message));
       if (jsn.find("UserIdentifier") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockWeekDayReport: Missing command-argument: UserIdentifier\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDayReport: Missing command-argument: UserIdentifier\n");
         return;
       }
       if (jsn.find("ScheduleSlotID") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockWeekDayReport: Missing command-argument: ScheduleSlotID\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDayReport: Missing command-argument: ScheduleSlotID\n");
         return;
       }
       if (jsn.find("DayOfWeek") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockWeekDayReport: Missing command-argument: DayOfWeek\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDayReport: Missing command-argument: DayOfWeek\n");
         return;
       }
       if (jsn.find("StartHour") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockWeekDayReport: Missing command-argument: StartHour\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDayReport: Missing command-argument: StartHour\n");
         return;
       }
       if (jsn.find("StartMinute") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockWeekDayReport: Missing command-argument: StartMinute\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDayReport: Missing command-argument: StartMinute\n");
         return;
       }
       if (jsn.find("StopHour") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockWeekDayReport: Missing command-argument: StopHour\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDayReport: Missing command-argument: StopHour\n");
         return;
       }
       if (jsn.find("StopMinute") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockWeekDayReport: Missing command-argument: StopMinute\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDayReport: Missing command-argument: StopMinute\n");
         return;
       }
 
       group_dispatch_callback(
         group_id,
         "UnifyScheduleEntryLock",
-        "ScheduleEntryLockWeekDayReport",
+        "WeekDayReport",
         message,
         message_length,
-        uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_week_day_report);
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_report);
 
     } catch (...) {
-      sl_log_debug(LOG_TAG, "ScheduleEntryLockWeekDayReport: Unable to parse JSON payload.\n");
+      sl_log_debug(LOG_TAG, "WeekDayReport: Unable to parse JSON payload.\n");
       return;
     }
   }
 
 }
 
-// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport
-static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report(
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/EnableAllSet
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_enable_all_set(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback == nullptr)) {
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback == nullptr)) {
     return;
   }
   if (message_length == 0) {
@@ -23604,10 +23751,10 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
 
   // Pass to command-specific callback if set. Otherwise, pass to
   // group-dispatch callback
-  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback != nullptr) {
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback != nullptr) {
 
     
-    uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t fields;
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t fields;
 
 
       nlohmann::json jsn;
@@ -23615,10 +23762,93 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
         jsn = nlohmann::json::parse(std::string(message));
 
       
-        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_year_day_report(
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_enable_all_set(
+          jsn,
+          fields.enabled
+              );
+
+      // Populate list fields from vector or string types
+      
+
+      } catch (const nlohmann::json::parse_error& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "EnableAllSet");
+        return;
+      } catch (const nlohmann::json::exception& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableAllSet", e.what());
+        return;
+      } catch (const std::exception& e) {
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "EnableAllSet", "");
+        return;
+      }
+
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback(
+        group_id,
+        &fields
+      );
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback().empty())) {
+    // group-dispatch callback only called if the command-specific by-unid
+    // callback is set
+    try {
+      nlohmann::json jsn = nlohmann::json::parse(std::string(message));
+      if (jsn.find("Enabled") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::EnableAllSet: Missing command-argument: Enabled\n");
+        return;
+      }
+
+      group_dispatch_callback(
+        group_id,
+        "UnifyScheduleEntryLock",
+        "EnableAllSet",
+        message,
+        message_length,
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_enable_all_set);
+
+    } catch (...) {
+      sl_log_debug(LOG_TAG, "EnableAllSet: Unable to parse JSON payload.\n");
+      return;
+    }
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/YearDayReport
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_year_day_report(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback == nullptr)) {
+    return;
+  }
+  if (message_length == 0) {
+    return;
+  }
+
+  dotdot_group_id_t group_id = 0U;
+  if(!uic_dotdot_mqtt::parse_topic_group_id(topic,group_id)) {
+    sl_log_debug(LOG_TAG,
+                "Failed to parse GroupId from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  // Pass to command-specific callback if set. Otherwise, pass to
+  // group-dispatch callback
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback != nullptr) {
+
+    
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t fields;
+
+
+      nlohmann::json jsn;
+      try {
+        jsn = nlohmann::json::parse(std::string(message));
+
+      
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_report(
           jsn,
-          fields.set_action,
-              
           fields.user_identifier,
               
           fields.schedule_slotid,
@@ -23649,94 +23879,98 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
 
       } catch (const nlohmann::json::parse_error& e) {
         // Catch JSON object field parsing errors
-        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "ScheduleEntryLockYearDayReport");
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "YearDayReport");
         return;
       } catch (const nlohmann::json::exception& e) {
         // Catch JSON object field parsing errors
-        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockYearDayReport", e.what());
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayReport", e.what());
         return;
       } catch (const std::exception& e) {
-        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockYearDayReport", "");
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayReport", "");
         return;
       }
 
-      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback(
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback(
         group_id,
         &fields
       );
-  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback().empty())) {
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback().empty())) {
     // group-dispatch callback only called if the command-specific by-unid
     // callback is set
     try {
       nlohmann::json jsn = nlohmann::json::parse(std::string(message));
-      if (jsn.find("SetAction") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: SetAction\n");
-        return;
-      }
       if (jsn.find("UserIdentifier") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: UserIdentifier\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: UserIdentifier\n");
         return;
       }
       if (jsn.find("ScheduleSlotID") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: ScheduleSlotID\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: ScheduleSlotID\n");
         return;
       }
       if (jsn.find("StartYear") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: StartYear\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StartYear\n");
+        return;
+      }
+      if (jsn.find("StartMonth") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StartMonth\n");
         return;
       }
       if (jsn.find("StartDay") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: StartDay\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StartDay\n");
         return;
       }
       if (jsn.find("StartHour") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: StartHour\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StartHour\n");
         return;
       }
       if (jsn.find("StartMinute") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: StartMinute\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StartMinute\n");
         return;
       }
       if (jsn.find("StopYear") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: StopYear\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StopYear\n");
+        return;
+      }
+      if (jsn.find("StopMonth") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StopMonth\n");
         return;
       }
       if (jsn.find("StopDay") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: StopDay\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StopDay\n");
         return;
       }
       if (jsn.find("StopHour") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: StopHour\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StopHour\n");
         return;
       }
       if (jsn.find("StopMinute") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockYearDayReport: Missing command-argument: StopMinute\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayReport: Missing command-argument: StopMinute\n");
         return;
       }
 
       group_dispatch_callback(
         group_id,
         "UnifyScheduleEntryLock",
-        "ScheduleEntryLockYearDayReport",
+        "YearDayReport",
         message,
         message_length,
-        uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_year_day_report);
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_report);
 
     } catch (...) {
-      sl_log_debug(LOG_TAG, "ScheduleEntryLockYearDayReport: Unable to parse JSON payload.\n");
+      sl_log_debug(LOG_TAG, "YearDayReport: Unable to parse JSON payload.\n");
       return;
     }
   }
 
 }
 
-// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport
-static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report(
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/WeekDaySet
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_week_day_set(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback == nullptr)) {
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback == nullptr)) {
     return;
   }
   if (message_length == 0) {
@@ -23753,10 +23987,10 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
 
   // Pass to command-specific callback if set. Otherwise, pass to
   // group-dispatch callback
-  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback != nullptr) {
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback != nullptr) {
 
     
-    uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t fields;
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t fields;
 
 
       nlohmann::json jsn;
@@ -23764,7 +23998,7 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
         jsn = nlohmann::json::parse(std::string(message));
 
       
-        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report(
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_set(
           jsn,
           fields.set_action,
               
@@ -23772,15 +24006,15 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
               
           fields.schedule_slotid,
               
-          fields.week_day_bitmask,
+          fields.day_of_week,
               
           fields.start_hour,
               
           fields.start_minute,
               
-          fields.duration_hour,
+          fields.stop_hour,
               
-          fields.duration_minute
+          fields.stop_minute
               );
 
       // Populate list fields from vector or string types
@@ -23788,82 +24022,82 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry
 
       } catch (const nlohmann::json::parse_error& e) {
         // Catch JSON object field parsing errors
-        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "ScheduleEntryLockDailyRepeatingReport");
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WeekDaySet");
         return;
       } catch (const nlohmann::json::exception& e) {
         // Catch JSON object field parsing errors
-        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockDailyRepeatingReport", e.what());
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDaySet", e.what());
         return;
       } catch (const std::exception& e) {
-        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "ScheduleEntryLockDailyRepeatingReport", "");
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDaySet", "");
         return;
       }
 
-      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback(
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback(
         group_id,
         &fields
       );
-  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback().empty())) {
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback().empty())) {
     // group-dispatch callback only called if the command-specific by-unid
     // callback is set
     try {
       nlohmann::json jsn = nlohmann::json::parse(std::string(message));
       if (jsn.find("SetAction") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockDailyRepeatingReport: Missing command-argument: SetAction\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDaySet: Missing command-argument: SetAction\n");
         return;
       }
       if (jsn.find("UserIdentifier") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockDailyRepeatingReport: Missing command-argument: UserIdentifier\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDaySet: Missing command-argument: UserIdentifier\n");
         return;
       }
       if (jsn.find("ScheduleSlotID") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockDailyRepeatingReport: Missing command-argument: ScheduleSlotID\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDaySet: Missing command-argument: ScheduleSlotID\n");
         return;
       }
-      if (jsn.find("WeekDayBitmask") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockDailyRepeatingReport: Missing command-argument: WeekDayBitmask\n");
+      if (jsn.find("DayOfWeek") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDaySet: Missing command-argument: DayOfWeek\n");
         return;
       }
       if (jsn.find("StartHour") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockDailyRepeatingReport: Missing command-argument: StartHour\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDaySet: Missing command-argument: StartHour\n");
         return;
       }
       if (jsn.find("StartMinute") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockDailyRepeatingReport: Missing command-argument: StartMinute\n");
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDaySet: Missing command-argument: StartMinute\n");
         return;
       }
-      if (jsn.find("DurationHour") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockDailyRepeatingReport: Missing command-argument: DurationHour\n");
+      if (jsn.find("StopHour") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDaySet: Missing command-argument: StopHour\n");
         return;
       }
-      if (jsn.find("DurationMinute") == jsn.end()) {
-        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::ScheduleEntryLockDailyRepeatingReport: Missing command-argument: DurationMinute\n");
+      if (jsn.find("StopMinute") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDaySet: Missing command-argument: StopMinute\n");
         return;
       }
 
       group_dispatch_callback(
         group_id,
         "UnifyScheduleEntryLock",
-        "ScheduleEntryLockDailyRepeatingReport",
+        "WeekDaySet",
         message,
         message_length,
-        uic_mqtt_dotdot_on_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report);
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_set);
 
     } catch (...) {
-      sl_log_debug(LOG_TAG, "ScheduleEntryLockDailyRepeatingReport: Unable to parse JSON payload.\n");
+      sl_log_debug(LOG_TAG, "WeekDaySet: Unable to parse JSON payload.\n");
       return;
     }
   }
 
 }
 
-static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_WriteAttributes(
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/DailyRepeatingReport
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_daily_repeating_report(
   const char *topic,
   const char *message,
   const size_t message_length)
 {
-
-  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback == nullptr)) {
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback == nullptr)) {
     return;
   }
   if (message_length == 0) {
@@ -23878,74 +24112,784 @@ static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_WriteAttribute
     return;
   }
 
-  if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback().empty())) {
-    try {
-      group_dispatch_callback(group_id,
-                              "UnifyScheduleEntryLock",
-                              "WriteAttributes",
-                              message,
-                              message_length,
-                              uic_mqtt_dotdot_on_unify_schedule_entry_lock_WriteAttributes);
-
-    } catch (...) {
-      sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock: Unable to parse JSON payload.\n");
-      return;
-    }
-  } else if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback != nullptr) {
+  // Pass to command-specific callback if set. Otherwise, pass to
+  // group-dispatch callback
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback != nullptr) {
 
-    uic_mqtt_dotdot_unify_schedule_entry_lock_state_t new_state = {};
-    uic_mqtt_dotdot_unify_schedule_entry_lock_updated_state_t new_updated_state = {};
     
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t fields;
 
-    nlohmann::json jsn;
-    try {
-      jsn = nlohmann::json::parse(std::string(message));
-
-      uic_mqtt_dotdot_parse_unify_schedule_entry_lock_write_attributes(
-        jsn,
-        new_state,
-        new_updated_state
-      );
-    } catch (const nlohmann::json::parse_error& e) {
-      // Catch JSON object field parsing errors
-      sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WriteAttributes");
-      return;
-    } catch (const nlohmann::json::exception& e) {
-      // Catch JSON object field parsing errors
-      sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WriteAttributes", e.what());
-      return;
-    } catch (const std::exception& e) {
-      sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WriteAttributes", "");
-      return;
-    }
 
-    uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback(
-      group_id,
-      new_state,
-      new_updated_state
-    );
-  }
-}
+      nlohmann::json jsn;
+      try {
+        jsn = nlohmann::json::parse(std::string(message));
 
-sl_status_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_init()
-{
-  std::string subscription_topic;
-  const std::string topic_bygroup = TOPIC_BY_GROUP_PREFIX;
-  if(uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback) {
-    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/WriteAttributes";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_WriteAttributes);
+      
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_report(
+          jsn,
+          fields.user_identifier,
+              
+          fields.schedule_slotid,
+              
+          fields.week_day_bitmask,
+              
+          fields.start_hour,
+              
+          fields.start_minute,
+              
+          fields.duration_hour,
+              
+          fields.duration_minute
+              );
+
+      // Populate list fields from vector or string types
+      
+
+      } catch (const nlohmann::json::parse_error& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "DailyRepeatingReport");
+        return;
+      } catch (const nlohmann::json::exception& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingReport", e.what());
+        return;
+      } catch (const std::exception& e) {
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingReport", "");
+        return;
+      }
+
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback(
+        group_id,
+        &fields
+      );
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback().empty())) {
+    // group-dispatch callback only called if the command-specific by-unid
+    // callback is set
+    try {
+      nlohmann::json jsn = nlohmann::json::parse(std::string(message));
+      if (jsn.find("UserIdentifier") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingReport: Missing command-argument: UserIdentifier\n");
+        return;
+      }
+      if (jsn.find("ScheduleSlotID") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingReport: Missing command-argument: ScheduleSlotID\n");
+        return;
+      }
+      if (jsn.find("WeekDayBitmask") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingReport: Missing command-argument: WeekDayBitmask\n");
+        return;
+      }
+      if (jsn.find("StartHour") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingReport: Missing command-argument: StartHour\n");
+        return;
+      }
+      if (jsn.find("StartMinute") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingReport: Missing command-argument: StartMinute\n");
+        return;
+      }
+      if (jsn.find("DurationHour") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingReport: Missing command-argument: DurationHour\n");
+        return;
+      }
+      if (jsn.find("DurationMinute") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingReport: Missing command-argument: DurationMinute\n");
+        return;
+      }
+
+      group_dispatch_callback(
+        group_id,
+        "UnifyScheduleEntryLock",
+        "DailyRepeatingReport",
+        message,
+        message_length,
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_report);
+
+    } catch (...) {
+      sl_log_debug(LOG_TAG, "DailyRepeatingReport: Unable to parse JSON payload.\n");
+      return;
+    }
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/WeekDayGet
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_week_day_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback == nullptr)) {
+    return;
+  }
+  if (message_length == 0) {
+    return;
+  }
+
+  dotdot_group_id_t group_id = 0U;
+  if(!uic_dotdot_mqtt::parse_topic_group_id(topic,group_id)) {
+    sl_log_debug(LOG_TAG,
+                "Failed to parse GroupId from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  // Pass to command-specific callback if set. Otherwise, pass to
+  // group-dispatch callback
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback != nullptr) {
+
+    
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t fields;
+
+
+      nlohmann::json jsn;
+      try {
+        jsn = nlohmann::json::parse(std::string(message));
+
+      
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_week_day_get(
+          jsn,
+          fields.user_identifier,
+              
+          fields.schedule_slotid
+              );
+
+      // Populate list fields from vector or string types
+      
+
+      } catch (const nlohmann::json::parse_error& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WeekDayGet");
+        return;
+      } catch (const nlohmann::json::exception& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayGet", e.what());
+        return;
+      } catch (const std::exception& e) {
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WeekDayGet", "");
+        return;
+      }
+
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback(
+        group_id,
+        &fields
+      );
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback().empty())) {
+    // group-dispatch callback only called if the command-specific by-unid
+    // callback is set
+    try {
+      nlohmann::json jsn = nlohmann::json::parse(std::string(message));
+      if (jsn.find("UserIdentifier") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDayGet: Missing command-argument: UserIdentifier\n");
+        return;
+      }
+      if (jsn.find("ScheduleSlotID") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::WeekDayGet: Missing command-argument: ScheduleSlotID\n");
+        return;
+      }
+
+      group_dispatch_callback(
+        group_id,
+        "UnifyScheduleEntryLock",
+        "WeekDayGet",
+        message,
+        message_length,
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_week_day_get);
+
+    } catch (...) {
+      sl_log_debug(LOG_TAG, "WeekDayGet: Unable to parse JSON payload.\n");
+      return;
+    }
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/YearDaySet
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_year_day_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback == nullptr)) {
+    return;
+  }
+  if (message_length == 0) {
+    return;
+  }
+
+  dotdot_group_id_t group_id = 0U;
+  if(!uic_dotdot_mqtt::parse_topic_group_id(topic,group_id)) {
+    sl_log_debug(LOG_TAG,
+                "Failed to parse GroupId from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  // Pass to command-specific callback if set. Otherwise, pass to
+  // group-dispatch callback
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback != nullptr) {
+
+    
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t fields;
+
+
+      nlohmann::json jsn;
+      try {
+        jsn = nlohmann::json::parse(std::string(message));
+
+      
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_set(
+          jsn,
+          fields.set_action,
+              
+          fields.user_identifier,
+              
+          fields.schedule_slotid,
+              
+          fields.start_year,
+              
+          fields.start_day,
+              
+          fields.start_hour,
+              
+          fields.start_month,
+              
+          fields.start_minute,
+              
+          fields.stop_year,
+              
+          fields.stop_month,
+              
+          fields.stop_day,
+              
+          fields.stop_hour,
+              
+          fields.stop_minute
+              );
+
+      // Populate list fields from vector or string types
+      
+
+      } catch (const nlohmann::json::parse_error& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "YearDaySet");
+        return;
+      } catch (const nlohmann::json::exception& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDaySet", e.what());
+        return;
+      } catch (const std::exception& e) {
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDaySet", "");
+        return;
+      }
+
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback(
+        group_id,
+        &fields
+      );
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback().empty())) {
+    // group-dispatch callback only called if the command-specific by-unid
+    // callback is set
+    try {
+      nlohmann::json jsn = nlohmann::json::parse(std::string(message));
+      if (jsn.find("SetAction") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: SetAction\n");
+        return;
+      }
+      if (jsn.find("UserIdentifier") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: UserIdentifier\n");
+        return;
+      }
+      if (jsn.find("ScheduleSlotID") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: ScheduleSlotID\n");
+        return;
+      }
+      if (jsn.find("StartYear") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StartYear\n");
+        return;
+      }
+      if (jsn.find("StartDay") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StartDay\n");
+        return;
+      }
+      if (jsn.find("StartHour") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StartHour\n");
+        return;
+      }
+      if (jsn.find("StartMonth") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StartMonth\n");
+        return;
+      }
+      if (jsn.find("StartMinute") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StartMinute\n");
+        return;
+      }
+      if (jsn.find("StopYear") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StopYear\n");
+        return;
+      }
+      if (jsn.find("StopMonth") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StopMonth\n");
+        return;
+      }
+      if (jsn.find("StopDay") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StopDay\n");
+        return;
+      }
+      if (jsn.find("StopHour") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StopHour\n");
+        return;
+      }
+      if (jsn.find("StopMinute") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDaySet: Missing command-argument: StopMinute\n");
+        return;
+      }
+
+      group_dispatch_callback(
+        group_id,
+        "UnifyScheduleEntryLock",
+        "YearDaySet",
+        message,
+        message_length,
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_set);
+
+    } catch (...) {
+      sl_log_debug(LOG_TAG, "YearDaySet: Unable to parse JSON payload.\n");
+      return;
+    }
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/YearDayGet
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_year_day_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback == nullptr)) {
+    return;
+  }
+  if (message_length == 0) {
+    return;
+  }
+
+  dotdot_group_id_t group_id = 0U;
+  if(!uic_dotdot_mqtt::parse_topic_group_id(topic,group_id)) {
+    sl_log_debug(LOG_TAG,
+                "Failed to parse GroupId from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  // Pass to command-specific callback if set. Otherwise, pass to
+  // group-dispatch callback
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback != nullptr) {
+
+    
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t fields;
+
+
+      nlohmann::json jsn;
+      try {
+        jsn = nlohmann::json::parse(std::string(message));
+
+      
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_year_day_get(
+          jsn,
+          fields.user_identifier,
+              
+          fields.schedule_slotid
+              );
+
+      // Populate list fields from vector or string types
+      
+
+      } catch (const nlohmann::json::parse_error& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "YearDayGet");
+        return;
+      } catch (const nlohmann::json::exception& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayGet", e.what());
+        return;
+      } catch (const std::exception& e) {
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "YearDayGet", "");
+        return;
+      }
+
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback(
+        group_id,
+        &fields
+      );
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback().empty())) {
+    // group-dispatch callback only called if the command-specific by-unid
+    // callback is set
+    try {
+      nlohmann::json jsn = nlohmann::json::parse(std::string(message));
+      if (jsn.find("UserIdentifier") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayGet: Missing command-argument: UserIdentifier\n");
+        return;
+      }
+      if (jsn.find("ScheduleSlotID") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::YearDayGet: Missing command-argument: ScheduleSlotID\n");
+        return;
+      }
+
+      group_dispatch_callback(
+        group_id,
+        "UnifyScheduleEntryLock",
+        "YearDayGet",
+        message,
+        message_length,
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_year_day_get);
+
+    } catch (...) {
+      sl_log_debug(LOG_TAG, "YearDayGet: Unable to parse JSON payload.\n");
+      return;
+    }
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/DailyRepeatingSet
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_daily_repeating_set(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback == nullptr)) {
+    return;
+  }
+  if (message_length == 0) {
+    return;
+  }
+
+  dotdot_group_id_t group_id = 0U;
+  if(!uic_dotdot_mqtt::parse_topic_group_id(topic,group_id)) {
+    sl_log_debug(LOG_TAG,
+                "Failed to parse GroupId from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  // Pass to command-specific callback if set. Otherwise, pass to
+  // group-dispatch callback
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback != nullptr) {
+
+    
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t fields;
+
+
+      nlohmann::json jsn;
+      try {
+        jsn = nlohmann::json::parse(std::string(message));
+
+      
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_set(
+          jsn,
+          fields.set_action,
+              
+          fields.user_identifier,
+              
+          fields.schedule_slotid,
+              
+          fields.week_day_bitmask,
+              
+          fields.start_hour,
+              
+          fields.start_minute,
+              
+          fields.duration_hour,
+              
+          fields.duration_minute
+              );
+
+      // Populate list fields from vector or string types
+      
+
+      } catch (const nlohmann::json::parse_error& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "DailyRepeatingSet");
+        return;
+      } catch (const nlohmann::json::exception& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingSet", e.what());
+        return;
+      } catch (const std::exception& e) {
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingSet", "");
+        return;
+      }
+
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback(
+        group_id,
+        &fields
+      );
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback().empty())) {
+    // group-dispatch callback only called if the command-specific by-unid
+    // callback is set
+    try {
+      nlohmann::json jsn = nlohmann::json::parse(std::string(message));
+      if (jsn.find("SetAction") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingSet: Missing command-argument: SetAction\n");
+        return;
+      }
+      if (jsn.find("UserIdentifier") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingSet: Missing command-argument: UserIdentifier\n");
+        return;
+      }
+      if (jsn.find("ScheduleSlotID") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingSet: Missing command-argument: ScheduleSlotID\n");
+        return;
+      }
+      if (jsn.find("WeekDayBitmask") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingSet: Missing command-argument: WeekDayBitmask\n");
+        return;
+      }
+      if (jsn.find("StartHour") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingSet: Missing command-argument: StartHour\n");
+        return;
+      }
+      if (jsn.find("StartMinute") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingSet: Missing command-argument: StartMinute\n");
+        return;
+      }
+      if (jsn.find("DurationHour") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingSet: Missing command-argument: DurationHour\n");
+        return;
+      }
+      if (jsn.find("DurationMinute") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingSet: Missing command-argument: DurationMinute\n");
+        return;
+      }
+
+      group_dispatch_callback(
+        group_id,
+        "UnifyScheduleEntryLock",
+        "DailyRepeatingSet",
+        message,
+        message_length,
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_set);
+
+    } catch (...) {
+      sl_log_debug(LOG_TAG, "DailyRepeatingSet: Unable to parse JSON payload.\n");
+      return;
+    }
+  }
+
+}
+
+// Callback function for incoming publications on ucl/by-group/+/UnifyScheduleEntryLock/Commands/DailyRepeatingGet
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_daily_repeating_get(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback == nullptr)) {
+    return;
+  }
+  if (message_length == 0) {
+    return;
+  }
+
+  dotdot_group_id_t group_id = 0U;
+  if(!uic_dotdot_mqtt::parse_topic_group_id(topic,group_id)) {
+    sl_log_debug(LOG_TAG,
+                "Failed to parse GroupId from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  // Pass to command-specific callback if set. Otherwise, pass to
+  // group-dispatch callback
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback != nullptr) {
+
+    
+    uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t fields;
+
+
+      nlohmann::json jsn;
+      try {
+        jsn = nlohmann::json::parse(std::string(message));
+
+      
+        uic_mqtt_dotdot_parse_unify_schedule_entry_lock_daily_repeating_get(
+          jsn,
+          fields.user_identifier,
+              
+          fields.schedule_slotid
+              );
+
+      // Populate list fields from vector or string types
+      
+
+      } catch (const nlohmann::json::parse_error& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "DailyRepeatingGet");
+        return;
+      } catch (const nlohmann::json::exception& e) {
+        // Catch JSON object field parsing errors
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingGet", e.what());
+        return;
+      } catch (const std::exception& e) {
+        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "DailyRepeatingGet", "");
+        return;
+      }
+
+      uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback(
+        group_id,
+        &fields
+      );
+  } else if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback().empty())) {
+    // group-dispatch callback only called if the command-specific by-unid
+    // callback is set
+    try {
+      nlohmann::json jsn = nlohmann::json::parse(std::string(message));
+      if (jsn.find("UserIdentifier") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingGet: Missing command-argument: UserIdentifier\n");
+        return;
+      }
+      if (jsn.find("ScheduleSlotID") == jsn.end()) {
+        sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock::DailyRepeatingGet: Missing command-argument: ScheduleSlotID\n");
+        return;
+      }
+
+      group_dispatch_callback(
+        group_id,
+        "UnifyScheduleEntryLock",
+        "DailyRepeatingGet",
+        message,
+        message_length,
+        uic_mqtt_dotdot_on_unify_schedule_entry_lock_daily_repeating_get);
+
+    } catch (...) {
+      sl_log_debug(LOG_TAG, "DailyRepeatingGet: Unable to parse JSON payload.\n");
+      return;
+    }
+  }
+
+}
+
+static void uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_WriteAttributes(
+  const char *topic,
+  const char *message,
+  const size_t message_length)
+{
+
+  if ((group_dispatch_callback == nullptr) && (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback == nullptr)) {
+    return;
+  }
+  if (message_length == 0) {
+    return;
+  }
+
+  dotdot_group_id_t group_id = 0U;
+  if(!uic_dotdot_mqtt::parse_topic_group_id(topic,group_id)) {
+    sl_log_debug(LOG_TAG,
+                "Failed to parse GroupId from topic %s. Ignoring",
+                topic);
+    return;
+  }
+
+  if ((group_dispatch_callback != nullptr) && (!get_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback().empty())) {
+    try {
+      group_dispatch_callback(group_id,
+                              "UnifyScheduleEntryLock",
+                              "WriteAttributes",
+                              message,
+                              message_length,
+                              uic_mqtt_dotdot_on_unify_schedule_entry_lock_WriteAttributes);
+
+    } catch (...) {
+      sl_log_debug(LOG_TAG, "UnifyScheduleEntryLock: Unable to parse JSON payload.\n");
+      return;
+    }
+  } else if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback != nullptr) {
+
+    uic_mqtt_dotdot_unify_schedule_entry_lock_state_t new_state = {};
+    uic_mqtt_dotdot_unify_schedule_entry_lock_updated_state_t new_updated_state = {};
+    
+
+    nlohmann::json jsn;
+    try {
+      jsn = nlohmann::json::parse(std::string(message));
+
+      uic_mqtt_dotdot_parse_unify_schedule_entry_lock_write_attributes(
+        jsn,
+        new_state,
+        new_updated_state
+      );
+    } catch (const nlohmann::json::parse_error& e) {
+      // Catch JSON object field parsing errors
+      sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "UnifyScheduleEntryLock", "WriteAttributes");
+      return;
+    } catch (const nlohmann::json::exception& e) {
+      // Catch JSON object field parsing errors
+      sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WriteAttributes", e.what());
+      return;
+    } catch (const std::exception& e) {
+      sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "UnifyScheduleEntryLock", "WriteAttributes", "");
+      return;
+    }
+
+    uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback(
+      group_id,
+      new_state,
+      new_updated_state
+    );
+  }
+}
+
+sl_status_t uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_init()
+{
+  std::string subscription_topic;
+  const std::string topic_bygroup = TOPIC_BY_GROUP_PREFIX;
+  if(uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_write_attributes_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/WriteAttributes";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_WriteAttributes);
+  }
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_set_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/EnableSet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_enable_set);
+  }
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_report_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/WeekDayReport";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_week_day_report);
+  }
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_enable_all_set_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/EnableAllSet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_enable_all_set);
+  }
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_report_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/YearDayReport";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_year_day_report);
+  }
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_set_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/WeekDaySet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_week_day_set);
+  }
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_report_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/DailyRepeatingReport";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_daily_repeating_report);
+  }
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_week_day_get_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/WeekDayGet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_week_day_get);
+  }
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_set_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/YearDaySet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_year_day_set);
   }
-  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback) {
-    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report);
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_year_day_get_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/YearDayGet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_year_day_get);
   }
-  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback) {
-    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report);
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_set_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/DailyRepeatingSet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_daily_repeating_set);
   }
-  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback) {
-    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport";
-    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report);
+  if (uic_mqtt_dotdot_by_group_unify_schedule_entry_lock_daily_repeating_get_callback) {
+    subscription_topic = topic_bygroup + "UnifyScheduleEntryLock/Commands/DailyRepeatingGet";
+    uic_mqtt_subscribe(subscription_topic.c_str(), uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_daily_repeating_get);
   }
 
   return SL_STATUS_OK;
@@ -24517,9 +25461,17 @@ void uic_mqtt_dotdot_set_group_dispatch_callback(group_dispatch_t callback)
     uic_mqtt_subscribe("ucl/by-group/+/UnifyThermostat/Commands/WriteAttributes", uic_mqtt_dotdot_on_by_group_unify_thermostat_WriteAttributes);
 
     uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/WriteAttributes", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_WriteAttributes);
-    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry_lock_week_day_report);
-    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry_lock_year_day_report);
-    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/EnableSet", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_enable_set);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/WeekDayReport", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_week_day_report);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/EnableAllSet", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_enable_all_set);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/YearDayReport", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_year_day_report);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/WeekDaySet", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_week_day_set);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/DailyRepeatingReport", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_daily_repeating_report);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/WeekDayGet", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_week_day_get);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/YearDaySet", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_year_day_set);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/YearDayGet", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_year_day_get);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/DailyRepeatingSet", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_daily_repeating_set);
+    uic_mqtt_subscribe("ucl/by-group/+/UnifyScheduleEntryLock/Commands/DailyRepeatingGet", uic_mqtt_dotdot_on_by_group_unify_schedule_entry_lock_daily_repeating_get);
 
     uic_mqtt_subscribe("ucl/by-group/+/UnifyHumidityControl/Commands/WriteAttributes", uic_mqtt_dotdot_on_by_group_unify_humidity_control_WriteAttributes);
     uic_mqtt_subscribe("ucl/by-group/+/UnifyHumidityControl/Commands/ModeSet", uic_mqtt_dotdot_on_by_group_unify_humidity_control_mode_set);
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_send_commands.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_send_commands.cpp
index 2f17f4fceb..b0f33cde6d 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_send_commands.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_send_commands.cpp
@@ -13709,11 +13709,11 @@ void uic_mqtt_dotdot_unify_fan_control_publish_turn_off_command_to_group(
 }
 
 /**
- * @brief Sends/Publishes a ScheduleEntryLockWeekDayReport command for
+ * @brief Sends/Publishes a EnableSet command for
  * the UnifyScheduleEntryLock cluster to a destination.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/EnableSet
  *
  * @param destination_unid      The UNID of the node that should receive the command.
  * 
@@ -13723,20 +13723,20 @@ void uic_mqtt_dotdot_unify_fan_control_publish_turn_off_command_to_group(
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_week_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_enable_set_command(
   const dotdot_unid_t destination_unid,
   const dotdot_endpoint_id_t destination_endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
   
 ) {
   // Create the topic
   std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
                       std::to_string(destination_endpoint) + "/";
-  topic += "UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport";
+  topic += "UnifyScheduleEntryLock/Commands/EnableSet";
 
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_enable_set_command(
     fields);
 
   sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
@@ -13749,28 +13749,28 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_week_
 }
 
 /**
- * @brief Sends/Publishes a ScheduleEntryLockWeekDayReport command for
+ * @brief Sends/Publishes a EnableSet command for
  * the UnifyScheduleEntryLock cluster to a group.
  *
  * Publication will be made at the following topic
- * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/EnableSet
  *
  * @param destination_group_id  The GroupID that should receive the command.
  * 
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_week_day_report_command_to_group(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_enable_set_command_to_group(
   uint16_t destination_group_id,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_week_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_set_fields_t *fields
   
 ){
   // Create the topic
   std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
-                      "/UnifyScheduleEntryLock/Commands/ScheduleEntryLockWeekDayReport";
+                      "/UnifyScheduleEntryLock/Commands/EnableSet";
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_enable_set_command(
     fields);
 
   sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
@@ -13783,11 +13783,11 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_week_
 }
 
 /**
- * @brief Sends/Publishes a ScheduleEntryLockYearDayReport command for
+ * @brief Sends/Publishes a WeekDayReport command for
  * the UnifyScheduleEntryLock cluster to a destination.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/WeekDayReport
  *
  * @param destination_unid      The UNID of the node that should receive the command.
  * 
@@ -13797,20 +13797,20 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_week_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_year_day_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_report_command(
   const dotdot_unid_t destination_unid,
   const dotdot_endpoint_id_t destination_endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
   
 ) {
   // Create the topic
   std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
                       std::to_string(destination_endpoint) + "/";
-  topic += "UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport";
+  topic += "UnifyScheduleEntryLock/Commands/WeekDayReport";
 
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_week_day_report_command(
     fields);
 
   sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
@@ -13823,28 +13823,28 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_year_
 }
 
 /**
- * @brief Sends/Publishes a ScheduleEntryLockYearDayReport command for
+ * @brief Sends/Publishes a WeekDayReport command for
  * the UnifyScheduleEntryLock cluster to a group.
  *
  * Publication will be made at the following topic
- * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/WeekDayReport
  *
  * @param destination_group_id  The GroupID that should receive the command.
  * 
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_year_day_report_command_to_group(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_report_command_to_group(
   uint16_t destination_group_id,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_year_day_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_report_fields_t *fields
   
 ){
   // Create the topic
   std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
-                      "/UnifyScheduleEntryLock/Commands/ScheduleEntryLockYearDayReport";
+                      "/UnifyScheduleEntryLock/Commands/WeekDayReport";
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_week_day_report_command(
     fields);
 
   sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
@@ -13857,11 +13857,11 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_year_
 }
 
 /**
- * @brief Sends/Publishes a ScheduleEntryLockDailyRepeatingReport command for
+ * @brief Sends/Publishes a EnableAllSet command for
  * the UnifyScheduleEntryLock cluster to a destination.
  *
  * Publication will be made at the following topic
- * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/EnableAllSet
  *
  * @param destination_unid      The UNID of the node that should receive the command.
  * 
@@ -13871,20 +13871,20 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_year_
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_daily_repeating_report_command(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_enable_all_set_command(
   const dotdot_unid_t destination_unid,
   const dotdot_endpoint_id_t destination_endpoint,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
   
 ) {
   // Create the topic
   std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
                       std::to_string(destination_endpoint) + "/";
-  topic += "UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport";
+  topic += "UnifyScheduleEntryLock/Commands/EnableAllSet";
 
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_enable_all_set_command(
     fields);
 
   sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
@@ -13897,28 +13897,620 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_daily
 }
 
 /**
- * @brief Sends/Publishes a ScheduleEntryLockDailyRepeatingReport command for
+ * @brief Sends/Publishes a EnableAllSet command for
  * the UnifyScheduleEntryLock cluster to a group.
  *
  * Publication will be made at the following topic
- * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/EnableAllSet
  *
  * @param destination_group_id  The GroupID that should receive the command.
  * 
  * @param fields                Struct pointer with the fields value of the command
  * 
  */
-void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_schedule_entry_lock_daily_repeating_report_command_to_group(
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_enable_all_set_command_to_group(
   uint16_t destination_group_id,
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_schedule_entry_lock_daily_repeating_report_fields_t *fields
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_enable_all_set_fields_t *fields
   
 ){
   // Create the topic
   std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
-                      "/UnifyScheduleEntryLock/Commands/ScheduleEntryLockDailyRepeatingReport";
+                      "/UnifyScheduleEntryLock/Commands/EnableAllSet";
 
   std::string payload =
-    get_json_payload_for_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_command(
+    get_json_payload_for_unify_schedule_entry_lock_enable_all_set_command(
+    fields);
+
+  sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a YearDayReport command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/YearDayReport
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_report_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
+                      std::to_string(destination_endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/Commands/YearDayReport";
+
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_report_command(
+    fields);
+
+  sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a YearDayReport command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/YearDayReport
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_report_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_report_fields_t *fields
+  
+){
+  // Create the topic
+  std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
+                      "/UnifyScheduleEntryLock/Commands/YearDayReport";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_report_command(
+    fields);
+
+  sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a WeekDaySet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/WeekDaySet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_set_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
+                      std::to_string(destination_endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/Commands/WeekDaySet";
+
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_week_day_set_command(
+    fields);
+
+  sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a WeekDaySet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/WeekDaySet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_set_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_set_fields_t *fields
+  
+){
+  // Create the topic
+  std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
+                      "/UnifyScheduleEntryLock/Commands/WeekDaySet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_week_day_set_command(
+    fields);
+
+  sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a DailyRepeatingReport command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/DailyRepeatingReport
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_report_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
+                      std::to_string(destination_endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/Commands/DailyRepeatingReport";
+
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_report_command(
+    fields);
+
+  sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a DailyRepeatingReport command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/DailyRepeatingReport
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_report_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_report_fields_t *fields
+  
+){
+  // Create the topic
+  std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
+                      "/UnifyScheduleEntryLock/Commands/DailyRepeatingReport";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_report_command(
+    fields);
+
+  sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a WeekDayGet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/WeekDayGet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_get_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
+                      std::to_string(destination_endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/Commands/WeekDayGet";
+
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_week_day_get_command(
+    fields);
+
+  sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a WeekDayGet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/WeekDayGet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_week_day_get_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_week_day_get_fields_t *fields
+  
+){
+  // Create the topic
+  std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
+                      "/UnifyScheduleEntryLock/Commands/WeekDayGet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_week_day_get_command(
+    fields);
+
+  sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a YearDaySet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/YearDaySet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_set_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
+                      std::to_string(destination_endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/Commands/YearDaySet";
+
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_set_command(
+    fields);
+
+  sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a YearDaySet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/YearDaySet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_set_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_set_fields_t *fields
+  
+){
+  // Create the topic
+  std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
+                      "/UnifyScheduleEntryLock/Commands/YearDaySet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_set_command(
+    fields);
+
+  sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a YearDayGet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/YearDayGet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_get_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
+                      std::to_string(destination_endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/Commands/YearDayGet";
+
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_get_command(
+    fields);
+
+  sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a YearDayGet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/YearDayGet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_year_day_get_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_year_day_get_fields_t *fields
+  
+){
+  // Create the topic
+  std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
+                      "/UnifyScheduleEntryLock/Commands/YearDayGet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_year_day_get_command(
+    fields);
+
+  sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a DailyRepeatingSet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/DailyRepeatingSet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_set_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
+                      std::to_string(destination_endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/Commands/DailyRepeatingSet";
+
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_set_command(
+    fields);
+
+  sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a DailyRepeatingSet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/DailyRepeatingSet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_set_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_set_fields_t *fields
+  
+){
+  // Create the topic
+  std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
+                      "/UnifyScheduleEntryLock/Commands/DailyRepeatingSet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_set_command(
+    fields);
+
+  sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a DailyRepeatingGet command for
+ * the UnifyScheduleEntryLock cluster to a destination.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-unid/UNID/epID/UnifyScheduleEntryLock/Commands/DailyRepeatingGet
+ *
+ * @param destination_unid      The UNID of the node that should receive the command.
+ * 
+ * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
+ * 
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_get_command(
+  const dotdot_unid_t destination_unid,
+  const dotdot_endpoint_id_t destination_endpoint,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
+  
+) {
+  // Create the topic
+  std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
+                      std::to_string(destination_endpoint) + "/";
+  topic += "UnifyScheduleEntryLock/Commands/DailyRepeatingGet";
+
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_get_command(
+    fields);
+
+  sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());
+
+  // Publish our command, not retained
+  uic_mqtt_publish(topic.c_str(),
+                   payload.c_str(),
+                   payload.size(),
+                   false);
+}
+
+/**
+ * @brief Sends/Publishes a DailyRepeatingGet command for
+ * the UnifyScheduleEntryLock cluster to a group.
+ *
+ * Publication will be made at the following topic
+ * ucl/by-group/GroupID/UnifyScheduleEntryLock/Commands/DailyRepeatingGet
+ *
+ * @param destination_group_id  The GroupID that should receive the command.
+ * 
+ * @param fields                Struct pointer with the fields value of the command
+ * 
+ */
+void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_daily_repeating_get_command_to_group(
+  uint16_t destination_group_id,
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_command_daily_repeating_get_fields_t *fields
+  
+){
+  // Create the topic
+  std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
+                      "/UnifyScheduleEntryLock/Commands/DailyRepeatingGet";
+
+  std::string payload =
+    get_json_payload_for_unify_schedule_entry_lock_daily_repeating_get_command(
     fields);
 
   sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_supported_generated_commands.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_supported_generated_commands.cpp
index 39ed2297f0..0749270e54 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_supported_generated_commands.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_supported_generated_commands.cpp
@@ -2881,14 +2881,38 @@ void uic_mqtt_dotdot_unify_schedule_entry_lock_publish_supported_generated_comma
 
   // Assemble of vector of strings for the Supported Commands:
   std::vector<std::string> command_vector;
-  if (command_list->schedule_entry_lock_week_day_report == true) {
-    command_vector.emplace_back("ScheduleEntryLockWeekDayReport");
+  if (command_list->enable_set == true) {
+    command_vector.emplace_back("EnableSet");
   }
-  if (command_list->schedule_entry_lock_year_day_report == true) {
-    command_vector.emplace_back("ScheduleEntryLockYearDayReport");
+  if (command_list->week_day_report == true) {
+    command_vector.emplace_back("WeekDayReport");
   }
-  if (command_list->schedule_entry_lock_daily_repeating_report == true) {
-    command_vector.emplace_back("ScheduleEntryLockDailyRepeatingReport");
+  if (command_list->enable_all_set == true) {
+    command_vector.emplace_back("EnableAllSet");
+  }
+  if (command_list->year_day_report == true) {
+    command_vector.emplace_back("YearDayReport");
+  }
+  if (command_list->week_day_set == true) {
+    command_vector.emplace_back("WeekDaySet");
+  }
+  if (command_list->daily_repeating_report == true) {
+    command_vector.emplace_back("DailyRepeatingReport");
+  }
+  if (command_list->week_day_get == true) {
+    command_vector.emplace_back("WeekDayGet");
+  }
+  if (command_list->year_day_set == true) {
+    command_vector.emplace_back("YearDaySet");
+  }
+  if (command_list->year_day_get == true) {
+    command_vector.emplace_back("YearDayGet");
+  }
+  if (command_list->daily_repeating_set == true) {
+    command_vector.emplace_back("DailyRepeatingSet");
+  }
+  if (command_list->daily_repeating_get == true) {
+    command_vector.emplace_back("DailyRepeatingGet");
   }
   if (command_list->write_attributes == true) {
     command_vector.emplace_back("WriteAttributes");
diff --git a/components/uic_dotdot_mqtt/zap-generated/test/dotdot_mqtt_test.include b/components/uic_dotdot_mqtt/zap-generated/test/dotdot_mqtt_test.include
index c047606bb6..cb26310863 100644
--- a/components/uic_dotdot_mqtt/zap-generated/test/dotdot_mqtt_test.include
+++ b/components/uic_dotdot_mqtt/zap-generated/test/dotdot_mqtt_test.include
@@ -2995,8 +2995,23 @@ static sl_status_t uic_mqtt_dotdot_unify_fan_control_turn_off_callback_func(
   return SL_STATUS_OK;
 }
 
-static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_count;
-static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_func(
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_func(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t callback_type,
+    uint8_t user_identifier,
+
+    uint8_t enabled
+
+) {
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_count++;
+  num_command_callbacks++;
+  return SL_STATUS_OK;
+}
+
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
@@ -3015,18 +3030,29 @@ static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
     uint8_t stop_minute
 
 ) {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_count++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_count++;
   num_command_callbacks++;
   return SL_STATUS_OK;
 }
 
-static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_count;
-static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_func(
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t set_action,
+    uint8_t enabled
 
+) {
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_count++;
+  num_command_callbacks++;
+  return SL_STATUS_OK;
+}
+
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_func(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t user_identifier,
 
     uint8_t schedule_slotid,
@@ -3052,13 +3078,13 @@ static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
     uint8_t stop_minute
 
 ) {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_count++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_count++;
   num_command_callbacks++;
   return SL_STATUS_OK;
 }
 
-static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_count;
-static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_func(
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
@@ -3068,6 +3094,31 @@ static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
 
     uint8_t schedule_slotid,
 
+    uint8_t day_of_week,
+
+    uint8_t start_hour,
+
+    uint8_t start_minute,
+
+    uint8_t stop_hour,
+
+    uint8_t stop_minute
+
+) {
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_count++;
+  num_command_callbacks++;
+  return SL_STATUS_OK;
+}
+
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_func(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t callback_type,
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid,
+
     uint8_t week_day_bitmask,
 
     uint8_t start_hour,
@@ -3079,7 +3130,116 @@ static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock
     uint8_t duration_minute
 
 ) {
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_count++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_count++;
+  num_command_callbacks++;
+  return SL_STATUS_OK;
+}
+
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_func(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t callback_type,
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid
+
+) {
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_count++;
+  num_command_callbacks++;
+  return SL_STATUS_OK;
+}
+
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_func(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t callback_type,
+    uint8_t set_action,
+
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid,
+
+    uint8_t start_year,
+
+    uint8_t start_day,
+
+    uint8_t start_hour,
+
+    uint8_t start_month,
+
+    uint8_t start_minute,
+
+    uint8_t stop_year,
+
+    uint8_t stop_month,
+
+    uint8_t stop_day,
+
+    uint8_t stop_hour,
+
+    uint8_t stop_minute
+
+) {
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_count++;
+  num_command_callbacks++;
+  return SL_STATUS_OK;
+}
+
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_func(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t callback_type,
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid
+
+) {
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_count++;
+  num_command_callbacks++;
+  return SL_STATUS_OK;
+}
+
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_func(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t callback_type,
+    uint8_t set_action,
+
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid,
+
+    uint8_t week_day_bitmask,
+
+    uint8_t start_hour,
+
+    uint8_t start_minute,
+
+    uint8_t duration_hour,
+
+    uint8_t duration_minute
+
+) {
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_count++;
+  num_command_callbacks++;
+  return SL_STATUS_OK;
+}
+
+static unsigned int uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_count;
+static sl_status_t uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_func(
+    dotdot_unid_t unid,
+    dotdot_endpoint_id_t endpoint,
+    uic_mqtt_dotdot_callback_call_type_t callback_type,
+    uint8_t user_identifier,
+
+    uint8_t schedule_slotid
+
+) {
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_count++;
   num_command_callbacks++;
   return SL_STATUS_OK;
 }
@@ -3498,11 +3658,27 @@ static unsigned int set_all_callbacks()
   num_callbacks++;
   uic_mqtt_dotdot_unify_fan_control_turn_off_callback_set(&uic_mqtt_dotdot_unify_fan_control_turn_off_callback_func);
   num_callbacks++;
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_func);
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_func);
+  num_callbacks++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_func);
+  num_callbacks++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_func);
+  num_callbacks++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_func);
+  num_callbacks++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_func);
+  num_callbacks++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_func);
+  num_callbacks++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_func);
+  num_callbacks++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_func);
+  num_callbacks++;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_func);
   num_callbacks++;
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_func);
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_func);
   num_callbacks++;
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_func);
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_set(&uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_func);
   num_callbacks++;
   uic_mqtt_dotdot_unify_humidity_control_mode_set_callback_set(&uic_mqtt_dotdot_unify_humidity_control_mode_set_callback_func);
   num_callbacks++;
@@ -3756,9 +3932,17 @@ static void unset_all_callbacks()
   uic_mqtt_dotdot_unify_fan_control_turn_off_callback_clear();
   uic_mqtt_dotdot_clear_unify_fan_control_write_attributes_callbacks();
   uic_mqtt_dotdot_clear_unify_thermostat_write_attributes_callbacks();
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_clear();
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_clear();
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_clear();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_clear();
   uic_mqtt_dotdot_clear_unify_schedule_entry_lock_write_attributes_callbacks();
   uic_mqtt_dotdot_unify_humidity_control_mode_set_callback_clear();
   uic_mqtt_dotdot_unify_humidity_control_setpoint_set_callback_clear();
@@ -3957,9 +4141,17 @@ static void reset_callback_counters()
   uic_mqtt_dotdot_protocol_controller_network_management_write_callback_count = 0;
   uic_mqtt_dotdot_unify_fan_control_set_fan_mode_callback_count = 0;
   uic_mqtt_dotdot_unify_fan_control_turn_off_callback_count = 0;
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_count = 0;
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_count = 0;
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_count = 0;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_count = 0;
   uic_mqtt_dotdot_unify_humidity_control_mode_set_callback_count = 0;
   uic_mqtt_dotdot_unify_humidity_control_setpoint_set_callback_count = 0;
 }
diff --git a/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.c b/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.c
index b4559eb2d0..f37674dd63 100644
--- a/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.c
+++ b/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.c
@@ -1332,17 +1332,49 @@ uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback_t get_uic_mq
   return test_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback;
 }
 
-static uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback = NULL;
-uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback(){
-  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback;
+static uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback;
 }
-static uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback = NULL;
-uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback(){
-  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback;
+static uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback;
 }
-static uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback = NULL;
-uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback(){
-  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback;
+static uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback;
+}
+static uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback;
+}
+static uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback;
+}
+static uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback;
+}
+static uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback;
+}
+static uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback;
+}
+static uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback;
+}
+static uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback;
+}
+static uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback = NULL;
+uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback(){
+  return test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback;
 }
 static uic_mqtt_dotdot_unify_humidity_control_force_read_attributes_callback_t test_uic_mqtt_dotdot_unify_humidity_control_force_read_attributes_callback = NULL;
 static uic_mqtt_dotdot_unify_humidity_control_write_attributes_callback_t test_uic_mqtt_dotdot_unify_humidity_control_write_attributes_callback = NULL;
@@ -2963,20 +2995,60 @@ void set_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback_stu
 {
   test_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback = callback;
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_set_stub(
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t callback, int cmock_num_calls)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t callback, int cmock_num_calls)
+{
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback = callback;
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t callback, int cmock_num_calls)
+{
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback = callback;
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t callback, int cmock_num_calls)
+{
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback = callback;
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t callback, int cmock_num_calls)
+{
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback = callback;
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t callback, int cmock_num_calls)
+{
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback = callback;
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t callback, int cmock_num_calls)
+{
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback = callback;
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t callback, int cmock_num_calls)
+{
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback = callback;
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t callback, int cmock_num_calls)
+{
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback = callback;
+}
+void uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t callback, int cmock_num_calls)
 {
-  test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback = callback;
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback = callback;
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_set_stub(
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t callback, int cmock_num_calls)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t callback, int cmock_num_calls)
 {
-  test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback = callback;
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback = callback;
 }
-void uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_set_stub(
-  const uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t callback, int cmock_num_calls)
+void uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_set_stub(
+  const uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t callback, int cmock_num_calls)
 {
-  test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback = callback;
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback = callback;
 }
 void set_uic_mqtt_dotdot_unify_humidity_control_force_read_attributes_callback_stub(
   const uic_mqtt_dotdot_unify_humidity_control_force_read_attributes_callback_t callback, int cmock_num_calls)
@@ -3930,15 +4002,39 @@ void setUp()
   test_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback = NULL;
   uic_mqtt_dotdot_set_unify_schedule_entry_lock_write_attributes_callback_Stub(
     &set_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback_stub);
-  test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback = NULL;
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_set_Stub(
-    &uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_set_stub);
-  test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback = NULL;
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_set_Stub(
-    &uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_set_stub);
-  test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback = NULL;
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_set_Stub(
-    &uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_set_stub);
+  test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback = NULL;
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_set_Stub(
+    &uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_set_stub);
   test_uic_mqtt_dotdot_unify_humidity_control_force_read_attributes_callback = NULL;
   uic_mqtt_dotdot_set_unify_humidity_control_force_read_attributes_callback_Stub(
     &set_uic_mqtt_dotdot_unify_humidity_control_force_read_attributes_callback_stub);
@@ -7818,7 +7914,22 @@ void test_automatic_deduction_of_supported_commands()
       
       ));
   }
-  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback) {
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t enabled_value;
+      memset(&enabled_value, 0x00, sizeof(enabled_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        enabled_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback) {
     // Dummy command parameters
       uint8_t user_identifier_value;
       memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
@@ -7835,7 +7946,7 @@ void test_automatic_deduction_of_supported_commands()
       uint8_t stop_minute_value;
       memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
   // Invoke with support check
-    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
       ,
         user_identifier_value,
       
@@ -7853,10 +7964,19 @@ void test_automatic_deduction_of_supported_commands()
       
       ));
   }
-  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback) {
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback) {
+    // Dummy command parameters
+      uint8_t enabled_value;
+      memset(&enabled_value, 0x00, sizeof(enabled_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        enabled_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback) {
     // Dummy command parameters
-      uint8_t set_action_value;
-      memset(&set_action_value, 0x00, sizeof(set_action_value));
       uint8_t user_identifier_value;
       memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
       uint8_t schedule_slotid_value;
@@ -7882,10 +8002,8 @@ void test_automatic_deduction_of_supported_commands()
       uint8_t stop_minute_value;
       memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
   // Invoke with support check
-    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
       ,
-        set_action_value,
-      
         user_identifier_value,
       
         schedule_slotid_value,
@@ -7912,7 +8030,170 @@ void test_automatic_deduction_of_supported_commands()
       
       ));
   }
-  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback) {
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback) {
+    // Dummy command parameters
+      uint8_t set_action_value;
+      memset(&set_action_value, 0x00, sizeof(set_action_value));
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+      uint8_t day_of_week_value;
+      memset(&day_of_week_value, 0x00, sizeof(day_of_week_value));
+      uint8_t start_hour_value;
+      memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+      uint8_t start_minute_value;
+      memset(&start_minute_value, 0x00, sizeof(start_minute_value));
+      uint8_t stop_hour_value;
+      memset(&stop_hour_value, 0x00, sizeof(stop_hour_value));
+      uint8_t stop_minute_value;
+      memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        set_action_value,
+      
+        user_identifier_value,
+      
+        schedule_slotid_value,
+      
+        day_of_week_value,
+      
+        start_hour_value,
+      
+        start_minute_value,
+      
+        stop_hour_value,
+      
+        stop_minute_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+      uint8_t week_day_bitmask_value;
+      memset(&week_day_bitmask_value, 0x00, sizeof(week_day_bitmask_value));
+      uint8_t start_hour_value;
+      memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+      uint8_t start_minute_value;
+      memset(&start_minute_value, 0x00, sizeof(start_minute_value));
+      uint8_t duration_hour_value;
+      memset(&duration_hour_value, 0x00, sizeof(duration_hour_value));
+      uint8_t duration_minute_value;
+      memset(&duration_minute_value, 0x00, sizeof(duration_minute_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        schedule_slotid_value,
+      
+        week_day_bitmask_value,
+      
+        start_hour_value,
+      
+        start_minute_value,
+      
+        duration_hour_value,
+      
+        duration_minute_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        schedule_slotid_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback) {
+    // Dummy command parameters
+      uint8_t set_action_value;
+      memset(&set_action_value, 0x00, sizeof(set_action_value));
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+      uint8_t start_year_value;
+      memset(&start_year_value, 0x00, sizeof(start_year_value));
+      uint8_t start_day_value;
+      memset(&start_day_value, 0x00, sizeof(start_day_value));
+      uint8_t start_hour_value;
+      memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+      uint8_t start_month_value;
+      memset(&start_month_value, 0x00, sizeof(start_month_value));
+      uint8_t start_minute_value;
+      memset(&start_minute_value, 0x00, sizeof(start_minute_value));
+      uint8_t stop_year_value;
+      memset(&stop_year_value, 0x00, sizeof(stop_year_value));
+      uint8_t stop_month_value;
+      memset(&stop_month_value, 0x00, sizeof(stop_month_value));
+      uint8_t stop_day_value;
+      memset(&stop_day_value, 0x00, sizeof(stop_day_value));
+      uint8_t stop_hour_value;
+      memset(&stop_hour_value, 0x00, sizeof(stop_hour_value));
+      uint8_t stop_minute_value;
+      memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        set_action_value,
+      
+        user_identifier_value,
+      
+        schedule_slotid_value,
+      
+        start_year_value,
+      
+        start_day_value,
+      
+        start_hour_value,
+      
+        start_month_value,
+      
+        start_minute_value,
+      
+        stop_year_value,
+      
+        stop_month_value,
+      
+        stop_day_value,
+      
+        stop_hour_value,
+      
+        stop_minute_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        schedule_slotid_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback) {
     // Dummy command parameters
       uint8_t set_action_value;
       memset(&set_action_value, 0x00, sizeof(set_action_value));
@@ -7931,7 +8212,7 @@ void test_automatic_deduction_of_supported_commands()
       uint8_t duration_minute_value;
       memset(&duration_minute_value, 0x00, sizeof(duration_minute_value));
   // Invoke with support check
-    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
       ,
         set_action_value,
       
@@ -7951,6 +8232,21 @@ void test_automatic_deduction_of_supported_commands()
       
       ));
   }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        schedule_slotid_value
+      
+      ));
+  }
   if (NULL != test_uic_mqtt_dotdot_unify_humidity_control_mode_set_callback) {
     // Dummy command parameters
       ModeType mode_value;
@@ -11066,7 +11362,22 @@ void test_automatic_deduction_of_supported_commands()
       
       ));
   }
-  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback) {
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t enabled_value;
+      memset(&enabled_value, 0x00, sizeof(enabled_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        enabled_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback) {
     // Dummy command parameters
       uint8_t user_identifier_value;
       memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
@@ -11083,7 +11394,7 @@ void test_automatic_deduction_of_supported_commands()
       uint8_t stop_minute_value;
       memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
   // Invoke with support check
-    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
       ,
         user_identifier_value,
       
@@ -11101,7 +11412,162 @@ void test_automatic_deduction_of_supported_commands()
       
       ));
   }
-  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback) {
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback) {
+    // Dummy command parameters
+      uint8_t enabled_value;
+      memset(&enabled_value, 0x00, sizeof(enabled_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        enabled_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+      uint8_t start_year_value;
+      memset(&start_year_value, 0x00, sizeof(start_year_value));
+      uint8_t start_month_value;
+      memset(&start_month_value, 0x00, sizeof(start_month_value));
+      uint8_t start_day_value;
+      memset(&start_day_value, 0x00, sizeof(start_day_value));
+      uint8_t start_hour_value;
+      memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+      uint8_t start_minute_value;
+      memset(&start_minute_value, 0x00, sizeof(start_minute_value));
+      uint8_t stop_year_value;
+      memset(&stop_year_value, 0x00, sizeof(stop_year_value));
+      uint8_t stop_month_value;
+      memset(&stop_month_value, 0x00, sizeof(stop_month_value));
+      uint8_t stop_day_value;
+      memset(&stop_day_value, 0x00, sizeof(stop_day_value));
+      uint8_t stop_hour_value;
+      memset(&stop_hour_value, 0x00, sizeof(stop_hour_value));
+      uint8_t stop_minute_value;
+      memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        schedule_slotid_value,
+      
+        start_year_value,
+      
+        start_month_value,
+      
+        start_day_value,
+      
+        start_hour_value,
+      
+        start_minute_value,
+      
+        stop_year_value,
+      
+        stop_month_value,
+      
+        stop_day_value,
+      
+        stop_hour_value,
+      
+        stop_minute_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback) {
+    // Dummy command parameters
+      uint8_t set_action_value;
+      memset(&set_action_value, 0x00, sizeof(set_action_value));
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+      uint8_t day_of_week_value;
+      memset(&day_of_week_value, 0x00, sizeof(day_of_week_value));
+      uint8_t start_hour_value;
+      memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+      uint8_t start_minute_value;
+      memset(&start_minute_value, 0x00, sizeof(start_minute_value));
+      uint8_t stop_hour_value;
+      memset(&stop_hour_value, 0x00, sizeof(stop_hour_value));
+      uint8_t stop_minute_value;
+      memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        set_action_value,
+      
+        user_identifier_value,
+      
+        schedule_slotid_value,
+      
+        day_of_week_value,
+      
+        start_hour_value,
+      
+        start_minute_value,
+      
+        stop_hour_value,
+      
+        stop_minute_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+      uint8_t week_day_bitmask_value;
+      memset(&week_day_bitmask_value, 0x00, sizeof(week_day_bitmask_value));
+      uint8_t start_hour_value;
+      memset(&start_hour_value, 0x00, sizeof(start_hour_value));
+      uint8_t start_minute_value;
+      memset(&start_minute_value, 0x00, sizeof(start_minute_value));
+      uint8_t duration_hour_value;
+      memset(&duration_hour_value, 0x00, sizeof(duration_hour_value));
+      uint8_t duration_minute_value;
+      memset(&duration_minute_value, 0x00, sizeof(duration_minute_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        schedule_slotid_value,
+      
+        week_day_bitmask_value,
+      
+        start_hour_value,
+      
+        start_minute_value,
+      
+        duration_hour_value,
+      
+        duration_minute_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        schedule_slotid_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback) {
     // Dummy command parameters
       uint8_t set_action_value;
       memset(&set_action_value, 0x00, sizeof(set_action_value));
@@ -11130,7 +11596,7 @@ void test_automatic_deduction_of_supported_commands()
       uint8_t stop_minute_value;
       memset(&stop_minute_value, 0x00, sizeof(stop_minute_value));
   // Invoke with support check
-    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
       ,
         set_action_value,
       
@@ -11160,7 +11626,22 @@ void test_automatic_deduction_of_supported_commands()
       
       ));
   }
-  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback) {
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        schedule_slotid_value
+      
+      ));
+  }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback) {
     // Dummy command parameters
       uint8_t set_action_value;
       memset(&set_action_value, 0x00, sizeof(set_action_value));
@@ -11179,7 +11660,7 @@ void test_automatic_deduction_of_supported_commands()
       uint8_t duration_minute_value;
       memset(&duration_minute_value, 0x00, sizeof(duration_minute_value));
   // Invoke with support check
-    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
       ,
         set_action_value,
       
@@ -11199,6 +11680,21 @@ void test_automatic_deduction_of_supported_commands()
       
       ));
   }
+  if (NULL != test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback) {
+    // Dummy command parameters
+      uint8_t user_identifier_value;
+      memset(&user_identifier_value, 0x00, sizeof(user_identifier_value));
+      uint8_t schedule_slotid_value;
+      memset(&schedule_slotid_value, 0x00, sizeof(schedule_slotid_value));
+  // Invoke with support check
+    TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
+      ,
+        user_identifier_value,
+      
+        schedule_slotid_value
+      
+      ));
+  }
   if (NULL != test_uic_mqtt_dotdot_unify_humidity_control_mode_set_callback) {
     // Dummy command parameters
       ModeType mode_value;
diff --git a/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.h b/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.h
index cf53259d15..7f909e84ff 100644
--- a/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.h
+++ b/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.h
@@ -802,13 +802,37 @@
   uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_write_attributes_callback();
 
 
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_week_day_report_callback();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_set_callback();
 
 
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_year_day_report_callback();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_report_callback();
 
 
-  uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_schedule_entry_lock_daily_repeating_report_callback();
+  uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_enable_all_set_callback();
+
+
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_report_callback();
+
+
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_set_callback();
+
+
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_report_callback();
+
+
+  uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_week_day_get_callback();
+
+
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_set_callback();
+
+
+  uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_year_day_get_callback();
+
+
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_set_callback();
+
+
+  uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback_t get_uic_mqtt_dotdot_unify_schedule_entry_lock_daily_repeating_get_callback();
 
 
   uic_mqtt_dotdot_unify_humidity_control_force_read_attributes_callback_t get_uic_mqtt_dotdot_unify_humidity_control_force_read_attributes_callback();
-- 
2.39.5

