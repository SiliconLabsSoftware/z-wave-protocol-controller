/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}

/**
 *
 * @defgroup aox_locator_configuration_attributes Configuration attributes
 * @ingroup aox_locator_configuration
 *
 * @brief This component provides type definitions and helpers for the
 * supported configuration of the AoXLocator cluster.
 *
 * @{
 */

#ifndef AOX_LOCATOR_CONFIGURATION_ATTRIBUTES_H
#define AOX_LOCATOR_CONFIGURATION_ATTRIBUTES_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#include "sl_status.h"
#include "uic_typedefs.h"
#include "zap-types.h"

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
typedef struct {{asSnakeCaseLower label}}_attributes_ {
{{#zcl_attributes}}
  {{#if (isAttributeSupported parent.label label)}}
    {{#if (isMonotonousArray label)}}
  size_t {{asSnakeCaseLower label}}_count;
      {{#if_is_enum type}}
  {{enumType type}} {{asSnakeCaseLower label}};
      {{else if (isString type)}}
  char** {{asSnakeCaseLower label}};
      {{else}}
  {{asUnderlyingType type}}* {{asSnakeCaseLower label}};
      {{/if_is_enum}}
    {{else}}
      {{#if (isString type)}}
  char* {{asSnakeCaseLower label}};
      {{else}}
  {{asUnderlyingType type}} {{asSnakeCaseLower label}};
      {{/if}}
    {{/if}}
  {{/if}}
{{/zcl_attributes}}
} {{asSnakeCaseLower label}}_attributes_t;
{{/if}}
{{/zcl_clusters}}


#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

{{#zcl_clusters}}
{{#if (supportedCluster label)}}

/**
 * @brief Reads in the AttributeStore/Datastore if {{label}} attributes are
 * present and loads them into the configuration.
 *
 * @returns SL_STATUS_OK on success, any other status codes otherwise
 */
sl_status_t {{asSnakeCaseLower label}}_load_attributes_from_attribute_store(void);

/**
 * @brief Stores {{label}} attributes in the AttributeStore/Datastore
 *
 * @returns SL_STATUS_OK on success, any other status codes otherwise
 */
sl_status_t {{asSnakeCaseLower label}}_store_attributes_in_attribute_store(void);

/**
 * @brief Publishes {{label}} attributes to MQTT
 *
 * @returns SL_STATUS_OK on success, any other status codes otherwise
 */

sl_status_t publish_{{asSnakeCaseLower label}}_attributes_to_mqtt();


{{#zcl_attributes}}
  {{#if (isAttributeSupported parent.label label)}}
/**
 * @brief Sets the {{parent.label}} {{label}} Attribute
 *
 * @returns SL_STATUS_OK if successful, any other status code in case of error
 */
sl_status_t {{asSnakeCaseLower parent.label}}_set_{{asSnakeCaseLower label}}_attribute(
    {{#if (isMonotonousArray label)}}
  size_t {{asSnakeCaseLower label}}_count,
      {{#if_is_enum type}}
  {{enumType type}} {{asSnakeCaseLower label}}
      {{else if (isString type)}}
  const char** {{asSnakeCaseLower label}}
      {{else}}
  const {{asUnderlyingType type}}* {{asSnakeCaseLower label}}
      {{/if_is_enum}}
    {{else}}
      {{#if (isString type)}}
  const char* {{asSnakeCaseLower label}}
      {{else}}
  {{asUnderlyingType type}} {{asSnakeCaseLower label}}
      {{/if}}
    {{/if}}
);
  {{/if}}
{{/zcl_attributes}}
{{/if}}
{{/zcl_clusters}}


#ifdef __cplusplus
}
#endif // __cplusplus

#endif // AOX_LOCATOR_CONFIGURATION_ATTRIBUTES_H
/** @} end aox_locator_configuration_attributes */
