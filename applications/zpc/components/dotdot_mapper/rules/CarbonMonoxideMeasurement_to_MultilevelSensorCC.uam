
// Multilevel Sensor Command Class
def zwTYPE          0x3102
def zwSCALE         0x3104
def zwVALUE         0x3105 // Value is int32 with 3 decimal points, i.e. 1000 means 1

// We have a CO sensor in Multilevel sensor.
def ZW_SENSOR_TYPE_CO 0x28
def ZW_CO_MOL_M3_SCALE 0
def ZW_CO_PPM_SCALE    1

// ZCL CO measurement attributes
def zbCARBON_MONOXIDE_MEASURED_VALUE     0x040c0000
def zbCARBON_MONOXIDE_MIN_MEASURED_VALUE 0x040c0001
def zbCARBON_MONOXIDE_MAX_MEASURED_VALUE 0x040c0002
def zbCARBON_MONOXIDE_TOLERANCE          0x040c0003

scope 0 {

// Let's do some *rough* chemistry:
// We need to convert mol.m^-3 into ppm. We assume that our sensors operate in the air.
// ppm is part per million, in the air in means ppm = micro L (CO) / 1 L (Air).
// Let's make this assumption:
//    molar volume of ideal gas at 1 bar and 273.15K is 22.711 L/mol (PV = nRT)
//    (let's ignore the exact temperature, we can't know)
// [mol.m^-3] * 1000 = [mol.L^-1]
// [ppm]             = [mol.m^-3] * 1000 * 22.711 [L.mol^-1]
// i.e. 1ppm ~ 0.0000439128882542 mol.m^-3
// i.e. 1 mol.m^-3 ~ 22711 ppm

// Hmm, perhaps we should just claim undefined if we received a reading in mol.m^-3
// Or adjust the tolerance parameters (zbCARBON_MONOXIDE_TOLERANCE attribute)

r'zbCARBON_MONOXIDE_MEASURED_VALUE =
  if(r'zwTYPE[ZW_SENSOR_TYPE_CO].zwSCALE == ZW_CO_MOL_M3_SCALE) (r'zwTYPE[ZW_SENSOR_TYPE_CO].zwVALUE * 22711 / 1000)
  if(r'zwTYPE[ZW_SENSOR_TYPE_CO].zwSCALE == ZW_CO_PPM_SCALE) (r'zwTYPE[ZW_SENSOR_TYPE_CO].zwVALUE / 1000)
    undefined


r'zbCARBON_MONOXIDE_MIN_MEASURED_VALUE =
  if(r'zbCARBON_MONOXIDE_MEASURED_VALUE > r'zbCARBON_MONOXIDE_MIN_MEASURED_VALUE) undefined r'zbCARBON_MONOXIDE_MEASURED_VALUE

r'zbCARBON_MONOXIDE_MAX_MEASURED_VALUE =
  if(r'zbCARBON_MONOXIDE_MEASURED_VALUE < r'zbCARBON_MONOXIDE_MAX_MEASURED_VALUE) undefined  r'zbCARBON_MONOXIDE_MEASURED_VALUE

// Let's say the tolerance is 50 ppm ? We cannot get this information from Z-Wave devices.
r'zbCARBON_MONOXIDE_TOLERANCE =
  if(e'zbCARBON_MONOXIDE_MEASURED_VALUE) 50 undefined
}
