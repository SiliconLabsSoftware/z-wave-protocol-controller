@startuml

' Style for the diagram
skinparam classFontColor black
skinparam classFontSize 10
skinparam classFontName Helvetica
skinparam sequenceMessageAlign center
skinparam shadowing false
skinparam ArrowColor #000000
skinparam ParticipantBackgroundColor #FFFFFF
skinparam ParticipantBorderColor #480509
skinparam SequenceLifeLineBorderColor #001111
skinparam SequenceLifeLineBorderThickness 2
skinparam NoteBackgroundColor #FFFFFF
skinparam NoteBorderColor #000000

hide footbox
title Z-Wave Supervision transmission\nComponents with processes in grey

' List of participants
participant "User component" as u
participant "Supervision\nCommand Class" as supervision_cc
participant "Supervision Command\nClass Process" as supervision_process #DEDEDE
participant "Z-Wave TX" as tx #DEDEDE
participant "Z-Wave Application\nCommand Handler" as cc_handler

u -> supervision_cc: <b>Supervision_send_data\n(frame data, user_callback_function)
supervision_cc -> supervision_process : Starts new Session ID
supervision_process -> supervision_cc : Session ID: X

supervision_cc -> tx : <b>zwave_tx_send_data</b>\n(Supervision encap(frame data), supervision_callback)
tx -> tx: Sends the frame
activate tx

tx -> supervision_cc: Supervision Callback\n(frame sent OK)
deactivate tx
supervision_cc -> supervision_process : Start timer for Session ID X
activate supervision_process


cc_handler -> supervision_cc : Incoming <b>Supervision Report</b>\n(Session ID X, SUCCESS)

supervision_cc -> supervision_process: Stop timer for Session ID X and close it
deactivate supervision_process
supervision_cc -> u: <b>User callback</b>\n(supervision status: SUCCESS)


@enduml