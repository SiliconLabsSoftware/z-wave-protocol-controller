/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @defgroup zwave_command_type Z-Wave Command Types
 * @brief Helper Class to determine if a command is a GET SET or REPORT
 *
 * @{
 */

#ifndef ZWAVE_COMMAND_TYPE_HPP
#define ZWAVE_COMMAND_TYPE_HPP

#include <stdint.h>
#include <set>
#include "zwave_controller_types.h"
class ZwaveCommandClassType
{
  public:
  typedef enum { SET, GET, REPORT, SUPERVISION, UNKNOWN } type_t;

  /**
   * @brief Get the type of a Z-Wave frame
   *
   * @param command_class Command class byte
   * @param command       Command byte
   * @return type_t
   */
  static inline type_t get_type(zwave_command_class_t command_class,
                                zwave_command_t command)
  {
    uint16_t key = (command_class << 8) | command;
    if (key == 0x6C01) {
      return type_t::SUPERVISION;
    } else if (get_list.count(key)) {
      return type_t::GET;
    } else if (set_list.count(key)) {
      return type_t::SET;
    } else if (rep_list.count(key)) {
      return type_t::REPORT;
    }
    return type_t::UNKNOWN;
  }

  /**
   * @brief Return is a frame is a supporting frame
   *
   * @param command_class Command class byte
   * @param command       Command byte
   * @return true
   * @return false
   */
  static inline bool is_supporting(zwave_command_class_t command_class,
                                   zwave_command_t command)
  {
    uint16_t key = (command_class << 8) | command;
    return supported_list.count(key);
  }

  // The implementation of this is autogenerated
  static const std::set<uint16_t> supported_list;
  static const std::set<uint16_t> rep_list;
  static const std::set<uint16_t> set_list;
  static const std::set<uint16_t> get_list;
};

#endif  //ZWAVE_COMMAND_TYPE_HPP
/** @} end zwave_command_type */
