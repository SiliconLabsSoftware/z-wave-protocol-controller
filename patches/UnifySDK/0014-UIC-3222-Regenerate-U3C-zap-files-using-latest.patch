From f88d025d3d08adde67977dadf98056213a33c975 Mon Sep 17 00:00:00 2001
From: Philippe Coval <philippe.coval@silabs.com>
Date: Wed, 17 Sep 2025 16:45:48 +0200
Subject: [PATCH] UIC-3222: Regenerate U3C zap files using latest

Signed-off-by: Philippe Coval <philippe.coval@silabs.com>
---
 .../src/eed_attribute_store_clusters.c        |   32 +
 .../src/eed_dotdot_create_clusters.cpp        |   87 +
 .../include/dotdot_attribute_id_definitions.h |    9 +
 .../dotdot_cluster_command_id_definitions.h   |   22 +
 .../include/dotdot_cluster_id_definitions.h   |    4 +
 .../zap-generated/include/zap-types.h         |   91 +
 .../readme_ucl_mqtt_reference.md              | 1852 +++++++++-
 .../src/dotdot_attribute_id_definitions.c     |   79 +
 .../src/dotdot_cluster_id_definitions.c       |    5 +
 .../zap-generated/include/dotdot_mqtt.h       | 2588 +++++++-------
 .../include/dotdot_mqtt_attributes.h          |  780 ++---
 .../zap-generated/src/dotdot_mqtt.cpp         | 2244 ++++++------
 .../zap-generated/src/dotdot_mqtt.hpp         |    4 +-
 .../src/dotdot_mqtt_attributes.cpp            | 1592 ++++-----
 .../src/dotdot_mqtt_command_helpers.cpp       | 1248 +++----
 .../src/dotdot_mqtt_command_helpers.hpp       |  480 +--
 .../src/dotdot_mqtt_group_commands.cpp        |   10 +-
 .../test/dotdot_mqtt_test.include             |  514 +--
 .../unify_dotdot_attribute_store_helpers.h    | 1560 ++++-----
 ...ot_attribute_store_attribute_publisher.cpp | 1556 ++++-----
 .../unify_dotdot_attribute_store_helpers.cpp  | 3106 ++++++++---------
 ...fy_dotdot_attribute_store_registration.cpp | 2340 ++++++-------
 .../test/unify_dotdot_attribute_store_test.c  | 1008 +++---
 23 files changed, 11669 insertions(+), 9542 deletions(-)

diff --git a/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_attribute_store_clusters.c b/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_attribute_store_clusters.c
index 8780c887c8..05c5b08f6f 100644
--- a/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_attribute_store_clusters.c
+++ b/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_attribute_store_clusters.c
@@ -2687,6 +2687,38 @@ sl_status_t eed_attribute_store_clusters_init()
     &on_zcl_desired_value_update,
     DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS,
     DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION,
+    DESIRED_ATTRIBUTE);
+  attribute_store_register_callback_by_type_and_state(
+    &on_zcl_desired_value_update,
+    DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE,
+    DESIRED_ATTRIBUTE);
   attribute_store_register_callback_by_type_and_state(
     &on_zcl_desired_value_update,
     DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST,
diff --git a/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_dotdot_create_clusters.cpp b/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_dotdot_create_clusters.cpp
index 8230ced6c8..e3ce84ccee 100644
--- a/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_dotdot_create_clusters.cpp
+++ b/applications/examples/applications/emulated_end_device/components/eed_attribute_store/zap-generated/src/eed_dotdot_create_clusters.cpp
@@ -3990,6 +3990,57 @@ void dotdot_create_configuration_parameters_wrapper(const dotdot_unid_t unid, co
 
 }
 
+void dotdot_create_user_credential_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
+    // Create and set a default value if undefined.
+    dotdot_create_user_credential_supported_user_unique_identifiers(unid,endpoint_id);
+    if (false == dotdot_user_credential_supported_user_unique_identifiers_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_user_credential_supported_user_unique_identifiers(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_user_credential_supported_credential_rules(unid,endpoint_id);
+    if (false == dotdot_user_credential_supported_credential_rules_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_user_credential_supported_credential_rules(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_user_credential_supported_credential_types(unid,endpoint_id);
+    if (false == dotdot_user_credential_supported_credential_types_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_user_credential_supported_credential_types(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_user_credential_supported_user_types(unid,endpoint_id);
+    if (false == dotdot_user_credential_supported_user_types_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_user_credential_supported_user_types(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_user_credential_support_credential_checksum(unid,endpoint_id);
+    if (false == dotdot_user_credential_support_credential_checksum_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_user_credential_support_credential_checksum(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_user_credential_support_admin_pin_code(unid,endpoint_id);
+    if (false == dotdot_user_credential_support_admin_pin_code_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_user_credential_support_admin_pin_code(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_user_credential_support_admin_pin_code_deactivation(unid,endpoint_id);
+    if (false == dotdot_user_credential_support_admin_pin_code_deactivation_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_user_credential_support_admin_pin_code_deactivation(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
+        }
+
+    // Create and set a default value if undefined.
+    dotdot_create_user_credential_admin_pin_code(unid,endpoint_id);
+    if (false == dotdot_user_credential_admin_pin_code_is_reported_defined(unid,endpoint_id)){
+    dotdot_set_user_credential_admin_pin_code(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
+    }
+
+}
+
 void dotdot_create_descriptor_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
     // Create and set a default value if undefined.
     dotdot_create_descriptor_device_type_list(unid,endpoint_id);
@@ -6515,6 +6566,40 @@ void dotdot_unretain_configuration_parameters_wrapper(const dotdot_unid_t unid,
     uic_mqtt_dotdot_configuration_parameters_publish_empty_supported_commands(unid, endpoint_id);
 }
 
+void dotdot_unretain_user_credential_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
+    char base_topic[256];
+    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
+    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);
+
+    uic_mqtt_dotdot_user_credential_supported_user_unique_identifiers_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS).delete_node();
+
+    uic_mqtt_dotdot_user_credential_supported_credential_rules_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES).delete_node();
+
+    uic_mqtt_dotdot_user_credential_supported_credential_types_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES).delete_node();
+
+    uic_mqtt_dotdot_user_credential_supported_user_types_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES).delete_node();
+
+    uic_mqtt_dotdot_user_credential_support_credential_checksum_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM).delete_node();
+
+    uic_mqtt_dotdot_user_credential_support_admin_pin_code_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE).delete_node();
+
+    uic_mqtt_dotdot_user_credential_support_admin_pin_code_deactivation_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION).delete_node();
+
+    uic_mqtt_dotdot_user_credential_admin_pin_code_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
+    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE).delete_node();
+
+
+    uic_mqtt_dotdot_user_credential_unretain_cluster_revision(base_topic);
+    uic_mqtt_dotdot_user_credential_publish_empty_supported_commands(unid, endpoint_id);
+}
+
 void dotdot_unretain_descriptor_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
     char base_topic[256];
     snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
@@ -6707,6 +6792,7 @@ std::map<std::string, eed_cluster_attribute_wrapper> CreateClusterMap = {
 { "Binding", dotdot_create_binding_wrapper },
 { "NameAndLocation", dotdot_create_name_and_location_wrapper },
 { "ConfigurationParameters", dotdot_create_configuration_parameters_wrapper },
+{ "UserCredential", dotdot_create_user_credential_wrapper },
 { "Descriptor", dotdot_create_descriptor_wrapper },
 { "UnifyFanControl", dotdot_create_unify_fan_control_wrapper },
 { "UnifyThermostat", dotdot_create_unify_thermostat_wrapper },
@@ -6758,6 +6844,7 @@ std::map<std::string, eed_cluster_attribute_wrapper> CreateUnretainMap = {
 { "Binding", dotdot_unretain_binding_wrapper },
 { "NameAndLocation", dotdot_unretain_name_and_location_wrapper },
 { "ConfigurationParameters", dotdot_unretain_configuration_parameters_wrapper },
+{ "UserCredential", dotdot_unretain_user_credential_wrapper },
 { "Descriptor", dotdot_unretain_descriptor_wrapper },
 { "UnifyFanControl", dotdot_unretain_unify_fan_control_wrapper },
 { "UnifyThermostat", dotdot_unretain_unify_thermostat_wrapper },
diff --git a/components/uic_dotdot/zap-generated/include/dotdot_attribute_id_definitions.h b/components/uic_dotdot/zap-generated/include/dotdot_attribute_id_definitions.h
index a988971041..b1512d6a82 100644
--- a/components/uic_dotdot/zap-generated/include/dotdot_attribute_id_definitions.h
+++ b/components/uic_dotdot/zap-generated/include/dotdot_attribute_id_definitions.h
@@ -831,6 +831,15 @@ typedef enum {
 #define DOTDOT_NAME_AND_LOCATION_LOCATION_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x1)
 // Definitions for cluster: ConfigurationParameters
 #define DOTDOT_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x0)
+// Definitions for cluster: UserCredential
+#define DOTDOT_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x0)
+#define DOTDOT_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x1)
+#define DOTDOT_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x2)
+#define DOTDOT_USER_CREDENTIAL_SUPPORTED_USER_TYPES_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x3)
+#define DOTDOT_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x4)
+#define DOTDOT_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x5)
+#define DOTDOT_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x6)
+#define DOTDOT_USER_CREDENTIAL_ADMIN_PIN_CODE_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x7)
 // Definitions for cluster: AoXLocator
 #define DOTDOT_AOX_LOCATOR_REPORTING_MODE_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x1)
 #define DOTDOT_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID_ATTRIBUTE_ID ((dotdot_attribute_id_t)0x2)
diff --git a/components/uic_dotdot/zap-generated/include/dotdot_cluster_command_id_definitions.h b/components/uic_dotdot/zap-generated/include/dotdot_cluster_command_id_definitions.h
index 7e33175d4a..958a1064f5 100644
--- a/components/uic_dotdot/zap-generated/include/dotdot_cluster_command_id_definitions.h
+++ b/components/uic_dotdot/zap-generated/include/dotdot_cluster_command_id_definitions.h
@@ -353,6 +353,28 @@
 #define DOTDOT_CONFIGURATION_PARAMETERS_SET_PARAMETER_COMMAND_ID (0x3)
 #define DOTDOT_CONFIGURATION_PARAMETERS_DISCOVER_PARAMETER_RANGE_COMMAND_ID (0x4)
 
+// Commands for cluster: UserCredential
+#define DOTDOT_USER_CREDENTIAL_ADD_USER_COMMAND_ID (0x1)
+#define DOTDOT_USER_CREDENTIAL_MODIFY_USER_COMMAND_ID (0x2)
+#define DOTDOT_USER_CREDENTIAL_DELETE_USER_COMMAND_ID (0x3)
+#define DOTDOT_USER_CREDENTIAL_ADD_CREDENTIAL_COMMAND_ID (0x4)
+#define DOTDOT_USER_CREDENTIAL_MODIFY_CREDENTIAL_COMMAND_ID (0x5)
+#define DOTDOT_USER_CREDENTIAL_DELETE_CREDENTIAL_COMMAND_ID (0x6)
+#define DOTDOT_USER_CREDENTIAL_DELETE_ALL_USERS_COMMAND_ID (0x7)
+#define DOTDOT_USER_CREDENTIAL_DELETE_ALL_CREDENTIALS_COMMAND_ID (0x8)
+#define DOTDOT_USER_CREDENTIAL_DELETE_ALL_CREDENTIALS_BY_TYPE_COMMAND_ID (0x9)
+#define DOTDOT_USER_CREDENTIAL_DELETE_ALL_CREDENTIALS_FOR_USER_COMMAND_ID (0xA)
+#define DOTDOT_USER_CREDENTIAL_DELETE_ALL_CREDENTIALS_FOR_USER_BY_TYPE_COMMAND_ID (0xB)
+#define DOTDOT_USER_CREDENTIAL_CREDENTIAL_LEARN_START_ADD_COMMAND_ID (0xC)
+#define DOTDOT_USER_CREDENTIAL_CREDENTIAL_LEARN_START_MODIFY_COMMAND_ID (0xD)
+#define DOTDOT_USER_CREDENTIAL_CREDENTIAL_LEARN_STOP_COMMAND_ID (0xE)
+#define DOTDOT_USER_CREDENTIAL_CREDENTIAL_ASSOCIATION_COMMAND_ID (0xF)
+#define DOTDOT_USER_CREDENTIAL_GET_USER_CHECKSUM_COMMAND_ID (0x10)
+#define DOTDOT_USER_CREDENTIAL_GET_CREDENTIAL_CHECKSUM_COMMAND_ID (0x11)
+#define DOTDOT_USER_CREDENTIAL_GET_ALL_USERS_CHECKSUM_COMMAND_ID (0x12)
+#define DOTDOT_USER_CREDENTIAL_SET_ADMIN_PIN_CODE_COMMAND_ID (0x13)
+#define DOTDOT_USER_CREDENTIAL_DEACTIVATE_ADMIN_PIN_CODE_COMMAND_ID (0x14)
+
 // Commands for cluster: AoXLocator
 #define DOTDOT_AOX_LOCATOR_IQ_REPORT_COMMAND_ID (0x1)
 #define DOTDOT_AOX_LOCATOR_ANGLE_REPORT_COMMAND_ID (0x2)
diff --git a/components/uic_dotdot/zap-generated/include/dotdot_cluster_id_definitions.h b/components/uic_dotdot/zap-generated/include/dotdot_cluster_id_definitions.h
index 34db7d7b79..ee7d429b0f 100644
--- a/components/uic_dotdot/zap-generated/include/dotdot_cluster_id_definitions.h
+++ b/components/uic_dotdot/zap-generated/include/dotdot_cluster_id_definitions.h
@@ -238,6 +238,10 @@
 #define DOTDOT_CONFIGURATION_PARAMETERS_CLUSTER_ID ((dotdot_cluster_id_t)0xFD07)
 
 
+// Definitions for cluster: UserCredential
+#define DOTDOT_USER_CREDENTIAL_CLUSTER_ID ((dotdot_cluster_id_t)0xFD08)
+
+
 // Definitions for cluster: AoXLocator
 #define DOTDOT_AOX_LOCATOR_CLUSTER_ID ((dotdot_cluster_id_t)0xFD10)
 
diff --git a/components/uic_dotdot/zap-generated/include/zap-types.h b/components/uic_dotdot/zap-generated/include/zap-types.h
index daf85dbdac..9362a37fdc 100644
--- a/components/uic_dotdot/zap-generated/include/zap-types.h
+++ b/components/uic_dotdot/zap-generated/include/zap-types.h
@@ -508,6 +508,28 @@ typedef enum {
   ZCL_COMMISSIONING_STARTUP_CONTROL_JOIN_USING_MAC_ASSOCIATION = 3,
 } CommissioningStartupControl;
 
+// Enum for CredRule
+typedef enum {
+  ZCL_CRED_RULE_SINGLE = 1,
+  ZCL_CRED_RULE_DUAL = 2,
+  ZCL_CRED_RULE_TRIPLE = 3,
+} CredRule;
+
+// Enum for CredType
+typedef enum {
+  ZCL_CRED_TYPE_PIN_CODE = 1,
+  ZCL_CRED_TYPE_PASSWORD = 2,
+  ZCL_CRED_TYPE_RFID_CODE = 3,
+  ZCL_CRED_TYPE_BLE = 4,
+  ZCL_CRED_TYPE_NFC = 5,
+  ZCL_CRED_TYPE_UWB = 6,
+  ZCL_CRED_TYPE_EYE_BIOMETRIC = 7,
+  ZCL_CRED_TYPE_FACE_BIOMETRIC = 8,
+  ZCL_CRED_TYPE_FINGER_BIOMETRIC = 9,
+  ZCL_CRED_TYPE_HAND_BIOMETRIC = 10,
+  ZCL_CRED_TYPE_UNSPECIFIED_BIOMETRIC = 11,
+} CredType;
+
 // Enum for CredentialRuleEnum
 typedef enum {
   ZCL_CREDENTIAL_RULE_ENUM_SINGLE = 0,
@@ -1349,6 +1371,33 @@ typedef enum {
   ZCL_UNIFY_THERMOSTAT_THERMOSTAT_MODE_MANUFACTURER_SPECIFIC = 31,
 } UnifyThermostatThermostatMode;
 
+// Enum for UserModifierType
+typedef enum {
+  ZCL_USER_MODIFIER_TYPE_DNE = 0,
+  ZCL_USER_MODIFIER_TYPE_UNKNOWN = 1,
+  ZCL_USER_MODIFIER_TYPE_Z_WAVE = 2,
+  ZCL_USER_MODIFIER_TYPE_LOCALLY = 3,
+  ZCL_USER_MODIFIER_TYPE_MOBILE_APP_OR_OTHER_IO_T = 4,
+} UserModifierType;
+
+// Enum for UserNameEncodingType
+typedef enum {
+  ZCL_USER_NAME_ENCODING_TYPE_ASCII = 0,
+  ZCL_USER_NAME_ENCODING_TYPE_OEM_EXTENDED_ASCII = 1,
+  ZCL_USER_NAME_ENCODING_TYPE_UTF_16 = 2,
+} UserNameEncodingType;
+
+// Enum for UserTypeEnum
+typedef enum {
+  ZCL_USER_TYPE_ENUM_GENERAL_USER = 0,
+  ZCL_USER_TYPE_ENUM_PROGRAMMING_USER = 3,
+  ZCL_USER_TYPE_ENUM_NON_ACCESS_USER = 4,
+  ZCL_USER_TYPE_ENUM_DURESS_USER = 5,
+  ZCL_USER_TYPE_ENUM_DISPOSABLE_USER = 6,
+  ZCL_USER_TYPE_ENUM_EXPIRING_USER = 7,
+  ZCL_USER_TYPE_ENUM_REMOTE_ONLY_USER = 9,
+} UserTypeEnum;
+
 // Enum for WindowCoveringWindowCoveringType
 typedef enum {
   ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_ROLLERSHADE = 0,
@@ -2129,6 +2178,48 @@ typedef enum {
 #define UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE_FULL_POWER_OFFSET (14)
 #define UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE_MANUFACTURER_SPECIFIC (32768)
 #define UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE_MANUFACTURER_SPECIFIC_OFFSET (15)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_SINGLE (2)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_SINGLE_OFFSET (1)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_DUAL (4)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_DUAL_OFFSET (2)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_TRIPLE (8)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_TRIPLE_OFFSET (3)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_PIN_CODE (1)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_PIN_CODE_OFFSET (0)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_PASSWORD (2)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_PASSWORD_OFFSET (1)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_RFID_CODE (4)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_RFID_CODE_OFFSET (2)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_BLE (8)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_BLE_OFFSET (3)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_NFC (16)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_NFC_OFFSET (4)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_UWB (32)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_UWB_OFFSET (5)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_EYE_BIOMETRIC (64)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_EYE_BIOMETRIC_OFFSET (6)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_FACE_BIOMETRIC (128)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_FACE_BIOMETRIC_OFFSET (7)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_FINGER_BIOMETRIC (256)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_FINGER_BIOMETRIC_OFFSET (8)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_HAND_BIOMETRIC (512)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_HAND_BIOMETRIC_OFFSET (9)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_UNSPECIFIED_BIOMETRIC (1024)
+#define USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_UNSPECIFIED_BIOMETRIC_OFFSET (10)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_GENERAL_USER (1)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_GENERAL_USER_OFFSET (0)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_PROGRAMMING_USER (8)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_PROGRAMMING_USER_OFFSET (3)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_NON_ACCESS_USER (16)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_NON_ACCESS_USER_OFFSET (4)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_DURESS_USER (32)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_DURESS_USER_OFFSET (5)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_DISPOSABLE_USER (64)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_DISPOSABLE_USER_OFFSET (6)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_EXPIRING_USER (128)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_EXPIRING_USER_OFFSET (7)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_REMOTE_ONLY_USER (512)
+#define USER_CREDENTIAL_SUPPORTED_USER_TYPES_REMOTE_ONLY_USER_OFFSET (9)
 #define WINDOW_COVERING_CONFIG_OR_STATUS_OPERATIONAL (1)
 #define WINDOW_COVERING_CONFIG_OR_STATUS_OPERATIONAL_OFFSET (0)
 #define WINDOW_COVERING_CONFIG_OR_STATUS_ONLINE (2)
diff --git a/components/uic_dotdot/zap-generated/readme_ucl_mqtt_reference.md b/components/uic_dotdot/zap-generated/readme_ucl_mqtt_reference.md
index 5316b884c2..18ad4f947e 100644
--- a/components/uic_dotdot/zap-generated/readme_ucl_mqtt_reference.md
+++ b/components/uic_dotdot/zap-generated/readme_ucl_mqtt_reference.md
@@ -51886,6 +51886,1571 @@ mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/ConfigurationParameters/Commands/Force
 <br><br><br>
 
 
+<!-- -->
+<!-- -->
+<!-- NEW Page Cluster Support -->
+<!-- -->
+<!-- -->
+\page user_credential UserCredential Cluster
+The following commands and attributes are accepted as JSON payloads for the
+UserCredential cluster.
+
+<br><br>
+
+<!-- -->
+<!--  START OF UserCredential Attributes Section -->
+<!-- -->
+\section user_credential_attrs UserCredential Attributes
+The following attribute topics are used to retrieve the UserCredential cluster state.
+
+<br>
+
+\subsection user_credential_attr_supported_user_unique_identifiers UserCredential/SupportedUserUniqueIdentifiers Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Attributes/SupportedUserUniqueIdentifiers/Reported
+[PREFIX]/UserCredential/Attributes/SupportedUserUniqueIdentifiers/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster SupportedUserUniqueIdentifiers Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SupportedUserUniqueIdentifiers attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UserCredential/Attributes/SupportedUserUniqueIdentifiers/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportedUserUniqueIdentifiers/Desired { "value": <DESIRED_SUPPORTED_USER_UNIQUE_IDENTIFIERS>}
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportedUserUniqueIdentifiers/Reported { "value": <REPORTED_SUPPORTED_USER_UNIQUE_IDENTIFIERS>}
+
+```
+
+<br><br>
+
+\subsection user_credential_attr_supported_credential_rules UserCredential/SupportedCredentialRules Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Attributes/SupportedCredentialRules/Reported
+[PREFIX]/UserCredential/Attributes/SupportedCredentialRules/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster SupportedCredentialRules Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "UserCredentialSupportedCredentialRules"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SupportedCredentialRules attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UserCredential/Attributes/SupportedCredentialRules/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportedCredentialRules/Desired { "value": <DESIRED_SUPPORTED_CREDENTIAL_RULES>}
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportedCredentialRules/Reported { "value": <REPORTED_SUPPORTED_CREDENTIAL_RULES>}
+
+```
+
+<br><br>
+
+\subsection user_credential_attr_supported_credential_types UserCredential/SupportedCredentialTypes Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Attributes/SupportedCredentialTypes/Reported
+[PREFIX]/UserCredential/Attributes/SupportedCredentialTypes/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster SupportedCredentialTypes Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "UserCredentialSupportedCredentialTypes"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SupportedCredentialTypes attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UserCredential/Attributes/SupportedCredentialTypes/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportedCredentialTypes/Desired { "value": <DESIRED_SUPPORTED_CREDENTIAL_TYPES>}
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportedCredentialTypes/Reported { "value": <REPORTED_SUPPORTED_CREDENTIAL_TYPES>}
+
+```
+
+<br><br>
+
+\subsection user_credential_attr_supported_user_types UserCredential/SupportedUserTypes Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Attributes/SupportedUserTypes/Reported
+[PREFIX]/UserCredential/Attributes/SupportedUserTypes/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster SupportedUserTypes Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "UserCredentialSupportedUserTypes"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SupportedUserTypes attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UserCredential/Attributes/SupportedUserTypes/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportedUserTypes/Desired { "value": <DESIRED_SUPPORTED_USER_TYPES>}
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportedUserTypes/Reported { "value": <REPORTED_SUPPORTED_USER_TYPES>}
+
+```
+
+<br><br>
+
+\subsection user_credential_attr_support_credential_checksum UserCredential/SupportCredentialChecksum Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Attributes/SupportCredentialChecksum/Reported
+[PREFIX]/UserCredential/Attributes/SupportCredentialChecksum/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster SupportCredentialChecksum Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "boolean"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SupportCredentialChecksum attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UserCredential/Attributes/SupportCredentialChecksum/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportCredentialChecksum/Desired { "value": <DESIRED_SUPPORT_CREDENTIAL_CHECKSUM>}
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportCredentialChecksum/Reported { "value": <REPORTED_SUPPORT_CREDENTIAL_CHECKSUM>}
+
+```
+
+<br><br>
+
+\subsection user_credential_attr_support_admin_pin_code UserCredential/SupportAdminPinCode Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Attributes/SupportAdminPinCode/Reported
+[PREFIX]/UserCredential/Attributes/SupportAdminPinCode/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster SupportAdminPinCode Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "boolean"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SupportAdminPinCode attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UserCredential/Attributes/SupportAdminPinCode/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportAdminPinCode/Desired { "value": <DESIRED_SUPPORT_ADMIN_PIN_CODE>}
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportAdminPinCode/Reported { "value": <REPORTED_SUPPORT_ADMIN_PIN_CODE>}
+
+```
+
+<br><br>
+
+\subsection user_credential_attr_support_admin_pin_code_deactivation UserCredential/SupportAdminPinCodeDeactivation Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Attributes/SupportAdminPinCodeDeactivation/Reported
+[PREFIX]/UserCredential/Attributes/SupportAdminPinCodeDeactivation/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster SupportAdminPinCodeDeactivation Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "boolean"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for SupportAdminPinCodeDeactivation attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UserCredential/Attributes/SupportAdminPinCodeDeactivation/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportAdminPinCodeDeactivation/Desired { "value": <DESIRED_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION>}
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/SupportAdminPinCodeDeactivation/Reported { "value": <REPORTED_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION>}
+
+```
+
+<br><br>
+
+\subsection user_credential_attr_admin_pin_code UserCredential/AdminPinCode Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Attributes/AdminPinCode/Reported
+[PREFIX]/UserCredential/Attributes/AdminPinCode/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster AdminPinCode Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "string"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for AdminPinCode attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/+/+/UserCredential/Attributes/AdminPinCode/+'
+
+# Example output
+
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/AdminPinCode/Desired { "value": <DESIRED_ADMIN_PIN_CODE>}
+ucl/by-unid/<UNID>/ep0/UserCredential/Attributes/AdminPinCode/Reported { "value": <REPORTED_ADMIN_PIN_CODE>}
+
+```
+
+<br><br>
+
+
+\subsection user_credential_attr_cluster_revision UserCredential/ClusterRevision Attribute
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Attributes/ClusterRevision/Reported
+[PREFIX]/UserCredential/Attributes/ClusterRevision/Desired
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster ClusterRevision Attribute Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To see desired/reported value for ClusterRevision attribute under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Attributes/ClusterRevision/+'
+# Example output
+ucl/by-unid/<UNID>/<EP>/UserCredential/Attributes/ClusterRevision/Desired { "value": <DESIRED_CLUSTER_REVISION> }
+ucl/by-unid/<UNID>/<EP>/UserCredential/Attributes/ClusterRevision/Reported { "value": <REPORTED_CLUSTER_REVISION> }
+```
+
+<!-- -->
+<!--  END OF UserCredential Attributes Section -->
+<!-- -->
+
+<br><br>
+
+<!-- -->
+<!-- START OF UserCredential Supported Commands Section -->
+<!-- -->
+\section user_credential_recv_cmd_support UserCredential Command Support
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/SupportedCommands
+[PREFIX]/UserCredential/SupportedGeneratedCommands
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Command Support Properties",
+  "type": "object",
+  "properties": {
+      "value": {
+          "type": "array",
+          "items" : {
+            "type": "string",
+            "enum": [
+              "AddUser",
+              "ModifyUser",
+              "DeleteUser",
+              "AddCredential",
+              "ModifyCredential",
+              "DeleteCredential",
+              "DeleteAllUsers",
+              "DeleteAllCredentials",
+              "DeleteAllCredentialsByType",
+              "DeleteAllCredentialsForUser",
+              "DeleteAllCredentialsForUserByType",
+              "CredentialLearnStartAdd",
+              "CredentialLearnStartModify",
+              "CredentialLearnStop",
+              "CredentialAssociation",
+              "GetUserChecksum",
+              "GetCredentialChecksum",
+              "GetAllUsersChecksum",
+              "SetAdminPINCode",
+              "DeactivateAdminPINCode",
+              "WriteAttributes",
+              "ForceReadAttributes"
+            ]
+          }
+        }
+      }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To see supported commands for UserCredential cluster under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/SupportedCommands'
+# Example output
+ucl/by-unid/<UNID>/<EP>/UserCredential/SupportedCommands { "value": ["AddUser","ModifyUser","DeleteUser","AddCredential","ModifyCredential","DeleteCredential","DeleteAllUsers","DeleteAllCredentials","DeleteAllCredentialsByType","DeleteAllCredentialsForUser","DeleteAllCredentialsForUserByType","CredentialLearnStartAdd","CredentialLearnStartModify","CredentialLearnStop","CredentialAssociation","GetUserChecksum","GetCredentialChecksum","GetAllUsersChecksum","SetAdminPINCode","DeactivateAdminPINCode","WriteAttributes", "ForceReadAttributes"] }
+```
+
+To see supported generated commands for UserCredential cluster under the by-unid topic space:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/SupportedGeneratedCommands'
+# Example output
+ucl/by-unid/<UNID>/<EP>/UserCredential/SupportedGeneratedCommands { "value": [] }
+```
+
+<!-- -->
+<!-- END OF UserCredential Supported Commands Section -->
+<!-- -->
+
+<br><br>
+
+<!-- -->
+<!-- START OF UserCredential Commands Section -->
+<!-- -->
+\section user_credential_cmds UserCredential Commands
+
+<br><br>
+
+\subsection user_credential_add_user_cmd UserCredential/AddUser Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/AddUser
+[PREFIX]/UserCredential/GeneratedCommands/AddUser
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster AddUser Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    },
+    "UserType": {
+      "type": "UserTypeEnum"
+    },
+    "UserActiveState": {
+      "type": "boolean"
+    },
+    "CredentialRule": {
+      "type": "CredRule"
+    },
+    "UserName": {
+      "type": "string"
+    },
+    "ExpiringTimeoutMinutes": {
+      "type": "integer"
+    },
+    "UserNameEncoding": {
+      "type": "UserNameEncodingType"
+    }
+  },
+  "required": [
+    "UserUniqueID",
+    "UserType",
+    "UserActiveState",
+    "CredentialRule",
+    "UserName",
+    "ExpiringTimeoutMinutes",
+    "UserNameEncoding"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/AddUser command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/AddUser' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE>,"UserType": <USER_TYPE_VALUE>,"UserActiveState": <USER_ACTIVE_STATE_VALUE>,"CredentialRule": <CREDENTIAL_RULE_VALUE>,"UserName": <USER_NAME_VALUE>,"ExpiringTimeoutMinutes": <EXPIRING_TIMEOUT_MINUTES_VALUE>,"UserNameEncoding": <USER_NAME_ENCODING_VALUE> }'
+```
+
+To receive a UserCredential/AddUser generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/AddUser'
+```
+
+<br><br>
+
+\subsection user_credential_modify_user_cmd UserCredential/ModifyUser Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/ModifyUser
+[PREFIX]/UserCredential/GeneratedCommands/ModifyUser
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster ModifyUser Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    },
+    "UserType": {
+      "type": "UserTypeEnum"
+    },
+    "UserActiveState": {
+      "type": "boolean"
+    },
+    "CredentialRule": {
+      "type": "CredRule"
+    },
+    "UserName": {
+      "type": "string"
+    },
+    "ExpiringTimeoutMinutes": {
+      "type": "integer"
+    },
+    "UserNameEncoding": {
+      "type": "UserNameEncodingType"
+    }
+  },
+  "required": [
+    "UserUniqueID",
+    "UserType",
+    "UserActiveState",
+    "CredentialRule",
+    "UserName",
+    "ExpiringTimeoutMinutes",
+    "UserNameEncoding"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/ModifyUser command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/ModifyUser' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE>,"UserType": <USER_TYPE_VALUE>,"UserActiveState": <USER_ACTIVE_STATE_VALUE>,"CredentialRule": <CREDENTIAL_RULE_VALUE>,"UserName": <USER_NAME_VALUE>,"ExpiringTimeoutMinutes": <EXPIRING_TIMEOUT_MINUTES_VALUE>,"UserNameEncoding": <USER_NAME_ENCODING_VALUE> }'
+```
+
+To receive a UserCredential/ModifyUser generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/ModifyUser'
+```
+
+<br><br>
+
+\subsection user_credential_delete_user_cmd UserCredential/DeleteUser Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/DeleteUser
+[PREFIX]/UserCredential/GeneratedCommands/DeleteUser
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster DeleteUser Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserUniqueID"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/DeleteUser command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/DeleteUser' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE> }'
+```
+
+To receive a UserCredential/DeleteUser generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/DeleteUser'
+```
+
+<br><br>
+
+\subsection user_credential_add_credential_cmd UserCredential/AddCredential Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/AddCredential
+[PREFIX]/UserCredential/GeneratedCommands/AddCredential
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster AddCredential Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    },
+    "CredentialType": {
+      "type": "CredType"
+    },
+    "CredentialSlot": {
+      "type": "integer"
+    },
+    "CredentialData": {
+      "type": "string"
+    }
+  },
+  "required": [
+    "UserUniqueID",
+    "CredentialType",
+    "CredentialSlot",
+    "CredentialData"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/AddCredential command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/AddCredential' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE>,"CredentialType": <CREDENTIAL_TYPE_VALUE>,"CredentialSlot": <CREDENTIAL_SLOT_VALUE>,"CredentialData": <CREDENTIAL_DATA_VALUE> }'
+```
+
+To receive a UserCredential/AddCredential generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/AddCredential'
+```
+
+<br><br>
+
+\subsection user_credential_modify_credential_cmd UserCredential/ModifyCredential Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/ModifyCredential
+[PREFIX]/UserCredential/GeneratedCommands/ModifyCredential
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster ModifyCredential Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    },
+    "CredentialType": {
+      "type": "CredType"
+    },
+    "CredentialSlot": {
+      "type": "integer"
+    },
+    "CredentialData": {
+      "type": "string"
+    }
+  },
+  "required": [
+    "UserUniqueID",
+    "CredentialType",
+    "CredentialSlot",
+    "CredentialData"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/ModifyCredential command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/ModifyCredential' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE>,"CredentialType": <CREDENTIAL_TYPE_VALUE>,"CredentialSlot": <CREDENTIAL_SLOT_VALUE>,"CredentialData": <CREDENTIAL_DATA_VALUE> }'
+```
+
+To receive a UserCredential/ModifyCredential generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/ModifyCredential'
+```
+
+<br><br>
+
+\subsection user_credential_delete_credential_cmd UserCredential/DeleteCredential Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/DeleteCredential
+[PREFIX]/UserCredential/GeneratedCommands/DeleteCredential
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster DeleteCredential Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    },
+    "CredentialType": {
+      "type": "CredType"
+    },
+    "CredentialSlot": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserUniqueID",
+    "CredentialType",
+    "CredentialSlot"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/DeleteCredential command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/DeleteCredential' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE>,"CredentialType": <CREDENTIAL_TYPE_VALUE>,"CredentialSlot": <CREDENTIAL_SLOT_VALUE> }'
+```
+
+To receive a UserCredential/DeleteCredential generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/DeleteCredential'
+```
+
+<br><br>
+
+\subsection user_credential_delete_all_users_cmd UserCredential/DeleteAllUsers Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/DeleteAllUsers
+[PREFIX]/UserCredential/GeneratedCommands/DeleteAllUsers
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster DeleteAllUsers Command Properties",
+  "type": "object",
+  "properties": {
+  },
+  "required": [
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/DeleteAllUsers command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/DeleteAllUsers' -m  '{  }'
+```
+
+To receive a UserCredential/DeleteAllUsers generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/DeleteAllUsers'
+```
+
+<br><br>
+
+\subsection user_credential_delete_all_credentials_cmd UserCredential/DeleteAllCredentials Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/DeleteAllCredentials
+[PREFIX]/UserCredential/GeneratedCommands/DeleteAllCredentials
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster DeleteAllCredentials Command Properties",
+  "type": "object",
+  "properties": {
+  },
+  "required": [
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/DeleteAllCredentials command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/DeleteAllCredentials' -m  '{  }'
+```
+
+To receive a UserCredential/DeleteAllCredentials generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/DeleteAllCredentials'
+```
+
+<br><br>
+
+\subsection user_credential_delete_all_credentials_by_type_cmd UserCredential/DeleteAllCredentialsByType Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/DeleteAllCredentialsByType
+[PREFIX]/UserCredential/GeneratedCommands/DeleteAllCredentialsByType
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster DeleteAllCredentialsByType Command Properties",
+  "type": "object",
+  "properties": {
+    "CredentialType": {
+      "type": "CredType"
+    }
+  },
+  "required": [
+    "CredentialType"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/DeleteAllCredentialsByType command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/DeleteAllCredentialsByType' -m  '{ "CredentialType": <CREDENTIAL_TYPE_VALUE> }'
+```
+
+To receive a UserCredential/DeleteAllCredentialsByType generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/DeleteAllCredentialsByType'
+```
+
+<br><br>
+
+\subsection user_credential_delete_all_credentials_for_user_cmd UserCredential/DeleteAllCredentialsForUser Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/DeleteAllCredentialsForUser
+[PREFIX]/UserCredential/GeneratedCommands/DeleteAllCredentialsForUser
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster DeleteAllCredentialsForUser Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserUniqueID"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/DeleteAllCredentialsForUser command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/DeleteAllCredentialsForUser' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE> }'
+```
+
+To receive a UserCredential/DeleteAllCredentialsForUser generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/DeleteAllCredentialsForUser'
+```
+
+<br><br>
+
+\subsection user_credential_delete_all_credentials_for_user_by_type_cmd UserCredential/DeleteAllCredentialsForUserByType Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/DeleteAllCredentialsForUserByType
+[PREFIX]/UserCredential/GeneratedCommands/DeleteAllCredentialsForUserByType
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster DeleteAllCredentialsForUserByType Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    },
+    "CredentialType": {
+      "type": "CredType"
+    }
+  },
+  "required": [
+    "UserUniqueID",
+    "CredentialType"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/DeleteAllCredentialsForUserByType command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/DeleteAllCredentialsForUserByType' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE>,"CredentialType": <CREDENTIAL_TYPE_VALUE> }'
+```
+
+To receive a UserCredential/DeleteAllCredentialsForUserByType generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/DeleteAllCredentialsForUserByType'
+```
+
+<br><br>
+
+\subsection user_credential_credential_learn_start_add_cmd UserCredential/CredentialLearnStartAdd Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/CredentialLearnStartAdd
+[PREFIX]/UserCredential/GeneratedCommands/CredentialLearnStartAdd
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster CredentialLearnStartAdd Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    },
+    "CredentialType": {
+      "type": "CredType"
+    },
+    "CredentialSlot": {
+      "type": "integer"
+    },
+    "CredentialLearnTimeout": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserUniqueID",
+    "CredentialType",
+    "CredentialSlot",
+    "CredentialLearnTimeout"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/CredentialLearnStartAdd command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/CredentialLearnStartAdd' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE>,"CredentialType": <CREDENTIAL_TYPE_VALUE>,"CredentialSlot": <CREDENTIAL_SLOT_VALUE>,"CredentialLearnTimeout": <CREDENTIAL_LEARN_TIMEOUT_VALUE> }'
+```
+
+To receive a UserCredential/CredentialLearnStartAdd generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/CredentialLearnStartAdd'
+```
+
+<br><br>
+
+\subsection user_credential_credential_learn_start_modify_cmd UserCredential/CredentialLearnStartModify Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/CredentialLearnStartModify
+[PREFIX]/UserCredential/GeneratedCommands/CredentialLearnStartModify
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster CredentialLearnStartModify Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    },
+    "CredentialType": {
+      "type": "CredType"
+    },
+    "CredentialSlot": {
+      "type": "integer"
+    },
+    "CredentialLearnTimeout": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserUniqueID",
+    "CredentialType",
+    "CredentialSlot",
+    "CredentialLearnTimeout"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/CredentialLearnStartModify command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/CredentialLearnStartModify' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE>,"CredentialType": <CREDENTIAL_TYPE_VALUE>,"CredentialSlot": <CREDENTIAL_SLOT_VALUE>,"CredentialLearnTimeout": <CREDENTIAL_LEARN_TIMEOUT_VALUE> }'
+```
+
+To receive a UserCredential/CredentialLearnStartModify generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/CredentialLearnStartModify'
+```
+
+<br><br>
+
+\subsection user_credential_credential_learn_stop_cmd UserCredential/CredentialLearnStop Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/CredentialLearnStop
+[PREFIX]/UserCredential/GeneratedCommands/CredentialLearnStop
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster CredentialLearnStop Command Properties",
+  "type": "object",
+  "properties": {
+  },
+  "required": [
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/CredentialLearnStop command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/CredentialLearnStop' -m  '{  }'
+```
+
+To receive a UserCredential/CredentialLearnStop generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/CredentialLearnStop'
+```
+
+<br><br>
+
+\subsection user_credential_credential_association_cmd UserCredential/CredentialAssociation Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/CredentialAssociation
+[PREFIX]/UserCredential/GeneratedCommands/CredentialAssociation
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster CredentialAssociation Command Properties",
+  "type": "object",
+  "properties": {
+    "CredentialType": {
+      "type": "CredType"
+    },
+    "SourceUserUniqueID": {
+      "type": "integer"
+    },
+    "SourceCredentialSlot": {
+      "type": "integer"
+    },
+    "DestinationUserUniqueID": {
+      "type": "integer"
+    },
+    "DestinationCredentialSlot": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "CredentialType",
+    "SourceUserUniqueID",
+    "SourceCredentialSlot",
+    "DestinationUserUniqueID",
+    "DestinationCredentialSlot"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/CredentialAssociation command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/CredentialAssociation' -m  '{ "CredentialType": <CREDENTIAL_TYPE_VALUE>,"SourceUserUniqueID": <SOURCE_USER_UNIQUEID_VALUE>,"SourceCredentialSlot": <SOURCE_CREDENTIAL_SLOT_VALUE>,"DestinationUserUniqueID": <DESTINATION_USER_UNIQUEID_VALUE>,"DestinationCredentialSlot": <DESTINATION_CREDENTIAL_SLOT_VALUE> }'
+```
+
+To receive a UserCredential/CredentialAssociation generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/CredentialAssociation'
+```
+
+<br><br>
+
+\subsection user_credential_get_user_checksum_cmd UserCredential/GetUserChecksum Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/GetUserChecksum
+[PREFIX]/UserCredential/GeneratedCommands/GetUserChecksum
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster GetUserChecksum Command Properties",
+  "type": "object",
+  "properties": {
+    "UserUniqueID": {
+      "type": "integer"
+    }
+  },
+  "required": [
+    "UserUniqueID"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/GetUserChecksum command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/GetUserChecksum' -m  '{ "UserUniqueID": <USER_UNIQUEID_VALUE> }'
+```
+
+To receive a UserCredential/GetUserChecksum generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/GetUserChecksum'
+```
+
+<br><br>
+
+\subsection user_credential_get_credential_checksum_cmd UserCredential/GetCredentialChecksum Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/GetCredentialChecksum
+[PREFIX]/UserCredential/GeneratedCommands/GetCredentialChecksum
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster GetCredentialChecksum Command Properties",
+  "type": "object",
+  "properties": {
+    "CredentialType": {
+      "type": "CredType"
+    }
+  },
+  "required": [
+    "CredentialType"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/GetCredentialChecksum command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/GetCredentialChecksum' -m  '{ "CredentialType": <CREDENTIAL_TYPE_VALUE> }'
+```
+
+To receive a UserCredential/GetCredentialChecksum generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/GetCredentialChecksum'
+```
+
+<br><br>
+
+\subsection user_credential_get_all_users_checksum_cmd UserCredential/GetAllUsersChecksum Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/GetAllUsersChecksum
+[PREFIX]/UserCredential/GeneratedCommands/GetAllUsersChecksum
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster GetAllUsersChecksum Command Properties",
+  "type": "object",
+  "properties": {
+  },
+  "required": [
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/GetAllUsersChecksum command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/GetAllUsersChecksum' -m  '{  }'
+```
+
+To receive a UserCredential/GetAllUsersChecksum generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/GetAllUsersChecksum'
+```
+
+<br><br>
+
+\subsection user_credential_set_admin_pin_code_cmd UserCredential/SetAdminPINCode Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/SetAdminPINCode
+[PREFIX]/UserCredential/GeneratedCommands/SetAdminPINCode
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster SetAdminPINCode Command Properties",
+  "type": "object",
+  "properties": {
+    "PINCode": {
+      "type": "string"
+    }
+  },
+  "required": [
+    "PINCode"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/SetAdminPINCode command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/SetAdminPINCode' -m  '{ "PINCode": <PIN_CODE_VALUE> }'
+```
+
+To receive a UserCredential/SetAdminPINCode generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/SetAdminPINCode'
+```
+
+<br><br>
+
+\subsection user_credential_deactivate_admin_pin_code_cmd UserCredential/DeactivateAdminPINCode Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/DeactivateAdminPINCode
+[PREFIX]/UserCredential/GeneratedCommands/DeactivateAdminPINCode
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster DeactivateAdminPINCode Command Properties",
+  "type": "object",
+  "properties": {
+  },
+  "required": [
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To send a UserCredential/DeactivateAdminPINCode command under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/DeactivateAdminPINCode' -m  '{  }'
+```
+
+To receive a UserCredential/DeactivateAdminPINCode generated command from a UNID/endpoint:
+
+```console
+mosquitto_sub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/GeneratedCommands/DeactivateAdminPINCode'
+```
+
+<br><br>
+
+\subsection user_credential_write_attr_cmd UserCredential/WriteAttributes Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/WriteAttributes
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster WriteAttributes Command Properties",
+  "type": "object",
+  "properties": {
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To update all UserCredential attributes under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/WriteAttributes' -m  '{  }'
+```
+
+> NOTE: Specify only the list of attributes to write in this command.
+> Unspecified attributes will not be updated.
+
+<br><br>
+
+\subsection user_credential_force_read_attr_cmd UserCredential/ForceReadAttributes Command
+
+**MQTT Topic Pattern:**
+
+```
+[PREFIX]/UserCredential/Commands/ForceReadAttributes
+```
+
+**MQTT Payload JSON Schema:**
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredential Cluster ForceReadAttributes Command Properties",
+  "type": "object",
+  "properties": {
+    "value": {
+      "type": "array"
+      "items": {
+        "type": "string",
+        "enum": [
+          "SupportedUserUniqueIdentifiers",
+          "SupportedCredentialRules",
+          "SupportedCredentialTypes",
+          "SupportedUserTypes",
+          "SupportCredentialChecksum",
+          "SupportAdminPinCode",
+          "SupportAdminPinCodeDeactivation",
+          "AdminPinCode"
+        ]
+      }
+    }
+  },
+  "required": [
+    "value"
+  ]
+}
+```
+
+**Example Mosquitto CLI Tool Usage**
+
+To force read all UserCredential attributes under the by-unid topic space (by sending an empty array):
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/ForceReadAttributes' -m  '{ "value": [] }'
+```
+
+To force read one of the UserCredential attributes under the by-unid topic space:
+
+```console
+mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UserCredential/Commands/ForceReadAttributes' -m  '{ "value": ["SupportedUserUniqueIdentifiers"] }'
+```
+
+<!-- -->
+<!-- END OF UserCredential Commands Section -->
+<!-- -->
+
+<br><br><br>
+
+
 <!-- -->
 <!-- -->
 <!-- NEW Page Cluster Support -->
@@ -54602,33 +56167,6 @@ mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyHumidityControl/Commands/ForceRea
 
 <br><br>
 
-<!-- -->
-<!-- START OF Struct CredentialStruct Section -->
-<!-- -->
-\section struct_credential_struct CredentialStruct Struct
-
-```json
-{
-  "$schema": "http://json-schema.org/draft-07/schema#",
-  "title": "CredentialStruct Struct Properties",
-  "type": "object",
-  "properties": {
-    "CredentialType": {
-      "type": "CredentialTypeEnum"
-    }
-    "CredentialIndex": {
-      "type": "integer"
-    }
-  }
-}
-```
-
-<!-- -->
-<!-- END OF Struct CredentialStruct Section -->
-<!-- -->
-
-<br><br>
-
 <!-- -->
 <!-- START OF Struct DeviceTypeStruct Section -->
 <!-- -->
@@ -55812,6 +57350,62 @@ mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyHumidityControl/Commands/ForceRea
 
 <br><br>
 
+<!-- -->
+<!-- START OF Enum CredRule Section -->
+<!-- -->
+\section enum_cred_rule CredRule Enum
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "CredRule Enum Properties",
+  "type": "string",
+  "enum": [
+    "Single",
+    "Dual",
+    "Triple"
+  ]
+}
+```
+
+<!-- -->
+<!-- END OF Enum CredRule Section -->
+<!-- -->
+
+<br><br>
+
+<!-- -->
+<!-- START OF Enum CredType Section -->
+<!-- -->
+\section enum_cred_type CredType Enum
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "CredType Enum Properties",
+  "type": "string",
+  "enum": [
+    "PINCode",
+    "Password",
+    "RFIDCode",
+    "BLE",
+    "NFC",
+    "UWB",
+    "EyeBiometric",
+    "FaceBiometric",
+    "FingerBiometric",
+    "HandBiometric",
+    "UnspecifiedBiometric"
+  ]
+}
+```
+
+<!-- -->
+<!-- END OF Enum CredType Section -->
+<!-- -->
+
+<br><br>
+
 <!-- -->
 <!-- START OF Enum CredentialRuleEnum Section -->
 <!-- -->
@@ -58217,6 +59811,84 @@ mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyHumidityControl/Commands/ForceRea
 
 <br><br>
 
+<!-- -->
+<!-- START OF Enum UserModifierType Section -->
+<!-- -->
+\section enum_user_modifier_type UserModifierType Enum
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserModifierType Enum Properties",
+  "type": "string",
+  "enum": [
+    "DNE",
+    "Unknown",
+    "Z-Wave",
+    "Locally",
+    "MobileAppOrOtherIoT"
+  ]
+}
+```
+
+<!-- -->
+<!-- END OF Enum UserModifierType Section -->
+<!-- -->
+
+<br><br>
+
+<!-- -->
+<!-- START OF Enum UserNameEncodingType Section -->
+<!-- -->
+\section enum_user_name_encoding_type UserNameEncodingType Enum
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserNameEncodingType Enum Properties",
+  "type": "string",
+  "enum": [
+    "ASCII",
+    "OEMExtendedASCII",
+    "UTF-16"
+  ]
+}
+```
+
+<!-- -->
+<!-- END OF Enum UserNameEncodingType Section -->
+<!-- -->
+
+<br><br>
+
+<!-- -->
+<!-- START OF Enum UserTypeEnum Section -->
+<!-- -->
+\section enum_user_type_enum UserTypeEnum Enum
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserTypeEnum Enum Properties",
+  "type": "string",
+  "enum": [
+    "GeneralUser",
+    "ProgrammingUser",
+    "NonAccessUser",
+    "DuressUser",
+    "DisposableUser",
+    "ExpiringUser",
+    "RemoteOnlyUser"
+  ]
+}
+```
+
+<!-- -->
+<!-- END OF Enum UserTypeEnum Section -->
+<!-- -->
+
+<br><br>
+
 <!-- -->
 <!-- START OF Enum WindowCoveringWindowCoveringType Section -->
 <!-- -->
@@ -60868,6 +62540,132 @@ mosquitto_pub -t 'ucl/by-unid/<UNID>/<EP>/UnifyHumidityControl/Commands/ForceRea
 
 <br><br>
 
+<!-- -->
+<!-- START OF Bitmap UserCredentialSupportedCredentialRules Section -->
+<!-- -->
+\section enum_user_credential_supported_credential_rules UserCredentialSupportedCredentialRules Bitmap
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredentialSupportedCredentialRules Enum Properties",
+  "type": "object",
+  "properties": {
+    "Single": {
+        "type": "boolean"
+    },
+    "Dual": {
+        "type": "boolean"
+    },
+    "Triple": {
+        "type": "boolean"
+    }
+  }
+}
+```
+
+<!-- -->
+<!-- END OF Bitmap UserCredentialSupportedCredentialRules Section -->
+<!-- -->
+
+<br><br>
+
+<!-- -->
+<!-- START OF Bitmap UserCredentialSupportedCredentialTypes Section -->
+<!-- -->
+\section enum_user_credential_supported_credential_types UserCredentialSupportedCredentialTypes Bitmap
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredentialSupportedCredentialTypes Enum Properties",
+  "type": "object",
+  "properties": {
+    "PINCode": {
+        "type": "boolean"
+    },
+    "Password": {
+        "type": "boolean"
+    },
+    "RFIDCode": {
+        "type": "boolean"
+    },
+    "BLE": {
+        "type": "boolean"
+    },
+    "NFC": {
+        "type": "boolean"
+    },
+    "UWB": {
+        "type": "boolean"
+    },
+    "EyeBiometric": {
+        "type": "boolean"
+    },
+    "FaceBiometric": {
+        "type": "boolean"
+    },
+    "FingerBiometric": {
+        "type": "boolean"
+    },
+    "HandBiometric": {
+        "type": "boolean"
+    },
+    "UnspecifiedBiometric": {
+        "type": "boolean"
+    }
+  }
+}
+```
+
+<!-- -->
+<!-- END OF Bitmap UserCredentialSupportedCredentialTypes Section -->
+<!-- -->
+
+<br><br>
+
+<!-- -->
+<!-- START OF Bitmap UserCredentialSupportedUserTypes Section -->
+<!-- -->
+\section enum_user_credential_supported_user_types UserCredentialSupportedUserTypes Bitmap
+
+```json
+{
+  "$schema": "http://json-schema.org/draft-07/schema#",
+  "title": "UserCredentialSupportedUserTypes Enum Properties",
+  "type": "object",
+  "properties": {
+    "GeneralUser": {
+        "type": "boolean"
+    },
+    "ProgrammingUser": {
+        "type": "boolean"
+    },
+    "NonAccessUser": {
+        "type": "boolean"
+    },
+    "DuressUser": {
+        "type": "boolean"
+    },
+    "DisposableUser": {
+        "type": "boolean"
+    },
+    "ExpiringUser": {
+        "type": "boolean"
+    },
+    "RemoteOnlyUser": {
+        "type": "boolean"
+    }
+  }
+}
+```
+
+<!-- -->
+<!-- END OF Bitmap UserCredentialSupportedUserTypes Section -->
+<!-- -->
+
+<br><br>
+
 <!-- -->
 <!-- START OF Bitmap WindowCoveringConfigOrStatus Section -->
 <!-- -->
diff --git a/components/uic_dotdot/zap-generated/src/dotdot_attribute_id_definitions.c b/components/uic_dotdot/zap-generated/src/dotdot_attribute_id_definitions.c
index badc743381..372b67422a 100644
--- a/components/uic_dotdot/zap-generated/src/dotdot_attribute_id_definitions.c
+++ b/components/uic_dotdot/zap-generated/src/dotdot_attribute_id_definitions.c
@@ -1947,6 +1947,31 @@ const char *uic_dotdot_get_attribute_name(dotdot_cluster_id_t cluster_id,
           return "Unknown";
       }
       // clang-format off
+    case DOTDOT_USER_CREDENTIAL_CLUSTER_ID:
+      // clang-format on
+      switch (attribute_id) {
+        // clang-format off
+        case DOTDOT_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS_ATTRIBUTE_ID:
+          return "SupportedUserUniqueIdentifiers";
+        case DOTDOT_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_ATTRIBUTE_ID:
+          return "SupportedCredentialRules";
+        case DOTDOT_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_ATTRIBUTE_ID:
+          return "SupportedCredentialTypes";
+        case DOTDOT_USER_CREDENTIAL_SUPPORTED_USER_TYPES_ATTRIBUTE_ID:
+          return "SupportedUserTypes";
+        case DOTDOT_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM_ATTRIBUTE_ID:
+          return "SupportCredentialChecksum";
+        case DOTDOT_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_ATTRIBUTE_ID:
+          return "SupportAdminPinCode";
+        case DOTDOT_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION_ATTRIBUTE_ID:
+          return "SupportAdminPinCodeDeactivation";
+        case DOTDOT_USER_CREDENTIAL_ADMIN_PIN_CODE_ATTRIBUTE_ID:
+          return "AdminPinCode";
+          // clang-format on
+        default:
+          return "Unknown";
+      }
+      // clang-format off
     case DOTDOT_AOX_LOCATOR_CLUSTER_ID:
       // clang-format on
       switch (attribute_id) {
@@ -4415,6 +4440,32 @@ dotdot_attribute_id_t
         return DOTDOT_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS_ATTRIBUTE_ID;
       }
     break;
+    case DOTDOT_USER_CREDENTIAL_CLUSTER_ID:
+      if (strcmp ("SupportedUserUniqueIdentifiers", attribute_name) == 0) {
+        return DOTDOT_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS_ATTRIBUTE_ID;
+      }
+      if (strcmp ("SupportedCredentialRules", attribute_name) == 0) {
+        return DOTDOT_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_ATTRIBUTE_ID;
+      }
+      if (strcmp ("SupportedCredentialTypes", attribute_name) == 0) {
+        return DOTDOT_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_ATTRIBUTE_ID;
+      }
+      if (strcmp ("SupportedUserTypes", attribute_name) == 0) {
+        return DOTDOT_USER_CREDENTIAL_SUPPORTED_USER_TYPES_ATTRIBUTE_ID;
+      }
+      if (strcmp ("SupportCredentialChecksum", attribute_name) == 0) {
+        return DOTDOT_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM_ATTRIBUTE_ID;
+      }
+      if (strcmp ("SupportAdminPinCode", attribute_name) == 0) {
+        return DOTDOT_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_ATTRIBUTE_ID;
+      }
+      if (strcmp ("SupportAdminPinCodeDeactivation", attribute_name) == 0) {
+        return DOTDOT_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION_ATTRIBUTE_ID;
+      }
+      if (strcmp ("AdminPinCode", attribute_name) == 0) {
+        return DOTDOT_USER_CREDENTIAL_ADMIN_PIN_CODE_ATTRIBUTE_ID;
+      }
+    break;
     case DOTDOT_AOX_LOCATOR_CLUSTER_ID:
       if (strcmp ("ReportingMode", attribute_name) == 0) {
         return DOTDOT_AOX_LOCATOR_REPORTING_MODE_ATTRIBUTE_ID;
@@ -6506,6 +6557,31 @@ dotdot_attribute_json_type_t
           return JSON_TYPE_UNKNOWN;
       }
       // clang-format off
+    case DOTDOT_USER_CREDENTIAL_CLUSTER_ID:
+      // clang-format on
+      switch (attribute_id) {
+        // clang-format off
+        case DOTDOT_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_USER_CREDENTIAL_SUPPORTED_USER_TYPES_ATTRIBUTE_ID:
+          return JSON_TYPE_NUMBER;
+                case DOTDOT_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM_ATTRIBUTE_ID:
+          return JSON_TYPE_BOOL;
+        case DOTDOT_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_ATTRIBUTE_ID:
+          return JSON_TYPE_BOOL;
+        case DOTDOT_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION_ATTRIBUTE_ID:
+          return JSON_TYPE_BOOL;
+        case DOTDOT_USER_CREDENTIAL_ADMIN_PIN_CODE_ATTRIBUTE_ID:
+          return JSON_TYPE_STRING;
+          // clang-format on
+        default:
+          return JSON_TYPE_UNKNOWN;
+      }
+      // clang-format off
     case DOTDOT_AOX_LOCATOR_CLUSTER_ID:
       // clang-format on
       switch (attribute_id) {
@@ -6982,6 +7058,9 @@ bool uic_dotdot_attribute_is_enum(dotdot_cluster_id_t cluster_id,
   if (64775 == cluster_id) {
   }
 
+  if (64776 == cluster_id) {
+  }
+
   if (64786 == cluster_id) {
   }
 
diff --git a/components/uic_dotdot/zap-generated/src/dotdot_cluster_id_definitions.c b/components/uic_dotdot/zap-generated/src/dotdot_cluster_id_definitions.c
index 8699e827dc..a5c8e4d09b 100644
--- a/components/uic_dotdot/zap-generated/src/dotdot_cluster_id_definitions.c
+++ b/components/uic_dotdot/zap-generated/src/dotdot_cluster_id_definitions.c
@@ -120,6 +120,8 @@ const char* uic_dotdot_get_cluster_name(dotdot_cluster_id_t cluster_id) {
     return "NameAndLocation";
   case DOTDOT_CONFIGURATION_PARAMETERS_CLUSTER_ID:
     return "ConfigurationParameters";
+  case DOTDOT_USER_CREDENTIAL_CLUSTER_ID:
+    return "UserCredential";
   case DOTDOT_AOX_LOCATOR_CLUSTER_ID:
     return "AoXLocator";
   case DOTDOT_AOX_POSITION_ESTIMATION_CLUSTER_ID:
@@ -293,6 +295,9 @@ dotdot_cluster_id_t uic_dotdot_get_cluster_id(const char* cluster_name) {
  if (strcmp ("ConfigurationParameters", cluster_name) == 0) {
    return DOTDOT_CONFIGURATION_PARAMETERS_CLUSTER_ID;
  }
+ if (strcmp ("UserCredential", cluster_name) == 0) {
+   return DOTDOT_USER_CREDENTIAL_CLUSTER_ID;
+ }
  if (strcmp ("AoXLocator", cluster_name) == 0) {
    return DOTDOT_AOX_LOCATOR_CLUSTER_ID;
  }
diff --git a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt.h b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt.h
index 47a3d4a00c..7106f0f0fc 100644
--- a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt.h
+++ b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt.h
@@ -111,17 +111,17 @@ typedef sl_status_t (*uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_t
 );
 
 typedef struct {
-  int8_t zcl_version;
-  int8_t application_version;
-  int8_t stack_version;
-  int8_t hw_version;
+  uint8_t zcl_version;
+  uint8_t application_version;
+  uint8_t stack_version;
+  uint8_t hw_version;
   const char* manufacturer_name;
   const char* model_identifier;
   const char* date_code;
   uint8_t power_source;
   uint8_t generic_device_class;
   uint8_t generic_device_type;
-  uint8_t product_code;
+  const char* product_code;
   const char* producturl;
   const char* manufacturer_version_details;
   const char* serial_number;
@@ -277,7 +277,7 @@ void uic_mqtt_dotdot_clear_basic_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_basic_zcl_version_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -307,7 +307,7 @@ sl_status_t uic_mqtt_dotdot_basic_zcl_version_unretain(
  */
 sl_status_t uic_mqtt_dotdot_basic_application_version_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -337,7 +337,7 @@ sl_status_t uic_mqtt_dotdot_basic_application_version_unretain(
  */
 sl_status_t uic_mqtt_dotdot_basic_stack_version_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -367,7 +367,7 @@ sl_status_t uic_mqtt_dotdot_basic_stack_version_unretain(
  */
 sl_status_t uic_mqtt_dotdot_basic_hw_version_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -577,7 +577,7 @@ sl_status_t uic_mqtt_dotdot_basic_generic_device_type_unretain(
  */
 sl_status_t uic_mqtt_dotdot_basic_product_code_publish(
   const char *base_topic,
-  uint8_t value,
+  const char* value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -942,62 +942,62 @@ void uic_mqtt_dotdot_basic_publish_empty_supported_commands(
 // Callback types used by the power_configuration cluster
 
 typedef struct {
-  int16_t mains_voltage;
-  int8_t mains_frequency;
+  uint16_t mains_voltage;
+  uint8_t mains_frequency;
   uint8_t mains_alarm_mask;
-  int16_t mains_voltage_min_threshold;
-  int16_t mains_voltage_max_threshold;
-  int16_t mains_voltage_dwell_trip_point;
-  int8_t battery_voltage;
-  int8_t battery_percentage_remaining;
+  uint16_t mains_voltage_min_threshold;
+  uint16_t mains_voltage_max_threshold;
+  uint16_t mains_voltage_dwell_trip_point;
+  uint8_t battery_voltage;
+  uint8_t battery_percentage_remaining;
   const char* battery_manufacturer;
   uint8_t battery_size;
-  int16_t batterya_hr_rating;
-  int8_t battery_quantity;
-  int8_t battery_rated_voltage;
+  uint16_t batterya_hr_rating;
+  uint8_t battery_quantity;
+  uint8_t battery_rated_voltage;
   uint8_t battery_alarm_mask;
-  int8_t battery_voltage_min_threshold;
-  int8_t battery_voltage_threshold1;
-  int8_t battery_voltage_threshold2;
-  int8_t battery_voltage_threshold3;
-  int8_t battery_percentage_min_threshold;
-  int8_t battery_percentage_threshold1;
-  int8_t battery_percentage_threshold2;
-  int8_t battery_percentage_threshold3;
+  uint8_t battery_voltage_min_threshold;
+  uint8_t battery_voltage_threshold1;
+  uint8_t battery_voltage_threshold2;
+  uint8_t battery_voltage_threshold3;
+  uint8_t battery_percentage_min_threshold;
+  uint8_t battery_percentage_threshold1;
+  uint8_t battery_percentage_threshold2;
+  uint8_t battery_percentage_threshold3;
   uint32_t battery_alarm_state;
-  int8_t battery2_voltage;
-  int8_t battery2_percentage_remaining;
+  uint8_t battery2_voltage;
+  uint8_t battery2_percentage_remaining;
   const char* battery2_manufacturer;
   uint8_t battery2_size;
-  int16_t battery2a_hr_rating;
-  int8_t battery2_quantity;
-  int8_t battery2_rated_voltage;
+  uint16_t battery2a_hr_rating;
+  uint8_t battery2_quantity;
+  uint8_t battery2_rated_voltage;
   uint8_t battery2_alarm_mask;
-  int8_t battery2_voltage_min_threshold;
-  int8_t battery2_voltage_threshold1;
-  int8_t battery2_voltage_threshold2;
-  int8_t battery2_voltage_threshold3;
-  int8_t battery2_percentage_min_threshold;
-  int8_t battery2_percentage_threshold1;
-  int8_t battery2_percentage_threshold2;
-  int8_t battery2_percentage_threshold3;
+  uint8_t battery2_voltage_min_threshold;
+  uint8_t battery2_voltage_threshold1;
+  uint8_t battery2_voltage_threshold2;
+  uint8_t battery2_voltage_threshold3;
+  uint8_t battery2_percentage_min_threshold;
+  uint8_t battery2_percentage_threshold1;
+  uint8_t battery2_percentage_threshold2;
+  uint8_t battery2_percentage_threshold3;
   uint32_t battery2_alarm_state;
-  int8_t battery3_voltage;
-  int8_t battery3_percentage_remaining;
+  uint8_t battery3_voltage;
+  uint8_t battery3_percentage_remaining;
   const char* battery3_manufacturer;
   uint8_t battery3_size;
-  int16_t battery3a_hr_rating;
-  int8_t battery3_quantity;
-  int8_t battery3_rated_voltage;
+  uint16_t battery3a_hr_rating;
+  uint8_t battery3_quantity;
+  uint8_t battery3_rated_voltage;
   uint8_t battery3_alarm_mask;
-  int8_t battery3_voltage_min_threshold;
-  int8_t battery3_voltage_threshold1;
-  int8_t battery3_voltage_threshold2;
-  int8_t battery3_voltage_threshold3;
-  int8_t battery3_percentage_min_threshold;
-  int8_t battery3_percentage_threshold1;
-  int8_t battery3_percentage_threshold2;
-  int8_t battery3_percentage_threshold3;
+  uint8_t battery3_voltage_min_threshold;
+  uint8_t battery3_voltage_threshold1;
+  uint8_t battery3_voltage_threshold2;
+  uint8_t battery3_voltage_threshold3;
+  uint8_t battery3_percentage_min_threshold;
+  uint8_t battery3_percentage_threshold1;
+  uint8_t battery3_percentage_threshold2;
+  uint8_t battery3_percentage_threshold3;
   uint32_t battery3_alarm_state;
 } uic_mqtt_dotdot_power_configuration_state_t;
 
@@ -1140,7 +1140,7 @@ void uic_mqtt_dotdot_clear_power_configuration_force_read_attributes_callbacks()
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1170,7 +1170,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_frequency_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1230,7 +1230,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_alarm_mask_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_min_threshold_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1260,7 +1260,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_min_threshold_unre
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_max_threshold_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1290,7 +1290,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_max_threshold_unre
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_dwell_trip_point_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1320,7 +1320,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_dwell_trip_point_u
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1350,7 +1350,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_remaining_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1440,7 +1440,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_size_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_batterya_hr_rating_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1470,7 +1470,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_batterya_hr_rating_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_quantity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1500,7 +1500,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_quantity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_rated_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1560,7 +1560,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_alarm_mask_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1590,7 +1590,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_min_threshold_un
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1620,7 +1620,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold1_unret
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1650,7 +1650,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold2_unret
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1680,7 +1680,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold3_unret
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1710,7 +1710,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_min_threshold
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1740,7 +1740,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold1_un
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1770,7 +1770,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold2_un
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1830,7 +1830,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_alarm_state_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1860,7 +1860,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_remaining_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1950,7 +1950,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_size_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2a_hr_rating_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -1980,7 +1980,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2a_hr_rating_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_quantity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2010,7 +2010,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_quantity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_rated_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2070,7 +2070,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_alarm_mask_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2100,7 +2100,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_min_threshold_u
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2130,7 +2130,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold1_unre
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2160,7 +2160,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold2_unre
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2190,7 +2190,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold3_unre
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2220,7 +2220,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_min_threshol
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2250,7 +2250,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold1_u
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2280,7 +2280,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold2_u
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2340,7 +2340,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_alarm_state_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2370,7 +2370,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_remaining_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2460,7 +2460,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_size_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3a_hr_rating_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2490,7 +2490,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3a_hr_rating_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_quantity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2520,7 +2520,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_quantity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_rated_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2580,7 +2580,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_alarm_mask_unretain(
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2610,7 +2610,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_min_threshold_u
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2640,7 +2640,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold1_unre
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2670,7 +2670,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold2_unre
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2700,7 +2700,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold3_unre
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2730,7 +2730,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_min_threshol
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2760,7 +2760,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold1_u
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2790,7 +2790,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold2_u
  */
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -2888,12 +2888,12 @@ typedef struct {
   int16_t current_temperature;
   int16_t min_temp_experienced;
   int16_t max_temp_experienced;
-  int16_t over_temp_total_dwell;
+  uint16_t over_temp_total_dwell;
   uint8_t device_temp_alarm_mask;
   int16_t low_temp_threshold;
   int16_t high_temp_threshold;
-  int32_t low_temp_dwell_trip_point;
-  int32_t high_temp_dwell_trip_point;
+  uint32_t low_temp_dwell_trip_point;
+  uint32_t high_temp_dwell_trip_point;
 } uic_mqtt_dotdot_device_temperature_configuration_state_t;
 
 typedef struct {
@@ -3077,7 +3077,7 @@ sl_status_t uic_mqtt_dotdot_device_temperature_configuration_max_temp_experience
  */
 sl_status_t uic_mqtt_dotdot_device_temperature_configuration_over_temp_total_dwell_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -3197,7 +3197,7 @@ sl_status_t uic_mqtt_dotdot_device_temperature_configuration_high_temp_threshold
  */
 sl_status_t uic_mqtt_dotdot_device_temperature_configuration_low_temp_dwell_trip_point_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -3227,7 +3227,7 @@ sl_status_t uic_mqtt_dotdot_device_temperature_configuration_low_temp_dwell_trip
  */
 sl_status_t uic_mqtt_dotdot_device_temperature_configuration_high_temp_dwell_trip_point_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -3294,14 +3294,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_identify_identify_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t identify_time
+    uint16_t identify_time
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_identify_identify_query_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t timeout
+    uint16_t timeout
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_identify_identify_query_callback_t)(
@@ -3320,7 +3320,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_identify_trigger_effect_callback_t)(
 );
 
 typedef struct {
-  int16_t identify_time;
+  uint16_t identify_time;
 } uic_mqtt_dotdot_identify_state_t;
 
 typedef struct {
@@ -3347,14 +3347,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_identify_force_read_attributes_callback_t)
  * @brief Command fields for Identify/Identify
  */
 typedef struct {
-  int16_t identify_time;
+  uint16_t identify_time;
 } uic_mqtt_dotdot_identify_command_identify_fields_t;
 
 /**
  * @brief Command fields for Identify/IdentifyQueryResponse
  */
 typedef struct {
-  int16_t timeout;
+  uint16_t timeout;
 } uic_mqtt_dotdot_identify_command_identify_query_response_fields_t;
 
 /**
@@ -3589,7 +3589,7 @@ void uic_mqtt_dotdot_clear_identify_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_identify_identify_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -3656,7 +3656,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_groups_add_group_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t group_id,
+    uint16_t group_id,
 
     const char* group_name
 
@@ -3667,14 +3667,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_groups_add_group_response_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t status,
 
-    int16_t group_id
+    uint16_t group_id
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_groups_view_group_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t group_id
+    uint16_t group_id
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_groups_view_group_response_callback_t)(
@@ -3683,7 +3683,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_groups_view_group_response_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t status,
 
-    int16_t group_id,
+    uint16_t group_id,
 
     const char* group_name
 
@@ -3693,24 +3693,24 @@ typedef sl_status_t (*uic_mqtt_dotdot_groups_get_group_membership_callback_t)(
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t group_list_count,
-    const int16_t *group_list
+    const uint16_t *group_list
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_groups_get_group_membership_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t capacity,
+    uint8_t capacity,
 
     uint8_t group_list_count,
-    const int16_t *group_list
+    const uint16_t *group_list
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_groups_remove_group_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t group_id
+    uint16_t group_id
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_groups_remove_group_response_callback_t)(
@@ -3719,7 +3719,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_groups_remove_group_response_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t status,
 
-    int16_t group_id
+    uint16_t group_id
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_groups_remove_all_groups_callback_t)(
@@ -3731,7 +3731,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_groups_add_group_if_identifying_callback_t
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t group_id,
+    uint16_t group_id,
 
     const char* group_name
 
@@ -3765,7 +3765,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_groups_force_read_attributes_callback_t)(
  * @brief Command fields for Groups/AddGroup
  */
 typedef struct {
-  int16_t group_id;
+  uint16_t group_id;
 
   const char* group_name;
 } uic_mqtt_dotdot_groups_command_add_group_fields_t;
@@ -3776,14 +3776,14 @@ typedef struct {
 typedef struct {
   uint8_t status;
 
-  int16_t group_id;
+  uint16_t group_id;
 } uic_mqtt_dotdot_groups_command_add_group_response_fields_t;
 
 /**
  * @brief Command fields for Groups/ViewGroup
  */
 typedef struct {
-  int16_t group_id;
+  uint16_t group_id;
 } uic_mqtt_dotdot_groups_command_view_group_fields_t;
 
 /**
@@ -3792,7 +3792,7 @@ typedef struct {
 typedef struct {
   uint8_t status;
 
-  int16_t group_id;
+  uint16_t group_id;
 
   const char* group_name;
 } uic_mqtt_dotdot_groups_command_view_group_response_fields_t;
@@ -3802,24 +3802,24 @@ typedef struct {
  */
 typedef struct {
   uint8_t group_list_count;
-  const int16_t *group_list;
+  const uint16_t *group_list;
 } uic_mqtt_dotdot_groups_command_get_group_membership_fields_t;
 
 /**
  * @brief Command fields for Groups/GetGroupMembershipResponse
  */
 typedef struct {
-  int8_t capacity;
+  uint8_t capacity;
 
   uint8_t group_list_count;
-  const int16_t *group_list;
+  const uint16_t *group_list;
 } uic_mqtt_dotdot_groups_command_get_group_membership_response_fields_t;
 
 /**
  * @brief Command fields for Groups/RemoveGroup
  */
 typedef struct {
-  int16_t group_id;
+  uint16_t group_id;
 } uic_mqtt_dotdot_groups_command_remove_group_fields_t;
 
 /**
@@ -3828,14 +3828,14 @@ typedef struct {
 typedef struct {
   uint8_t status;
 
-  int16_t group_id;
+  uint16_t group_id;
 } uic_mqtt_dotdot_groups_command_remove_group_response_fields_t;
 
 /**
  * @brief Command fields for Groups/AddGroupIfIdentifying
  */
 typedef struct {
-  int16_t group_id;
+  uint16_t group_id;
 
   const char* group_name;
 } uic_mqtt_dotdot_groups_command_add_group_if_identifying_fields_t;
@@ -4370,18 +4370,18 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_add_scene_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * scene_name,
+    const char* scene_name,
 
     uint8_t extension_field_sets_count,
     const SExtensionFieldSetList *extension_field_sets,
 
-    int8_t transition_time100ms
+    uint8_t transition_time100ms
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_add_scene_response_callback_t)(
@@ -4390,18 +4390,18 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_add_scene_response_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_view_scene_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_view_scene_response_callback_t)(
@@ -4410,13 +4410,13 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_view_scene_response_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * scene_name,
+    const char* scene_name,
 
     uint8_t extension_field_sets_count,
     const SExtensionFieldSetList *extension_field_sets
@@ -4426,9 +4426,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_scene_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_scene_response_callback_t)(
@@ -4437,16 +4437,16 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_scene_response_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_all_scenes_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * groupid
+    uint16_t groupid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_t)(
@@ -4455,16 +4455,16 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback
     uic_mqtt_dotdot_callback_call_type_t call_type,
     zclStatus status,
 
-    uint8_t * groupid
+    uint16_t groupid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_store_scene_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_store_scene_response_callback_t)(
@@ -4473,27 +4473,27 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_store_scene_response_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_recall_scene_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time
+    uint16_t transition_time
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_get_scene_membership_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * groupid
+    uint16_t groupid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_t)(
@@ -4502,25 +4502,25 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_get_scene_membership_response_callb
     uic_mqtt_dotdot_callback_call_type_t call_type,
     zclStatus status,
 
-    int8_t capacity,
+    uint8_t capacity,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
     uint8_t scene_list_count,
-    const int8_t *scene_list
+    const uint8_t *scene_list
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * scene_name,
+    const char* scene_name,
 
     uint8_t extension_field_sets_count,
     const SExtensionFieldSetList *extension_field_sets
@@ -4532,18 +4532,18 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callbac
     uic_mqtt_dotdot_callback_call_type_t call_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_t)(
@@ -4552,13 +4552,13 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callba
     uic_mqtt_dotdot_callback_call_type_t call_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * scene_name,
+    const char* scene_name,
 
     uint8_t extension_field_sets_count,
     const SExtensionFieldSetList *extension_field_sets
@@ -4570,13 +4570,13 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_copy_scene_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t mode,
 
-    uint8_t * group_identifier_from,
+    uint16_t group_identifier_from,
 
-    int8_t scene_identifier_from,
+    uint8_t scene_identifier_from,
 
-    uint8_t * group_identifier_to,
+    uint16_t group_identifier_to,
 
-    int8_t scene_identifier_to
+    uint8_t scene_identifier_to
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_copy_scene_response_callback_t)(
@@ -4585,16 +4585,16 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_copy_scene_response_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     zclStatus status,
 
-    uint8_t * group_identifier_from,
+    uint16_t group_identifier_from,
 
-    int8_t scene_identifier_from
+    uint8_t scene_identifier_from
 
 );
 
 typedef struct {
-  int8_t scene_count;
-  int8_t current_scene;
-  uint8_t * current_group;
+  uint8_t scene_count;
+  uint8_t current_scene;
+  uint16_t current_group;
   bool scene_valid;
   uint8_t name_support;
   uint64_t last_configured_by;
@@ -4632,18 +4632,18 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_force_read_attributes_callback_t)(
  * @brief Command fields for Scenes/AddScene
  */
 typedef struct {
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
-  uint8_t * scene_name;
+  const char* scene_name;
 
   uint8_t extension_field_sets_count;
   const SExtensionFieldSetList *extension_field_sets;
 
-  int8_t transition_time100ms;
+  uint8_t transition_time100ms;
 } uic_mqtt_dotdot_scenes_command_add_scene_fields_t;
 
 /**
@@ -4652,18 +4652,18 @@ typedef struct {
 typedef struct {
   zclStatus status;
 
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 } uic_mqtt_dotdot_scenes_command_add_scene_response_fields_t;
 
 /**
  * @brief Command fields for Scenes/ViewScene
  */
 typedef struct {
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 } uic_mqtt_dotdot_scenes_command_view_scene_fields_t;
 
 /**
@@ -4672,13 +4672,13 @@ typedef struct {
 typedef struct {
   zclStatus status;
 
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
-  uint8_t * scene_name;
+  const char* scene_name;
 
   uint8_t extension_field_sets_count;
   const SExtensionFieldSetList *extension_field_sets;
@@ -4688,9 +4688,9 @@ typedef struct {
  * @brief Command fields for Scenes/RemoveScene
  */
 typedef struct {
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 } uic_mqtt_dotdot_scenes_command_remove_scene_fields_t;
 
 /**
@@ -4699,16 +4699,16 @@ typedef struct {
 typedef struct {
   zclStatus status;
 
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 } uic_mqtt_dotdot_scenes_command_remove_scene_response_fields_t;
 
 /**
  * @brief Command fields for Scenes/RemoveAllScenes
  */
 typedef struct {
-  uint8_t * groupid;
+  uint16_t groupid;
 } uic_mqtt_dotdot_scenes_command_remove_all_scenes_fields_t;
 
 /**
@@ -4717,16 +4717,16 @@ typedef struct {
 typedef struct {
   zclStatus status;
 
-  uint8_t * groupid;
+  uint16_t groupid;
 } uic_mqtt_dotdot_scenes_command_remove_all_scenes_response_fields_t;
 
 /**
  * @brief Command fields for Scenes/StoreScene
  */
 typedef struct {
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 } uic_mqtt_dotdot_scenes_command_store_scene_fields_t;
 
 /**
@@ -4735,27 +4735,27 @@ typedef struct {
 typedef struct {
   zclStatus status;
 
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 } uic_mqtt_dotdot_scenes_command_store_scene_response_fields_t;
 
 /**
  * @brief Command fields for Scenes/RecallScene
  */
 typedef struct {
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 } uic_mqtt_dotdot_scenes_command_recall_scene_fields_t;
 
 /**
  * @brief Command fields for Scenes/GetSceneMembership
  */
 typedef struct {
-  uint8_t * groupid;
+  uint16_t groupid;
 } uic_mqtt_dotdot_scenes_command_get_scene_membership_fields_t;
 
 /**
@@ -4764,25 +4764,25 @@ typedef struct {
 typedef struct {
   zclStatus status;
 
-  int8_t capacity;
+  uint8_t capacity;
 
-  uint8_t * groupid;
+  uint16_t groupid;
 
   uint8_t scene_list_count;
-  const int8_t *scene_list;
+  const uint8_t *scene_list;
 } uic_mqtt_dotdot_scenes_command_get_scene_membership_response_fields_t;
 
 /**
  * @brief Command fields for Scenes/EnhancedAddScene
  */
 typedef struct {
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
-  uint8_t * scene_name;
+  const char* scene_name;
 
   uint8_t extension_field_sets_count;
   const SExtensionFieldSetList *extension_field_sets;
@@ -4794,18 +4794,18 @@ typedef struct {
 typedef struct {
   zclStatus status;
 
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 } uic_mqtt_dotdot_scenes_command_enhanced_add_scene_response_fields_t;
 
 /**
  * @brief Command fields for Scenes/EnhancedViewScene
  */
 typedef struct {
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 } uic_mqtt_dotdot_scenes_command_enhanced_view_scene_fields_t;
 
 /**
@@ -4814,13 +4814,13 @@ typedef struct {
 typedef struct {
   zclStatus status;
 
-  uint8_t * groupid;
+  uint16_t groupid;
 
-  int8_t sceneid;
+  uint8_t sceneid;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
-  uint8_t * scene_name;
+  const char* scene_name;
 
   uint8_t extension_field_sets_count;
   const SExtensionFieldSetList *extension_field_sets;
@@ -4832,13 +4832,13 @@ typedef struct {
 typedef struct {
   uint8_t mode;
 
-  uint8_t * group_identifier_from;
+  uint16_t group_identifier_from;
 
-  int8_t scene_identifier_from;
+  uint8_t scene_identifier_from;
 
-  uint8_t * group_identifier_to;
+  uint16_t group_identifier_to;
 
-  int8_t scene_identifier_to;
+  uint8_t scene_identifier_to;
 } uic_mqtt_dotdot_scenes_command_copy_scene_fields_t;
 
 /**
@@ -4847,9 +4847,9 @@ typedef struct {
 typedef struct {
   zclStatus status;
 
-  uint8_t * group_identifier_from;
+  uint16_t group_identifier_from;
 
-  int8_t scene_identifier_from;
+  uint8_t scene_identifier_from;
 } uic_mqtt_dotdot_scenes_command_copy_scene_response_fields_t;
 
 
@@ -5675,7 +5675,7 @@ void uic_mqtt_dotdot_clear_scenes_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_scenes_scene_count_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -5705,7 +5705,7 @@ sl_status_t uic_mqtt_dotdot_scenes_scene_count_unretain(
  */
 sl_status_t uic_mqtt_dotdot_scenes_current_scene_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -5735,7 +5735,7 @@ sl_status_t uic_mqtt_dotdot_scenes_current_scene_unretain(
  */
 sl_status_t uic_mqtt_dotdot_scenes_current_group_publish(
   const char *base_topic,
-  uint8_t * value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -5941,7 +5941,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_on_off_off_with_effect_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     OffWithEffectEffectIdentifier effect_identifier,
 
-    int8_t effect_variant
+    uint8_t effect_variant
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_t)(
@@ -5955,17 +5955,17 @@ typedef sl_status_t (*uic_mqtt_dotdot_on_off_on_with_timed_off_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t on_off_control,
 
-    int16_t on_time,
+    uint16_t on_time,
 
-    int16_t off_wait_time
+    uint16_t off_wait_time
 
 );
 
 typedef struct {
   bool on_off;
   bool global_scene_control;
-  int16_t on_time;
-  int16_t off_wait_time;
+  uint16_t on_time;
+  uint16_t off_wait_time;
   uint8_t start_up_on_off;
 } uic_mqtt_dotdot_on_off_state_t;
 
@@ -5999,7 +5999,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_on_off_force_read_attributes_callback_t)(
 typedef struct {
   OffWithEffectEffectIdentifier effect_identifier;
 
-  int8_t effect_variant;
+  uint8_t effect_variant;
 } uic_mqtt_dotdot_on_off_command_off_with_effect_fields_t;
 
 /**
@@ -6008,9 +6008,9 @@ typedef struct {
 typedef struct {
   uint8_t on_off_control;
 
-  int16_t on_time;
+  uint16_t on_time;
 
-  int16_t off_wait_time;
+  uint16_t off_wait_time;
 } uic_mqtt_dotdot_on_off_command_on_with_timed_off_fields_t;
 
 
@@ -6376,7 +6376,7 @@ sl_status_t uic_mqtt_dotdot_on_off_global_scene_control_unretain(
  */
 sl_status_t uic_mqtt_dotdot_on_off_on_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -6406,7 +6406,7 @@ sl_status_t uic_mqtt_dotdot_on_off_on_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_on_off_off_wait_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -6503,9 +6503,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_move_to_level_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t level,
+    uint8_t level,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -6518,7 +6518,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_move_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     MoveStepMode move_mode,
 
-    int8_t rate,
+    uint8_t rate,
 
     uint8_t options_mask,
 
@@ -6531,9 +6531,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_step_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     MoveStepMode step_mode,
 
-    int8_t step_size,
+    uint8_t step_size,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -6553,9 +6553,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_t
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t level,
+    uint8_t level,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -6568,7 +6568,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_move_with_on_off_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     MoveStepMode move_mode,
 
-    int8_t rate,
+    uint8_t rate,
 
     uint8_t options_mask,
 
@@ -6581,9 +6581,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_step_with_on_off_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     MoveStepMode step_mode,
 
-    int8_t step_size,
+    uint8_t step_size,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -6603,25 +6603,25 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_move_to_closest_frequency_callback_t
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t frequency
+    uint16_t frequency
 
 );
 
 typedef struct {
-  int8_t current_level;
-  int16_t remaining_time;
-  int8_t min_level;
-  int8_t max_level;
-  int16_t current_frequency;
-  int16_t min_frequency;
-  int16_t max_frequency;
+  uint8_t current_level;
+  uint16_t remaining_time;
+  uint8_t min_level;
+  uint8_t max_level;
+  uint16_t current_frequency;
+  uint16_t min_frequency;
+  uint16_t max_frequency;
   uint8_t options;
-  int16_t on_off_transition_time;
-  int8_t on_level;
-  int16_t on_transition_time;
-  int16_t off_transition_time;
-  int16_t default_move_rate;
-  int8_t start_up_current_level;
+  uint16_t on_off_transition_time;
+  uint8_t on_level;
+  uint16_t on_transition_time;
+  uint16_t off_transition_time;
+  uint16_t default_move_rate;
+  uint8_t start_up_current_level;
 } uic_mqtt_dotdot_level_state_t;
 
 typedef struct {
@@ -6661,9 +6661,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_force_read_attributes_callback_t)(
  * @brief Command fields for Level/MoveToLevel
  */
 typedef struct {
-  int8_t level;
+  uint8_t level;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -6676,7 +6676,7 @@ typedef struct {
 typedef struct {
   MoveStepMode move_mode;
 
-  int8_t rate;
+  uint8_t rate;
 
   uint8_t options_mask;
 
@@ -6689,9 +6689,9 @@ typedef struct {
 typedef struct {
   MoveStepMode step_mode;
 
-  int8_t step_size;
+  uint8_t step_size;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -6711,9 +6711,9 @@ typedef struct {
  * @brief Command fields for Level/MoveToLevelWithOnOff
  */
 typedef struct {
-  int8_t level;
+  uint8_t level;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -6726,7 +6726,7 @@ typedef struct {
 typedef struct {
   MoveStepMode move_mode;
 
-  int8_t rate;
+  uint8_t rate;
 
   uint8_t options_mask;
 
@@ -6739,9 +6739,9 @@ typedef struct {
 typedef struct {
   MoveStepMode step_mode;
 
-  int8_t step_size;
+  uint8_t step_size;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -6761,7 +6761,7 @@ typedef struct {
  * @brief Command fields for Level/MoveToClosestFrequency
  */
 typedef struct {
-  int16_t frequency;
+  uint16_t frequency;
 } uic_mqtt_dotdot_level_command_move_to_closest_frequency_fields_t;
 
 
@@ -7187,7 +7187,7 @@ void uic_mqtt_dotdot_clear_level_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_level_current_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7217,7 +7217,7 @@ sl_status_t uic_mqtt_dotdot_level_current_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_remaining_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7247,7 +7247,7 @@ sl_status_t uic_mqtt_dotdot_level_remaining_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_min_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7277,7 +7277,7 @@ sl_status_t uic_mqtt_dotdot_level_min_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_max_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7307,7 +7307,7 @@ sl_status_t uic_mqtt_dotdot_level_max_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_current_frequency_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7337,7 +7337,7 @@ sl_status_t uic_mqtt_dotdot_level_current_frequency_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_min_frequency_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7367,7 +7367,7 @@ sl_status_t uic_mqtt_dotdot_level_min_frequency_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_max_frequency_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7427,7 +7427,7 @@ sl_status_t uic_mqtt_dotdot_level_options_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_on_off_transition_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7457,7 +7457,7 @@ sl_status_t uic_mqtt_dotdot_level_on_off_transition_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_on_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7487,7 +7487,7 @@ sl_status_t uic_mqtt_dotdot_level_on_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_on_transition_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7517,7 +7517,7 @@ sl_status_t uic_mqtt_dotdot_level_on_transition_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_off_transition_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7547,7 +7547,7 @@ sl_status_t uic_mqtt_dotdot_level_off_transition_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_default_move_rate_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7577,7 +7577,7 @@ sl_status_t uic_mqtt_dotdot_level_default_move_rate_unretain(
  */
 sl_status_t uic_mqtt_dotdot_level_start_up_current_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -7646,7 +7646,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_alarms_reset_alarm_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t alarm_code,
 
-    uint8_t cluster_identifier
+    uint16_t cluster_identifier
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_alarms_alarm_callback_t)(
@@ -7655,7 +7655,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_alarms_alarm_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t alarm_code,
 
-    uint8_t cluster_identifier
+    uint16_t cluster_identifier
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_alarms_reset_all_alarms_callback_t)(
@@ -7671,9 +7671,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_alarms_get_alarm_response_callback_t)(
 
     uint8_t alarm_code,
 
-    uint8_t cluster_identifier,
+    uint16_t cluster_identifier,
 
-    int32_t time_stamp
+    uint32_t time_stamp
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_alarms_get_alarm_callback_t)(
@@ -7688,7 +7688,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_alarms_reset_alarm_log_callback_t)(
 );
 
 typedef struct {
-  int16_t alarm_count;
+  uint16_t alarm_count;
 } uic_mqtt_dotdot_alarms_state_t;
 
 typedef struct {
@@ -7717,7 +7717,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_alarms_force_read_attributes_callback_t)(
 typedef struct {
   uint8_t alarm_code;
 
-  uint8_t cluster_identifier;
+  uint16_t cluster_identifier;
 } uic_mqtt_dotdot_alarms_command_reset_alarm_fields_t;
 
 /**
@@ -7726,7 +7726,7 @@ typedef struct {
 typedef struct {
   uint8_t alarm_code;
 
-  uint8_t cluster_identifier;
+  uint16_t cluster_identifier;
 } uic_mqtt_dotdot_alarms_command_alarm_fields_t;
 
 /**
@@ -7737,9 +7737,9 @@ typedef struct {
 
   uint8_t alarm_code;
 
-  uint8_t cluster_identifier;
+  uint16_t cluster_identifier;
 
-  int32_t time_stamp;
+  uint32_t time_stamp;
 } uic_mqtt_dotdot_alarms_command_get_alarm_response_fields_t;
 
 
@@ -8045,7 +8045,7 @@ void uic_mqtt_dotdot_clear_alarms_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_alarms_alarm_count_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8110,16 +8110,16 @@ void uic_mqtt_dotdot_alarms_publish_empty_supported_commands(
 // Callback types used by the time cluster
 
 typedef struct {
-  uint8_t time;
+  uint32_t time;
   uint8_t time_status;
   int32_t time_zone;
-  int32_t dst_start;
-  int32_t dst_end;
+  uint32_t dst_start;
+  uint32_t dst_end;
   int32_t dst_shift;
-  int32_t standard_time;
-  int32_t local_time;
-  uint8_t last_set_time;
-  uint8_t valid_until_time;
+  uint32_t standard_time;
+  uint32_t local_time;
+  uint32_t last_set_time;
+  uint32_t valid_until_time;
 } uic_mqtt_dotdot_time_state_t;
 
 typedef struct {
@@ -8214,7 +8214,7 @@ void uic_mqtt_dotdot_clear_time_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_time_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8304,7 +8304,7 @@ sl_status_t uic_mqtt_dotdot_time_time_zone_unretain(
  */
 sl_status_t uic_mqtt_dotdot_time_dst_start_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8334,7 +8334,7 @@ sl_status_t uic_mqtt_dotdot_time_dst_start_unretain(
  */
 sl_status_t uic_mqtt_dotdot_time_dst_end_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8394,7 +8394,7 @@ sl_status_t uic_mqtt_dotdot_time_dst_shift_unretain(
  */
 sl_status_t uic_mqtt_dotdot_time_standard_time_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8424,7 +8424,7 @@ sl_status_t uic_mqtt_dotdot_time_standard_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_time_local_time_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8454,7 +8454,7 @@ sl_status_t uic_mqtt_dotdot_time_local_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_time_last_set_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8484,7 +8484,7 @@ sl_status_t uic_mqtt_dotdot_time_last_set_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_time_valid_until_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8558,7 +8558,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_poll_control_check_in_response_callback_t)
     uic_mqtt_dotdot_callback_call_type_t call_type,
     bool start_fast_polling,
 
-    int16_t fast_poll_timeout
+    uint16_t fast_poll_timeout
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_t)(
@@ -8570,25 +8570,25 @@ typedef sl_status_t (*uic_mqtt_dotdot_poll_control_set_long_poll_interval_callba
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int32_t new_long_poll_interval
+    uint32_t new_long_poll_interval
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t new_short_poll_interval
+    uint16_t new_short_poll_interval
 
 );
 
 typedef struct {
-  int32_t check_in_interval;
-  int32_t long_poll_interval;
-  int16_t short_poll_interval;
-  int16_t fast_poll_timeout;
-  int32_t check_in_interval_min;
-  int32_t long_poll_interval_min;
-  int16_t fast_poll_timeout_max;
+  uint32_t check_in_interval;
+  uint32_t long_poll_interval;
+  uint16_t short_poll_interval;
+  uint16_t fast_poll_timeout;
+  uint32_t check_in_interval_min;
+  uint32_t long_poll_interval_min;
+  uint16_t fast_poll_timeout_max;
 } uic_mqtt_dotdot_poll_control_state_t;
 
 typedef struct {
@@ -8623,21 +8623,21 @@ typedef sl_status_t (*uic_mqtt_dotdot_poll_control_force_read_attributes_callbac
 typedef struct {
   bool start_fast_polling;
 
-  int16_t fast_poll_timeout;
+  uint16_t fast_poll_timeout;
 } uic_mqtt_dotdot_poll_control_command_check_in_response_fields_t;
 
 /**
  * @brief Command fields for PollControl/SetLongPollInterval
  */
 typedef struct {
-  int32_t new_long_poll_interval;
+  uint32_t new_long_poll_interval;
 } uic_mqtt_dotdot_poll_control_command_set_long_poll_interval_fields_t;
 
 /**
  * @brief Command fields for PollControl/SetShortPollInterval
  */
 typedef struct {
-  int16_t new_short_poll_interval;
+  uint16_t new_short_poll_interval;
 } uic_mqtt_dotdot_poll_control_command_set_short_poll_interval_fields_t;
 
 
@@ -8903,7 +8903,7 @@ void uic_mqtt_dotdot_clear_poll_control_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8933,7 +8933,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_unretain(
  */
 sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8963,7 +8963,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_unretain(
  */
 sl_status_t uic_mqtt_dotdot_poll_control_short_poll_interval_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -8993,7 +8993,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_short_poll_interval_unretain(
  */
 sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -9023,7 +9023,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_unretain(
  */
 sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_min_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -9053,7 +9053,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_min_unretain(
  */
 sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_min_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -9083,7 +9083,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_min_unretain(
  */
 sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_max_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -9148,10 +9148,10 @@ void uic_mqtt_dotdot_poll_control_publish_empty_supported_commands(
 // Callback types used by the shade_configuration cluster
 
 typedef struct {
-  int16_t physical_closed_limit;
-  int8_t motor_step_size;
+  uint16_t physical_closed_limit;
+  uint8_t motor_step_size;
   uint8_t status;
-  int16_t closed_limit;
+  uint16_t closed_limit;
   uint8_t mode;
 } uic_mqtt_dotdot_shade_configuration_state_t;
 
@@ -9242,7 +9242,7 @@ void uic_mqtt_dotdot_clear_shade_configuration_force_read_attributes_callbacks()
  */
 sl_status_t uic_mqtt_dotdot_shade_configuration_physical_closed_limit_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -9272,7 +9272,7 @@ sl_status_t uic_mqtt_dotdot_shade_configuration_physical_closed_limit_unretain(
  */
 sl_status_t uic_mqtt_dotdot_shade_configuration_motor_step_size_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -9332,7 +9332,7 @@ sl_status_t uic_mqtt_dotdot_shade_configuration_status_unretain(
  */
 sl_status_t uic_mqtt_dotdot_shade_configuration_closed_limit_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -9429,7 +9429,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_lock_door_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t pin_or_rfid_code
+    const char* pin_or_rfid_code
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_lock_door_response_callback_t)(
@@ -9443,7 +9443,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_unlock_door_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t pin_or_rfid_code
+    const char* pin_or_rfid_code
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_unlock_door_response_callback_t)(
@@ -9457,7 +9457,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_toggle_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t pin_or_rfid_code
+    const char* pin_or_rfid_code
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_toggle_response_callback_t)(
@@ -9471,9 +9471,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t timeout_in_seconds,
+    uint16_t timeout_in_seconds,
 
-    uint8_t pin_or_rfid_code
+    const char* pin_or_rfid_code
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_t)(
@@ -9487,39 +9487,39 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_log_record_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t log_index
+    uint16_t log_index
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_log_record_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t log_entryid,
+    uint16_t log_entryid,
 
-    int32_t timestamp,
+    uint32_t timestamp,
 
     GetLogRecordResponseEventType event_type,
 
     DrlkOperEventSource source_operation_event,
 
-    int8_t event_id_or_alarm_code,
+    uint8_t event_id_or_alarm_code,
 
-    int16_t userid,
+    uint16_t userid,
 
-    uint8_t pin
+    const char* pin
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_pin_code_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid,
+    uint16_t userid,
 
     DrlkSettableUserStatus user_status,
 
     DrlkUserType user_type,
 
-    uint8_t pin
+    const char* pin
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_pin_code_response_callback_t)(
@@ -9533,27 +9533,27 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_pin_code_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_pin_code_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t userid,
+    uint16_t userid,
 
     DrlkUserStatus user_status,
 
     DrlkUserType user_type,
 
-    uint8_t code
+    const char* code
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_pin_code_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_pin_code_response_callback_t)(
@@ -9579,7 +9579,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_user_status_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid,
+    uint16_t userid,
 
     DrlkSettableUserStatus user_status
 
@@ -9595,14 +9595,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_status_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_status_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t userid,
+    uint16_t userid,
 
     DrlkUserStatus user_status
 
@@ -9611,19 +9611,19 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_t)
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid,
+    uint16_t userid,
 
     uint8_t days_mask,
 
-    int8_t start_hour,
+    uint8_t start_hour,
 
-    int8_t start_minute,
+    uint8_t start_minute,
 
-    int8_t end_hour,
+    uint8_t end_hour,
 
-    int8_t end_minute
+    uint8_t end_minute
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_t)(
@@ -9637,39 +9637,39 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_t)
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t scheduleid,
+    uint8_t scheduleid,
 
-    int16_t userid,
+    uint16_t userid,
 
     zclStatus status,
 
     uint8_t days_mask,
 
-    int8_t start_hour,
+    uint8_t start_hour,
 
-    int8_t start_minute,
+    uint8_t start_minute,
 
-    int8_t end_hour,
+    uint8_t end_hour,
 
-    int8_t end_minute
+    uint8_t end_minute
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_t)(
@@ -9683,13 +9683,13 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_t
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid,
+    uint16_t userid,
 
-    int32_t local_start_time,
+    uint32_t local_start_time,
 
-    int32_t local_end_time
+    uint32_t local_end_time
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_t)(
@@ -9703,33 +9703,33 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_t
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t scheduleid,
+    uint8_t scheduleid,
 
-    int16_t userid,
+    uint16_t userid,
 
     zclStatus status,
 
-    int32_t local_start_time,
+    uint32_t local_start_time,
 
-    int32_t local_end_time
+    uint32_t local_end_time
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_t)(
@@ -9743,11 +9743,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_t)
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * holiday_scheduleid,
+    uint8_t holiday_scheduleid,
 
-    int32_t local_start_time,
+    uint32_t local_start_time,
 
-    int32_t local_end_time,
+    uint32_t local_end_time,
 
     DrlkOperMode operating_mode_during_holiday
 
@@ -9763,20 +9763,20 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_t)
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * holiday_scheduleid
+    uint8_t holiday_scheduleid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t holiday_scheduleid,
+    uint8_t holiday_scheduleid,
 
     zclStatus status,
 
-    int32_t local_start_time,
+    uint32_t local_start_time,
 
-    int32_t local_end_time,
+    uint32_t local_end_time,
 
     DrlkOperMode operating_mode_during_holiday
 
@@ -9785,7 +9785,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * holiday_scheduleid
+    uint8_t holiday_scheduleid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_t)(
@@ -9799,7 +9799,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_user_type_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid,
+    uint16_t userid,
 
     DrlkUserType user_type
 
@@ -9815,14 +9815,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_type_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_type_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t userid,
+    uint16_t userid,
 
     DrlkUserType user_type
 
@@ -9831,13 +9831,13 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_rfid_code_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid,
+    uint16_t userid,
 
     DrlkSettableUserStatus user_status,
 
     DrlkUserType user_type,
 
-    uint8_t rfid_code
+    const char* rfid_code
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_rfid_code_response_callback_t)(
@@ -9851,27 +9851,27 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_rfid_code_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_rfid_code_response_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t userid,
+    uint16_t userid,
 
     DrlkUserStatus user_status,
 
     DrlkUserType user_type,
 
-    uint8_t rfid_code
+    const char* rfid_code
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_rfid_code_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t * userid
+    uint16_t userid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_rfid_code_response_callback_t)(
@@ -9899,11 +9899,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_user_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     DataOperationTypeEnum operation_type,
 
-    int16_t user_index,
+    uint16_t user_index,
 
     const char* user_name,
 
-    int32_t user_uniqueid,
+    uint32_t user_uniqueid,
 
     DrlkSettableUserStatus user_status,
 
@@ -9916,7 +9916,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_index
+    uint16_t user_index
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_response_callback_t)(
@@ -9928,7 +9928,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_user_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_index
+    uint16_t user_index
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_operating_event_notification_callback_t)(
@@ -9939,11 +9939,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_operating_event_notification_cal
 
     OperatingEventNotificationOperationEventCode operation_event_code,
 
-    int16_t userid,
+    uint16_t userid,
 
-    uint8_t pin,
+    const char* pin,
 
-    int32_t local_time,
+    uint32_t local_time,
 
     const char* data
 
@@ -9956,15 +9956,15 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_programming_event_notification_c
 
     ProgrammingEventNotificationProgramEventCode program_event_code,
 
-    int16_t userid,
+    uint16_t userid,
 
-    uint8_t pin,
+    const char* pin,
 
     DrlkUserType user_type,
 
     DrlkUserStatus user_status,
 
-    int32_t local_time,
+    uint32_t local_time,
 
     const char* data
 
@@ -9977,9 +9977,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_credential_callback_t)(
 
     CredentialStruct credential,
 
-    uint8_t credential_data,
+    const char* credential_data,
 
-    int16_t user_index,
+    uint16_t user_index,
 
     DrlkSettableUserStatus user_status,
 
@@ -10014,7 +10014,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_unbolt_door_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t pin_code
+    const char* pin_code
 
 );
 
@@ -10023,27 +10023,27 @@ typedef struct {
   uint8_t lock_type;
   bool actuator_enabled;
   uint8_t door_state;
-  int32_t door_open_events;
-  int32_t door_closed_events;
-  int16_t open_period;
-  int16_t number_of_log_records_supported;
-  int16_t number_of_total_users_supported;
-  int16_t number_of_pin_users_supported;
-  int16_t number_of_rfid_users_supported;
-  int8_t number_of_week_day_schedules_supported_per_user;
-  int8_t number_of_year_day_schedules_supported_per_user;
-  int8_t number_of_holiday_schedules_supported;
-  int8_t max_pin_code_length;
-  int8_t min_pin_code_length;
-  int8_t max_rfid_code_length;
-  int8_t min_rfid_code_length;
+  uint32_t door_open_events;
+  uint32_t door_closed_events;
+  uint16_t open_period;
+  uint16_t number_of_log_records_supported;
+  uint16_t number_of_total_users_supported;
+  uint16_t number_of_pin_users_supported;
+  uint16_t number_of_rfid_users_supported;
+  uint8_t number_of_week_day_schedules_supported_per_user;
+  uint8_t number_of_year_day_schedules_supported_per_user;
+  uint8_t number_of_holiday_schedules_supported;
+  uint8_t max_pin_code_length;
+  uint8_t min_pin_code_length;
+  uint8_t max_rfid_code_length;
+  uint8_t min_rfid_code_length;
   uint8_t credential_rules_support;
-  int8_t number_of_credentials_supported_per_user;
+  uint8_t number_of_credentials_supported_per_user;
   bool enable_logging;
   const char* language;
-  int8_t led_settings;
-  int32_t auto_relock_time;
-  int8_t sound_volume;
+  uint8_t led_settings;
+  uint32_t auto_relock_time;
+  uint8_t sound_volume;
   uint8_t operating_mode;
   uint16_t supported_operating_modes;
   uint16_t default_configuration_register;
@@ -10052,12 +10052,12 @@ typedef struct {
   bool enable_inside_statusled;
   bool enable_privacy_mode_button;
   uint8_t local_programming_features;
-  int8_t wrong_code_entry_limit;
-  int8_t user_code_temporary_disable_time;
+  uint8_t wrong_code_entry_limit;
+  uint8_t user_code_temporary_disable_time;
   bool send_pin_over_the_air;
   bool require_pi_nfor_rf_operation;
   uint8_t security_level;
-  int16_t expiring_user_timeout;
+  uint16_t expiring_user_timeout;
   uint16_t alarm_mask;
   uint16_t keypad_operation_event_mask;
   uint16_t rf_operation_event_mask;
@@ -10140,7 +10140,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_force_read_attributes_callback_t
  * @brief Command fields for DoorLock/LockDoor
  */
 typedef struct {
-  uint8_t pin_or_rfid_code;
+  const char* pin_or_rfid_code;
 } uic_mqtt_dotdot_door_lock_command_lock_door_fields_t;
 
 /**
@@ -10154,7 +10154,7 @@ typedef struct {
  * @brief Command fields for DoorLock/UnlockDoor
  */
 typedef struct {
-  uint8_t pin_or_rfid_code;
+  const char* pin_or_rfid_code;
 } uic_mqtt_dotdot_door_lock_command_unlock_door_fields_t;
 
 /**
@@ -10168,7 +10168,7 @@ typedef struct {
  * @brief Command fields for DoorLock/Toggle
  */
 typedef struct {
-  uint8_t pin_or_rfid_code;
+  const char* pin_or_rfid_code;
 } uic_mqtt_dotdot_door_lock_command_toggle_fields_t;
 
 /**
@@ -10182,9 +10182,9 @@ typedef struct {
  * @brief Command fields for DoorLock/UnlockWithTimeout
  */
 typedef struct {
-  int16_t timeout_in_seconds;
+  uint16_t timeout_in_seconds;
 
-  uint8_t pin_or_rfid_code;
+  const char* pin_or_rfid_code;
 } uic_mqtt_dotdot_door_lock_command_unlock_with_timeout_fields_t;
 
 /**
@@ -10198,39 +10198,39 @@ typedef struct {
  * @brief Command fields for DoorLock/GetLogRecord
  */
 typedef struct {
-  int16_t log_index;
+  uint16_t log_index;
 } uic_mqtt_dotdot_door_lock_command_get_log_record_fields_t;
 
 /**
  * @brief Command fields for DoorLock/GetLogRecordResponse
  */
 typedef struct {
-  int16_t log_entryid;
+  uint16_t log_entryid;
 
-  int32_t timestamp;
+  uint32_t timestamp;
 
   GetLogRecordResponseEventType event_type;
 
   DrlkOperEventSource source_operation_event;
 
-  int8_t event_id_or_alarm_code;
+  uint8_t event_id_or_alarm_code;
 
-  int16_t userid;
+  uint16_t userid;
 
-  uint8_t pin;
+  const char* pin;
 } uic_mqtt_dotdot_door_lock_command_get_log_record_response_fields_t;
 
 /**
  * @brief Command fields for DoorLock/SetPINCode
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 
   DrlkSettableUserStatus user_status;
 
   DrlkUserType user_type;
 
-  uint8_t pin;
+  const char* pin;
 } uic_mqtt_dotdot_door_lock_command_set_pin_code_fields_t;
 
 /**
@@ -10244,27 +10244,27 @@ typedef struct {
  * @brief Command fields for DoorLock/GetPINCode
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_get_pin_code_fields_t;
 
 /**
  * @brief Command fields for DoorLock/GetPINCodeResponse
  */
 typedef struct {
-  int16_t userid;
+  uint16_t userid;
 
   DrlkUserStatus user_status;
 
   DrlkUserType user_type;
 
-  uint8_t code;
+  const char* code;
 } uic_mqtt_dotdot_door_lock_command_get_pin_code_response_fields_t;
 
 /**
  * @brief Command fields for DoorLock/ClearPINCode
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_clear_pin_code_fields_t;
 
 /**
@@ -10285,7 +10285,7 @@ typedef struct {
  * @brief Command fields for DoorLock/SetUserStatus
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 
   DrlkSettableUserStatus user_status;
 } uic_mqtt_dotdot_door_lock_command_set_user_status_fields_t;
@@ -10301,14 +10301,14 @@ typedef struct {
  * @brief Command fields for DoorLock/GetUserStatus
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_get_user_status_fields_t;
 
 /**
  * @brief Command fields for DoorLock/GetUserStatusResponse
  */
 typedef struct {
-  int16_t userid;
+  uint16_t userid;
 
   DrlkUserStatus user_status;
 } uic_mqtt_dotdot_door_lock_command_get_user_status_response_fields_t;
@@ -10317,19 +10317,19 @@ typedef struct {
  * @brief Command fields for DoorLock/SetWeekdaySchedule
  */
 typedef struct {
-  uint8_t * scheduleid;
+  uint8_t scheduleid;
 
-  uint8_t * userid;
+  uint16_t userid;
 
   uint8_t days_mask;
 
-  int8_t start_hour;
+  uint8_t start_hour;
 
-  int8_t start_minute;
+  uint8_t start_minute;
 
-  int8_t end_hour;
+  uint8_t end_hour;
 
-  int8_t end_minute;
+  uint8_t end_minute;
 } uic_mqtt_dotdot_door_lock_command_set_weekday_schedule_fields_t;
 
 /**
@@ -10343,39 +10343,39 @@ typedef struct {
  * @brief Command fields for DoorLock/GetWeekdaySchedule
  */
 typedef struct {
-  uint8_t * scheduleid;
+  uint8_t scheduleid;
 
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_get_weekday_schedule_fields_t;
 
 /**
  * @brief Command fields for DoorLock/GetWeekdayScheduleResponse
  */
 typedef struct {
-  int8_t scheduleid;
+  uint8_t scheduleid;
 
-  int16_t userid;
+  uint16_t userid;
 
   zclStatus status;
 
   uint8_t days_mask;
 
-  int8_t start_hour;
+  uint8_t start_hour;
 
-  int8_t start_minute;
+  uint8_t start_minute;
 
-  int8_t end_hour;
+  uint8_t end_hour;
 
-  int8_t end_minute;
+  uint8_t end_minute;
 } uic_mqtt_dotdot_door_lock_command_get_weekday_schedule_response_fields_t;
 
 /**
  * @brief Command fields for DoorLock/ClearWeekdaySchedule
  */
 typedef struct {
-  uint8_t * scheduleid;
+  uint8_t scheduleid;
 
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_clear_weekday_schedule_fields_t;
 
 /**
@@ -10389,13 +10389,13 @@ typedef struct {
  * @brief Command fields for DoorLock/SetYearDaySchedule
  */
 typedef struct {
-  uint8_t * scheduleid;
+  uint8_t scheduleid;
 
-  uint8_t * userid;
+  uint16_t userid;
 
-  int32_t local_start_time;
+  uint32_t local_start_time;
 
-  int32_t local_end_time;
+  uint32_t local_end_time;
 } uic_mqtt_dotdot_door_lock_command_set_year_day_schedule_fields_t;
 
 /**
@@ -10409,33 +10409,33 @@ typedef struct {
  * @brief Command fields for DoorLock/GetYearDaySchedule
  */
 typedef struct {
-  uint8_t * scheduleid;
+  uint8_t scheduleid;
 
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_get_year_day_schedule_fields_t;
 
 /**
  * @brief Command fields for DoorLock/GetYearDayScheduleResponse
  */
 typedef struct {
-  int8_t scheduleid;
+  uint8_t scheduleid;
 
-  int16_t userid;
+  uint16_t userid;
 
   zclStatus status;
 
-  int32_t local_start_time;
+  uint32_t local_start_time;
 
-  int32_t local_end_time;
+  uint32_t local_end_time;
 } uic_mqtt_dotdot_door_lock_command_get_year_day_schedule_response_fields_t;
 
 /**
  * @brief Command fields for DoorLock/ClearYearDaySchedule
  */
 typedef struct {
-  uint8_t * scheduleid;
+  uint8_t scheduleid;
 
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_clear_year_day_schedule_fields_t;
 
 /**
@@ -10449,11 +10449,11 @@ typedef struct {
  * @brief Command fields for DoorLock/SetHolidaySchedule
  */
 typedef struct {
-  uint8_t * holiday_scheduleid;
+  uint8_t holiday_scheduleid;
 
-  int32_t local_start_time;
+  uint32_t local_start_time;
 
-  int32_t local_end_time;
+  uint32_t local_end_time;
 
   DrlkOperMode operating_mode_during_holiday;
 } uic_mqtt_dotdot_door_lock_command_set_holiday_schedule_fields_t;
@@ -10469,20 +10469,20 @@ typedef struct {
  * @brief Command fields for DoorLock/GetHolidaySchedule
  */
 typedef struct {
-  uint8_t * holiday_scheduleid;
+  uint8_t holiday_scheduleid;
 } uic_mqtt_dotdot_door_lock_command_get_holiday_schedule_fields_t;
 
 /**
  * @brief Command fields for DoorLock/GetHolidayScheduleResponse
  */
 typedef struct {
-  int8_t holiday_scheduleid;
+  uint8_t holiday_scheduleid;
 
   zclStatus status;
 
-  int32_t local_start_time;
+  uint32_t local_start_time;
 
-  int32_t local_end_time;
+  uint32_t local_end_time;
 
   DrlkOperMode operating_mode_during_holiday;
 } uic_mqtt_dotdot_door_lock_command_get_holiday_schedule_response_fields_t;
@@ -10491,7 +10491,7 @@ typedef struct {
  * @brief Command fields for DoorLock/ClearHolidaySchedule
  */
 typedef struct {
-  uint8_t * holiday_scheduleid;
+  uint8_t holiday_scheduleid;
 } uic_mqtt_dotdot_door_lock_command_clear_holiday_schedule_fields_t;
 
 /**
@@ -10505,7 +10505,7 @@ typedef struct {
  * @brief Command fields for DoorLock/SetUserType
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 
   DrlkUserType user_type;
 } uic_mqtt_dotdot_door_lock_command_set_user_type_fields_t;
@@ -10521,14 +10521,14 @@ typedef struct {
  * @brief Command fields for DoorLock/GetUserType
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_get_user_type_fields_t;
 
 /**
  * @brief Command fields for DoorLock/GetUserTypeResponse
  */
 typedef struct {
-  int16_t userid;
+  uint16_t userid;
 
   DrlkUserType user_type;
 } uic_mqtt_dotdot_door_lock_command_get_user_type_response_fields_t;
@@ -10537,13 +10537,13 @@ typedef struct {
  * @brief Command fields for DoorLock/SetRFIDCode
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 
   DrlkSettableUserStatus user_status;
 
   DrlkUserType user_type;
 
-  uint8_t rfid_code;
+  const char* rfid_code;
 } uic_mqtt_dotdot_door_lock_command_set_rfid_code_fields_t;
 
 /**
@@ -10557,27 +10557,27 @@ typedef struct {
  * @brief Command fields for DoorLock/GetRFIDCode
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_get_rfid_code_fields_t;
 
 /**
  * @brief Command fields for DoorLock/GetRFIDCodeResponse
  */
 typedef struct {
-  int16_t userid;
+  uint16_t userid;
 
   DrlkUserStatus user_status;
 
   DrlkUserType user_type;
 
-  uint8_t rfid_code;
+  const char* rfid_code;
 } uic_mqtt_dotdot_door_lock_command_get_rfid_code_response_fields_t;
 
 /**
  * @brief Command fields for DoorLock/ClearRFIDCode
  */
 typedef struct {
-  uint8_t * userid;
+  uint16_t userid;
 } uic_mqtt_dotdot_door_lock_command_clear_rfid_code_fields_t;
 
 /**
@@ -10600,11 +10600,11 @@ typedef struct {
 typedef struct {
   DataOperationTypeEnum operation_type;
 
-  int16_t user_index;
+  uint16_t user_index;
 
   const char* user_name;
 
-  int32_t user_uniqueid;
+  uint32_t user_uniqueid;
 
   DrlkSettableUserStatus user_status;
 
@@ -10617,14 +10617,14 @@ typedef struct {
  * @brief Command fields for DoorLock/GetUser
  */
 typedef struct {
-  int16_t user_index;
+  uint16_t user_index;
 } uic_mqtt_dotdot_door_lock_command_get_user_fields_t;
 
 /**
  * @brief Command fields for DoorLock/ClearUser
  */
 typedef struct {
-  int16_t user_index;
+  uint16_t user_index;
 } uic_mqtt_dotdot_door_lock_command_clear_user_fields_t;
 
 /**
@@ -10635,11 +10635,11 @@ typedef struct {
 
   OperatingEventNotificationOperationEventCode operation_event_code;
 
-  int16_t userid;
+  uint16_t userid;
 
-  uint8_t pin;
+  const char* pin;
 
-  int32_t local_time;
+  uint32_t local_time;
 
   const char* data;
 } uic_mqtt_dotdot_door_lock_command_operating_event_notification_fields_t;
@@ -10652,15 +10652,15 @@ typedef struct {
 
   ProgrammingEventNotificationProgramEventCode program_event_code;
 
-  int16_t userid;
+  uint16_t userid;
 
-  uint8_t pin;
+  const char* pin;
 
   DrlkUserType user_type;
 
   DrlkUserStatus user_status;
 
-  int32_t local_time;
+  uint32_t local_time;
 
   const char* data;
 } uic_mqtt_dotdot_door_lock_command_programming_event_notification_fields_t;
@@ -10673,9 +10673,9 @@ typedef struct {
 
   CredentialStruct credential;
 
-  uint8_t credential_data;
+  const char* credential_data;
 
-  int16_t user_index;
+  uint16_t user_index;
 
   DrlkSettableUserStatus user_status;
 
@@ -10700,7 +10700,7 @@ typedef struct {
  * @brief Command fields for DoorLock/UnboltDoor
  */
 typedef struct {
-  uint8_t pin_code;
+  const char* pin_code;
 } uic_mqtt_dotdot_door_lock_command_unbolt_door_fields_t;
 
 
@@ -13446,7 +13446,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_door_state_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_door_open_events_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13476,7 +13476,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_door_open_events_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_door_closed_events_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13506,7 +13506,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_door_closed_events_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_open_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13536,7 +13536,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_open_period_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_log_records_supported_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13566,7 +13566,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_log_records_supported_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_total_users_supported_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13596,7 +13596,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_total_users_supported_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_pin_users_supported_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13626,7 +13626,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_pin_users_supported_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_rfid_users_supported_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13656,7 +13656,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_rfid_users_supported_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_week_day_schedules_supported_per_user_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13686,7 +13686,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_week_day_schedules_supported_per
  */
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_year_day_schedules_supported_per_user_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13716,7 +13716,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_year_day_schedules_supported_per
  */
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_holiday_schedules_supported_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13746,7 +13746,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_holiday_schedules_supported_unre
  */
 sl_status_t uic_mqtt_dotdot_door_lock_max_pin_code_length_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13776,7 +13776,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_max_pin_code_length_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_min_pin_code_length_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13806,7 +13806,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_min_pin_code_length_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_max_rfid_code_length_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13836,7 +13836,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_max_rfid_code_length_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_min_rfid_code_length_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13896,7 +13896,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_credential_rules_support_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_credentials_supported_per_user_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -13986,7 +13986,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_language_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_led_settings_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -14016,7 +14016,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_led_settings_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_auto_relock_time_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -14046,7 +14046,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_auto_relock_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_sound_volume_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -14316,7 +14316,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_local_programming_features_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_wrong_code_entry_limit_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -14346,7 +14346,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_wrong_code_entry_limit_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_user_code_temporary_disable_time_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -14466,7 +14466,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_security_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_door_lock_expiring_user_timeout_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -14818,52 +14818,52 @@ typedef sl_status_t (*uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t lift_value
+    uint16_t lift_value
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t percentage_lift_value
+    uint8_t percentage_lift_value
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t tilt_value
+    uint16_t tilt_value
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t percentage_tilt_value
+    uint8_t percentage_tilt_value
 
 );
 
 typedef struct {
   uint8_t window_covering_type;
-  int16_t physical_closed_limit_lift;
-  int16_t physical_closed_limit_tilt;
-  int16_t current_position_lift;
-  int16_t current_position_tilt;
-  int16_t number_of_actuations_lift;
-  int16_t number_of_actuations_tilt;
+  uint16_t physical_closed_limit_lift;
+  uint16_t physical_closed_limit_tilt;
+  uint16_t current_position_lift;
+  uint16_t current_position_tilt;
+  uint16_t number_of_actuations_lift;
+  uint16_t number_of_actuations_tilt;
   uint8_t config_or_status;
-  int8_t current_position_lift_percentage;
-  int8_t current_position_tilt_percentage;
-  int16_t installed_open_limit_lift;
-  int16_t installed_closed_limit_lift;
-  int16_t installed_open_limit_tilt;
-  int16_t installed_closed_limit_tilt;
-  int16_t velocity_lift;
-  int16_t acceleration_time_lift;
-  int16_t deceleration_time_lift;
+  uint8_t current_position_lift_percentage;
+  uint8_t current_position_tilt_percentage;
+  uint16_t installed_open_limit_lift;
+  uint16_t installed_closed_limit_lift;
+  uint16_t installed_open_limit_tilt;
+  uint16_t installed_closed_limit_tilt;
+  uint16_t velocity_lift;
+  uint16_t acceleration_time_lift;
+  uint16_t deceleration_time_lift;
   uint8_t mode;
-  uint8_t intermediate_setpoints_lift;
-  uint8_t intermediate_setpoints_tilt;
+  const char* intermediate_setpoints_lift;
+  const char* intermediate_setpoints_tilt;
 } uic_mqtt_dotdot_window_covering_state_t;
 
 typedef struct {
@@ -14909,28 +14909,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_window_covering_force_read_attributes_call
  * @brief Command fields for WindowCovering/GoToLiftValue
  */
 typedef struct {
-  int16_t lift_value;
+  uint16_t lift_value;
 } uic_mqtt_dotdot_window_covering_command_go_to_lift_value_fields_t;
 
 /**
  * @brief Command fields for WindowCovering/GoToLiftPercentage
  */
 typedef struct {
-  int8_t percentage_lift_value;
+  uint8_t percentage_lift_value;
 } uic_mqtt_dotdot_window_covering_command_go_to_lift_percentage_fields_t;
 
 /**
  * @brief Command fields for WindowCovering/GoToTiltValue
  */
 typedef struct {
-  int16_t tilt_value;
+  uint16_t tilt_value;
 } uic_mqtt_dotdot_window_covering_command_go_to_tilt_value_fields_t;
 
 /**
  * @brief Command fields for WindowCovering/GoToTiltPercentage
  */
 typedef struct {
-  int8_t percentage_tilt_value;
+  uint8_t percentage_tilt_value;
 } uic_mqtt_dotdot_window_covering_command_go_to_tilt_percentage_fields_t;
 
 
@@ -15306,7 +15306,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_window_covering_type_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15336,7 +15336,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_lift_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15366,7 +15366,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_tilt_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15396,7 +15396,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15426,7 +15426,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15456,7 +15456,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_lift_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15516,7 +15516,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_config_or_status_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_percentage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15546,7 +15546,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_percentage_unr
  */
 sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_percentage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15576,7 +15576,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_percentage_unr
  */
 sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15606,7 +15606,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_lift_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15636,7 +15636,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_lift_unretain
  */
 sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15666,7 +15666,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_tilt_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15696,7 +15696,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_tilt_unretain
  */
 sl_status_t uic_mqtt_dotdot_window_covering_velocity_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15726,7 +15726,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_velocity_lift_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_acceleration_time_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15756,7 +15756,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_acceleration_time_lift_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_deceleration_time_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15816,7 +15816,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_mode_unretain(
  */
 sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_lift_publish(
   const char *base_topic,
-  uint8_t value,
+  const char* value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15846,7 +15846,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_lift_unretain
  */
 sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_tilt_publish(
   const char *base_topic,
-  uint8_t value,
+  const char* value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -15913,7 +15913,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_go_to_percent_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t percent_open
+    uint8_t percent_open
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_stop_callback_t)(
@@ -15926,13 +15926,13 @@ typedef struct {
   uint8_t moving_state;
   uint16_t safety_status;
   uint8_t capabilities;
-  int16_t open_events;
-  int16_t close_events;
-  int16_t command_open_events;
-  int16_t command_close_events;
-  int16_t open_period;
-  int16_t close_period;
-  int8_t barrier_position;
+  uint16_t open_events;
+  uint16_t close_events;
+  uint16_t command_open_events;
+  uint16_t command_close_events;
+  uint16_t open_period;
+  uint16_t close_period;
+  uint8_t barrier_position;
 } uic_mqtt_dotdot_barrier_control_state_t;
 
 typedef struct {
@@ -15968,7 +15968,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_force_read_attributes_call
  * @brief Command fields for BarrierControl/GoToPercent
  */
 typedef struct {
-  int8_t percent_open;
+  uint8_t percent_open;
 } uic_mqtt_dotdot_barrier_control_command_go_to_percent_fields_t;
 
 
@@ -16204,7 +16204,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_capabilities_unretain(
  */
 sl_status_t uic_mqtt_dotdot_barrier_control_open_events_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16234,7 +16234,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_open_events_unretain(
  */
 sl_status_t uic_mqtt_dotdot_barrier_control_close_events_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16264,7 +16264,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_close_events_unretain(
  */
 sl_status_t uic_mqtt_dotdot_barrier_control_command_open_events_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16294,7 +16294,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_command_open_events_unretain(
  */
 sl_status_t uic_mqtt_dotdot_barrier_control_command_close_events_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16324,7 +16324,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_command_close_events_unretain(
  */
 sl_status_t uic_mqtt_dotdot_barrier_control_open_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16354,7 +16354,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_open_period_unretain(
  */
 sl_status_t uic_mqtt_dotdot_barrier_control_close_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16384,7 +16384,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_close_period_unretain(
  */
 sl_status_t uic_mqtt_dotdot_barrier_control_barrier_position_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16450,26 +16450,26 @@ void uic_mqtt_dotdot_barrier_control_publish_empty_supported_commands(
 
 typedef struct {
   int16_t max_pressure;
-  int16_t max_speed;
-  int16_t max_flow;
+  uint16_t max_speed;
+  uint16_t max_flow;
   int16_t min_const_pressure;
   int16_t max_const_pressure;
   int16_t min_comp_pressure;
   int16_t max_comp_pressure;
-  int16_t min_const_speed;
-  int16_t max_const_speed;
-  int16_t min_const_flow;
-  int16_t max_const_flow;
+  uint16_t min_const_speed;
+  uint16_t max_const_speed;
+  uint16_t min_const_flow;
+  uint16_t max_const_flow;
   int16_t min_const_temp;
   int16_t max_const_temp;
   uint16_t pump_status;
   uint8_t effective_operation_mode;
   uint8_t effective_control_mode;
   int16_t capacity;
-  int16_t speed;
-  int32_t lifetime_running_hours;
-  int32_t power;
-  int32_t lifetime_energy_consumed;
+  uint16_t speed;
+  uint32_t lifetime_running_hours;
+  uint32_t power;
+  uint32_t lifetime_energy_consumed;
   uint8_t operation_mode;
   uint8_t control_mode;
   uint16_t alarm_mask;
@@ -16611,7 +16611,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_pressure_unretain
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_speed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16641,7 +16641,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_speed_unretain(
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_flow_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16791,7 +16791,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_comp_pressure_unr
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_speed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16821,7 +16821,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_speed_unret
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_speed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16851,7 +16851,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_speed_unret
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_flow_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -16881,7 +16881,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_flow_unreta
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_flow_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -17091,7 +17091,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_capacity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_speed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -17121,7 +17121,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_speed_unretain(
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_running_hours_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -17151,7 +17151,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_running_hour
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_power_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -17181,7 +17181,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_power_unretain(
  */
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_energy_consumed_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -17375,17 +17375,17 @@ typedef sl_status_t (*uic_mqtt_dotdot_thermostat_get_relay_status_log_response_c
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t time_of_day,
+    uint16_t time_of_day,
 
     uint8_t relay_status,
 
     int16_t local_temperature,
 
-    int8_t humidity_percentage,
+    uint8_t humidity_percentage,
 
     int16_t set_point,
 
-    int16_t unread_entries
+    uint16_t unread_entries
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_t)(
@@ -17416,8 +17416,8 @@ typedef struct {
   int16_t abs_max_heat_setpoint_limit;
   int16_t abs_min_cool_setpoint_limit;
   int16_t abs_max_cool_setpoint_limit;
-  int8_t pi_cooling_demand;
-  int8_t pi_heating_demand;
+  uint8_t pi_cooling_demand;
+  uint8_t pi_heating_demand;
   uint8_t hvac_system_type_configuration;
   int8_t local_temperature_calibration;
   int16_t occupied_cooling_setpoint;
@@ -17435,24 +17435,24 @@ typedef struct {
   uint8_t alarm_mask;
   uint8_t thermostat_running_mode;
   uint8_t start_of_week;
-  int8_t number_of_weekly_transitions;
-  int8_t number_of_daily_transitions;
+  uint8_t number_of_weekly_transitions;
+  uint8_t number_of_daily_transitions;
   uint8_t temperature_setpoint_hold;
-  int16_t temperature_setpoint_hold_duration;
+  uint16_t temperature_setpoint_hold_duration;
   uint8_t thermostat_programming_operation_mode;
   uint16_t thermostat_running_state;
   uint8_t setpoint_change_source;
   int16_t setpoint_change_amount;
-  uint8_t setpoint_change_source_timestamp;
-  int8_t occupied_setback;
-  int8_t occupied_setback_min;
-  int8_t occupied_setback_max;
-  int8_t unoccupied_setback;
-  int8_t unoccupied_setback_min;
-  int8_t unoccupied_setback_max;
-  int8_t emergency_heat_delta;
+  uint32_t setpoint_change_source_timestamp;
+  uint8_t occupied_setback;
+  uint8_t occupied_setback_min;
+  uint8_t occupied_setback_max;
+  uint8_t unoccupied_setback;
+  uint8_t unoccupied_setback_min;
+  uint8_t unoccupied_setback_max;
+  uint8_t emergency_heat_delta;
   uint8_t ac_type;
-  int16_t ac_capacity;
+  uint16_t ac_capacity;
   uint8_t ac_refrigerant_type;
   uint8_t ac_compressor_type;
   uint32_t ac_error_code;
@@ -17571,17 +17571,17 @@ typedef struct {
  * @brief Command fields for Thermostat/GetRelayStatusLogResponse
  */
 typedef struct {
-  int16_t time_of_day;
+  uint16_t time_of_day;
 
   uint8_t relay_status;
 
   int16_t local_temperature;
 
-  int8_t humidity_percentage;
+  uint8_t humidity_percentage;
 
   int16_t set_point;
 
-  int16_t unread_entries;
+  uint16_t unread_entries;
 } uic_mqtt_dotdot_thermostat_command_get_relay_status_log_response_fields_t;
 
 /**
@@ -18146,7 +18146,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_abs_max_cool_setpoint_limit_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_pi_cooling_demand_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -18176,7 +18176,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_pi_cooling_demand_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_pi_heating_demand_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -18716,7 +18716,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_start_of_week_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_number_of_weekly_transitions_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -18746,7 +18746,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_number_of_weekly_transitions_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_number_of_daily_transitions_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -18806,7 +18806,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_duration_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -18956,7 +18956,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_amount_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_source_timestamp_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -18986,7 +18986,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_source_timestamp_unretain
  */
 sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19016,7 +19016,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_min_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19046,7 +19046,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_min_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_max_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19076,7 +19076,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_max_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19106,7 +19106,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_min_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19136,7 +19136,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_min_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_max_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19166,7 +19166,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_max_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_emergency_heat_delta_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19226,7 +19226,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_ac_type_unretain(
  */
 sl_status_t uic_mqtt_dotdot_thermostat_ac_capacity_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19654,13 +19654,13 @@ void uic_mqtt_dotdot_fan_control_publish_empty_supported_commands(
 // Callback types used by the dehumidification_control cluster
 
 typedef struct {
-  int8_t relative_humidity;
-  int8_t dehumidification_cooling;
-  int8_t rh_dehumidification_setpoint;
+  uint8_t relative_humidity;
+  uint8_t dehumidification_cooling;
+  uint8_t rh_dehumidification_setpoint;
   uint8_t relative_humidity_mode;
   uint8_t dehumidification_lockout;
-  int8_t dehumidification_hysteresis;
-  int8_t dehumidification_max_cool;
+  uint8_t dehumidification_hysteresis;
+  uint8_t dehumidification_max_cool;
   uint8_t relative_humidity_display;
 } uic_mqtt_dotdot_dehumidification_control_state_t;
 
@@ -19754,7 +19754,7 @@ void uic_mqtt_dotdot_clear_dehumidification_control_force_read_attributes_callba
  */
 sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19784,7 +19784,7 @@ sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_cooling_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19814,7 +19814,7 @@ sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_cooling_un
  */
 sl_status_t uic_mqtt_dotdot_dehumidification_control_rh_dehumidification_setpoint_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19904,7 +19904,7 @@ sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_lockout_un
  */
 sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_hysteresis_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -19934,7 +19934,7 @@ sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_hysteresis
  */
 sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_max_cool_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -20246,11 +20246,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_hue_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t hue,
+    uint8_t hue,
 
     CCDirection direction,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -20263,7 +20263,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_hue_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     CCMoveMode move_mode,
 
-    int8_t rate,
+    uint8_t rate,
 
     uint8_t options_mask,
 
@@ -20276,9 +20276,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_step_hue_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     CCStepMode step_mode,
 
-    int8_t step_size,
+    uint8_t step_size,
 
-    int8_t transition_time,
+    uint8_t transition_time,
 
     uint8_t options_mask,
 
@@ -20289,9 +20289,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_saturation_callback_
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t saturation,
+    uint8_t saturation,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -20304,7 +20304,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_saturation_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     CCMoveMode move_mode,
 
-    int8_t rate,
+    uint8_t rate,
 
     uint8_t options_mask,
 
@@ -20317,9 +20317,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_step_saturation_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     CCStepMode step_mode,
 
-    int8_t step_size,
+    uint8_t step_size,
 
-    int8_t transition_time,
+    uint8_t transition_time,
 
     uint8_t options_mask,
 
@@ -20330,11 +20330,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_c
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t hue,
+    uint8_t hue,
 
-    int8_t saturation,
+    uint8_t saturation,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -20345,11 +20345,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_color_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t colorx,
+    uint16_t colorx,
 
-    int16_t colory,
+    uint16_t colory,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -20377,7 +20377,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_step_color_callback_t)(
 
     int16_t stepy,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -20388,9 +20388,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_color_temperature_ca
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t color_temperature_mireds,
+    uint16_t color_temperature_mireds,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -20401,11 +20401,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callbac
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t enhanced_hue,
+    uint16_t enhanced_hue,
 
     CCDirection direction,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -20418,7 +20418,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_t
     uic_mqtt_dotdot_callback_call_type_t call_type,
     CCMoveMode move_mode,
 
-    int16_t rate,
+    uint16_t rate,
 
     uint8_t options_mask,
 
@@ -20431,9 +20431,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_t
     uic_mqtt_dotdot_callback_call_type_t call_type,
     CCStepMode step_mode,
 
-    int16_t step_size,
+    uint16_t step_size,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -20444,11 +20444,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_sat
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t enhanced_hue,
+    uint16_t enhanced_hue,
 
-    int8_t saturation,
+    uint8_t saturation,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -20465,9 +20465,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_color_loop_set_callback_t)(
 
     CCColorLoopDirection direction,
 
-    int16_t time,
+    uint16_t time,
 
-    int16_t start_hue,
+    uint16_t start_hue,
 
     uint8_t options_mask,
 
@@ -20489,11 +20489,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_color_temperature_callb
     uic_mqtt_dotdot_callback_call_type_t call_type,
     CCMoveMode move_mode,
 
-    int16_t rate,
+    uint16_t rate,
 
-    uint8_t * color_temperature_minimum_mireds,
+    uint16_t color_temperature_minimum_mireds,
 
-    uint8_t * color_temperature_maximum_mireds,
+    uint16_t color_temperature_maximum_mireds,
 
     uint8_t options_mask,
 
@@ -20506,13 +20506,13 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_step_color_temperature_callb
     uic_mqtt_dotdot_callback_call_type_t call_type,
     CCStepMode step_mode,
 
-    int16_t step_size,
+    uint16_t step_size,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * color_temperature_minimum_mireds,
+    uint16_t color_temperature_minimum_mireds,
 
-    uint8_t * color_temperature_maximum_mireds,
+    uint16_t color_temperature_maximum_mireds,
 
     uint8_t options_mask,
 
@@ -20521,58 +20521,58 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_step_color_temperature_callb
 );
 
 typedef struct {
-  int8_t current_hue;
-  int8_t current_saturation;
-  int16_t remaining_time;
-  int16_t currentx;
-  int16_t currenty;
+  uint8_t current_hue;
+  uint8_t current_saturation;
+  uint16_t remaining_time;
+  uint16_t currentx;
+  uint16_t currenty;
   uint8_t drift_compensation;
   const char* compensation_text;
-  int16_t color_temperature_mireds;
+  uint16_t color_temperature_mireds;
   uint8_t color_mode;
   uint8_t options;
-  int8_t number_of_primaries;
-  int16_t primary1x;
-  int16_t primary1y;
-  int8_t primary1_intensity;
-  int16_t primary2x;
-  int16_t primary2y;
-  int8_t primary2_intensity;
-  int16_t primary3x;
-  int16_t primary3y;
-  int8_t primary3_intensity;
-  int16_t primary4x;
-  int16_t primary4y;
-  int8_t primary4_intensity;
-  int16_t primary5x;
-  int16_t primary5y;
-  int8_t primary5_intensity;
-  int16_t primary6x;
-  int16_t primary6y;
-  int8_t primary6_intensity;
-  int16_t white_pointx;
-  int16_t white_pointy;
-  int16_t color_pointrx;
-  int16_t color_pointry;
-  int8_t color_pointr_intensity;
-  int16_t color_pointgx;
-  int16_t color_pointgy;
-  int8_t color_pointg_intensity;
-  int16_t color_pointbx;
-  int16_t color_pointby;
-  int8_t color_pointb_intensity;
-  int16_t enhanced_current_hue;
+  uint8_t number_of_primaries;
+  uint16_t primary1x;
+  uint16_t primary1y;
+  uint8_t primary1_intensity;
+  uint16_t primary2x;
+  uint16_t primary2y;
+  uint8_t primary2_intensity;
+  uint16_t primary3x;
+  uint16_t primary3y;
+  uint8_t primary3_intensity;
+  uint16_t primary4x;
+  uint16_t primary4y;
+  uint8_t primary4_intensity;
+  uint16_t primary5x;
+  uint16_t primary5y;
+  uint8_t primary5_intensity;
+  uint16_t primary6x;
+  uint16_t primary6y;
+  uint8_t primary6_intensity;
+  uint16_t white_pointx;
+  uint16_t white_pointy;
+  uint16_t color_pointrx;
+  uint16_t color_pointry;
+  uint8_t color_pointr_intensity;
+  uint16_t color_pointgx;
+  uint16_t color_pointgy;
+  uint8_t color_pointg_intensity;
+  uint16_t color_pointbx;
+  uint16_t color_pointby;
+  uint8_t color_pointb_intensity;
+  uint16_t enhanced_current_hue;
   uint8_t enhanced_color_mode;
-  int8_t color_loop_active;
-  int8_t color_loop_direction;
-  int16_t color_loop_time;
-  int16_t color_loop_start_enhanced_hue;
-  int16_t color_loop_stored_enhanced_hue;
+  uint8_t color_loop_active;
+  uint8_t color_loop_direction;
+  uint16_t color_loop_time;
+  uint16_t color_loop_start_enhanced_hue;
+  uint16_t color_loop_stored_enhanced_hue;
   uint16_t color_capabilities;
-  int16_t color_temp_physical_min_mireds;
-  int16_t color_temp_physical_max_mireds;
-  int16_t couple_color_temp_to_level_min_mireds;
-  int16_t start_up_color_temperature_mireds;
+  uint16_t color_temp_physical_min_mireds;
+  uint16_t color_temp_physical_max_mireds;
+  uint16_t couple_color_temp_to_level_min_mireds;
+  uint16_t start_up_color_temperature_mireds;
 } uic_mqtt_dotdot_color_control_state_t;
 
 typedef struct {
@@ -20650,11 +20650,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_force_read_attributes_callba
  * @brief Command fields for ColorControl/MoveToHue
  */
 typedef struct {
-  int8_t hue;
+  uint8_t hue;
 
   CCDirection direction;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -20667,7 +20667,7 @@ typedef struct {
 typedef struct {
   CCMoveMode move_mode;
 
-  int8_t rate;
+  uint8_t rate;
 
   uint8_t options_mask;
 
@@ -20680,9 +20680,9 @@ typedef struct {
 typedef struct {
   CCStepMode step_mode;
 
-  int8_t step_size;
+  uint8_t step_size;
 
-  int8_t transition_time;
+  uint8_t transition_time;
 
   uint8_t options_mask;
 
@@ -20693,9 +20693,9 @@ typedef struct {
  * @brief Command fields for ColorControl/MoveToSaturation
  */
 typedef struct {
-  int8_t saturation;
+  uint8_t saturation;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -20708,7 +20708,7 @@ typedef struct {
 typedef struct {
   CCMoveMode move_mode;
 
-  int8_t rate;
+  uint8_t rate;
 
   uint8_t options_mask;
 
@@ -20721,9 +20721,9 @@ typedef struct {
 typedef struct {
   CCStepMode step_mode;
 
-  int8_t step_size;
+  uint8_t step_size;
 
-  int8_t transition_time;
+  uint8_t transition_time;
 
   uint8_t options_mask;
 
@@ -20734,11 +20734,11 @@ typedef struct {
  * @brief Command fields for ColorControl/MoveToHueAndSaturation
  */
 typedef struct {
-  int8_t hue;
+  uint8_t hue;
 
-  int8_t saturation;
+  uint8_t saturation;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -20749,11 +20749,11 @@ typedef struct {
  * @brief Command fields for ColorControl/MoveToColor
  */
 typedef struct {
-  int16_t colorx;
+  uint16_t colorx;
 
-  int16_t colory;
+  uint16_t colory;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -20781,7 +20781,7 @@ typedef struct {
 
   int16_t stepy;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -20792,9 +20792,9 @@ typedef struct {
  * @brief Command fields for ColorControl/MoveToColorTemperature
  */
 typedef struct {
-  int16_t color_temperature_mireds;
+  uint16_t color_temperature_mireds;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -20805,11 +20805,11 @@ typedef struct {
  * @brief Command fields for ColorControl/EnhancedMoveToHue
  */
 typedef struct {
-  int16_t enhanced_hue;
+  uint16_t enhanced_hue;
 
   CCDirection direction;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -20822,7 +20822,7 @@ typedef struct {
 typedef struct {
   CCMoveMode move_mode;
 
-  int16_t rate;
+  uint16_t rate;
 
   uint8_t options_mask;
 
@@ -20835,9 +20835,9 @@ typedef struct {
 typedef struct {
   CCStepMode step_mode;
 
-  int16_t step_size;
+  uint16_t step_size;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -20848,11 +20848,11 @@ typedef struct {
  * @brief Command fields for ColorControl/EnhancedMoveToHueAndSaturation
  */
 typedef struct {
-  int16_t enhanced_hue;
+  uint16_t enhanced_hue;
 
-  int8_t saturation;
+  uint8_t saturation;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
   uint8_t options_mask;
 
@@ -20869,9 +20869,9 @@ typedef struct {
 
   CCColorLoopDirection direction;
 
-  int16_t time;
+  uint16_t time;
 
-  int16_t start_hue;
+  uint16_t start_hue;
 
   uint8_t options_mask;
 
@@ -20893,11 +20893,11 @@ typedef struct {
 typedef struct {
   CCMoveMode move_mode;
 
-  int16_t rate;
+  uint16_t rate;
 
-  uint8_t * color_temperature_minimum_mireds;
+  uint16_t color_temperature_minimum_mireds;
 
-  uint8_t * color_temperature_maximum_mireds;
+  uint16_t color_temperature_maximum_mireds;
 
   uint8_t options_mask;
 
@@ -20910,13 +20910,13 @@ typedef struct {
 typedef struct {
   CCStepMode step_mode;
 
-  int16_t step_size;
+  uint16_t step_size;
 
-  int16_t transition_time;
+  uint16_t transition_time;
 
-  uint8_t * color_temperature_minimum_mireds;
+  uint16_t color_temperature_minimum_mireds;
 
-  uint8_t * color_temperature_maximum_mireds;
+  uint16_t color_temperature_maximum_mireds;
 
   uint8_t options_mask;
 
@@ -21746,7 +21746,7 @@ void uic_mqtt_dotdot_clear_color_control_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_color_control_current_hue_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -21776,7 +21776,7 @@ sl_status_t uic_mqtt_dotdot_color_control_current_hue_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_current_saturation_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -21806,7 +21806,7 @@ sl_status_t uic_mqtt_dotdot_color_control_current_saturation_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_remaining_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -21836,7 +21836,7 @@ sl_status_t uic_mqtt_dotdot_color_control_remaining_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_currentx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -21866,7 +21866,7 @@ sl_status_t uic_mqtt_dotdot_color_control_currentx_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_currenty_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -21956,7 +21956,7 @@ sl_status_t uic_mqtt_dotdot_color_control_compensation_text_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_temperature_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22046,7 +22046,7 @@ sl_status_t uic_mqtt_dotdot_color_control_options_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_number_of_primaries_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22076,7 +22076,7 @@ sl_status_t uic_mqtt_dotdot_color_control_number_of_primaries_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary1x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22106,7 +22106,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary1x_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary1y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22136,7 +22136,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary1y_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary1_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22166,7 +22166,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary1_intensity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary2x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22196,7 +22196,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary2x_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary2y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22226,7 +22226,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary2y_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary2_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22256,7 +22256,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary2_intensity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary3x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22286,7 +22286,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary3x_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary3y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22316,7 +22316,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary3y_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary3_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22346,7 +22346,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary3_intensity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary4x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22376,7 +22376,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary4x_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary4y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22406,7 +22406,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary4y_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary4_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22436,7 +22436,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary4_intensity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary5x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22466,7 +22466,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary5x_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary5y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22496,7 +22496,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary5y_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary5_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22526,7 +22526,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary5_intensity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary6x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22556,7 +22556,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary6x_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary6y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22586,7 +22586,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary6y_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_primary6_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22616,7 +22616,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary6_intensity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_white_pointx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22646,7 +22646,7 @@ sl_status_t uic_mqtt_dotdot_color_control_white_pointx_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_white_pointy_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22676,7 +22676,7 @@ sl_status_t uic_mqtt_dotdot_color_control_white_pointy_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_pointrx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22706,7 +22706,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointrx_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_pointry_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22736,7 +22736,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointry_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_pointr_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22766,7 +22766,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointr_intensity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_pointgx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22796,7 +22796,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointgx_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_pointgy_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22826,7 +22826,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointgy_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_pointg_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22856,7 +22856,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointg_intensity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_pointbx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22886,7 +22886,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointbx_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_pointby_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22916,7 +22916,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointby_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_pointb_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -22946,7 +22946,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointb_intensity_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_enhanced_current_hue_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23006,7 +23006,7 @@ sl_status_t uic_mqtt_dotdot_color_control_enhanced_color_mode_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_active_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23036,7 +23036,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_loop_active_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_direction_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23066,7 +23066,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_loop_direction_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23096,7 +23096,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_loop_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_start_enhanced_hue_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23126,7 +23126,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_loop_start_enhanced_hue_unretain
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_stored_enhanced_hue_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23186,7 +23186,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_capabilities_unretain(
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_min_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23216,7 +23216,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_min_mireds_unretai
  */
 sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_max_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23246,7 +23246,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_max_mireds_unretai
  */
 sl_status_t uic_mqtt_dotdot_color_control_couple_color_temp_to_level_min_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23276,7 +23276,7 @@ sl_status_t uic_mqtt_dotdot_color_control_couple_color_temp_to_level_min_mireds_
  */
 sl_status_t uic_mqtt_dotdot_color_control_start_up_color_temperature_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23341,22 +23341,22 @@ void uic_mqtt_dotdot_color_control_publish_empty_supported_commands(
 // Callback types used by the ballast_configuration cluster
 
 typedef struct {
-  int8_t physical_min_level;
-  int8_t physical_max_level;
+  uint8_t physical_min_level;
+  uint8_t physical_max_level;
   uint8_t ballast_status;
-  int8_t min_level;
-  int8_t max_level;
-  int8_t power_on_level;
-  int16_t power_on_fade_time;
-  int8_t intrinsic_ballast_factor;
-  int8_t ballast_factor_adjustment;
-  int8_t lamp_quantity;
+  uint8_t min_level;
+  uint8_t max_level;
+  uint8_t power_on_level;
+  uint16_t power_on_fade_time;
+  uint8_t intrinsic_ballast_factor;
+  uint8_t ballast_factor_adjustment;
+  uint8_t lamp_quantity;
   const char* lamp_type;
   const char* lamp_manufacturer;
-  int32_t lamp_rated_hours;
-  int32_t lamp_burn_hours;
+  uint32_t lamp_rated_hours;
+  uint32_t lamp_burn_hours;
   uint8_t lamp_alarm_mode;
-  int32_t lamp_burn_hours_trip_point;
+  uint32_t lamp_burn_hours_trip_point;
 } uic_mqtt_dotdot_ballast_configuration_state_t;
 
 typedef struct {
@@ -23457,7 +23457,7 @@ void uic_mqtt_dotdot_clear_ballast_configuration_force_read_attributes_callbacks
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_min_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23487,7 +23487,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_min_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_max_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23547,7 +23547,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_status_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_min_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23577,7 +23577,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_min_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_max_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23607,7 +23607,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_max_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23637,7 +23637,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_fade_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23667,7 +23667,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_fade_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_intrinsic_ballast_factor_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23697,7 +23697,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_intrinsic_ballast_factor_unret
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_factor_adjustment_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23727,7 +23727,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_factor_adjustment_unre
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_quantity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23817,7 +23817,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_manufacturer_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_rated_hours_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23847,7 +23847,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_rated_hours_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23907,7 +23907,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_alarm_mode_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_trip_point_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -23972,10 +23972,10 @@ void uic_mqtt_dotdot_ballast_configuration_publish_empty_supported_commands(
 // Callback types used by the illuminance_measurement cluster
 
 typedef struct {
-  int16_t measured_value;
-  int16_t min_measured_value;
-  int16_t max_measured_value;
-  int16_t tolerance;
+  uint16_t measured_value;
+  uint16_t min_measured_value;
+  uint16_t max_measured_value;
+  uint16_t tolerance;
   uint8_t light_sensor_type;
 } uic_mqtt_dotdot_illuminance_measurement_state_t;
 
@@ -24066,7 +24066,7 @@ void uic_mqtt_dotdot_clear_illuminance_measurement_force_read_attributes_callbac
  */
 sl_status_t uic_mqtt_dotdot_illuminance_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -24096,7 +24096,7 @@ sl_status_t uic_mqtt_dotdot_illuminance_measurement_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_illuminance_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -24126,7 +24126,7 @@ sl_status_t uic_mqtt_dotdot_illuminance_measurement_min_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_illuminance_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -24156,7 +24156,7 @@ sl_status_t uic_mqtt_dotdot_illuminance_measurement_max_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_illuminance_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -24253,7 +24253,7 @@ void uic_mqtt_dotdot_illuminance_measurement_publish_empty_supported_commands(
 typedef struct {
   uint8_t level_status;
   uint8_t light_sensor_type;
-  int16_t illuminance_target_level;
+  uint16_t illuminance_target_level;
 } uic_mqtt_dotdot_illuminance_level_sensing_state_t;
 
 typedef struct {
@@ -24401,7 +24401,7 @@ sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_light_sensor_type_unretain
  */
 sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_illuminance_target_level_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -24469,7 +24469,7 @@ typedef struct {
   int16_t measured_value;
   int16_t min_measured_value;
   int16_t max_measured_value;
-  int16_t tolerance;
+  uint16_t tolerance;
 } uic_mqtt_dotdot_temperature_measurement_state_t;
 
 typedef struct {
@@ -24648,7 +24648,7 @@ sl_status_t uic_mqtt_dotdot_temperature_measurement_max_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_temperature_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -24716,11 +24716,11 @@ typedef struct {
   int16_t measured_value;
   int16_t min_measured_value;
   int16_t max_measured_value;
-  int16_t tolerance;
+  uint16_t tolerance;
   int16_t scaled_value;
   int16_t min_scaled_value;
   int16_t max_scaled_value;
-  int16_t scaled_tolerance;
+  uint16_t scaled_tolerance;
   int8_t scale;
 } uic_mqtt_dotdot_pressure_measurement_state_t;
 
@@ -24905,7 +24905,7 @@ sl_status_t uic_mqtt_dotdot_pressure_measurement_max_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_pressure_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25025,7 +25025,7 @@ sl_status_t uic_mqtt_dotdot_pressure_measurement_max_scaled_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_pressure_measurement_scaled_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25120,10 +25120,10 @@ void uic_mqtt_dotdot_pressure_measurement_publish_empty_supported_commands(
 // Callback types used by the flow_measurement cluster
 
 typedef struct {
-  int16_t measured_value;
-  int16_t min_measured_value;
-  int16_t max_measured_value;
-  int16_t tolerance;
+  uint16_t measured_value;
+  uint16_t min_measured_value;
+  uint16_t max_measured_value;
+  uint16_t tolerance;
 } uic_mqtt_dotdot_flow_measurement_state_t;
 
 typedef struct {
@@ -25212,7 +25212,7 @@ void uic_mqtt_dotdot_clear_flow_measurement_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_flow_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25242,7 +25242,7 @@ sl_status_t uic_mqtt_dotdot_flow_measurement_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_flow_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25272,7 +25272,7 @@ sl_status_t uic_mqtt_dotdot_flow_measurement_min_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_flow_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25302,7 +25302,7 @@ sl_status_t uic_mqtt_dotdot_flow_measurement_max_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_flow_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25367,10 +25367,10 @@ void uic_mqtt_dotdot_flow_measurement_publish_empty_supported_commands(
 // Callback types used by the relativity_humidity cluster
 
 typedef struct {
-  int16_t measured_value;
-  int16_t min_measured_value;
-  int16_t max_measured_value;
-  int16_t tolerance;
+  uint16_t measured_value;
+  uint16_t min_measured_value;
+  uint16_t max_measured_value;
+  uint16_t tolerance;
 } uic_mqtt_dotdot_relativity_humidity_state_t;
 
 typedef struct {
@@ -25459,7 +25459,7 @@ void uic_mqtt_dotdot_clear_relativity_humidity_force_read_attributes_callbacks()
  */
 sl_status_t uic_mqtt_dotdot_relativity_humidity_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25489,7 +25489,7 @@ sl_status_t uic_mqtt_dotdot_relativity_humidity_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_relativity_humidity_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25519,7 +25519,7 @@ sl_status_t uic_mqtt_dotdot_relativity_humidity_min_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_relativity_humidity_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25549,7 +25549,7 @@ sl_status_t uic_mqtt_dotdot_relativity_humidity_max_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_relativity_humidity_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25617,15 +25617,15 @@ typedef struct {
   uint8_t occupancy;
   uint8_t occupancy_sensor_type;
   uint8_t occupancy_sensor_type_bitmap;
-  int16_t pir_occupied_to_unoccupied_delay;
-  int16_t pir_unoccupied_to_occupied_delay;
-  int8_t pir_unoccupied_to_occupied_threshold;
-  int16_t ultrasonic_occupied_to_unoccupied_delay;
-  int16_t ultrasonic_unoccupied_to_occupied_delay;
-  int8_t ultrasonic_unoccupied_to_occupied_threshold;
-  int16_t physical_contact_occupied_to_unoccupied_delay;
-  int16_t physical_contact_unoccupied_to_occupied_delay;
-  int8_t physical_contact_unoccupied_to_occupied_threshold;
+  uint16_t pir_occupied_to_unoccupied_delay;
+  uint16_t pir_unoccupied_to_occupied_delay;
+  uint8_t pir_unoccupied_to_occupied_threshold;
+  uint16_t ultrasonic_occupied_to_unoccupied_delay;
+  uint16_t ultrasonic_unoccupied_to_occupied_delay;
+  uint8_t ultrasonic_unoccupied_to_occupied_threshold;
+  uint16_t physical_contact_occupied_to_unoccupied_delay;
+  uint16_t physical_contact_unoccupied_to_occupied_delay;
+  uint8_t physical_contact_unoccupied_to_occupied_threshold;
 } uic_mqtt_dotdot_occupancy_sensing_state_t;
 
 typedef struct {
@@ -25812,7 +25812,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_unret
  */
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25842,7 +25842,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_u
  */
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25872,7 +25872,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_u
  */
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25902,7 +25902,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_thresho
  */
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25932,7 +25932,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_
  */
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25962,7 +25962,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_
  */
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -25992,7 +25992,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_
  */
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26022,7 +26022,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_occupied_to_unocc
  */
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26052,7 +26052,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occ
  */
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26117,10 +26117,10 @@ void uic_mqtt_dotdot_occupancy_sensing_publish_empty_supported_commands(
 // Callback types used by the soil_moisture cluster
 
 typedef struct {
-  int16_t measured_value;
-  int16_t min_measured_value;
-  int16_t max_measured_value;
-  int16_t tolerance;
+  uint16_t measured_value;
+  uint16_t min_measured_value;
+  uint16_t max_measured_value;
+  uint16_t tolerance;
 } uic_mqtt_dotdot_soil_moisture_state_t;
 
 typedef struct {
@@ -26209,7 +26209,7 @@ void uic_mqtt_dotdot_clear_soil_moisture_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_soil_moisture_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26239,7 +26239,7 @@ sl_status_t uic_mqtt_dotdot_soil_moisture_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_soil_moisture_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26269,7 +26269,7 @@ sl_status_t uic_mqtt_dotdot_soil_moisture_min_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_soil_moisture_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26299,7 +26299,7 @@ sl_status_t uic_mqtt_dotdot_soil_moisture_max_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_soil_moisture_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26364,10 +26364,10 @@ void uic_mqtt_dotdot_soil_moisture_publish_empty_supported_commands(
 // Callback types used by the ph_measurement cluster
 
 typedef struct {
-  int16_t measured_value;
-  int16_t min_measured_value;
-  int16_t max_measured_value;
-  int16_t tolerance;
+  uint16_t measured_value;
+  uint16_t min_measured_value;
+  uint16_t max_measured_value;
+  uint16_t tolerance;
 } uic_mqtt_dotdot_ph_measurement_state_t;
 
 typedef struct {
@@ -26456,7 +26456,7 @@ void uic_mqtt_dotdot_clear_ph_measurement_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_ph_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26486,7 +26486,7 @@ sl_status_t uic_mqtt_dotdot_ph_measurement_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ph_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26516,7 +26516,7 @@ sl_status_t uic_mqtt_dotdot_ph_measurement_min_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ph_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26546,7 +26546,7 @@ sl_status_t uic_mqtt_dotdot_ph_measurement_max_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ph_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26611,10 +26611,10 @@ void uic_mqtt_dotdot_ph_measurement_publish_empty_supported_commands(
 // Callback types used by the electrical_conductivity_measurement cluster
 
 typedef struct {
-  int16_t measured_value;
-  int16_t min_measured_value;
-  int16_t max_measured_value;
-  int16_t tolerance;
+  uint16_t measured_value;
+  uint16_t min_measured_value;
+  uint16_t max_measured_value;
+  uint16_t tolerance;
 } uic_mqtt_dotdot_electrical_conductivity_measurement_state_t;
 
 typedef struct {
@@ -26703,7 +26703,7 @@ void uic_mqtt_dotdot_clear_electrical_conductivity_measurement_force_read_attrib
  */
 sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26733,7 +26733,7 @@ sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_measured_value_u
  */
 sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26763,7 +26763,7 @@ sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_min_measured_val
  */
 sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26793,7 +26793,7 @@ sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_max_measured_val
  */
 sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26858,10 +26858,10 @@ void uic_mqtt_dotdot_electrical_conductivity_measurement_publish_empty_supported
 // Callback types used by the wind_speed_measurement cluster
 
 typedef struct {
-  int16_t measured_value;
-  int16_t min_measured_value;
-  int16_t max_measured_value;
-  int16_t tolerance;
+  uint16_t measured_value;
+  uint16_t min_measured_value;
+  uint16_t max_measured_value;
+  uint16_t tolerance;
 } uic_mqtt_dotdot_wind_speed_measurement_state_t;
 
 typedef struct {
@@ -26950,7 +26950,7 @@ void uic_mqtt_dotdot_clear_wind_speed_measurement_force_read_attributes_callback
  */
 sl_status_t uic_mqtt_dotdot_wind_speed_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -26980,7 +26980,7 @@ sl_status_t uic_mqtt_dotdot_wind_speed_measurement_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_wind_speed_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -27010,7 +27010,7 @@ sl_status_t uic_mqtt_dotdot_wind_speed_measurement_min_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_wind_speed_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -27040,7 +27040,7 @@ sl_status_t uic_mqtt_dotdot_wind_speed_measurement_max_measured_value_unretain(
  */
 sl_status_t uic_mqtt_dotdot_wind_speed_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -27850,7 +27850,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     ZoneEnrollResponseEnrollResponseCode enroll_response_code,
 
-    int8_t zoneid
+    uint8_t zoneid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_t)(
@@ -27861,9 +27861,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_zone_status_change_notification_c
 
     uint8_t extended_status,
 
-    int8_t zoneid,
+    uint8_t zoneid,
 
-    int16_t delay
+    uint16_t delay
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_t)(
@@ -27877,16 +27877,16 @@ typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     IasZoneType zone_type,
 
-    int16_t manufacturer_code
+    uint16_t manufacturer_code
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t test_mode_duration,
+    uint8_t test_mode_duration,
 
-    int8_t current_zone_sensitivity_level
+    uint8_t current_zone_sensitivity_level
 
 );
 
@@ -27895,9 +27895,9 @@ typedef struct {
   uint8_t zone_type;
   uint16_t zone_status;
   uint64_t iascie_address;
-  int8_t zoneid;
-  int8_t number_of_zone_sensitivity_levels_supported;
-  int8_t current_zone_sensitivity_level;
+  uint8_t zoneid;
+  uint8_t number_of_zone_sensitivity_levels_supported;
+  uint8_t current_zone_sensitivity_level;
 } uic_mqtt_dotdot_ias_zone_state_t;
 
 typedef struct {
@@ -27932,7 +27932,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_force_read_attributes_callback_t)
 typedef struct {
   ZoneEnrollResponseEnrollResponseCode enroll_response_code;
 
-  int8_t zoneid;
+  uint8_t zoneid;
 } uic_mqtt_dotdot_ias_zone_command_zone_enroll_response_fields_t;
 
 /**
@@ -27943,9 +27943,9 @@ typedef struct {
 
   uint8_t extended_status;
 
-  int8_t zoneid;
+  uint8_t zoneid;
 
-  int16_t delay;
+  uint16_t delay;
 } uic_mqtt_dotdot_ias_zone_command_zone_status_change_notification_fields_t;
 
 /**
@@ -27954,16 +27954,16 @@ typedef struct {
 typedef struct {
   IasZoneType zone_type;
 
-  int16_t manufacturer_code;
+  uint16_t manufacturer_code;
 } uic_mqtt_dotdot_ias_zone_command_zone_enroll_request_fields_t;
 
 /**
  * @brief Command fields for IASZone/InitiateTestMode
  */
 typedef struct {
-  int8_t test_mode_duration;
+  uint8_t test_mode_duration;
 
-  int8_t current_zone_sensitivity_level;
+  uint8_t current_zone_sensitivity_level;
 } uic_mqtt_dotdot_ias_zone_command_initiate_test_mode_fields_t;
 
 
@@ -28349,7 +28349,7 @@ sl_status_t uic_mqtt_dotdot_ias_zone_iascie_address_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ias_zone_zoneid_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -28379,7 +28379,7 @@ sl_status_t uic_mqtt_dotdot_ias_zone_zoneid_unretain(
  */
 sl_status_t uic_mqtt_dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -28409,7 +28409,7 @@ sl_status_t uic_mqtt_dotdot_ias_zone_number_of_zone_sensitivity_levels_supported
  */
 sl_status_t uic_mqtt_dotdot_ias_zone_current_zone_sensitivity_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -28478,9 +28478,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_iaswd_start_warning_callback_t)(
     uic_mqtt_dotdot_callback_call_type_t call_type,
     uint8_t siren_configuration,
 
-    int16_t warning_duration,
+    uint16_t warning_duration,
 
-    int8_t strobe_duty_cycle,
+    uint8_t strobe_duty_cycle,
 
     IaswdLevel strobe_level
 
@@ -28494,7 +28494,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_iaswd_squawk_callback_t)(
 );
 
 typedef struct {
-  int16_t max_duration;
+  uint16_t max_duration;
 } uic_mqtt_dotdot_iaswd_state_t;
 
 typedef struct {
@@ -28523,9 +28523,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_iaswd_force_read_attributes_callback_t)(
 typedef struct {
   uint8_t siren_configuration;
 
-  int16_t warning_duration;
+  uint16_t warning_duration;
 
-  int8_t strobe_duty_cycle;
+  uint8_t strobe_duty_cycle;
 
   IaswdLevel strobe_level;
 } uic_mqtt_dotdot_iaswd_command_start_warning_fields_t;
@@ -28680,7 +28680,7 @@ void uic_mqtt_dotdot_clear_iaswd_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_iaswd_max_duration_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -28745,23 +28745,23 @@ void uic_mqtt_dotdot_iaswd_publish_empty_supported_commands(
 // Callback types used by the metering cluster
 
 typedef struct {
-  int64_t current_summation_delivered;
-  int64_t current_summation_received;
-  int64_t current_max_demand_delivered;
+  uint64_t current_summation_delivered;
+  uint64_t current_summation_received;
+  uint64_t current_max_demand_delivered;
   int8_t current_max_demand_received;
   int8_t power_factor;
-  uint8_t reading_snap_shot_time;
-  uint8_t current_max_demand_delivered_time;
-  uint8_t current_max_demand_received_time;
-  int8_t default_update_period;
+  uint32_t reading_snap_shot_time;
+  uint32_t current_max_demand_delivered_time;
+  uint32_t current_max_demand_received_time;
+  uint8_t default_update_period;
   uint8_t supply_status;
-  int64_t current_inlet_energy_carrier_summation;
-  int64_t current_outlet_energy_carrier_summation;
+  uint64_t current_inlet_energy_carrier_summation;
+  uint64_t current_outlet_energy_carrier_summation;
   int32_t inlet_temperature;
   int32_t outlet_temperature;
   uint8_t unitof_measure;
-  int32_t multiplier;
-  int32_t divisor;
+  uint32_t multiplier;
+  uint32_t divisor;
   uint8_t summation_formatting;
   uint8_t demand_formatting;
   uint8_t historical_consumption_formatting;
@@ -28881,7 +28881,7 @@ void uic_mqtt_dotdot_clear_metering_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_metering_current_summation_delivered_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -28911,7 +28911,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_summation_delivered_unretain(
  */
 sl_status_t uic_mqtt_dotdot_metering_current_summation_received_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -28941,7 +28941,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_summation_received_unretain(
  */
 sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -29031,7 +29031,7 @@ sl_status_t uic_mqtt_dotdot_metering_power_factor_unretain(
  */
 sl_status_t uic_mqtt_dotdot_metering_reading_snap_shot_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -29061,7 +29061,7 @@ sl_status_t uic_mqtt_dotdot_metering_reading_snap_shot_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -29091,7 +29091,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_metering_current_max_demand_received_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -29121,7 +29121,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_max_demand_received_time_unretain(
  */
 sl_status_t uic_mqtt_dotdot_metering_default_update_period_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -29181,7 +29181,7 @@ sl_status_t uic_mqtt_dotdot_metering_supply_status_unretain(
  */
 sl_status_t uic_mqtt_dotdot_metering_current_inlet_energy_carrier_summation_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -29211,7 +29211,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_inlet_energy_carrier_summation_unre
  */
 sl_status_t uic_mqtt_dotdot_metering_current_outlet_energy_carrier_summation_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -29331,7 +29331,7 @@ sl_status_t uic_mqtt_dotdot_metering_unitof_measure_unretain(
  */
 sl_status_t uic_mqtt_dotdot_metering_multiplier_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -29361,7 +29361,7 @@ sl_status_t uic_mqtt_dotdot_metering_multiplier_unretain(
  */
 sl_status_t uic_mqtt_dotdot_metering_divisor_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -29698,14 +29698,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_get_profile_info_re
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int8_t profile_count,
+    uint8_t profile_count,
 
     ProfileIntervalPeriod profile_interval_period,
 
-    int8_t max_number_of_intervals,
+    uint8_t max_number_of_intervals,
 
     uint8_t list_of_attributes_count,
-    const uint8_t *list_of_attributes
+    const uint16_t *list_of_attributes
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_t)(
@@ -29717,29 +29717,29 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_get_measurement_pro
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t start_time,
+    uint32_t start_time,
 
     GetMeasurementProfileResponseStatus status,
 
     ProfileIntervalPeriod profile_interval_period,
 
-    int8_t number_of_intervals_delivered,
+    uint8_t number_of_intervals_delivered,
 
-    uint8_t attribute_id,
+    uint16_t attribute_id,
 
     uint8_t intervals_count,
-    const int8_t *intervals
+    const uint8_t *intervals
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    uint8_t attributeid,
+    uint16_t attributeid,
 
-    uint8_t start_time,
+    uint32_t start_time,
 
-    int8_t number_of_intervals
+    uint8_t number_of_intervals
 
 );
 
@@ -29754,19 +29754,19 @@ typedef struct {
   int16_t dc_power;
   int16_t dc_power_min;
   int16_t dc_power_max;
-  int16_t dc_voltage_multiplier;
-  int16_t dc_voltage_divisor;
-  int16_t dc_current_multiplier;
-  int16_t dc_current_divisor;
-  int16_t dc_power_multiplier;
-  int16_t dc_power_divisor;
-  int16_t ac_frequency;
-  int16_t ac_frequency_min;
-  int16_t ac_frequency_max;
-  int16_t neutral_current;
+  uint16_t dc_voltage_multiplier;
+  uint16_t dc_voltage_divisor;
+  uint16_t dc_current_multiplier;
+  uint16_t dc_current_divisor;
+  uint16_t dc_power_multiplier;
+  uint16_t dc_power_divisor;
+  uint16_t ac_frequency;
+  uint16_t ac_frequency_min;
+  uint16_t ac_frequency_max;
+  uint16_t neutral_current;
   int32_t total_active_power;
   int32_t total_reactive_power;
-  int32_t total_apparent_power;
+  uint32_t total_apparent_power;
   int16_t measured1st_harmonic_current;
   int16_t measured3rd_harmonic_current;
   int16_t measured5th_harmonic_current;
@@ -29779,40 +29779,40 @@ typedef struct {
   int16_t measured_phase7th_harmonic_current;
   int16_t measured_phase9th_harmonic_current;
   int16_t measured_phase11th_harmonic_current;
-  int16_t ac_frequency_multiplier;
-  int16_t ac_frequency_divisor;
-  int32_t power_multiplier;
-  int32_t power_divisor;
+  uint16_t ac_frequency_multiplier;
+  uint16_t ac_frequency_divisor;
+  uint32_t power_multiplier;
+  uint32_t power_divisor;
   int8_t harmonic_current_multiplier;
   int8_t phase_harmonic_current_multiplier;
-  int16_t line_current;
+  uint16_t line_current;
   int16_t active_current;
   int16_t reactive_current;
-  int16_t rms_voltage;
-  int16_t rms_voltage_min;
-  int16_t rms_voltage_max;
-  int16_t rms_current;
-  int16_t rms_current_min;
-  int16_t rms_current_max;
+  uint16_t rms_voltage;
+  uint16_t rms_voltage_min;
+  uint16_t rms_voltage_max;
+  uint16_t rms_current;
+  uint16_t rms_current_min;
+  uint16_t rms_current_max;
   int16_t active_power;
   int16_t active_power_min;
   int16_t active_power_max;
   int16_t reactive_power;
-  int16_t apparent_power;
+  uint16_t apparent_power;
   int8_t power_factor;
-  int16_t average_rms_voltage_measurement_period;
-  int16_t average_rms_over_voltage_counter;
-  int16_t average_rms_under_voltage_counter;
-  int16_t rms_extreme_over_voltage_period;
-  int16_t rms_extreme_under_voltage_period;
-  int16_t rms_voltage_sag_period;
-  int16_t rms_voltage_swell_period;
-  int16_t ac_voltage_multiplier;
-  int16_t ac_voltage_divisor;
-  int16_t ac_current_multiplier;
-  int16_t ac_current_divisor;
-  int16_t ac_power_multiplier;
-  int16_t ac_power_divisor;
+  uint16_t average_rms_voltage_measurement_period;
+  uint16_t average_rms_over_voltage_counter;
+  uint16_t average_rms_under_voltage_counter;
+  uint16_t rms_extreme_over_voltage_period;
+  uint16_t rms_extreme_under_voltage_period;
+  uint16_t rms_voltage_sag_period;
+  uint16_t rms_voltage_swell_period;
+  uint16_t ac_voltage_multiplier;
+  uint16_t ac_voltage_divisor;
+  uint16_t ac_current_multiplier;
+  uint16_t ac_current_divisor;
+  uint16_t ac_power_multiplier;
+  uint16_t ac_power_divisor;
   uint8_t dc_overload_alarms_mask;
   int16_t dc_voltage_overload;
   int16_t dc_current_overload;
@@ -29827,50 +29827,50 @@ typedef struct {
   int16_t rms_extreme_under_voltage;
   int16_t rms_voltage_sag;
   int16_t rms_voltage_swell;
-  int16_t line_current_phb;
+  uint16_t line_current_phb;
   int16_t active_current_phb;
   int16_t reactive_current_phb;
-  int16_t rms_voltage_phb;
-  int16_t rms_voltage_min_phb;
-  int16_t rms_voltage_max_phb;
-  int16_t rms_current_phb;
-  int16_t rms_current_min_phb;
-  int16_t rms_current_max_phb;
+  uint16_t rms_voltage_phb;
+  uint16_t rms_voltage_min_phb;
+  uint16_t rms_voltage_max_phb;
+  uint16_t rms_current_phb;
+  uint16_t rms_current_min_phb;
+  uint16_t rms_current_max_phb;
   int16_t active_power_phb;
   int16_t active_power_min_phb;
   int16_t active_power_max_phb;
   int16_t reactive_power_phb;
-  int16_t apparent_power_phb;
+  uint16_t apparent_power_phb;
   int8_t power_factor_phb;
-  int16_t average_rms_voltage_measurement_period_phb;
-  int16_t average_rms_over_voltage_counter_phb;
-  int16_t average_rms_under_voltage_counter_phb;
-  int16_t rms_extreme_over_voltage_period_phb;
-  int16_t rms_extreme_under_voltage_period_phb;
-  int16_t rms_voltage_sag_period_phb;
-  int16_t rms_voltage_swell_period_phb;
-  int16_t line_current_phc;
+  uint16_t average_rms_voltage_measurement_period_phb;
+  uint16_t average_rms_over_voltage_counter_phb;
+  uint16_t average_rms_under_voltage_counter_phb;
+  uint16_t rms_extreme_over_voltage_period_phb;
+  uint16_t rms_extreme_under_voltage_period_phb;
+  uint16_t rms_voltage_sag_period_phb;
+  uint16_t rms_voltage_swell_period_phb;
+  uint16_t line_current_phc;
   int16_t active_current_phc;
   int16_t reactive_current_phc;
-  int16_t rms_voltage_phc;
-  int16_t rms_voltage_min_phc;
-  int16_t rms_voltage_max_phc;
-  int16_t rms_current_phc;
-  int16_t rms_current_min_phc;
-  int16_t rms_current_max_phc;
+  uint16_t rms_voltage_phc;
+  uint16_t rms_voltage_min_phc;
+  uint16_t rms_voltage_max_phc;
+  uint16_t rms_current_phc;
+  uint16_t rms_current_min_phc;
+  uint16_t rms_current_max_phc;
   int16_t active_power_phc;
   int16_t active_power_min_phc;
   int16_t active_power_max_phc;
   int16_t reactive_power_phc;
-  int16_t apparent_power_phc;
+  uint16_t apparent_power_phc;
   int8_t power_factor_phc;
-  int16_t average_rms_voltage_measurement_period_phc;
-  int16_t average_rms_over_voltage_counter_phc;
-  int16_t average_rms_under_voltage_counter_phc;
-  int16_t rms_extreme_over_voltage_period_phc;
-  int16_t rms_extreme_under_voltage_period_phc;
-  int16_t rms_voltage_sag_period_phc;
-  int16_t rms_voltage_swell_period_phc;
+  uint16_t average_rms_voltage_measurement_period_phc;
+  uint16_t average_rms_over_voltage_counter_phc;
+  uint16_t average_rms_under_voltage_counter_phc;
+  uint16_t rms_extreme_over_voltage_period_phc;
+  uint16_t rms_extreme_under_voltage_period_phc;
+  uint16_t rms_voltage_sag_period_phc;
+  uint16_t rms_voltage_swell_period_phc;
 } uic_mqtt_dotdot_electrical_measurement_state_t;
 
 typedef struct {
@@ -30023,43 +30023,43 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_force_read_attribut
  * @brief Command fields for ElectricalMeasurement/GetProfileInfoResponse
  */
 typedef struct {
-  int8_t profile_count;
+  uint8_t profile_count;
 
   ProfileIntervalPeriod profile_interval_period;
 
-  int8_t max_number_of_intervals;
+  uint8_t max_number_of_intervals;
 
   uint8_t list_of_attributes_count;
-  const uint8_t *list_of_attributes;
+  const uint16_t *list_of_attributes;
 } uic_mqtt_dotdot_electrical_measurement_command_get_profile_info_response_fields_t;
 
 /**
  * @brief Command fields for ElectricalMeasurement/GetMeasurementProfileResponse
  */
 typedef struct {
-  uint8_t start_time;
+  uint32_t start_time;
 
   GetMeasurementProfileResponseStatus status;
 
   ProfileIntervalPeriod profile_interval_period;
 
-  int8_t number_of_intervals_delivered;
+  uint8_t number_of_intervals_delivered;
 
-  uint8_t attribute_id;
+  uint16_t attribute_id;
 
   uint8_t intervals_count;
-  const int8_t *intervals;
+  const uint8_t *intervals;
 } uic_mqtt_dotdot_electrical_measurement_command_get_measurement_profile_response_fields_t;
 
 /**
  * @brief Command fields for ElectricalMeasurement/GetMeasurementProfile
  */
 typedef struct {
-  uint8_t attributeid;
+  uint16_t attributeid;
 
-  uint8_t start_time;
+  uint32_t start_time;
 
-  int8_t number_of_intervals;
+  uint8_t number_of_intervals;
 } uic_mqtt_dotdot_electrical_measurement_command_get_measurement_profile_fields_t;
 
 
@@ -30585,7 +30585,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_max_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30615,7 +30615,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_multiplier_unretai
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30645,7 +30645,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_divisor_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30675,7 +30675,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_multiplier_unretai
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30705,7 +30705,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_divisor_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30735,7 +30735,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_multiplier_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30765,7 +30765,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_divisor_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30795,7 +30795,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_min_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30825,7 +30825,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_min_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_max_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30855,7 +30855,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_max_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_neutral_current_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -30945,7 +30945,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_total_reactive_power_unretain
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_total_apparent_power_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31335,7 +31335,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase11th_harmonic_c
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31365,7 +31365,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_multiplier_unret
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31395,7 +31395,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_divisor_unretain
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_power_multiplier_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31425,7 +31425,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_power_multiplier_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_power_divisor_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31515,7 +31515,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_phase_harmonic_current_multip
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31605,7 +31605,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31635,7 +31635,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31665,7 +31665,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31695,7 +31695,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31725,7 +31725,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31755,7 +31755,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31905,7 +31905,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31965,7 +31965,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -31995,7 +31995,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measureme
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32025,7 +32025,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_coun
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32055,7 +32055,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_cou
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32085,7 +32085,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_peri
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32115,7 +32115,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_per
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32145,7 +32145,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_unreta
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32175,7 +32175,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_unre
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32205,7 +32205,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_multiplier_unretai
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32235,7 +32235,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_divisor_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32265,7 +32265,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_multiplier_unretai
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32295,7 +32295,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_divisor_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32325,7 +32325,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_multiplier_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32775,7 +32775,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32865,7 +32865,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_phb_unretain
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32895,7 +32895,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phb_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32925,7 +32925,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phb_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32955,7 +32955,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phb_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -32985,7 +32985,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phb_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33015,7 +33015,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phb_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33165,7 +33165,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_phb_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33225,7 +33225,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_phb_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33255,7 +33255,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measureme
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33285,7 +33285,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_coun
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33315,7 +33315,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_cou
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33345,7 +33345,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_peri
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33375,7 +33375,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_per
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33405,7 +33405,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phb_un
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33435,7 +33435,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phb_
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33525,7 +33525,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_phc_unretain
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33555,7 +33555,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phc_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33585,7 +33585,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phc_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33615,7 +33615,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phc_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33645,7 +33645,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phc_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33675,7 +33675,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phc_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33825,7 +33825,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_phc_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33885,7 +33885,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_phc_unretain(
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33915,7 +33915,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measureme
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33945,7 +33945,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_coun
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -33975,7 +33975,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_cou
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34005,7 +34005,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_peri
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34035,7 +34035,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_per
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34065,7 +34065,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phc_un
  */
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34130,37 +34130,37 @@ void uic_mqtt_dotdot_electrical_measurement_publish_empty_supported_commands(
 // Callback types used by the diagnostics cluster
 
 typedef struct {
-  int16_t number_of_resets;
-  int16_t persistent_memory_writes;
-  int32_t mac_rx_bcast;
-  int32_t mac_tx_bcast;
-  int32_t mac_rx_ucast;
-  int32_t mac_tx_ucast;
-  int16_t mac_tx_ucast_retry;
-  int16_t mac_tx_ucast_fail;
-  int16_t aps_rx_bcast;
-  int16_t aps_tx_bcast;
-  int16_t aps_rx_ucast;
-  int16_t aps_tx_ucast_success;
-  int16_t aps_tx_ucast_retry;
-  int16_t aps_tx_ucast_fail;
-  int16_t route_disc_initiated;
-  int16_t neighbor_added;
-  int16_t neighbor_removed;
-  int16_t neighbor_stale;
-  int16_t join_indication;
-  int16_t child_moved;
-  int16_t nwkfc_failure;
-  int16_t apsfc_failure;
-  int16_t aps_unauthorized_key;
-  int16_t nwk_decrypt_failures;
-  int16_t aps_decrypt_failures;
-  int16_t packet_buffer_allocate_failures;
-  int16_t relayed_ucast;
-  int16_t phy_to_mac_queue_limit_reached;
-  int16_t packet_validate_drop_count;
-  int16_t average_mac_retry_per_aps_message_sent;
-  int8_t last_messagelqi;
+  uint16_t number_of_resets;
+  uint16_t persistent_memory_writes;
+  uint32_t mac_rx_bcast;
+  uint32_t mac_tx_bcast;
+  uint32_t mac_rx_ucast;
+  uint32_t mac_tx_ucast;
+  uint16_t mac_tx_ucast_retry;
+  uint16_t mac_tx_ucast_fail;
+  uint16_t aps_rx_bcast;
+  uint16_t aps_tx_bcast;
+  uint16_t aps_rx_ucast;
+  uint16_t aps_tx_ucast_success;
+  uint16_t aps_tx_ucast_retry;
+  uint16_t aps_tx_ucast_fail;
+  uint16_t route_disc_initiated;
+  uint16_t neighbor_added;
+  uint16_t neighbor_removed;
+  uint16_t neighbor_stale;
+  uint16_t join_indication;
+  uint16_t child_moved;
+  uint16_t nwkfc_failure;
+  uint16_t apsfc_failure;
+  uint16_t aps_unauthorized_key;
+  uint16_t nwk_decrypt_failures;
+  uint16_t aps_decrypt_failures;
+  uint16_t packet_buffer_allocate_failures;
+  uint16_t relayed_ucast;
+  uint16_t phy_to_mac_queue_limit_reached;
+  uint16_t packet_validate_drop_count;
+  uint16_t average_mac_retry_per_aps_message_sent;
+  uint8_t last_messagelqi;
   int8_t last_messagerssi;
 } uic_mqtt_dotdot_diagnostics_state_t;
 
@@ -34278,7 +34278,7 @@ void uic_mqtt_dotdot_clear_diagnostics_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_number_of_resets_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34308,7 +34308,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_number_of_resets_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_persistent_memory_writes_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34338,7 +34338,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_persistent_memory_writes_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_bcast_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34368,7 +34368,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_bcast_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_bcast_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34398,7 +34398,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_bcast_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_ucast_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34428,7 +34428,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_ucast_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34458,7 +34458,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_retry_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34488,7 +34488,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_retry_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_fail_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34518,7 +34518,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_fail_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_bcast_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34548,7 +34548,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_bcast_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_bcast_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34578,7 +34578,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_bcast_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_ucast_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34608,7 +34608,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_ucast_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_success_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34638,7 +34638,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_success_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_retry_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34668,7 +34668,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_retry_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_fail_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34698,7 +34698,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_fail_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_route_disc_initiated_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34728,7 +34728,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_route_disc_initiated_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_added_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34758,7 +34758,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_added_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_removed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34788,7 +34788,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_removed_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_stale_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34818,7 +34818,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_stale_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_join_indication_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34848,7 +34848,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_join_indication_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_child_moved_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34878,7 +34878,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_child_moved_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_nwkfc_failure_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34908,7 +34908,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_nwkfc_failure_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_apsfc_failure_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34938,7 +34938,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_apsfc_failure_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_unauthorized_key_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34968,7 +34968,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_unauthorized_key_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_nwk_decrypt_failures_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -34998,7 +34998,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_nwk_decrypt_failures_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_decrypt_failures_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -35028,7 +35028,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_decrypt_failures_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_packet_buffer_allocate_failures_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -35058,7 +35058,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_packet_buffer_allocate_failures_unretain
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_relayed_ucast_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -35088,7 +35088,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_relayed_ucast_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_phy_to_mac_queue_limit_reached_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -35118,7 +35118,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_phy_to_mac_queue_limit_reached_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_packet_validate_drop_count_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -35148,7 +35148,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_packet_validate_drop_count_unretain(
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_average_mac_retry_per_aps_message_sent_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -35178,7 +35178,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_average_mac_retry_per_aps_message_sent_u
  */
 sl_status_t uic_mqtt_dotdot_diagnostics_last_messagelqi_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -35281,13 +35281,13 @@ typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report
 
     bool transmission_successful,
 
-    int16_t transmission_time_ms,
+    uint16_t transmission_time_ms,
 
     int8_t tx_powerd_bm,
 
-    int8_t tx_channel,
+    uint8_t tx_channel,
 
-    int8_t routing_attempts,
+    uint8_t routing_attempts,
 
     bool route_changed,
 
@@ -35303,7 +35303,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report
 
     int8_t ackrssi,
 
-    int8_t ack_channel,
+    uint8_t ack_channel,
 
     const char* last_route_failed_link_functionalunid,
 
@@ -35353,13 +35353,13 @@ typedef struct {
 
   bool transmission_successful;
 
-  int16_t transmission_time_ms;
+  uint16_t transmission_time_ms;
 
   int8_t tx_powerd_bm;
 
-  int8_t tx_channel;
+  uint8_t tx_channel;
 
-  int8_t routing_attempts;
+  uint8_t routing_attempts;
 
   bool route_changed;
 
@@ -35375,7 +35375,7 @@ typedef struct {
 
   int8_t ackrssi;
 
-  int8_t ack_channel;
+  uint8_t ack_channel;
 
   const char* last_route_failed_link_functionalunid;
 
@@ -35617,10 +35617,10 @@ typedef sl_status_t (*uic_mqtt_dotdot_state_enable_nls_callback_t)(
 
 typedef struct {
   size_t endpoint_id_list_count;
-  const int8_t* endpoint_id_list;
+  const uint8_t* endpoint_id_list;
   uint8_t network_status;
   uint8_t security;
-  int32_t maximum_command_delay;
+  uint32_t maximum_command_delay;
   size_t network_list_count;
   const char** network_list;
 } uic_mqtt_dotdot_state_state_t;
@@ -35954,7 +35954,7 @@ void uic_mqtt_dotdot_clear_state_force_read_attributes_callbacks();
 sl_status_t uic_mqtt_dotdot_state_endpoint_id_list_publish(
   const char *base_topic,
   size_t value_count,
-  const int8_t* value,
+  const uint8_t* value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -36044,7 +36044,7 @@ sl_status_t uic_mqtt_dotdot_state_security_unretain(
  */
 sl_status_t uic_mqtt_dotdot_state_maximum_command_delay_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -36147,7 +36147,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_binding_bind_callback_t)(
 
     const char* destination_unid,
 
-    int8_t destination_ep
+    uint8_t destination_ep
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_binding_unbind_callback_t)(
@@ -36158,7 +36158,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_binding_unbind_callback_t)(
 
     const char* destination_unid,
 
-    int8_t destination_ep
+    uint8_t destination_ep
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_t)(
@@ -36214,7 +36214,7 @@ typedef struct {
 
   const char* destination_unid;
 
-  int8_t destination_ep;
+  uint8_t destination_ep;
 } uic_mqtt_dotdot_binding_command_bind_fields_t;
 
 /**
@@ -36225,7 +36225,7 @@ typedef struct {
 
   const char* destination_unid;
 
-  int8_t destination_ep;
+  uint8_t destination_ep;
 } uic_mqtt_dotdot_binding_command_unbind_fields_t;
 
 /**
@@ -36594,7 +36594,7 @@ void uic_mqtt_dotdot_binding_publish_empty_supported_commands(
 // Callback types used by the system_metrics cluster
 
 typedef struct {
-  int32_t reporting_interval_seconds;
+  uint32_t reporting_interval_seconds;
   size_t cpu_usage_percent_count;
   const double* cpu_usage_percent;
   size_t cpu_frequencym_hz_count;
@@ -36622,14 +36622,14 @@ typedef struct {
   const WirelessNetworkInterfaceData* wireless_network_interfaces_data;
   const char* hostname;
   const char* fqdn;
-  int64_t uptime_minutes;
+  uint64_t uptime_minutes;
   double current_temperature_celcius;
   double average_temperature_celcius;
   double min_temperature_celcius;
   double max_temperature_celcius;
   bool power_plugged;
   double battery_percentage;
-  int64_t system_interrupts;
+  uint64_t system_interrupts;
 } uic_mqtt_dotdot_system_metrics_state_t;
 
 typedef struct {
@@ -36741,7 +36741,7 @@ void uic_mqtt_dotdot_clear_system_metrics_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_system_metrics_reporting_interval_seconds_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -37329,7 +37329,7 @@ sl_status_t uic_mqtt_dotdot_system_metrics_fqdn_unretain(
  */
 sl_status_t uic_mqtt_dotdot_system_metrics_uptime_minutes_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -37539,7 +37539,7 @@ sl_status_t uic_mqtt_dotdot_system_metrics_battery_percentage_unretain(
  */
 sl_status_t uic_mqtt_dotdot_system_metrics_system_interrupts_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -37622,20 +37622,20 @@ typedef struct {
   bool application_connected;
   size_t application_mqtt_topics_count;
   const char** application_mqtt_topics;
-  int64_t uptime_minutes;
-  int64_t process_id;
+  uint64_t uptime_minutes;
+  uint64_t process_id;
   const char* hostname;
   const char* fqdn;
   bool mqtt_logging_enabled;
   uint8_t mqtt_logging_level;
-  int32_t mqtt_statistics_reporting_interval_seconds;
-  int64_t mqtt_messages_sent;
-  int64_t mqtt_messages_received;
-  int64_t mqtt_subscription_count;
+  uint32_t mqtt_statistics_reporting_interval_seconds;
+  uint64_t mqtt_messages_sent;
+  uint64_t mqtt_messages_received;
+  uint64_t mqtt_subscription_count;
   double mqtt_average_delivery_time_seconds;
   double mqtt_min_delivery_time_seconds;
   double mqtt_max_delivery_time_seconds;
-  int32_t application_statistics_reporting_interval_seconds;
+  uint32_t application_statistics_reporting_interval_seconds;
   double application_cpu_usage_percent;
   double application_cpu_average_usage_percent;
   double application_cpu_min_usage_percent;
@@ -37923,7 +37923,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_application_mqtt_topics_unret
  */
 sl_status_t uic_mqtt_dotdot_application_monitoring_uptime_minutes_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -37953,7 +37953,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_uptime_minutes_unretain(
  */
 sl_status_t uic_mqtt_dotdot_application_monitoring_process_id_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -38103,7 +38103,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_logging_level_unretain(
  */
 sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -38133,7 +38133,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_statistics_reporting_int
  */
 sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_sent_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -38163,7 +38163,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_sent_unretain(
  */
 sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_received_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -38193,7 +38193,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_received_unreta
  */
 sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_subscription_count_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -38313,7 +38313,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_max_delivery_time_second
  */
 sl_status_t uic_mqtt_dotdot_application_monitoring_application_statistics_reporting_interval_seconds_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -38713,7 +38713,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_discover_paramete
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t parameter_id
+    uint16_t parameter_id
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_t)(
@@ -38725,7 +38725,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_set_parameter_cal
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t parameter_id,
+    uint16_t parameter_id,
 
     int64_t value
 
@@ -38734,9 +38734,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_discover_paramete
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t first_parameter_id,
+    uint16_t first_parameter_id,
 
-    int16_t last_parameter_id
+    uint16_t last_parameter_id
 
 );
 
@@ -38769,14 +38769,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_force_read_attrib
  * @brief Command fields for ConfigurationParameters/DiscoverParameter
  */
 typedef struct {
-  int16_t parameter_id;
+  uint16_t parameter_id;
 } uic_mqtt_dotdot_configuration_parameters_command_discover_parameter_fields_t;
 
 /**
  * @brief Command fields for ConfigurationParameters/SetParameter
  */
 typedef struct {
-  int16_t parameter_id;
+  uint16_t parameter_id;
 
   int64_t value;
 } uic_mqtt_dotdot_configuration_parameters_command_set_parameter_fields_t;
@@ -38785,9 +38785,9 @@ typedef struct {
  * @brief Command fields for ConfigurationParameters/DiscoverParameterRange
  */
 typedef struct {
-  int16_t first_parameter_id;
+  uint16_t first_parameter_id;
 
-  int16_t last_parameter_id;
+  uint16_t last_parameter_id;
 } uic_mqtt_dotdot_configuration_parameters_command_discover_parameter_range_fields_t;
 
 
@@ -39082,7 +39082,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_add_user_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     UserTypeEnum user_type,
 
@@ -39092,7 +39092,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_add_user_callback_t)(
 
     const char* user_name,
 
-    int16_t expiring_timeout_minutes,
+    uint16_t expiring_timeout_minutes,
 
     UserNameEncodingType user_name_encoding
 
@@ -39101,7 +39101,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_modify_user_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     UserTypeEnum user_type,
 
@@ -39111,7 +39111,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_modify_user_callback_t)(
 
     const char* user_name,
 
-    int16_t expiring_timeout_minutes,
+    uint16_t expiring_timeout_minutes,
 
     UserNameEncodingType user_name_encoding
 
@@ -39120,18 +39120,18 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_delete_user_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid
+    uint16_t user_uniqueid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_user_credential_add_credential_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot,
+    uint16_t credential_slot,
 
     const char* credential_data
 
@@ -39140,11 +39140,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_modify_credential_callback
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot,
+    uint16_t credential_slot,
 
     const char* credential_data
 
@@ -39153,11 +39153,11 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_delete_credential_callback
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot
+    uint16_t credential_slot
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_user_credential_delete_all_users_callback_t)(
@@ -39181,14 +39181,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_delete_all_credentials_for
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid
+    uint16_t user_uniqueid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_user_credential_delete_all_credentials_for_user_by_type_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type
 
@@ -39197,26 +39197,26 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_credential_learn_start_add
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot,
+    uint16_t credential_slot,
 
-    int8_t credential_learn_timeout
+    uint8_t credential_learn_timeout
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_user_credential_credential_learn_start_modify_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot,
+    uint16_t credential_slot,
 
-    int8_t credential_learn_timeout
+    uint8_t credential_learn_timeout
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_user_credential_credential_learn_stop_callback_t)(
@@ -39230,20 +39230,20 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_credential_association_cal
     uic_mqtt_dotdot_callback_call_type_t call_type,
     CredType credential_type,
 
-    int16_t source_user_uniqueid,
+    uint16_t source_user_uniqueid,
 
-    int16_t source_credential_slot,
+    uint16_t source_credential_slot,
 
-    int16_t destination_user_uniqueid,
+    uint16_t destination_user_uniqueid,
 
-    int16_t destination_credential_slot
+    uint16_t destination_credential_slot
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_user_credential_get_user_checksum_callback_t)(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t call_type,
-    int16_t user_uniqueid
+    uint16_t user_uniqueid
 
 );
 typedef sl_status_t (*uic_mqtt_dotdot_user_credential_get_credential_checksum_callback_t)(
@@ -39272,7 +39272,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_deactivate_admin_pin_code_
 );
 
 typedef struct {
-  int16_t supported_user_unique_identifiers;
+  uint16_t supported_user_unique_identifiers;
   uint8_t supported_credential_rules;
   uint16_t supported_credential_types;
   uint16_t supported_user_types;
@@ -39313,7 +39313,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_force_read_attributes_call
  * @brief Command fields for UserCredential/AddUser
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 
   UserTypeEnum user_type;
 
@@ -39323,7 +39323,7 @@ typedef struct {
 
   const char* user_name;
 
-  int16_t expiring_timeout_minutes;
+  uint16_t expiring_timeout_minutes;
 
   UserNameEncodingType user_name_encoding;
 } uic_mqtt_dotdot_user_credential_command_add_user_fields_t;
@@ -39332,7 +39332,7 @@ typedef struct {
  * @brief Command fields for UserCredential/ModifyUser
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 
   UserTypeEnum user_type;
 
@@ -39342,7 +39342,7 @@ typedef struct {
 
   const char* user_name;
 
-  int16_t expiring_timeout_minutes;
+  uint16_t expiring_timeout_minutes;
 
   UserNameEncodingType user_name_encoding;
 } uic_mqtt_dotdot_user_credential_command_modify_user_fields_t;
@@ -39351,18 +39351,18 @@ typedef struct {
  * @brief Command fields for UserCredential/DeleteUser
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 } uic_mqtt_dotdot_user_credential_command_delete_user_fields_t;
 
 /**
  * @brief Command fields for UserCredential/AddCredential
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 
   CredType credential_type;
 
-  int16_t credential_slot;
+  uint16_t credential_slot;
 
   const char* credential_data;
 } uic_mqtt_dotdot_user_credential_command_add_credential_fields_t;
@@ -39371,11 +39371,11 @@ typedef struct {
  * @brief Command fields for UserCredential/ModifyCredential
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 
   CredType credential_type;
 
-  int16_t credential_slot;
+  uint16_t credential_slot;
 
   const char* credential_data;
 } uic_mqtt_dotdot_user_credential_command_modify_credential_fields_t;
@@ -39384,11 +39384,11 @@ typedef struct {
  * @brief Command fields for UserCredential/DeleteCredential
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 
   CredType credential_type;
 
-  int16_t credential_slot;
+  uint16_t credential_slot;
 } uic_mqtt_dotdot_user_credential_command_delete_credential_fields_t;
 
 /**
@@ -39402,14 +39402,14 @@ typedef struct {
  * @brief Command fields for UserCredential/DeleteAllCredentialsForUser
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 } uic_mqtt_dotdot_user_credential_command_delete_all_credentials_for_user_fields_t;
 
 /**
  * @brief Command fields for UserCredential/DeleteAllCredentialsForUserByType
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 
   CredType credential_type;
 } uic_mqtt_dotdot_user_credential_command_delete_all_credentials_for_user_by_type_fields_t;
@@ -39418,26 +39418,26 @@ typedef struct {
  * @brief Command fields for UserCredential/CredentialLearnStartAdd
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 
   CredType credential_type;
 
-  int16_t credential_slot;
+  uint16_t credential_slot;
 
-  int8_t credential_learn_timeout;
+  uint8_t credential_learn_timeout;
 } uic_mqtt_dotdot_user_credential_command_credential_learn_start_add_fields_t;
 
 /**
  * @brief Command fields for UserCredential/CredentialLearnStartModify
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 
   CredType credential_type;
 
-  int16_t credential_slot;
+  uint16_t credential_slot;
 
-  int8_t credential_learn_timeout;
+  uint8_t credential_learn_timeout;
 } uic_mqtt_dotdot_user_credential_command_credential_learn_start_modify_fields_t;
 
 /**
@@ -39446,20 +39446,20 @@ typedef struct {
 typedef struct {
   CredType credential_type;
 
-  int16_t source_user_uniqueid;
+  uint16_t source_user_uniqueid;
 
-  int16_t source_credential_slot;
+  uint16_t source_credential_slot;
 
-  int16_t destination_user_uniqueid;
+  uint16_t destination_user_uniqueid;
 
-  int16_t destination_credential_slot;
+  uint16_t destination_credential_slot;
 } uic_mqtt_dotdot_user_credential_command_credential_association_fields_t;
 
 /**
  * @brief Command fields for UserCredential/GetUserChecksum
  */
 typedef struct {
-  int16_t user_uniqueid;
+  uint16_t user_uniqueid;
 } uic_mqtt_dotdot_user_credential_command_get_user_checksum_fields_t;
 
 /**
@@ -40339,7 +40339,7 @@ void uic_mqtt_dotdot_clear_user_credential_force_read_attributes_callbacks();
  */
 sl_status_t uic_mqtt_dotdot_user_credential_supported_user_unique_identifiers_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -41504,9 +41504,9 @@ typedef sl_status_t (*uic_mqtt_dotdot_unify_humidity_control_setpoint_set_callba
     uic_mqtt_dotdot_callback_call_type_t call_type,
     SetpointType type,
 
-    int8_t precision,
+    uint8_t precision,
 
-    int8_t scale,
+    uint8_t scale,
 
     int32_t value
 
@@ -41521,17 +41521,17 @@ typedef struct {
   int32_t humidifier_setpoint_max;
   int32_t humidifier_setpoint;
   uint8_t humidifier_setpoint_scale;
-  int8_t humidifier_setpoint_precision;
+  uint8_t humidifier_setpoint_precision;
   int32_t dehumidifier_setpoint_min;
   int32_t dehumidifier_setpoint_max;
   int32_t dehumidifier_setpoint;
   uint8_t dehumidifier_setpoint_scale;
-  int8_t dehumidifier_setpoint_precision;
+  uint8_t dehumidifier_setpoint_precision;
   int32_t auto_setpoint_min;
   int32_t auto_setpoint_max;
   int32_t auto_setpoint;
   uint8_t auto_setpoint_scale;
-  int8_t auto_setpoint_precision;
+  uint8_t auto_setpoint_precision;
 } uic_mqtt_dotdot_unify_humidity_control_state_t;
 
 typedef struct {
@@ -41585,9 +41585,9 @@ typedef struct {
 typedef struct {
   SetpointType type;
 
-  int8_t precision;
+  uint8_t precision;
 
-  int8_t scale;
+  uint8_t scale;
 
   int32_t value;
 } uic_mqtt_dotdot_unify_humidity_control_command_setpoint_set_fields_t;
@@ -41975,7 +41975,7 @@ sl_status_t uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_scale_unr
  */
 sl_status_t uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_precision_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -42125,7 +42125,7 @@ sl_status_t uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_scale_u
  */
 sl_status_t uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_precision_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
@@ -42275,7 +42275,7 @@ sl_status_t uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_scale_unretain(
  */
 sl_status_t uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_precision_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 );
 
diff --git a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_attributes.h b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_attributes.h
index 9dabf5aedf..9f094654e3 100644
--- a/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_attributes.h
+++ b/components/uic_dotdot_mqtt/zap-generated/include/dotdot_mqtt_attributes.h
@@ -48,28 +48,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_zcl_version_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t zcl_version
+  uint8_t zcl_version
 );
 typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_application_version_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t application_version
+  uint8_t application_version
 );
 typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_stack_version_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t stack_version
+  uint8_t stack_version
 );
 typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_hw_version_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t hw_version
+  uint8_t hw_version
 );
 typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_manufacturer_name_callback_t)(
   dotdot_unid_t unid,
@@ -118,7 +118,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_product_code_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t product_code
+  const char* product_code
 );
 typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_producturl_callback_t)(
   dotdot_unid_t unid,
@@ -196,14 +196,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_voltag
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t mains_voltage
+  uint16_t mains_voltage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_frequency_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t mains_frequency
+  uint8_t mains_frequency
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_alarm_mask_callback_t)(
   dotdot_unid_t unid,
@@ -217,35 +217,35 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_voltag
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t mains_voltage_min_threshold
+  uint16_t mains_voltage_min_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_max_threshold_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t mains_voltage_max_threshold
+  uint16_t mains_voltage_max_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_dwell_trip_point_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t mains_voltage_dwell_trip_point
+  uint16_t mains_voltage_dwell_trip_point
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_voltage
+  uint8_t battery_voltage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_remaining_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_percentage_remaining
+  uint8_t battery_percentage_remaining
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_manufacturer_callback_t)(
   dotdot_unid_t unid,
@@ -266,21 +266,21 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_batterya_hr_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t batterya_hr_rating
+  uint16_t batterya_hr_rating
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_quantity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_quantity
+  uint8_t battery_quantity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_rated_voltage_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_rated_voltage
+  uint8_t battery_rated_voltage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_alarm_mask_callback_t)(
   dotdot_unid_t unid,
@@ -294,56 +294,56 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_volt
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_voltage_min_threshold
+  uint8_t battery_voltage_min_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold1_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_voltage_threshold1
+  uint8_t battery_voltage_threshold1
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold2_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_voltage_threshold2
+  uint8_t battery_voltage_threshold2
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold3_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_voltage_threshold3
+  uint8_t battery_voltage_threshold3
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_min_threshold_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_percentage_min_threshold
+  uint8_t battery_percentage_min_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold1_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_percentage_threshold1
+  uint8_t battery_percentage_threshold1
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold2_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_percentage_threshold2
+  uint8_t battery_percentage_threshold2
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold3_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery_percentage_threshold3
+  uint8_t battery_percentage_threshold3
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_alarm_state_callback_t)(
   dotdot_unid_t unid,
@@ -357,14 +357,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_vol
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_voltage
+  uint8_t battery2_voltage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_remaining_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_percentage_remaining
+  uint8_t battery2_percentage_remaining
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_manufacturer_callback_t)(
   dotdot_unid_t unid,
@@ -385,21 +385,21 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2a_hr
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t battery2a_hr_rating
+  uint16_t battery2a_hr_rating
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_quantity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_quantity
+  uint8_t battery2_quantity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_rated_voltage_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_rated_voltage
+  uint8_t battery2_rated_voltage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_alarm_mask_callback_t)(
   dotdot_unid_t unid,
@@ -413,56 +413,56 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_vol
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_voltage_min_threshold
+  uint8_t battery2_voltage_min_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold1_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_voltage_threshold1
+  uint8_t battery2_voltage_threshold1
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold2_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_voltage_threshold2
+  uint8_t battery2_voltage_threshold2
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold3_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_voltage_threshold3
+  uint8_t battery2_voltage_threshold3
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_min_threshold_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_percentage_min_threshold
+  uint8_t battery2_percentage_min_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold1_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_percentage_threshold1
+  uint8_t battery2_percentage_threshold1
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold2_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_percentage_threshold2
+  uint8_t battery2_percentage_threshold2
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold3_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery2_percentage_threshold3
+  uint8_t battery2_percentage_threshold3
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_alarm_state_callback_t)(
   dotdot_unid_t unid,
@@ -476,14 +476,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_vol
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_voltage
+  uint8_t battery3_voltage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_remaining_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_percentage_remaining
+  uint8_t battery3_percentage_remaining
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_manufacturer_callback_t)(
   dotdot_unid_t unid,
@@ -504,21 +504,21 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3a_hr
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t battery3a_hr_rating
+  uint16_t battery3a_hr_rating
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_quantity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_quantity
+  uint8_t battery3_quantity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_rated_voltage_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_rated_voltage
+  uint8_t battery3_rated_voltage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_alarm_mask_callback_t)(
   dotdot_unid_t unid,
@@ -532,56 +532,56 @@ typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_vol
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_voltage_min_threshold
+  uint8_t battery3_voltage_min_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold1_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_voltage_threshold1
+  uint8_t battery3_voltage_threshold1
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold2_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_voltage_threshold2
+  uint8_t battery3_voltage_threshold2
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold3_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_voltage_threshold3
+  uint8_t battery3_voltage_threshold3
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_min_threshold_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_percentage_min_threshold
+  uint8_t battery3_percentage_min_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold1_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_percentage_threshold1
+  uint8_t battery3_percentage_threshold1
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold2_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_percentage_threshold2
+  uint8_t battery3_percentage_threshold2
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold3_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t battery3_percentage_threshold3
+  uint8_t battery3_percentage_threshold3
 );
 typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_alarm_state_callback_t)(
   dotdot_unid_t unid,
@@ -617,7 +617,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t over_temp_total_dwell
+  uint16_t over_temp_total_dwell
 );
 typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_device_temp_alarm_mask_callback_t)(
   dotdot_unid_t unid,
@@ -645,14 +645,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t low_temp_dwell_trip_point
+  uint32_t low_temp_dwell_trip_point
 );
 typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_high_temp_dwell_trip_point_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t high_temp_dwell_trip_point
+  uint32_t high_temp_dwell_trip_point
 );
 // Callback types used by the identify cluster
 typedef sl_status_t (*uic_mqtt_dotdot_identify_attribute_identify_time_callback_t)(
@@ -660,7 +660,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_identify_attribute_identify_time_callback_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t identify_time
+  uint16_t identify_time
 );
 // Callback types used by the groups cluster
 typedef sl_status_t (*uic_mqtt_dotdot_groups_attribute_name_support_callback_t)(
@@ -676,21 +676,21 @@ typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_scene_count_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t scene_count
+  uint8_t scene_count
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_current_scene_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t current_scene
+  uint8_t current_scene
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_current_group_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t * current_group
+  uint16_t current_group
 );
 typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_scene_valid_callback_t)(
   dotdot_unid_t unid,
@@ -741,14 +741,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_on_off_attribute_on_time_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t on_time
+  uint16_t on_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_on_off_attribute_off_wait_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t off_wait_time
+  uint16_t off_wait_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_on_off_attribute_start_up_on_off_callback_t)(
   dotdot_unid_t unid,
@@ -763,49 +763,49 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_current_level_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t current_level
+  uint8_t current_level
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_remaining_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t remaining_time
+  uint16_t remaining_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_min_level_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t min_level
+  uint8_t min_level
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_max_level_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t max_level
+  uint8_t max_level
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_current_frequency_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t current_frequency
+  uint16_t current_frequency
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_min_frequency_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_frequency
+  uint16_t min_frequency
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_max_frequency_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_frequency
+  uint16_t max_frequency
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_options_callback_t)(
   dotdot_unid_t unid,
@@ -819,42 +819,42 @@ typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_on_off_transition_time_cal
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t on_off_transition_time
+  uint16_t on_off_transition_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_on_level_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t on_level
+  uint8_t on_level
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_on_transition_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t on_transition_time
+  uint16_t on_transition_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_off_transition_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t off_transition_time
+  uint16_t off_transition_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_default_move_rate_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t default_move_rate
+  uint16_t default_move_rate
 );
 typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_start_up_current_level_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t start_up_current_level
+  uint8_t start_up_current_level
 );
 // Callback types used by the alarms cluster
 typedef sl_status_t (*uic_mqtt_dotdot_alarms_attribute_alarm_count_callback_t)(
@@ -862,7 +862,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_alarms_attribute_alarm_count_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t alarm_count
+  uint16_t alarm_count
 );
 // Callback types used by the time cluster
 typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_time_callback_t)(
@@ -870,7 +870,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_time_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t time
+  uint32_t time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_time_status_callback_t)(
   dotdot_unid_t unid,
@@ -891,14 +891,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_dst_start_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t dst_start
+  uint32_t dst_start
 );
 typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_dst_end_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t dst_end
+  uint32_t dst_end
 );
 typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_dst_shift_callback_t)(
   dotdot_unid_t unid,
@@ -912,28 +912,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_standard_time_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t standard_time
+  uint32_t standard_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_local_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t local_time
+  uint32_t local_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_last_set_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t last_set_time
+  uint32_t last_set_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_valid_until_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t valid_until_time
+  uint32_t valid_until_time
 );
 // Callback types used by the poll_control cluster
 typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_check_in_interval_callback_t)(
@@ -941,49 +941,49 @@ typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_check_in_interval_c
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t check_in_interval
+  uint32_t check_in_interval
 );
 typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_long_poll_interval_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t long_poll_interval
+  uint32_t long_poll_interval
 );
 typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_short_poll_interval_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t short_poll_interval
+  uint16_t short_poll_interval
 );
 typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_fast_poll_timeout_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t fast_poll_timeout
+  uint16_t fast_poll_timeout
 );
 typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_check_in_interval_min_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t check_in_interval_min
+  uint32_t check_in_interval_min
 );
 typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_long_poll_interval_min_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t long_poll_interval_min
+  uint32_t long_poll_interval_min
 );
 typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_fast_poll_timeout_max_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t fast_poll_timeout_max
+  uint16_t fast_poll_timeout_max
 );
 // Callback types used by the shade_configuration cluster
 typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_physical_closed_limit_callback_t)(
@@ -991,14 +991,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_physical_clo
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t physical_closed_limit
+  uint16_t physical_closed_limit
 );
 typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_motor_step_size_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t motor_step_size
+  uint8_t motor_step_size
 );
 typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_status_callback_t)(
   dotdot_unid_t unid,
@@ -1012,7 +1012,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_closed_limit
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t closed_limit
+  uint16_t closed_limit
 );
 typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_mode_callback_t)(
   dotdot_unid_t unid,
@@ -1055,98 +1055,98 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_door_open_events_callb
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t door_open_events
+  uint32_t door_open_events
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_door_closed_events_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t door_closed_events
+  uint32_t door_closed_events
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_open_period_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t open_period
+  uint16_t open_period
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_log_records_supported_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t number_of_log_records_supported
+  uint16_t number_of_log_records_supported
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_total_users_supported_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t number_of_total_users_supported
+  uint16_t number_of_total_users_supported
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_pin_users_supported_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t number_of_pin_users_supported
+  uint16_t number_of_pin_users_supported
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_rfid_users_supported_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t number_of_rfid_users_supported
+  uint16_t number_of_rfid_users_supported
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_week_day_schedules_supported_per_user_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t number_of_week_day_schedules_supported_per_user
+  uint8_t number_of_week_day_schedules_supported_per_user
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_year_day_schedules_supported_per_user_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t number_of_year_day_schedules_supported_per_user
+  uint8_t number_of_year_day_schedules_supported_per_user
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_holiday_schedules_supported_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t number_of_holiday_schedules_supported
+  uint8_t number_of_holiday_schedules_supported
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_max_pin_code_length_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t max_pin_code_length
+  uint8_t max_pin_code_length
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_min_pin_code_length_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t min_pin_code_length
+  uint8_t min_pin_code_length
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_max_rfid_code_length_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t max_rfid_code_length
+  uint8_t max_rfid_code_length
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_min_rfid_code_length_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t min_rfid_code_length
+  uint8_t min_rfid_code_length
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_credential_rules_support_callback_t)(
   dotdot_unid_t unid,
@@ -1160,7 +1160,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_credentials_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t number_of_credentials_supported_per_user
+  uint8_t number_of_credentials_supported_per_user
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_enable_logging_callback_t)(
   dotdot_unid_t unid,
@@ -1181,21 +1181,21 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_led_settings_callback_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t led_settings
+  uint8_t led_settings
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_auto_relock_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t auto_relock_time
+  uint32_t auto_relock_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_sound_volume_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t sound_volume
+  uint8_t sound_volume
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_operating_mode_callback_t)(
   dotdot_unid_t unid,
@@ -1258,14 +1258,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_wrong_code_entry_limit
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t wrong_code_entry_limit
+  uint8_t wrong_code_entry_limit
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_user_code_temporary_disable_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t user_code_temporary_disable_time
+  uint8_t user_code_temporary_disable_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_send_pin_over_the_air_callback_t)(
   dotdot_unid_t unid,
@@ -1293,7 +1293,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_expiring_user_timeout_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t expiring_user_timeout
+  uint16_t expiring_user_timeout
 );
 typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_alarm_mask_callback_t)(
   dotdot_unid_t unid,
@@ -1371,42 +1371,42 @@ typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_physical_closed_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t physical_closed_limit_lift
+  uint16_t physical_closed_limit_lift
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_physical_closed_limit_tilt_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t physical_closed_limit_tilt
+  uint16_t physical_closed_limit_tilt
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_current_position_lift_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t current_position_lift
+  uint16_t current_position_lift
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_current_position_tilt_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t current_position_tilt
+  uint16_t current_position_tilt
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_number_of_actuations_lift_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t number_of_actuations_lift
+  uint16_t number_of_actuations_lift
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_number_of_actuations_tilt_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t number_of_actuations_tilt
+  uint16_t number_of_actuations_tilt
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_config_or_status_callback_t)(
   dotdot_unid_t unid,
@@ -1420,63 +1420,63 @@ typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_current_position
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t current_position_lift_percentage
+  uint8_t current_position_lift_percentage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_current_position_tilt_percentage_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t current_position_tilt_percentage
+  uint8_t current_position_tilt_percentage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_installed_open_limit_lift_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t installed_open_limit_lift
+  uint16_t installed_open_limit_lift
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_installed_closed_limit_lift_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t installed_closed_limit_lift
+  uint16_t installed_closed_limit_lift
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_installed_open_limit_tilt_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t installed_open_limit_tilt
+  uint16_t installed_open_limit_tilt
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_installed_closed_limit_tilt_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t installed_closed_limit_tilt
+  uint16_t installed_closed_limit_tilt
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_velocity_lift_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t velocity_lift
+  uint16_t velocity_lift
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_acceleration_time_lift_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t acceleration_time_lift
+  uint16_t acceleration_time_lift
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_deceleration_time_lift_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t deceleration_time_lift
+  uint16_t deceleration_time_lift
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_mode_callback_t)(
   dotdot_unid_t unid,
@@ -1490,14 +1490,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_intermediate_set
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t intermediate_setpoints_lift
+  const char* intermediate_setpoints_lift
 );
 typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_intermediate_setpoints_tilt_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t intermediate_setpoints_tilt
+  const char* intermediate_setpoints_tilt
 );
 // Callback types used by the barrier_control cluster
 typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_moving_state_callback_t)(
@@ -1526,49 +1526,49 @@ typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_open_events_call
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t open_events
+  uint16_t open_events
 );
 typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_close_events_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t close_events
+  uint16_t close_events
 );
 typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_command_open_events_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t command_open_events
+  uint16_t command_open_events
 );
 typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_command_close_events_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t command_close_events
+  uint16_t command_close_events
 );
 typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_open_period_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t open_period
+  uint16_t open_period
 );
 typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_close_period_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t close_period
+  uint16_t close_period
 );
 typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_barrier_position_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t barrier_position
+  uint8_t barrier_position
 );
 // Callback types used by the pump_configuration_and_control cluster
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_pressure_callback_t)(
@@ -1583,14 +1583,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_m
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_speed
+  uint16_t max_speed
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_flow_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_flow
+  uint16_t max_flow
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_pressure_callback_t)(
   dotdot_unid_t unid,
@@ -1625,28 +1625,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_m
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_const_speed
+  uint16_t min_const_speed
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_speed_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_const_speed
+  uint16_t max_const_speed
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_flow_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_const_flow
+  uint16_t min_const_flow
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_flow_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_const_flow
+  uint16_t max_const_flow
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_temp_callback_t)(
   dotdot_unid_t unid,
@@ -1695,28 +1695,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_s
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t speed
+  uint16_t speed
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_lifetime_running_hours_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t lifetime_running_hours
+  uint32_t lifetime_running_hours
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_power_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t power
+  uint32_t power
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_lifetime_energy_consumed_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t lifetime_energy_consumed
+  uint32_t lifetime_energy_consumed
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_operation_mode_callback_t)(
   dotdot_unid_t unid,
@@ -1794,14 +1794,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_pi_cooling_demand_cal
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t pi_cooling_demand
+  uint8_t pi_cooling_demand
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_pi_heating_demand_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t pi_heating_demand
+  uint8_t pi_heating_demand
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_hvac_system_type_configuration_callback_t)(
   dotdot_unid_t unid,
@@ -1927,14 +1927,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_number_of_weekly_tran
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t number_of_weekly_transitions
+  uint8_t number_of_weekly_transitions
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_number_of_daily_transitions_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t number_of_daily_transitions
+  uint8_t number_of_daily_transitions
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_temperature_setpoint_hold_callback_t)(
   dotdot_unid_t unid,
@@ -1948,7 +1948,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_temperature_setpoint_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t temperature_setpoint_hold_duration
+  uint16_t temperature_setpoint_hold_duration
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_thermostat_programming_operation_mode_callback_t)(
   dotdot_unid_t unid,
@@ -1983,56 +1983,56 @@ typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_setpoint_change_sourc
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t setpoint_change_source_timestamp
+  uint32_t setpoint_change_source_timestamp
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_occupied_setback_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t occupied_setback
+  uint8_t occupied_setback
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_occupied_setback_min_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t occupied_setback_min
+  uint8_t occupied_setback_min
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_occupied_setback_max_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t occupied_setback_max
+  uint8_t occupied_setback_max
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t unoccupied_setback
+  uint8_t unoccupied_setback
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_min_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t unoccupied_setback_min
+  uint8_t unoccupied_setback_min
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_max_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t unoccupied_setback_max
+  uint8_t unoccupied_setback_max
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_emergency_heat_delta_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t emergency_heat_delta
+  uint8_t emergency_heat_delta
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_type_callback_t)(
   dotdot_unid_t unid,
@@ -2046,7 +2046,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_capacity_callback_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_capacity
+  uint16_t ac_capacity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_refrigerant_type_callback_t)(
   dotdot_unid_t unid,
@@ -2111,21 +2111,21 @@ typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_relativ
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t relative_humidity
+  uint8_t relative_humidity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_cooling_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t dehumidification_cooling
+  uint8_t dehumidification_cooling
 );
 typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_rh_dehumidification_setpoint_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t rh_dehumidification_setpoint
+  uint8_t rh_dehumidification_setpoint
 );
 typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_mode_callback_t)(
   dotdot_unid_t unid,
@@ -2146,14 +2146,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_dehumid
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t dehumidification_hysteresis
+  uint8_t dehumidification_hysteresis
 );
 typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_max_cool_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t dehumidification_max_cool
+  uint8_t dehumidification_max_cool
 );
 typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_display_callback_t)(
   dotdot_unid_t unid,
@@ -2190,35 +2190,35 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_current_hue_callba
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t current_hue
+  uint8_t current_hue
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_current_saturation_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t current_saturation
+  uint8_t current_saturation
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_remaining_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t remaining_time
+  uint16_t remaining_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_currentx_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t currentx
+  uint16_t currentx
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_currenty_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t currenty
+  uint16_t currenty
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_drift_compensation_callback_t)(
   dotdot_unid_t unid,
@@ -2239,7 +2239,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_temperature_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_temperature_mireds
+  uint16_t color_temperature_mireds
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_mode_callback_t)(
   dotdot_unid_t unid,
@@ -2260,217 +2260,217 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_number_of_primarie
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t number_of_primaries
+  uint8_t number_of_primaries
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary1x_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary1x
+  uint16_t primary1x
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary1y_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary1y
+  uint16_t primary1y
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary1_intensity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t primary1_intensity
+  uint8_t primary1_intensity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary2x_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary2x
+  uint16_t primary2x
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary2y_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary2y
+  uint16_t primary2y
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary2_intensity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t primary2_intensity
+  uint8_t primary2_intensity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary3x_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary3x
+  uint16_t primary3x
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary3y_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary3y
+  uint16_t primary3y
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary3_intensity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t primary3_intensity
+  uint8_t primary3_intensity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary4x_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary4x
+  uint16_t primary4x
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary4y_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary4y
+  uint16_t primary4y
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary4_intensity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t primary4_intensity
+  uint8_t primary4_intensity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary5x_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary5x
+  uint16_t primary5x
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary5y_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary5y
+  uint16_t primary5y
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary5_intensity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t primary5_intensity
+  uint8_t primary5_intensity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary6x_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary6x
+  uint16_t primary6x
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary6y_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t primary6y
+  uint16_t primary6y
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary6_intensity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t primary6_intensity
+  uint8_t primary6_intensity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_white_pointx_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t white_pointx
+  uint16_t white_pointx
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_white_pointy_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t white_pointy
+  uint16_t white_pointy
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointrx_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_pointrx
+  uint16_t color_pointrx
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointry_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_pointry
+  uint16_t color_pointry
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointr_intensity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t color_pointr_intensity
+  uint8_t color_pointr_intensity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointgx_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_pointgx
+  uint16_t color_pointgx
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointgy_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_pointgy
+  uint16_t color_pointgy
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointg_intensity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t color_pointg_intensity
+  uint8_t color_pointg_intensity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointbx_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_pointbx
+  uint16_t color_pointbx
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointby_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_pointby
+  uint16_t color_pointby
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointb_intensity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t color_pointb_intensity
+  uint8_t color_pointb_intensity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_enhanced_current_hue_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t enhanced_current_hue
+  uint16_t enhanced_current_hue
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_enhanced_color_mode_callback_t)(
   dotdot_unid_t unid,
@@ -2484,35 +2484,35 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_active_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t color_loop_active
+  uint8_t color_loop_active
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_direction_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t color_loop_direction
+  uint8_t color_loop_direction
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_loop_time
+  uint16_t color_loop_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_start_enhanced_hue_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_loop_start_enhanced_hue
+  uint16_t color_loop_start_enhanced_hue
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_stored_enhanced_hue_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_loop_stored_enhanced_hue
+  uint16_t color_loop_stored_enhanced_hue
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_capabilities_callback_t)(
   dotdot_unid_t unid,
@@ -2526,28 +2526,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_temp_physica
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_temp_physical_min_mireds
+  uint16_t color_temp_physical_min_mireds
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_temp_physical_max_mireds_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t color_temp_physical_max_mireds
+  uint16_t color_temp_physical_max_mireds
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_couple_color_temp_to_level_min_mireds_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t couple_color_temp_to_level_min_mireds
+  uint16_t couple_color_temp_to_level_min_mireds
 );
 typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_start_up_color_temperature_mireds_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t start_up_color_temperature_mireds
+  uint16_t start_up_color_temperature_mireds
 );
 // Callback types used by the ballast_configuration cluster
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_physical_min_level_callback_t)(
@@ -2555,14 +2555,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_physical_m
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t physical_min_level
+  uint8_t physical_min_level
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_physical_max_level_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t physical_max_level
+  uint8_t physical_max_level
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_ballast_status_callback_t)(
   dotdot_unid_t unid,
@@ -2576,49 +2576,49 @@ typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_min_level_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t min_level
+  uint8_t min_level
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_max_level_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t max_level
+  uint8_t max_level
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_power_on_level_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t power_on_level
+  uint8_t power_on_level
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_power_on_fade_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t power_on_fade_time
+  uint16_t power_on_fade_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_intrinsic_ballast_factor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t intrinsic_ballast_factor
+  uint8_t intrinsic_ballast_factor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_ballast_factor_adjustment_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t ballast_factor_adjustment
+  uint8_t ballast_factor_adjustment
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_quantity_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t lamp_quantity
+  uint8_t lamp_quantity
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_type_callback_t)(
   dotdot_unid_t unid,
@@ -2639,14 +2639,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_rated
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t lamp_rated_hours
+  uint32_t lamp_rated_hours
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_burn_hours_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t lamp_burn_hours
+  uint32_t lamp_burn_hours
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_alarm_mode_callback_t)(
   dotdot_unid_t unid,
@@ -2660,7 +2660,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_burn_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t lamp_burn_hours_trip_point
+  uint32_t lamp_burn_hours_trip_point
 );
 // Callback types used by the illuminance_measurement cluster
 typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_measured_value_callback_t)(
@@ -2668,28 +2668,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_measured
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t measured_value
+  uint16_t measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_min_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_measured_value
+  uint16_t min_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_max_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_measured_value
+  uint16_t max_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_tolerance_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t tolerance
+  uint16_t tolerance
 );
 typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_light_sensor_type_callback_t)(
   dotdot_unid_t unid,
@@ -2718,7 +2718,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_illuminance_level_sensing_attribute_illumi
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t illuminance_target_level
+  uint16_t illuminance_target_level
 );
 // Callback types used by the temperature_measurement cluster
 typedef sl_status_t (*uic_mqtt_dotdot_temperature_measurement_attribute_measured_value_callback_t)(
@@ -2747,7 +2747,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_temperature_measurement_attribute_toleranc
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t tolerance
+  uint16_t tolerance
 );
 // Callback types used by the pressure_measurement cluster
 typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_measured_value_callback_t)(
@@ -2776,7 +2776,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_tolerance_c
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t tolerance
+  uint16_t tolerance
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_scaled_value_callback_t)(
   dotdot_unid_t unid,
@@ -2804,7 +2804,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_scaled_tole
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t scaled_tolerance
+  uint16_t scaled_tolerance
 );
 typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_scale_callback_t)(
   dotdot_unid_t unid,
@@ -2819,28 +2819,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_attribute_measured_value_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t measured_value
+  uint16_t measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_attribute_min_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_measured_value
+  uint16_t min_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_attribute_max_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_measured_value
+  uint16_t max_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_attribute_tolerance_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t tolerance
+  uint16_t tolerance
 );
 // Callback types used by the relativity_humidity cluster
 typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_attribute_measured_value_callback_t)(
@@ -2848,28 +2848,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_attribute_measured_val
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t measured_value
+  uint16_t measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_attribute_min_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_measured_value
+  uint16_t min_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_attribute_max_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_measured_value
+  uint16_t max_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_attribute_tolerance_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t tolerance
+  uint16_t tolerance
 );
 // Callback types used by the occupancy_sensing cluster
 typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_callback_t)(
@@ -2898,63 +2898,63 @@ typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_pir_occupied_t
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t pir_occupied_to_unoccupied_delay
+  uint16_t pir_occupied_to_unoccupied_delay
 );
 typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_pir_unoccupied_to_occupied_delay_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t pir_unoccupied_to_occupied_delay
+  uint16_t pir_unoccupied_to_occupied_delay
 );
 typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_pir_unoccupied_to_occupied_threshold_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t pir_unoccupied_to_occupied_threshold
+  uint8_t pir_unoccupied_to_occupied_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_occupied_to_unoccupied_delay_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ultrasonic_occupied_to_unoccupied_delay
+  uint16_t ultrasonic_occupied_to_unoccupied_delay
 );
 typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_unoccupied_to_occupied_delay_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ultrasonic_unoccupied_to_occupied_delay
+  uint16_t ultrasonic_unoccupied_to_occupied_delay
 );
 typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_unoccupied_to_occupied_threshold_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t ultrasonic_unoccupied_to_occupied_threshold
+  uint8_t ultrasonic_unoccupied_to_occupied_threshold
 );
 typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_occupied_to_unoccupied_delay_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t physical_contact_occupied_to_unoccupied_delay
+  uint16_t physical_contact_occupied_to_unoccupied_delay
 );
 typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_unoccupied_to_occupied_delay_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t physical_contact_unoccupied_to_occupied_delay
+  uint16_t physical_contact_unoccupied_to_occupied_delay
 );
 typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_unoccupied_to_occupied_threshold_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t physical_contact_unoccupied_to_occupied_threshold
+  uint8_t physical_contact_unoccupied_to_occupied_threshold
 );
 // Callback types used by the soil_moisture cluster
 typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_attribute_measured_value_callback_t)(
@@ -2962,28 +2962,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_attribute_measured_value_cal
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t measured_value
+  uint16_t measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_attribute_min_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_measured_value
+  uint16_t min_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_attribute_max_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_measured_value
+  uint16_t max_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_attribute_tolerance_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t tolerance
+  uint16_t tolerance
 );
 // Callback types used by the ph_measurement cluster
 typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_attribute_measured_value_callback_t)(
@@ -2991,28 +2991,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_attribute_measured_value_ca
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t measured_value
+  uint16_t measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_attribute_min_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_measured_value
+  uint16_t min_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_attribute_max_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_measured_value
+  uint16_t max_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_attribute_tolerance_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t tolerance
+  uint16_t tolerance
 );
 // Callback types used by the electrical_conductivity_measurement cluster
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_measured_value_callback_t)(
@@ -3020,28 +3020,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_attrib
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t measured_value
+  uint16_t measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_min_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_measured_value
+  uint16_t min_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_max_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_measured_value
+  uint16_t max_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_tolerance_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t tolerance
+  uint16_t tolerance
 );
 // Callback types used by the wind_speed_measurement cluster
 typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_attribute_measured_value_callback_t)(
@@ -3049,28 +3049,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_attribute_measured_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t measured_value
+  uint16_t measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_attribute_min_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t min_measured_value
+  uint16_t min_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_attribute_max_measured_value_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_measured_value
+  uint16_t max_measured_value
 );
 typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_attribute_tolerance_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t tolerance
+  uint16_t tolerance
 );
 // Callback types used by the carbon_monoxide cluster
 typedef sl_status_t (*uic_mqtt_dotdot_carbon_monoxide_attribute_measured_value_callback_t)(
@@ -3193,21 +3193,21 @@ typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_zoneid_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t zoneid
+  uint8_t zoneid
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_number_of_zone_sensitivity_levels_supported_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t number_of_zone_sensitivity_levels_supported
+  uint8_t number_of_zone_sensitivity_levels_supported
 );
 typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_current_zone_sensitivity_level_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t current_zone_sensitivity_level
+  uint8_t current_zone_sensitivity_level
 );
 // Callback types used by the iaswd cluster
 typedef sl_status_t (*uic_mqtt_dotdot_iaswd_attribute_max_duration_callback_t)(
@@ -3215,7 +3215,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_iaswd_attribute_max_duration_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t max_duration
+  uint16_t max_duration
 );
 // Callback types used by the metering cluster
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_summation_delivered_callback_t)(
@@ -3223,21 +3223,21 @@ typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_summation_deliv
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t current_summation_delivered
+  uint64_t current_summation_delivered
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_summation_received_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t current_summation_received
+  uint64_t current_summation_received
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_max_demand_delivered_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t current_max_demand_delivered
+  uint64_t current_max_demand_delivered
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_max_demand_received_callback_t)(
   dotdot_unid_t unid,
@@ -3258,28 +3258,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_reading_snap_shot_time_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t reading_snap_shot_time
+  uint32_t reading_snap_shot_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_max_demand_delivered_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t current_max_demand_delivered_time
+  uint32_t current_max_demand_delivered_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_max_demand_received_time_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  uint8_t current_max_demand_received_time
+  uint32_t current_max_demand_received_time
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_default_update_period_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t default_update_period
+  uint8_t default_update_period
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_supply_status_callback_t)(
   dotdot_unid_t unid,
@@ -3293,14 +3293,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_inlet_energy_ca
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t current_inlet_energy_carrier_summation
+  uint64_t current_inlet_energy_carrier_summation
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_outlet_energy_carrier_summation_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t current_outlet_energy_carrier_summation
+  uint64_t current_outlet_energy_carrier_summation
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_inlet_temperature_callback_t)(
   dotdot_unid_t unid,
@@ -3328,14 +3328,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_multiplier_callback_t)(
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t multiplier
+  uint32_t multiplier
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_divisor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t divisor
+  uint32_t divisor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_summation_formatting_callback_t)(
   dotdot_unid_t unid,
@@ -3476,70 +3476,70 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltag
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t dc_voltage_multiplier
+  uint16_t dc_voltage_multiplier
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_divisor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t dc_voltage_divisor
+  uint16_t dc_voltage_divisor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_multiplier_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t dc_current_multiplier
+  uint16_t dc_current_multiplier
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_divisor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t dc_current_divisor
+  uint16_t dc_current_divisor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_multiplier_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t dc_power_multiplier
+  uint16_t dc_power_multiplier
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_divisor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t dc_power_divisor
+  uint16_t dc_power_divisor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_frequency
+  uint16_t ac_frequency
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_min_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_frequency_min
+  uint16_t ac_frequency_min
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_max_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_frequency_max
+  uint16_t ac_frequency_max
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_neutral_current_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t neutral_current
+  uint16_t neutral_current
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_total_active_power_callback_t)(
   dotdot_unid_t unid,
@@ -3560,7 +3560,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_total_app
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t total_apparent_power
+  uint32_t total_apparent_power
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured1st_harmonic_current_callback_t)(
   dotdot_unid_t unid,
@@ -3651,28 +3651,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_freque
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_frequency_multiplier
+  uint16_t ac_frequency_multiplier
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_divisor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_frequency_divisor
+  uint16_t ac_frequency_divisor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_multiplier_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t power_multiplier
+  uint32_t power_multiplier
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_divisor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t power_divisor
+  uint32_t power_divisor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_harmonic_current_multiplier_callback_t)(
   dotdot_unid_t unid,
@@ -3693,7 +3693,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_line_curr
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t line_current
+  uint16_t line_current
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_current_callback_t)(
   dotdot_unid_t unid,
@@ -3714,42 +3714,42 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_volta
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage
+  uint16_t rms_voltage
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_min
+  uint16_t rms_voltage_min
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_max
+  uint16_t rms_voltage_max
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_current
+  uint16_t rms_current
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_current_min
+  uint16_t rms_current_min
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_current_max
+  uint16_t rms_current_max
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_callback_t)(
   dotdot_unid_t unid,
@@ -3784,7 +3784,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_apparent_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t apparent_power
+  uint16_t apparent_power
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_callback_t)(
   dotdot_unid_t unid,
@@ -3798,91 +3798,91 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_r
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_rms_voltage_measurement_period
+  uint16_t average_rms_voltage_measurement_period
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_rms_over_voltage_counter
+  uint16_t average_rms_over_voltage_counter
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_rms_under_voltage_counter
+  uint16_t average_rms_under_voltage_counter
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_extreme_over_voltage_period
+  uint16_t rms_extreme_over_voltage_period
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_extreme_under_voltage_period
+  uint16_t rms_extreme_under_voltage_period
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_sag_period
+  uint16_t rms_voltage_sag_period
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_swell_period
+  uint16_t rms_voltage_swell_period
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_multiplier_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_voltage_multiplier
+  uint16_t ac_voltage_multiplier
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_divisor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_voltage_divisor
+  uint16_t ac_voltage_divisor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_multiplier_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_current_multiplier
+  uint16_t ac_current_multiplier
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_divisor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_current_divisor
+  uint16_t ac_current_divisor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_power_multiplier_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_power_multiplier
+  uint16_t ac_power_multiplier
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_power_divisor_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t ac_power_divisor
+  uint16_t ac_power_divisor
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_overload_alarms_mask_callback_t)(
   dotdot_unid_t unid,
@@ -3987,7 +3987,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_line_curr
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t line_current_phb
+  uint16_t line_current_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_current_phb_callback_t)(
   dotdot_unid_t unid,
@@ -4008,42 +4008,42 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_volta
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_phb
+  uint16_t rms_voltage_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_min_phb
+  uint16_t rms_voltage_min_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_max_phb
+  uint16_t rms_voltage_max_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_current_phb
+  uint16_t rms_current_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_current_min_phb
+  uint16_t rms_current_min_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_current_max_phb
+  uint16_t rms_current_max_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_phb_callback_t)(
   dotdot_unid_t unid,
@@ -4078,7 +4078,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_apparent_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t apparent_power_phb
+  uint16_t apparent_power_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_phb_callback_t)(
   dotdot_unid_t unid,
@@ -4092,56 +4092,56 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_r
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_rms_voltage_measurement_period_phb
+  uint16_t average_rms_voltage_measurement_period_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_rms_over_voltage_counter_phb
+  uint16_t average_rms_over_voltage_counter_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_rms_under_voltage_counter_phb
+  uint16_t average_rms_under_voltage_counter_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_extreme_over_voltage_period_phb
+  uint16_t rms_extreme_over_voltage_period_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_extreme_under_voltage_period_phb
+  uint16_t rms_extreme_under_voltage_period_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_sag_period_phb
+  uint16_t rms_voltage_sag_period_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_phb_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_swell_period_phb
+  uint16_t rms_voltage_swell_period_phb
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_line_current_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t line_current_phc
+  uint16_t line_current_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_current_phc_callback_t)(
   dotdot_unid_t unid,
@@ -4162,42 +4162,42 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_volta
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_phc
+  uint16_t rms_voltage_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_min_phc
+  uint16_t rms_voltage_min_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_max_phc
+  uint16_t rms_voltage_max_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_current_phc
+  uint16_t rms_current_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_current_min_phc
+  uint16_t rms_current_min_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_current_max_phc
+  uint16_t rms_current_max_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_phc_callback_t)(
   dotdot_unid_t unid,
@@ -4232,7 +4232,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_apparent_
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t apparent_power_phc
+  uint16_t apparent_power_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_phc_callback_t)(
   dotdot_unid_t unid,
@@ -4246,49 +4246,49 @@ typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_r
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_rms_voltage_measurement_period_phc
+  uint16_t average_rms_voltage_measurement_period_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_rms_over_voltage_counter_phc
+  uint16_t average_rms_over_voltage_counter_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_rms_under_voltage_counter_phc
+  uint16_t average_rms_under_voltage_counter_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_extreme_over_voltage_period_phc
+  uint16_t rms_extreme_over_voltage_period_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_extreme_under_voltage_period_phc
+  uint16_t rms_extreme_under_voltage_period_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_sag_period_phc
+  uint16_t rms_voltage_sag_period_phc
 );
 typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_phc_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t rms_voltage_swell_period_phc
+  uint16_t rms_voltage_swell_period_phc
 );
 // Callback types used by the diagnostics cluster
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_number_of_resets_callback_t)(
@@ -4296,217 +4296,217 @@ typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_number_of_resets_cal
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t number_of_resets
+  uint16_t number_of_resets
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_persistent_memory_writes_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t persistent_memory_writes
+  uint16_t persistent_memory_writes
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_rx_bcast_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t mac_rx_bcast
+  uint32_t mac_rx_bcast
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_tx_bcast_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t mac_tx_bcast
+  uint32_t mac_tx_bcast
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_rx_ucast_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t mac_rx_ucast
+  uint32_t mac_rx_ucast
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t mac_tx_ucast
+  uint32_t mac_tx_ucast
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_retry_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t mac_tx_ucast_retry
+  uint16_t mac_tx_ucast_retry
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_fail_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t mac_tx_ucast_fail
+  uint16_t mac_tx_ucast_fail
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_rx_bcast_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t aps_rx_bcast
+  uint16_t aps_rx_bcast
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_tx_bcast_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t aps_tx_bcast
+  uint16_t aps_tx_bcast
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_rx_ucast_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t aps_rx_ucast
+  uint16_t aps_rx_ucast
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_success_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t aps_tx_ucast_success
+  uint16_t aps_tx_ucast_success
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_retry_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t aps_tx_ucast_retry
+  uint16_t aps_tx_ucast_retry
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_fail_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t aps_tx_ucast_fail
+  uint16_t aps_tx_ucast_fail
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_route_disc_initiated_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t route_disc_initiated
+  uint16_t route_disc_initiated
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_neighbor_added_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t neighbor_added
+  uint16_t neighbor_added
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_neighbor_removed_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t neighbor_removed
+  uint16_t neighbor_removed
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_neighbor_stale_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t neighbor_stale
+  uint16_t neighbor_stale
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_join_indication_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t join_indication
+  uint16_t join_indication
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_child_moved_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t child_moved
+  uint16_t child_moved
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_nwkfc_failure_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t nwkfc_failure
+  uint16_t nwkfc_failure
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_apsfc_failure_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t apsfc_failure
+  uint16_t apsfc_failure
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_unauthorized_key_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t aps_unauthorized_key
+  uint16_t aps_unauthorized_key
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_nwk_decrypt_failures_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t nwk_decrypt_failures
+  uint16_t nwk_decrypt_failures
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_decrypt_failures_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t aps_decrypt_failures
+  uint16_t aps_decrypt_failures
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_packet_buffer_allocate_failures_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t packet_buffer_allocate_failures
+  uint16_t packet_buffer_allocate_failures
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_relayed_ucast_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t relayed_ucast
+  uint16_t relayed_ucast
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_phy_to_mac_queue_limit_reached_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t phy_to_mac_queue_limit_reached
+  uint16_t phy_to_mac_queue_limit_reached
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_packet_validate_drop_count_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t packet_validate_drop_count
+  uint16_t packet_validate_drop_count
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_average_mac_retry_per_aps_message_sent_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t average_mac_retry_per_aps_message_sent
+  uint16_t average_mac_retry_per_aps_message_sent
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_last_messagelqi_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t last_messagelqi
+  uint8_t last_messagelqi
 );
 typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_last_messagerssi_callback_t)(
   dotdot_unid_t unid,
@@ -4537,7 +4537,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_state_attribute_endpoint_id_list_callback_
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
   size_t endpoint_id_list_count,
-  const int8_t* endpoint_id_list
+  const uint8_t* endpoint_id_list
 );
 typedef sl_status_t (*uic_mqtt_dotdot_state_attribute_network_status_callback_t)(
   dotdot_unid_t unid,
@@ -4558,7 +4558,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_state_attribute_maximum_command_delay_call
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t maximum_command_delay
+  uint32_t maximum_command_delay
 );
 typedef sl_status_t (*uic_mqtt_dotdot_state_attribute_network_list_callback_t)(
   dotdot_unid_t unid,
@@ -4598,7 +4598,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_reporting_interva
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t reporting_interval_seconds
+  uint32_t reporting_interval_seconds
 );
 typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_cpu_usage_percent_callback_t)(
   dotdot_unid_t unid,
@@ -4740,7 +4740,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_uptime_minutes_ca
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t uptime_minutes
+  uint64_t uptime_minutes
 );
 typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_current_temperature_celcius_callback_t)(
   dotdot_unid_t unid,
@@ -4789,7 +4789,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_system_interrupts
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t system_interrupts
+  uint64_t system_interrupts
 );
 // Callback types used by the application_monitoring cluster
 typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_name_callback_t)(
@@ -4826,14 +4826,14 @@ typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_uptime_mi
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t uptime_minutes
+  uint64_t uptime_minutes
 );
 typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_process_id_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t process_id
+  uint64_t process_id
 );
 typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_hostname_callback_t)(
   dotdot_unid_t unid,
@@ -4868,28 +4868,28 @@ typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_stat
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t mqtt_statistics_reporting_interval_seconds
+  uint32_t mqtt_statistics_reporting_interval_seconds
 );
 typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_messages_sent_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t mqtt_messages_sent
+  uint64_t mqtt_messages_sent
 );
 typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_messages_received_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t mqtt_messages_received
+  uint64_t mqtt_messages_received
 );
 typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_subscription_count_callback_t)(
   dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int64_t mqtt_subscription_count
+  uint64_t mqtt_subscription_count
 );
 typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_average_delivery_time_seconds_callback_t)(
   dotdot_unid_t unid,
@@ -4917,7 +4917,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_applicati
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int32_t application_statistics_reporting_interval_seconds
+  uint32_t application_statistics_reporting_interval_seconds
 );
 typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_usage_percent_callback_t)(
   dotdot_unid_t unid,
@@ -4984,7 +4984,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_user_credential_attribute_supported_user_u
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int16_t supported_user_unique_identifiers
+  uint16_t supported_user_unique_identifiers
 );
 typedef sl_status_t (*uic_mqtt_dotdot_user_credential_attribute_supported_credential_rules_callback_t)(
   dotdot_unid_t unid,
@@ -5158,7 +5158,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_unify_humidity_control_attribute_humidifie
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t humidifier_setpoint_precision
+  uint8_t humidifier_setpoint_precision
 );
 typedef sl_status_t (*uic_mqtt_dotdot_unify_humidity_control_attribute_dehumidifier_setpoint_min_callback_t)(
   dotdot_unid_t unid,
@@ -5193,7 +5193,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_unify_humidity_control_attribute_dehumidif
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t dehumidifier_setpoint_precision
+  uint8_t dehumidifier_setpoint_precision
 );
 typedef sl_status_t (*uic_mqtt_dotdot_unify_humidity_control_attribute_auto_setpoint_min_callback_t)(
   dotdot_unid_t unid,
@@ -5228,7 +5228,7 @@ typedef sl_status_t (*uic_mqtt_dotdot_unify_humidity_control_attribute_auto_setp
   dotdot_endpoint_id_t endpoint,
   bool unretained,
   uic_mqtt_dotdot_attribute_update_type_t update_type,
-  int8_t auto_setpoint_precision
+  uint8_t auto_setpoint_precision
 );
 
 #ifdef __cplusplus
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.cpp
index 8e00af65dd..2ad8e173db 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.cpp
@@ -394,7 +394,7 @@ static void uic_mqtt_dotdot_on_basic_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_basic_zcl_version_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -464,7 +464,7 @@ sl_status_t uic_mqtt_dotdot_basic_zcl_version_unretain(
 
 sl_status_t uic_mqtt_dotdot_basic_application_version_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -534,7 +534,7 @@ sl_status_t uic_mqtt_dotdot_basic_application_version_unretain(
 
 sl_status_t uic_mqtt_dotdot_basic_stack_version_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -604,7 +604,7 @@ sl_status_t uic_mqtt_dotdot_basic_stack_version_unretain(
 
 sl_status_t uic_mqtt_dotdot_basic_hw_version_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -1091,7 +1091,7 @@ sl_status_t uic_mqtt_dotdot_basic_generic_device_type_unretain(
 
 sl_status_t uic_mqtt_dotdot_basic_product_code_publish(
   const char *base_topic,
-  uint8_t value,
+  const char* value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2144,7 +2144,7 @@ static void uic_mqtt_dotdot_on_power_configuration_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2214,7 +2214,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_frequency_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2353,7 +2353,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_alarm_mask_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_min_threshold_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2423,7 +2423,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_min_threshold_unre
 
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_max_threshold_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2493,7 +2493,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_max_threshold_unre
 
 sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_dwell_trip_point_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2563,7 +2563,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_dwell_trip_point_u
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2633,7 +2633,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_remaining_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2842,7 +2842,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_size_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_batterya_hr_rating_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2912,7 +2912,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_batterya_hr_rating_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_quantity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -2982,7 +2982,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_quantity_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_rated_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3121,7 +3121,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_alarm_mask_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3191,7 +3191,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_min_threshold_un
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3261,7 +3261,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold1_unret
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3331,7 +3331,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold2_unret
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3401,7 +3401,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold3_unret
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3471,7 +3471,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_min_threshold
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3541,7 +3541,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold1_un
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3611,7 +3611,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold2_un
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3750,7 +3750,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery_alarm_state_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -3820,7 +3820,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_remaining_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4029,7 +4029,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_size_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2a_hr_rating_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4099,7 +4099,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2a_hr_rating_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_quantity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4169,7 +4169,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_quantity_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_rated_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4308,7 +4308,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_alarm_mask_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4378,7 +4378,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_min_threshold_u
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4448,7 +4448,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold1_unre
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4518,7 +4518,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold2_unre
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4588,7 +4588,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold3_unre
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4658,7 +4658,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_min_threshol
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4728,7 +4728,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold1_u
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4798,7 +4798,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold2_u
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -4937,7 +4937,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery2_alarm_state_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5007,7 +5007,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_remaining_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5216,7 +5216,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_size_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3a_hr_rating_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5286,7 +5286,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3a_hr_rating_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_quantity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5356,7 +5356,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_quantity_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_rated_voltage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5495,7 +5495,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_alarm_mask_unretain(
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5565,7 +5565,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_min_threshold_u
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5635,7 +5635,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold1_unre
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5705,7 +5705,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold2_unre
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5775,7 +5775,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold3_unre
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_min_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5845,7 +5845,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_min_threshol
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold1_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5915,7 +5915,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold1_u
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold2_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -5985,7 +5985,7 @@ sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold2_u
 
 sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold3_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -6540,7 +6540,7 @@ sl_status_t uic_mqtt_dotdot_device_temperature_configuration_max_temp_experience
 
 sl_status_t uic_mqtt_dotdot_device_temperature_configuration_over_temp_total_dwell_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -6819,7 +6819,7 @@ sl_status_t uic_mqtt_dotdot_device_temperature_configuration_high_temp_threshold
 
 sl_status_t uic_mqtt_dotdot_device_temperature_configuration_low_temp_dwell_trip_point_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -6889,7 +6889,7 @@ sl_status_t uic_mqtt_dotdot_device_temperature_configuration_low_temp_dwell_trip
 
 sl_status_t uic_mqtt_dotdot_device_temperature_configuration_high_temp_dwell_trip_point_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -7185,7 +7185,7 @@ void uic_mqtt_dotdot_on_identify_identify(
     return;
   }
 
-  int16_t identify_time = {};
+  uint16_t identify_time = {};
 
 
   nlohmann::json jsn;
@@ -7244,7 +7244,7 @@ static void uic_mqtt_dotdot_on_generated_identify_identify(
     return;
   }
 
-  int16_t identify_time = {};
+  uint16_t identify_time = {};
 
 
   nlohmann::json jsn;
@@ -7304,7 +7304,7 @@ void uic_mqtt_dotdot_on_identify_identify_query_response(
     return;
   }
 
-  int16_t timeout = {};
+  uint16_t timeout = {};
 
 
   nlohmann::json jsn;
@@ -7363,7 +7363,7 @@ static void uic_mqtt_dotdot_on_generated_identify_identify_query_response(
     return;
   }
 
-  int16_t timeout = {};
+  uint16_t timeout = {};
 
 
   nlohmann::json jsn;
@@ -7759,7 +7759,7 @@ static void uic_mqtt_dotdot_on_identify_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_identify_identify_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -8297,7 +8297,7 @@ void uic_mqtt_dotdot_on_groups_add_group(
     return;
   }
 
-  int16_t group_id = {};
+  uint16_t group_id = {};
   std::string group_name;
 
 
@@ -8361,7 +8361,7 @@ static void uic_mqtt_dotdot_on_generated_groups_add_group(
     return;
   }
 
-  int16_t group_id = {};
+  uint16_t group_id = {};
   std::string group_name;
 
 
@@ -8427,7 +8427,7 @@ void uic_mqtt_dotdot_on_groups_add_group_response(
   }
 
   uint8_t status = {};
-  int16_t group_id = {};
+  uint16_t group_id = {};
 
 
   nlohmann::json jsn;
@@ -8491,7 +8491,7 @@ static void uic_mqtt_dotdot_on_generated_groups_add_group_response(
   }
 
   uint8_t status = {};
-  int16_t group_id = {};
+  uint16_t group_id = {};
 
 
   nlohmann::json jsn;
@@ -8555,7 +8555,7 @@ void uic_mqtt_dotdot_on_groups_view_group(
     return;
   }
 
-  int16_t group_id = {};
+  uint16_t group_id = {};
 
 
   nlohmann::json jsn;
@@ -8614,7 +8614,7 @@ static void uic_mqtt_dotdot_on_generated_groups_view_group(
     return;
   }
 
-  int16_t group_id = {};
+  uint16_t group_id = {};
 
 
   nlohmann::json jsn;
@@ -8675,7 +8675,7 @@ void uic_mqtt_dotdot_on_groups_view_group_response(
   }
 
   uint8_t status = {};
-  int16_t group_id = {};
+  uint16_t group_id = {};
   std::string group_name;
 
 
@@ -8744,7 +8744,7 @@ static void uic_mqtt_dotdot_on_generated_groups_view_group_response(
   }
 
   uint8_t status = {};
-  int16_t group_id = {};
+  uint16_t group_id = {};
   std::string group_name;
 
 
@@ -8813,7 +8813,7 @@ void uic_mqtt_dotdot_on_groups_get_group_membership(
     return;
   }
 
-  std::vector<int16_t> group_list;
+  std::vector<uint16_t> group_list;
 
 
   nlohmann::json jsn;
@@ -8873,7 +8873,7 @@ static void uic_mqtt_dotdot_on_generated_groups_get_group_membership(
     return;
   }
 
-  std::vector<int16_t> group_list;
+  std::vector<uint16_t> group_list;
 
 
   nlohmann::json jsn;
@@ -8934,8 +8934,8 @@ void uic_mqtt_dotdot_on_groups_get_group_membership_response(
     return;
   }
 
-  int8_t capacity = {};
-  std::vector<int16_t> group_list;
+  uint8_t capacity = {};
+  std::vector<uint16_t> group_list;
 
 
   nlohmann::json jsn;
@@ -8999,8 +8999,8 @@ static void uic_mqtt_dotdot_on_generated_groups_get_group_membership_response(
     return;
   }
 
-  int8_t capacity = {};
-  std::vector<int16_t> group_list;
+  uint8_t capacity = {};
+  std::vector<uint16_t> group_list;
 
 
   nlohmann::json jsn;
@@ -9065,7 +9065,7 @@ void uic_mqtt_dotdot_on_groups_remove_group(
     return;
   }
 
-  int16_t group_id = {};
+  uint16_t group_id = {};
 
 
   nlohmann::json jsn;
@@ -9124,7 +9124,7 @@ static void uic_mqtt_dotdot_on_generated_groups_remove_group(
     return;
   }
 
-  int16_t group_id = {};
+  uint16_t group_id = {};
 
 
   nlohmann::json jsn;
@@ -9185,7 +9185,7 @@ void uic_mqtt_dotdot_on_groups_remove_group_response(
   }
 
   uint8_t status = {};
-  int16_t group_id = {};
+  uint16_t group_id = {};
 
 
   nlohmann::json jsn;
@@ -9249,7 +9249,7 @@ static void uic_mqtt_dotdot_on_generated_groups_remove_group_response(
   }
 
   uint8_t status = {};
-  int16_t group_id = {};
+  uint16_t group_id = {};
 
 
   nlohmann::json jsn;
@@ -9416,7 +9416,7 @@ void uic_mqtt_dotdot_on_groups_add_group_if_identifying(
     return;
   }
 
-  int16_t group_id = {};
+  uint16_t group_id = {};
   std::string group_name;
 
 
@@ -9480,7 +9480,7 @@ static void uic_mqtt_dotdot_on_generated_groups_add_group_if_identifying(
     return;
   }
 
-  int16_t group_id = {};
+  uint16_t group_id = {};
   std::string group_name;
 
 
@@ -10549,12 +10549,12 @@ void uic_mqtt_dotdot_on_scenes_add_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
   std::string scene_name;
   std::vector<SExtensionFieldSetList> extension_field_sets;
-  int8_t transition_time100ms = {};
+  uint8_t transition_time100ms = {};
 
 
   nlohmann::json jsn;
@@ -10634,12 +10634,12 @@ static void uic_mqtt_dotdot_on_generated_scenes_add_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
   std::string scene_name;
   std::vector<SExtensionFieldSetList> extension_field_sets;
-  int8_t transition_time100ms = {};
+  uint8_t transition_time100ms = {};
 
 
   nlohmann::json jsn;
@@ -10721,8 +10721,8 @@ void uic_mqtt_dotdot_on_scenes_add_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -10790,8 +10790,8 @@ static void uic_mqtt_dotdot_on_generated_scenes_add_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -10859,8 +10859,8 @@ void uic_mqtt_dotdot_on_scenes_view_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -10923,8 +10923,8 @@ static void uic_mqtt_dotdot_on_generated_scenes_view_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -10989,9 +10989,9 @@ void uic_mqtt_dotdot_on_scenes_view_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
   std::string scene_name;
   std::vector<SExtensionFieldSetList> extension_field_sets;
 
@@ -11074,9 +11074,9 @@ static void uic_mqtt_dotdot_on_generated_scenes_view_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
   std::string scene_name;
   std::vector<SExtensionFieldSetList> extension_field_sets;
 
@@ -11159,8 +11159,8 @@ void uic_mqtt_dotdot_on_scenes_remove_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -11223,8 +11223,8 @@ static void uic_mqtt_dotdot_on_generated_scenes_remove_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -11289,8 +11289,8 @@ void uic_mqtt_dotdot_on_scenes_remove_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -11358,8 +11358,8 @@ static void uic_mqtt_dotdot_on_generated_scenes_remove_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -11427,7 +11427,7 @@ void uic_mqtt_dotdot_on_scenes_remove_all_scenes(
     return;
   }
 
-  uint8_t * groupid = {};
+  uint16_t groupid = {};
 
 
   nlohmann::json jsn;
@@ -11486,7 +11486,7 @@ static void uic_mqtt_dotdot_on_generated_scenes_remove_all_scenes(
     return;
   }
 
-  uint8_t * groupid = {};
+  uint16_t groupid = {};
 
 
   nlohmann::json jsn;
@@ -11547,7 +11547,7 @@ void uic_mqtt_dotdot_on_scenes_remove_all_scenes_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
+  uint16_t groupid = {};
 
 
   nlohmann::json jsn;
@@ -11611,7 +11611,7 @@ static void uic_mqtt_dotdot_on_generated_scenes_remove_all_scenes_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
+  uint16_t groupid = {};
 
 
   nlohmann::json jsn;
@@ -11675,8 +11675,8 @@ void uic_mqtt_dotdot_on_scenes_store_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -11739,8 +11739,8 @@ static void uic_mqtt_dotdot_on_generated_scenes_store_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -11805,8 +11805,8 @@ void uic_mqtt_dotdot_on_scenes_store_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -11874,8 +11874,8 @@ static void uic_mqtt_dotdot_on_generated_scenes_store_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -11943,9 +11943,9 @@ void uic_mqtt_dotdot_on_scenes_recall_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
 
 
   nlohmann::json jsn;
@@ -12012,9 +12012,9 @@ static void uic_mqtt_dotdot_on_generated_scenes_recall_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
 
 
   nlohmann::json jsn;
@@ -12082,7 +12082,7 @@ void uic_mqtt_dotdot_on_scenes_get_scene_membership(
     return;
   }
 
-  uint8_t * groupid = {};
+  uint16_t groupid = {};
 
 
   nlohmann::json jsn;
@@ -12141,7 +12141,7 @@ static void uic_mqtt_dotdot_on_generated_scenes_get_scene_membership(
     return;
   }
 
-  uint8_t * groupid = {};
+  uint16_t groupid = {};
 
 
   nlohmann::json jsn;
@@ -12202,9 +12202,9 @@ void uic_mqtt_dotdot_on_scenes_get_scene_membership_response(
   }
 
   zclStatus status = {};
-  int8_t capacity = {};
-  uint8_t * groupid = {};
-  std::vector<int8_t> scene_list;
+  uint8_t capacity = {};
+  uint16_t groupid = {};
+  std::vector<uint8_t> scene_list;
 
 
   nlohmann::json jsn;
@@ -12277,9 +12277,9 @@ static void uic_mqtt_dotdot_on_generated_scenes_get_scene_membership_response(
   }
 
   zclStatus status = {};
-  int8_t capacity = {};
-  uint8_t * groupid = {};
-  std::vector<int8_t> scene_list;
+  uint8_t capacity = {};
+  uint16_t groupid = {};
+  std::vector<uint8_t> scene_list;
 
 
   nlohmann::json jsn;
@@ -12352,9 +12352,9 @@ void uic_mqtt_dotdot_on_scenes_enhanced_add_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
   std::string scene_name;
   std::vector<SExtensionFieldSetList> extension_field_sets;
 
@@ -12432,9 +12432,9 @@ static void uic_mqtt_dotdot_on_generated_scenes_enhanced_add_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
   std::string scene_name;
   std::vector<SExtensionFieldSetList> extension_field_sets;
 
@@ -12514,8 +12514,8 @@ void uic_mqtt_dotdot_on_scenes_enhanced_add_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -12583,8 +12583,8 @@ static void uic_mqtt_dotdot_on_generated_scenes_enhanced_add_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -12652,8 +12652,8 @@ void uic_mqtt_dotdot_on_scenes_enhanced_view_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -12716,8 +12716,8 @@ static void uic_mqtt_dotdot_on_generated_scenes_enhanced_view_scene(
     return;
   }
 
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
 
 
   nlohmann::json jsn;
@@ -12782,9 +12782,9 @@ void uic_mqtt_dotdot_on_scenes_enhanced_view_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
   std::string scene_name;
   std::vector<SExtensionFieldSetList> extension_field_sets;
 
@@ -12867,9 +12867,9 @@ static void uic_mqtt_dotdot_on_generated_scenes_enhanced_view_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * groupid = {};
-  int8_t sceneid = {};
-  int16_t transition_time = {};
+  uint16_t groupid = {};
+  uint8_t sceneid = {};
+  uint16_t transition_time = {};
   std::string scene_name;
   std::vector<SExtensionFieldSetList> extension_field_sets;
 
@@ -12953,10 +12953,10 @@ void uic_mqtt_dotdot_on_scenes_copy_scene(
   }
 
   uint8_t mode = {};
-  uint8_t * group_identifier_from = {};
-  int8_t scene_identifier_from = {};
-  uint8_t * group_identifier_to = {};
-  int8_t scene_identifier_to = {};
+  uint16_t group_identifier_from = {};
+  uint8_t scene_identifier_from = {};
+  uint16_t group_identifier_to = {};
+  uint8_t scene_identifier_to = {};
 
 
   nlohmann::json jsn;
@@ -13032,10 +13032,10 @@ static void uic_mqtt_dotdot_on_generated_scenes_copy_scene(
   }
 
   uint8_t mode = {};
-  uint8_t * group_identifier_from = {};
-  int8_t scene_identifier_from = {};
-  uint8_t * group_identifier_to = {};
-  int8_t scene_identifier_to = {};
+  uint16_t group_identifier_from = {};
+  uint8_t scene_identifier_from = {};
+  uint16_t group_identifier_to = {};
+  uint8_t scene_identifier_to = {};
 
 
   nlohmann::json jsn;
@@ -13112,8 +13112,8 @@ void uic_mqtt_dotdot_on_scenes_copy_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * group_identifier_from = {};
-  int8_t scene_identifier_from = {};
+  uint16_t group_identifier_from = {};
+  uint8_t scene_identifier_from = {};
 
 
   nlohmann::json jsn;
@@ -13181,8 +13181,8 @@ static void uic_mqtt_dotdot_on_generated_scenes_copy_scene_response(
   }
 
   zclStatus status = {};
-  uint8_t * group_identifier_from = {};
-  int8_t scene_identifier_from = {};
+  uint16_t group_identifier_from = {};
+  uint8_t scene_identifier_from = {};
 
 
   nlohmann::json jsn;
@@ -13366,7 +13366,7 @@ static void uic_mqtt_dotdot_on_scenes_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_scenes_scene_count_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -13436,7 +13436,7 @@ sl_status_t uic_mqtt_dotdot_scenes_scene_count_unretain(
 
 sl_status_t uic_mqtt_dotdot_scenes_current_scene_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -13506,7 +13506,7 @@ sl_status_t uic_mqtt_dotdot_scenes_current_scene_unretain(
 
 sl_status_t uic_mqtt_dotdot_scenes_current_group_publish(
   const char *base_topic,
-  uint8_t * value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -14623,7 +14623,7 @@ void uic_mqtt_dotdot_on_on_off_off_with_effect(
   }
 
   OffWithEffectEffectIdentifier effect_identifier = {};
-  int8_t effect_variant = {};
+  uint8_t effect_variant = {};
 
 
   nlohmann::json jsn;
@@ -14687,7 +14687,7 @@ static void uic_mqtt_dotdot_on_generated_on_off_off_with_effect(
   }
 
   OffWithEffectEffectIdentifier effect_identifier = {};
-  int8_t effect_variant = {};
+  uint8_t effect_variant = {};
 
 
   nlohmann::json jsn;
@@ -14855,8 +14855,8 @@ void uic_mqtt_dotdot_on_on_off_on_with_timed_off(
   }
 
   uint8_t on_off_control = {};
-  int16_t on_time = {};
-  int16_t off_wait_time = {};
+  uint16_t on_time = {};
+  uint16_t off_wait_time = {};
 
 
   nlohmann::json jsn;
@@ -14924,8 +14924,8 @@ static void uic_mqtt_dotdot_on_generated_on_off_on_with_timed_off(
   }
 
   uint8_t on_off_control = {};
-  int16_t on_time = {};
-  int16_t off_wait_time = {};
+  uint16_t on_time = {};
+  uint16_t off_wait_time = {};
 
 
   nlohmann::json jsn;
@@ -15245,7 +15245,7 @@ sl_status_t uic_mqtt_dotdot_on_off_global_scene_control_unretain(
 
 sl_status_t uic_mqtt_dotdot_on_off_on_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -15315,7 +15315,7 @@ sl_status_t uic_mqtt_dotdot_on_off_on_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_on_off_off_wait_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -15907,8 +15907,8 @@ void uic_mqtt_dotdot_on_level_move_to_level(
     return;
   }
 
-  int8_t level = {};
-  int16_t transition_time = {};
+  uint8_t level = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -15981,8 +15981,8 @@ static void uic_mqtt_dotdot_on_generated_level_move_to_level(
     return;
   }
 
-  int8_t level = {};
-  int16_t transition_time = {};
+  uint8_t level = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16057,7 +16057,7 @@ void uic_mqtt_dotdot_on_level_move(
   }
 
   MoveStepMode move_mode = {};
-  int8_t rate = {};
+  uint8_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16131,7 +16131,7 @@ static void uic_mqtt_dotdot_on_generated_level_move(
   }
 
   MoveStepMode move_mode = {};
-  int8_t rate = {};
+  uint8_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16206,8 +16206,8 @@ void uic_mqtt_dotdot_on_level_step(
   }
 
   MoveStepMode step_mode = {};
-  int8_t step_size = {};
-  int16_t transition_time = {};
+  uint8_t step_size = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16285,8 +16285,8 @@ static void uic_mqtt_dotdot_on_generated_level_step(
   }
 
   MoveStepMode step_mode = {};
-  int8_t step_size = {};
-  int16_t transition_time = {};
+  uint8_t step_size = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16493,8 +16493,8 @@ void uic_mqtt_dotdot_on_level_move_to_level_with_on_off(
     return;
   }
 
-  int8_t level = {};
-  int16_t transition_time = {};
+  uint8_t level = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16567,8 +16567,8 @@ static void uic_mqtt_dotdot_on_generated_level_move_to_level_with_on_off(
     return;
   }
 
-  int8_t level = {};
-  int16_t transition_time = {};
+  uint8_t level = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16643,7 +16643,7 @@ void uic_mqtt_dotdot_on_level_move_with_on_off(
   }
 
   MoveStepMode move_mode = {};
-  int8_t rate = {};
+  uint8_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16717,7 +16717,7 @@ static void uic_mqtt_dotdot_on_generated_level_move_with_on_off(
   }
 
   MoveStepMode move_mode = {};
-  int8_t rate = {};
+  uint8_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16792,8 +16792,8 @@ void uic_mqtt_dotdot_on_level_step_with_on_off(
   }
 
   MoveStepMode step_mode = {};
-  int8_t step_size = {};
-  int16_t transition_time = {};
+  uint8_t step_size = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -16871,8 +16871,8 @@ static void uic_mqtt_dotdot_on_generated_level_step_with_on_off(
   }
 
   MoveStepMode step_mode = {};
-  int8_t step_size = {};
-  int16_t transition_time = {};
+  uint8_t step_size = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -17079,7 +17079,7 @@ void uic_mqtt_dotdot_on_level_move_to_closest_frequency(
     return;
   }
 
-  int16_t frequency = {};
+  uint16_t frequency = {};
 
 
   nlohmann::json jsn;
@@ -17138,7 +17138,7 @@ static void uic_mqtt_dotdot_on_generated_level_move_to_closest_frequency(
     return;
   }
 
-  int16_t frequency = {};
+  uint16_t frequency = {};
 
 
   nlohmann::json jsn;
@@ -17328,7 +17328,7 @@ static void uic_mqtt_dotdot_on_level_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_level_current_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -17398,7 +17398,7 @@ sl_status_t uic_mqtt_dotdot_level_current_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_remaining_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -17468,7 +17468,7 @@ sl_status_t uic_mqtt_dotdot_level_remaining_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_min_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -17538,7 +17538,7 @@ sl_status_t uic_mqtt_dotdot_level_min_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_max_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -17608,7 +17608,7 @@ sl_status_t uic_mqtt_dotdot_level_max_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_current_frequency_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -17678,7 +17678,7 @@ sl_status_t uic_mqtt_dotdot_level_current_frequency_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_min_frequency_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -17748,7 +17748,7 @@ sl_status_t uic_mqtt_dotdot_level_min_frequency_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_max_frequency_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -17887,7 +17887,7 @@ sl_status_t uic_mqtt_dotdot_level_options_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_on_off_transition_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -17957,7 +17957,7 @@ sl_status_t uic_mqtt_dotdot_level_on_off_transition_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_on_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -18027,7 +18027,7 @@ sl_status_t uic_mqtt_dotdot_level_on_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_on_transition_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -18097,7 +18097,7 @@ sl_status_t uic_mqtt_dotdot_level_on_transition_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_off_transition_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -18167,7 +18167,7 @@ sl_status_t uic_mqtt_dotdot_level_off_transition_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_default_move_rate_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -18237,7 +18237,7 @@ sl_status_t uic_mqtt_dotdot_level_default_move_rate_unretain(
 
 sl_status_t uic_mqtt_dotdot_level_start_up_current_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -18676,7 +18676,7 @@ void uic_mqtt_dotdot_on_alarms_reset_alarm(
   }
 
   uint8_t alarm_code = {};
-  uint8_t cluster_identifier = {};
+  uint16_t cluster_identifier = {};
 
 
   nlohmann::json jsn;
@@ -18740,7 +18740,7 @@ static void uic_mqtt_dotdot_on_generated_alarms_reset_alarm(
   }
 
   uint8_t alarm_code = {};
-  uint8_t cluster_identifier = {};
+  uint16_t cluster_identifier = {};
 
 
   nlohmann::json jsn;
@@ -18805,7 +18805,7 @@ void uic_mqtt_dotdot_on_alarms_alarm(
   }
 
   uint8_t alarm_code = {};
-  uint8_t cluster_identifier = {};
+  uint16_t cluster_identifier = {};
 
 
   nlohmann::json jsn;
@@ -18869,7 +18869,7 @@ static void uic_mqtt_dotdot_on_generated_alarms_alarm(
   }
 
   uint8_t alarm_code = {};
-  uint8_t cluster_identifier = {};
+  uint16_t cluster_identifier = {};
 
 
   nlohmann::json jsn;
@@ -19038,8 +19038,8 @@ void uic_mqtt_dotdot_on_alarms_get_alarm_response(
 
   zclStatus status = {};
   uint8_t alarm_code = {};
-  uint8_t cluster_identifier = {};
-  int32_t time_stamp = {};
+  uint16_t cluster_identifier = {};
+  uint32_t time_stamp = {};
 
 
   nlohmann::json jsn;
@@ -19112,8 +19112,8 @@ static void uic_mqtt_dotdot_on_generated_alarms_get_alarm_response(
 
   zclStatus status = {};
   uint8_t alarm_code = {};
-  uint8_t cluster_identifier = {};
-  int32_t time_stamp = {};
+  uint16_t cluster_identifier = {};
+  uint32_t time_stamp = {};
 
 
   nlohmann::json jsn;
@@ -19495,7 +19495,7 @@ static void uic_mqtt_dotdot_on_alarms_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_alarms_alarm_count_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -19821,7 +19821,7 @@ static void uic_mqtt_dotdot_on_time_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_time_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -20030,7 +20030,7 @@ sl_status_t uic_mqtt_dotdot_time_time_zone_unretain(
 
 sl_status_t uic_mqtt_dotdot_time_dst_start_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -20100,7 +20100,7 @@ sl_status_t uic_mqtt_dotdot_time_dst_start_unretain(
 
 sl_status_t uic_mqtt_dotdot_time_dst_end_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -20240,7 +20240,7 @@ sl_status_t uic_mqtt_dotdot_time_dst_shift_unretain(
 
 sl_status_t uic_mqtt_dotdot_time_standard_time_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -20310,7 +20310,7 @@ sl_status_t uic_mqtt_dotdot_time_standard_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_time_local_time_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -20380,7 +20380,7 @@ sl_status_t uic_mqtt_dotdot_time_local_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_time_last_set_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -20450,7 +20450,7 @@ sl_status_t uic_mqtt_dotdot_time_last_set_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_time_valid_until_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -20885,7 +20885,7 @@ void uic_mqtt_dotdot_on_poll_control_check_in_response(
   }
 
   bool start_fast_polling = {};
-  int16_t fast_poll_timeout = {};
+  uint16_t fast_poll_timeout = {};
 
 
   nlohmann::json jsn;
@@ -20949,7 +20949,7 @@ static void uic_mqtt_dotdot_on_generated_poll_control_check_in_response(
   }
 
   bool start_fast_polling = {};
-  int16_t fast_poll_timeout = {};
+  uint16_t fast_poll_timeout = {};
 
 
   nlohmann::json jsn;
@@ -21116,7 +21116,7 @@ void uic_mqtt_dotdot_on_poll_control_set_long_poll_interval(
     return;
   }
 
-  int32_t new_long_poll_interval = {};
+  uint32_t new_long_poll_interval = {};
 
 
   nlohmann::json jsn;
@@ -21175,7 +21175,7 @@ static void uic_mqtt_dotdot_on_generated_poll_control_set_long_poll_interval(
     return;
   }
 
-  int32_t new_long_poll_interval = {};
+  uint32_t new_long_poll_interval = {};
 
 
   nlohmann::json jsn;
@@ -21235,7 +21235,7 @@ void uic_mqtt_dotdot_on_poll_control_set_short_poll_interval(
     return;
   }
 
-  int16_t new_short_poll_interval = {};
+  uint16_t new_short_poll_interval = {};
 
 
   nlohmann::json jsn;
@@ -21294,7 +21294,7 @@ static void uic_mqtt_dotdot_on_generated_poll_control_set_short_poll_interval(
     return;
   }
 
-  int16_t new_short_poll_interval = {};
+  uint16_t new_short_poll_interval = {};
 
 
   nlohmann::json jsn;
@@ -21470,7 +21470,7 @@ static void uic_mqtt_dotdot_on_poll_control_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -21540,7 +21540,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_unretain(
 
 sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -21610,7 +21610,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_unretain(
 
 sl_status_t uic_mqtt_dotdot_poll_control_short_poll_interval_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -21680,7 +21680,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_short_poll_interval_unretain(
 
 sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -21750,7 +21750,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_unretain(
 
 sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_min_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -21820,7 +21820,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_min_unretain(
 
 sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_min_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -21890,7 +21890,7 @@ sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_min_unretain(
 
 sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_max_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -22198,7 +22198,7 @@ static void uic_mqtt_dotdot_on_shade_configuration_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_shade_configuration_physical_closed_limit_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -22268,7 +22268,7 @@ sl_status_t uic_mqtt_dotdot_shade_configuration_physical_closed_limit_unretain(
 
 sl_status_t uic_mqtt_dotdot_shade_configuration_motor_step_size_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -22407,7 +22407,7 @@ sl_status_t uic_mqtt_dotdot_shade_configuration_status_unretain(
 
 sl_status_t uic_mqtt_dotdot_shade_configuration_closed_limit_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -25590,7 +25590,7 @@ void uic_mqtt_dotdot_on_door_lock_unlock_with_timeout(
     return;
   }
 
-  int16_t timeout_in_seconds = {};
+  uint16_t timeout_in_seconds = {};
   std::string pin_or_rfid_code;
 
 
@@ -25654,7 +25654,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_unlock_with_timeout(
     return;
   }
 
-  int16_t timeout_in_seconds = {};
+  uint16_t timeout_in_seconds = {};
   std::string pin_or_rfid_code;
 
 
@@ -25838,7 +25838,7 @@ void uic_mqtt_dotdot_on_door_lock_get_log_record(
     return;
   }
 
-  int16_t log_index = {};
+  uint16_t log_index = {};
 
 
   nlohmann::json jsn;
@@ -25897,7 +25897,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_log_record(
     return;
   }
 
-  int16_t log_index = {};
+  uint16_t log_index = {};
 
 
   nlohmann::json jsn;
@@ -25957,12 +25957,12 @@ void uic_mqtt_dotdot_on_door_lock_get_log_record_response(
     return;
   }
 
-  int16_t log_entryid = {};
-  int32_t timestamp = {};
+  uint16_t log_entryid = {};
+  uint32_t timestamp = {};
   GetLogRecordResponseEventType event_type = {};
   DrlkOperEventSource source_operation_event = {};
-  int8_t event_id_or_alarm_code = {};
-  int16_t userid = {};
+  uint8_t event_id_or_alarm_code = {};
+  uint16_t userid = {};
   std::string pin;
 
 
@@ -26046,12 +26046,12 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_log_record_response(
     return;
   }
 
-  int16_t log_entryid = {};
-  int32_t timestamp = {};
+  uint16_t log_entryid = {};
+  uint32_t timestamp = {};
   GetLogRecordResponseEventType event_type = {};
   DrlkOperEventSource source_operation_event = {};
-  int8_t event_id_or_alarm_code = {};
-  int16_t userid = {};
+  uint8_t event_id_or_alarm_code = {};
+  uint16_t userid = {};
   std::string pin;
 
 
@@ -26136,7 +26136,7 @@ void uic_mqtt_dotdot_on_door_lock_set_pin_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
   DrlkSettableUserStatus user_status = {};
   DrlkUserType user_type = {};
   std::string pin;
@@ -26210,7 +26210,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_set_pin_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
   DrlkSettableUserStatus user_status = {};
   DrlkUserType user_type = {};
   std::string pin;
@@ -26404,7 +26404,7 @@ void uic_mqtt_dotdot_on_door_lock_get_pin_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -26463,7 +26463,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_pin_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -26523,7 +26523,7 @@ void uic_mqtt_dotdot_on_door_lock_get_pin_code_response(
     return;
   }
 
-  int16_t userid = {};
+  uint16_t userid = {};
   DrlkUserStatus user_status = {};
   DrlkUserType user_type = {};
   std::string code;
@@ -26597,7 +26597,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_pin_code_response(
     return;
   }
 
-  int16_t userid = {};
+  uint16_t userid = {};
   DrlkUserStatus user_status = {};
   DrlkUserType user_type = {};
   std::string code;
@@ -26672,7 +26672,7 @@ void uic_mqtt_dotdot_on_door_lock_clear_pin_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -26731,7 +26731,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_clear_pin_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -27132,7 +27132,7 @@ void uic_mqtt_dotdot_on_door_lock_set_user_status(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
   DrlkSettableUserStatus user_status = {};
 
 
@@ -27196,7 +27196,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_set_user_status(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
   DrlkSettableUserStatus user_status = {};
 
 
@@ -27380,7 +27380,7 @@ void uic_mqtt_dotdot_on_door_lock_get_user_status(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -27439,7 +27439,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_user_status(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -27499,7 +27499,7 @@ void uic_mqtt_dotdot_on_door_lock_get_user_status_response(
     return;
   }
 
-  int16_t userid = {};
+  uint16_t userid = {};
   DrlkUserStatus user_status = {};
 
 
@@ -27563,7 +27563,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_user_status_response(
     return;
   }
 
-  int16_t userid = {};
+  uint16_t userid = {};
   DrlkUserStatus user_status = {};
 
 
@@ -27628,13 +27628,13 @@ void uic_mqtt_dotdot_on_door_lock_set_weekday_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
   uint8_t days_mask = {};
-  int8_t start_hour = {};
-  int8_t start_minute = {};
-  int8_t end_hour = {};
-  int8_t end_minute = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t end_hour = {};
+  uint8_t end_minute = {};
 
 
   nlohmann::json jsn;
@@ -27717,13 +27717,13 @@ static void uic_mqtt_dotdot_on_generated_door_lock_set_weekday_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
   uint8_t days_mask = {};
-  int8_t start_hour = {};
-  int8_t start_minute = {};
-  int8_t end_hour = {};
-  int8_t end_minute = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t end_hour = {};
+  uint8_t end_minute = {};
 
 
   nlohmann::json jsn;
@@ -27926,8 +27926,8 @@ void uic_mqtt_dotdot_on_door_lock_get_weekday_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -27990,8 +27990,8 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_weekday_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -28055,14 +28055,14 @@ void uic_mqtt_dotdot_on_door_lock_get_weekday_schedule_response(
     return;
   }
 
-  int8_t scheduleid = {};
-  int16_t userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
   zclStatus status = {};
   uint8_t days_mask = {};
-  int8_t start_hour = {};
-  int8_t start_minute = {};
-  int8_t end_hour = {};
-  int8_t end_minute = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t end_hour = {};
+  uint8_t end_minute = {};
 
 
   nlohmann::json jsn;
@@ -28149,14 +28149,14 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_weekday_schedule_response
     return;
   }
 
-  int8_t scheduleid = {};
-  int16_t userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
   zclStatus status = {};
   uint8_t days_mask = {};
-  int8_t start_hour = {};
-  int8_t start_minute = {};
-  int8_t end_hour = {};
-  int8_t end_minute = {};
+  uint8_t start_hour = {};
+  uint8_t start_minute = {};
+  uint8_t end_hour = {};
+  uint8_t end_minute = {};
 
 
   nlohmann::json jsn;
@@ -28244,8 +28244,8 @@ void uic_mqtt_dotdot_on_door_lock_clear_weekday_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -28308,8 +28308,8 @@ static void uic_mqtt_dotdot_on_generated_door_lock_clear_weekday_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -28492,10 +28492,10 @@ void uic_mqtt_dotdot_on_door_lock_set_year_day_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
-  int32_t local_start_time = {};
-  int32_t local_end_time = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
+  uint32_t local_start_time = {};
+  uint32_t local_end_time = {};
 
 
   nlohmann::json jsn;
@@ -28566,10 +28566,10 @@ static void uic_mqtt_dotdot_on_generated_door_lock_set_year_day_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
-  int32_t local_start_time = {};
-  int32_t local_end_time = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
+  uint32_t local_start_time = {};
+  uint32_t local_end_time = {};
 
 
   nlohmann::json jsn;
@@ -28760,8 +28760,8 @@ void uic_mqtt_dotdot_on_door_lock_get_year_day_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -28824,8 +28824,8 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_year_day_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -28889,11 +28889,11 @@ void uic_mqtt_dotdot_on_door_lock_get_year_day_schedule_response(
     return;
   }
 
-  int8_t scheduleid = {};
-  int16_t userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
   zclStatus status = {};
-  int32_t local_start_time = {};
-  int32_t local_end_time = {};
+  uint32_t local_start_time = {};
+  uint32_t local_end_time = {};
 
 
   nlohmann::json jsn;
@@ -28968,11 +28968,11 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_year_day_schedule_respons
     return;
   }
 
-  int8_t scheduleid = {};
-  int16_t userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
   zclStatus status = {};
-  int32_t local_start_time = {};
-  int32_t local_end_time = {};
+  uint32_t local_start_time = {};
+  uint32_t local_end_time = {};
 
 
   nlohmann::json jsn;
@@ -29048,8 +29048,8 @@ void uic_mqtt_dotdot_on_door_lock_clear_year_day_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -29112,8 +29112,8 @@ static void uic_mqtt_dotdot_on_generated_door_lock_clear_year_day_schedule(
     return;
   }
 
-  uint8_t * scheduleid = {};
-  uint8_t * userid = {};
+  uint8_t scheduleid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -29296,9 +29296,9 @@ void uic_mqtt_dotdot_on_door_lock_set_holiday_schedule(
     return;
   }
 
-  uint8_t * holiday_scheduleid = {};
-  int32_t local_start_time = {};
-  int32_t local_end_time = {};
+  uint8_t holiday_scheduleid = {};
+  uint32_t local_start_time = {};
+  uint32_t local_end_time = {};
   DrlkOperMode operating_mode_during_holiday = {};
 
 
@@ -29370,9 +29370,9 @@ static void uic_mqtt_dotdot_on_generated_door_lock_set_holiday_schedule(
     return;
   }
 
-  uint8_t * holiday_scheduleid = {};
-  int32_t local_start_time = {};
-  int32_t local_end_time = {};
+  uint8_t holiday_scheduleid = {};
+  uint32_t local_start_time = {};
+  uint32_t local_end_time = {};
   DrlkOperMode operating_mode_during_holiday = {};
 
 
@@ -29564,7 +29564,7 @@ void uic_mqtt_dotdot_on_door_lock_get_holiday_schedule(
     return;
   }
 
-  uint8_t * holiday_scheduleid = {};
+  uint8_t holiday_scheduleid = {};
 
 
   nlohmann::json jsn;
@@ -29623,7 +29623,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_holiday_schedule(
     return;
   }
 
-  uint8_t * holiday_scheduleid = {};
+  uint8_t holiday_scheduleid = {};
 
 
   nlohmann::json jsn;
@@ -29683,10 +29683,10 @@ void uic_mqtt_dotdot_on_door_lock_get_holiday_schedule_response(
     return;
   }
 
-  int8_t holiday_scheduleid = {};
+  uint8_t holiday_scheduleid = {};
   zclStatus status = {};
-  int32_t local_start_time = {};
-  int32_t local_end_time = {};
+  uint32_t local_start_time = {};
+  uint32_t local_end_time = {};
   DrlkOperMode operating_mode_during_holiday = {};
 
 
@@ -29762,10 +29762,10 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_holiday_schedule_response
     return;
   }
 
-  int8_t holiday_scheduleid = {};
+  uint8_t holiday_scheduleid = {};
   zclStatus status = {};
-  int32_t local_start_time = {};
-  int32_t local_end_time = {};
+  uint32_t local_start_time = {};
+  uint32_t local_end_time = {};
   DrlkOperMode operating_mode_during_holiday = {};
 
 
@@ -29842,7 +29842,7 @@ void uic_mqtt_dotdot_on_door_lock_clear_holiday_schedule(
     return;
   }
 
-  uint8_t * holiday_scheduleid = {};
+  uint8_t holiday_scheduleid = {};
 
 
   nlohmann::json jsn;
@@ -29901,7 +29901,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_clear_holiday_schedule(
     return;
   }
 
-  uint8_t * holiday_scheduleid = {};
+  uint8_t holiday_scheduleid = {};
 
 
   nlohmann::json jsn;
@@ -30080,7 +30080,7 @@ void uic_mqtt_dotdot_on_door_lock_set_user_type(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
   DrlkUserType user_type = {};
 
 
@@ -30144,7 +30144,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_set_user_type(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
   DrlkUserType user_type = {};
 
 
@@ -30328,7 +30328,7 @@ void uic_mqtt_dotdot_on_door_lock_get_user_type(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -30387,7 +30387,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_user_type(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -30447,7 +30447,7 @@ void uic_mqtt_dotdot_on_door_lock_get_user_type_response(
     return;
   }
 
-  int16_t userid = {};
+  uint16_t userid = {};
   DrlkUserType user_type = {};
 
 
@@ -30511,7 +30511,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_user_type_response(
     return;
   }
 
-  int16_t userid = {};
+  uint16_t userid = {};
   DrlkUserType user_type = {};
 
 
@@ -30576,7 +30576,7 @@ void uic_mqtt_dotdot_on_door_lock_set_rfid_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
   DrlkSettableUserStatus user_status = {};
   DrlkUserType user_type = {};
   std::string rfid_code;
@@ -30650,7 +30650,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_set_rfid_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
   DrlkSettableUserStatus user_status = {};
   DrlkUserType user_type = {};
   std::string rfid_code;
@@ -30844,7 +30844,7 @@ void uic_mqtt_dotdot_on_door_lock_get_rfid_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -30903,7 +30903,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_rfid_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -30963,7 +30963,7 @@ void uic_mqtt_dotdot_on_door_lock_get_rfid_code_response(
     return;
   }
 
-  int16_t userid = {};
+  uint16_t userid = {};
   DrlkUserStatus user_status = {};
   DrlkUserType user_type = {};
   std::string rfid_code;
@@ -31037,7 +31037,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_rfid_code_response(
     return;
   }
 
-  int16_t userid = {};
+  uint16_t userid = {};
   DrlkUserStatus user_status = {};
   DrlkUserType user_type = {};
   std::string rfid_code;
@@ -31112,7 +31112,7 @@ void uic_mqtt_dotdot_on_door_lock_clear_rfid_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -31171,7 +31171,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_clear_rfid_code(
     return;
   }
 
-  uint8_t * userid = {};
+  uint16_t userid = {};
 
 
   nlohmann::json jsn;
@@ -31573,9 +31573,9 @@ void uic_mqtt_dotdot_on_door_lock_set_user(
   }
 
   DataOperationTypeEnum operation_type = {};
-  int16_t user_index = {};
+  uint16_t user_index = {};
   std::string user_name;
-  int32_t user_uniqueid = {};
+  uint32_t user_uniqueid = {};
   DrlkSettableUserStatus user_status = {};
   DrlkUserType user_type = {};
   CredentialRuleEnum credential_rule = {};
@@ -31662,9 +31662,9 @@ static void uic_mqtt_dotdot_on_generated_door_lock_set_user(
   }
 
   DataOperationTypeEnum operation_type = {};
-  int16_t user_index = {};
+  uint16_t user_index = {};
   std::string user_name;
-  int32_t user_uniqueid = {};
+  uint32_t user_uniqueid = {};
   DrlkSettableUserStatus user_status = {};
   DrlkUserType user_type = {};
   CredentialRuleEnum credential_rule = {};
@@ -31751,7 +31751,7 @@ void uic_mqtt_dotdot_on_door_lock_get_user(
     return;
   }
 
-  int16_t user_index = {};
+  uint16_t user_index = {};
 
 
   nlohmann::json jsn;
@@ -31810,7 +31810,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_get_user(
     return;
   }
 
-  int16_t user_index = {};
+  uint16_t user_index = {};
 
 
   nlohmann::json jsn;
@@ -31973,7 +31973,7 @@ void uic_mqtt_dotdot_on_door_lock_clear_user(
     return;
   }
 
-  int16_t user_index = {};
+  uint16_t user_index = {};
 
 
   nlohmann::json jsn;
@@ -32032,7 +32032,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_clear_user(
     return;
   }
 
-  int16_t user_index = {};
+  uint16_t user_index = {};
 
 
   nlohmann::json jsn;
@@ -32094,9 +32094,9 @@ void uic_mqtt_dotdot_on_door_lock_operating_event_notification(
 
   DrlkOperEventSource operation_event_source = {};
   OperatingEventNotificationOperationEventCode operation_event_code = {};
-  int16_t userid = {};
+  uint16_t userid = {};
   std::string pin;
-  int32_t local_time = {};
+  uint32_t local_time = {};
   std::string data;
 
 
@@ -32178,9 +32178,9 @@ static void uic_mqtt_dotdot_on_generated_door_lock_operating_event_notification(
 
   DrlkOperEventSource operation_event_source = {};
   OperatingEventNotificationOperationEventCode operation_event_code = {};
-  int16_t userid = {};
+  uint16_t userid = {};
   std::string pin;
-  int32_t local_time = {};
+  uint32_t local_time = {};
   std::string data;
 
 
@@ -32263,11 +32263,11 @@ void uic_mqtt_dotdot_on_door_lock_programming_event_notification(
 
   ProgrammingEventNotificationProgramEventSource program_event_source = {};
   ProgrammingEventNotificationProgramEventCode program_event_code = {};
-  int16_t userid = {};
+  uint16_t userid = {};
   std::string pin;
   DrlkUserType user_type = {};
   DrlkUserStatus user_status = {};
-  int32_t local_time = {};
+  uint32_t local_time = {};
   std::string data;
 
 
@@ -32357,11 +32357,11 @@ static void uic_mqtt_dotdot_on_generated_door_lock_programming_event_notificatio
 
   ProgrammingEventNotificationProgramEventSource program_event_source = {};
   ProgrammingEventNotificationProgramEventCode program_event_code = {};
-  int16_t userid = {};
+  uint16_t userid = {};
   std::string pin;
   DrlkUserType user_type = {};
   DrlkUserStatus user_status = {};
-  int32_t local_time = {};
+  uint32_t local_time = {};
   std::string data;
 
 
@@ -32453,7 +32453,7 @@ void uic_mqtt_dotdot_on_door_lock_set_credential(
   DataOperationTypeEnum operation_type = {};
   CredentialStruct credential = {};
   std::string credential_data;
-  int16_t user_index = {};
+  uint16_t user_index = {};
   DrlkSettableUserStatus user_status = {};
   DrlkUserType user_type = {};
 
@@ -32537,7 +32537,7 @@ static void uic_mqtt_dotdot_on_generated_door_lock_set_credential(
   DataOperationTypeEnum operation_type = {};
   CredentialStruct credential = {};
   std::string credential_data;
-  int16_t user_index = {};
+  uint16_t user_index = {};
   DrlkSettableUserStatus user_status = {};
   DrlkUserType user_type = {};
 
@@ -33669,7 +33669,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_door_state_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_door_open_events_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -33739,7 +33739,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_door_open_events_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_door_closed_events_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -33809,7 +33809,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_door_closed_events_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_open_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -33879,7 +33879,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_open_period_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_log_records_supported_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -33949,7 +33949,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_log_records_supported_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_total_users_supported_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34019,7 +34019,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_total_users_supported_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_pin_users_supported_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34089,7 +34089,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_pin_users_supported_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_rfid_users_supported_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34159,7 +34159,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_rfid_users_supported_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_week_day_schedules_supported_per_user_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34229,7 +34229,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_week_day_schedules_supported_per
 
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_year_day_schedules_supported_per_user_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34299,7 +34299,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_year_day_schedules_supported_per
 
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_holiday_schedules_supported_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34369,7 +34369,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_number_of_holiday_schedules_supported_unre
 
 sl_status_t uic_mqtt_dotdot_door_lock_max_pin_code_length_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34439,7 +34439,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_max_pin_code_length_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_min_pin_code_length_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34509,7 +34509,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_min_pin_code_length_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_max_rfid_code_length_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34579,7 +34579,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_max_rfid_code_length_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_min_rfid_code_length_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34718,7 +34718,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_credential_rules_support_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_number_of_credentials_supported_per_user_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34924,7 +34924,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_language_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_led_settings_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -34994,7 +34994,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_led_settings_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_auto_relock_time_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -35064,7 +35064,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_auto_relock_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_sound_volume_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -35694,7 +35694,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_local_programming_features_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_wrong_code_entry_limit_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -35764,7 +35764,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_wrong_code_entry_limit_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_user_code_temporary_disable_time_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -36047,7 +36047,7 @@ sl_status_t uic_mqtt_dotdot_door_lock_security_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_door_lock_expiring_user_timeout_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -37890,7 +37890,7 @@ void uic_mqtt_dotdot_on_window_covering_go_to_lift_value(
     return;
   }
 
-  int16_t lift_value = {};
+  uint16_t lift_value = {};
 
 
   nlohmann::json jsn;
@@ -37949,7 +37949,7 @@ static void uic_mqtt_dotdot_on_generated_window_covering_go_to_lift_value(
     return;
   }
 
-  int16_t lift_value = {};
+  uint16_t lift_value = {};
 
 
   nlohmann::json jsn;
@@ -38009,7 +38009,7 @@ void uic_mqtt_dotdot_on_window_covering_go_to_lift_percentage(
     return;
   }
 
-  int8_t percentage_lift_value = {};
+  uint8_t percentage_lift_value = {};
 
 
   nlohmann::json jsn;
@@ -38068,7 +38068,7 @@ static void uic_mqtt_dotdot_on_generated_window_covering_go_to_lift_percentage(
     return;
   }
 
-  int8_t percentage_lift_value = {};
+  uint8_t percentage_lift_value = {};
 
 
   nlohmann::json jsn;
@@ -38128,7 +38128,7 @@ void uic_mqtt_dotdot_on_window_covering_go_to_tilt_value(
     return;
   }
 
-  int16_t tilt_value = {};
+  uint16_t tilt_value = {};
 
 
   nlohmann::json jsn;
@@ -38187,7 +38187,7 @@ static void uic_mqtt_dotdot_on_generated_window_covering_go_to_tilt_value(
     return;
   }
 
-  int16_t tilt_value = {};
+  uint16_t tilt_value = {};
 
 
   nlohmann::json jsn;
@@ -38247,7 +38247,7 @@ void uic_mqtt_dotdot_on_window_covering_go_to_tilt_percentage(
     return;
   }
 
-  int8_t percentage_tilt_value = {};
+  uint8_t percentage_tilt_value = {};
 
 
   nlohmann::json jsn;
@@ -38306,7 +38306,7 @@ static void uic_mqtt_dotdot_on_generated_window_covering_go_to_tilt_percentage(
     return;
   }
 
-  int8_t percentage_tilt_value = {};
+  uint8_t percentage_tilt_value = {};
 
 
   nlohmann::json jsn;
@@ -38581,7 +38581,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_window_covering_type_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -38651,7 +38651,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_lift_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -38721,7 +38721,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_tilt_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -38791,7 +38791,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -38861,7 +38861,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -38931,7 +38931,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_lift_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39070,7 +39070,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_config_or_status_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_percentage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39140,7 +39140,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_percentage_unr
 
 sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_percentage_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39210,7 +39210,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_percentage_unr
 
 sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39280,7 +39280,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_lift_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39350,7 +39350,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_lift_unretain
 
 sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39420,7 +39420,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_tilt_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_tilt_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39490,7 +39490,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_tilt_unretain
 
 sl_status_t uic_mqtt_dotdot_window_covering_velocity_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39560,7 +39560,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_velocity_lift_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_acceleration_time_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39630,7 +39630,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_acceleration_time_lift_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_deceleration_time_lift_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39769,7 +39769,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_mode_unretain(
 
 sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_lift_publish(
   const char *base_topic,
-  uint8_t value,
+  const char* value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -39835,7 +39835,7 @@ sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_lift_unretain
 
 sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_tilt_publish(
   const char *base_topic,
-  uint8_t value,
+  const char* value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -40113,7 +40113,7 @@ void uic_mqtt_dotdot_on_barrier_control_go_to_percent(
     return;
   }
 
-  int8_t percent_open = {};
+  uint8_t percent_open = {};
 
 
   nlohmann::json jsn;
@@ -40172,7 +40172,7 @@ static void uic_mqtt_dotdot_on_generated_barrier_control_go_to_percent(
     return;
   }
 
-  int8_t percent_open = {};
+  uint8_t percent_open = {};
 
 
   nlohmann::json jsn;
@@ -40668,7 +40668,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_capabilities_unretain(
 
 sl_status_t uic_mqtt_dotdot_barrier_control_open_events_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -40738,7 +40738,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_open_events_unretain(
 
 sl_status_t uic_mqtt_dotdot_barrier_control_close_events_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -40808,7 +40808,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_close_events_unretain(
 
 sl_status_t uic_mqtt_dotdot_barrier_control_command_open_events_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -40878,7 +40878,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_command_open_events_unretain(
 
 sl_status_t uic_mqtt_dotdot_barrier_control_command_close_events_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -40948,7 +40948,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_command_close_events_unretain(
 
 sl_status_t uic_mqtt_dotdot_barrier_control_open_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -41018,7 +41018,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_open_period_unretain(
 
 sl_status_t uic_mqtt_dotdot_barrier_control_close_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -41088,7 +41088,7 @@ sl_status_t uic_mqtt_dotdot_barrier_control_close_period_unretain(
 
 sl_status_t uic_mqtt_dotdot_barrier_control_barrier_position_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -41480,7 +41480,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_pressure_unretain
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_speed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -41550,7 +41550,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_speed_unretain(
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_flow_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -41900,7 +41900,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_comp_pressure_unr
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_speed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -41970,7 +41970,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_speed_unret
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_speed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -42040,7 +42040,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_speed_unret
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_flow_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -42110,7 +42110,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_flow_unreta
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_flow_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -42605,7 +42605,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_capacity_unretain(
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_speed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -42675,7 +42675,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_speed_unretain(
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_running_hours_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -42745,7 +42745,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_running_hour
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_power_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -42815,7 +42815,7 @@ sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_power_unretain(
 
 sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_energy_consumed_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -43862,12 +43862,12 @@ void uic_mqtt_dotdot_on_thermostat_get_relay_status_log_response(
     return;
   }
 
-  int16_t time_of_day = {};
+  uint16_t time_of_day = {};
   uint8_t relay_status = {};
   int16_t local_temperature = {};
-  int8_t humidity_percentage = {};
+  uint8_t humidity_percentage = {};
   int16_t set_point = {};
-  int16_t unread_entries = {};
+  uint16_t unread_entries = {};
 
 
   nlohmann::json jsn;
@@ -43946,12 +43946,12 @@ static void uic_mqtt_dotdot_on_generated_thermostat_get_relay_status_log_respons
     return;
   }
 
-  int16_t time_of_day = {};
+  uint16_t time_of_day = {};
   uint8_t relay_status = {};
   int16_t local_temperature = {};
-  int8_t humidity_percentage = {};
+  uint8_t humidity_percentage = {};
   int16_t set_point = {};
-  int16_t unread_entries = {};
+  uint16_t unread_entries = {};
 
 
   nlohmann::json jsn;
@@ -45057,7 +45057,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_abs_max_cool_setpoint_limit_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_pi_cooling_demand_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -45127,7 +45127,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_pi_cooling_demand_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_pi_heating_demand_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -46396,7 +46396,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_start_of_week_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_number_of_weekly_transitions_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -46466,7 +46466,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_number_of_weekly_transitions_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_number_of_daily_transitions_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -46609,7 +46609,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_duration_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -46960,7 +46960,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_amount_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_source_timestamp_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -47030,7 +47030,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_source_timestamp_unretain
 
 sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -47100,7 +47100,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_min_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -47170,7 +47170,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_min_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_max_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -47240,7 +47240,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_max_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -47310,7 +47310,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_min_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -47380,7 +47380,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_min_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_max_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -47450,7 +47450,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_max_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_emergency_heat_delta_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -47593,7 +47593,7 @@ sl_status_t uic_mqtt_dotdot_thermostat_ac_type_unretain(
 
 sl_status_t uic_mqtt_dotdot_thermostat_ac_capacity_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -48692,7 +48692,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -48762,7 +48762,7 @@ sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_unretain(
 
 sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_cooling_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -48832,7 +48832,7 @@ sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_cooling_un
 
 sl_status_t uic_mqtt_dotdot_dehumidification_control_rh_dehumidification_setpoint_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -49048,7 +49048,7 @@ sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_lockout_un
 
 sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_hysteresis_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -49118,7 +49118,7 @@ sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_hysteresis
 
 sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_max_cool_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -50425,9 +50425,9 @@ void uic_mqtt_dotdot_on_color_control_move_to_hue(
     return;
   }
 
-  int8_t hue = {};
+  uint8_t hue = {};
   CCDirection direction = {};
-  int16_t transition_time = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -50504,9 +50504,9 @@ static void uic_mqtt_dotdot_on_generated_color_control_move_to_hue(
     return;
   }
 
-  int8_t hue = {};
+  uint8_t hue = {};
   CCDirection direction = {};
-  int16_t transition_time = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -50585,7 +50585,7 @@ void uic_mqtt_dotdot_on_color_control_move_hue(
   }
 
   CCMoveMode move_mode = {};
-  int8_t rate = {};
+  uint8_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -50659,7 +50659,7 @@ static void uic_mqtt_dotdot_on_generated_color_control_move_hue(
   }
 
   CCMoveMode move_mode = {};
-  int8_t rate = {};
+  uint8_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -50734,8 +50734,8 @@ void uic_mqtt_dotdot_on_color_control_step_hue(
   }
 
   CCStepMode step_mode = {};
-  int8_t step_size = {};
-  int8_t transition_time = {};
+  uint8_t step_size = {};
+  uint8_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -50813,8 +50813,8 @@ static void uic_mqtt_dotdot_on_generated_color_control_step_hue(
   }
 
   CCStepMode step_mode = {};
-  int8_t step_size = {};
-  int8_t transition_time = {};
+  uint8_t step_size = {};
+  uint8_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -50892,8 +50892,8 @@ void uic_mqtt_dotdot_on_color_control_move_to_saturation(
     return;
   }
 
-  int8_t saturation = {};
-  int16_t transition_time = {};
+  uint8_t saturation = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -50966,8 +50966,8 @@ static void uic_mqtt_dotdot_on_generated_color_control_move_to_saturation(
     return;
   }
 
-  int8_t saturation = {};
-  int16_t transition_time = {};
+  uint8_t saturation = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51042,7 +51042,7 @@ void uic_mqtt_dotdot_on_color_control_move_saturation(
   }
 
   CCMoveMode move_mode = {};
-  int8_t rate = {};
+  uint8_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51116,7 +51116,7 @@ static void uic_mqtt_dotdot_on_generated_color_control_move_saturation(
   }
 
   CCMoveMode move_mode = {};
-  int8_t rate = {};
+  uint8_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51191,8 +51191,8 @@ void uic_mqtt_dotdot_on_color_control_step_saturation(
   }
 
   CCStepMode step_mode = {};
-  int8_t step_size = {};
-  int8_t transition_time = {};
+  uint8_t step_size = {};
+  uint8_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51270,8 +51270,8 @@ static void uic_mqtt_dotdot_on_generated_color_control_step_saturation(
   }
 
   CCStepMode step_mode = {};
-  int8_t step_size = {};
-  int8_t transition_time = {};
+  uint8_t step_size = {};
+  uint8_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51349,9 +51349,9 @@ void uic_mqtt_dotdot_on_color_control_move_to_hue_and_saturation(
     return;
   }
 
-  int8_t hue = {};
-  int8_t saturation = {};
-  int16_t transition_time = {};
+  uint8_t hue = {};
+  uint8_t saturation = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51428,9 +51428,9 @@ static void uic_mqtt_dotdot_on_generated_color_control_move_to_hue_and_saturatio
     return;
   }
 
-  int8_t hue = {};
-  int8_t saturation = {};
-  int16_t transition_time = {};
+  uint8_t hue = {};
+  uint8_t saturation = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51508,9 +51508,9 @@ void uic_mqtt_dotdot_on_color_control_move_to_color(
     return;
   }
 
-  int16_t colorx = {};
-  int16_t colory = {};
-  int16_t transition_time = {};
+  uint16_t colorx = {};
+  uint16_t colory = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51587,9 +51587,9 @@ static void uic_mqtt_dotdot_on_generated_color_control_move_to_color(
     return;
   }
 
-  int16_t colorx = {};
-  int16_t colory = {};
-  int16_t transition_time = {};
+  uint16_t colorx = {};
+  uint16_t colory = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51818,7 +51818,7 @@ void uic_mqtt_dotdot_on_color_control_step_color(
 
   int16_t stepx = {};
   int16_t stepy = {};
-  int16_t transition_time = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51897,7 +51897,7 @@ static void uic_mqtt_dotdot_on_generated_color_control_step_color(
 
   int16_t stepx = {};
   int16_t stepy = {};
-  int16_t transition_time = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -51975,8 +51975,8 @@ void uic_mqtt_dotdot_on_color_control_move_to_color_temperature(
     return;
   }
 
-  int16_t color_temperature_mireds = {};
-  int16_t transition_time = {};
+  uint16_t color_temperature_mireds = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52049,8 +52049,8 @@ static void uic_mqtt_dotdot_on_generated_color_control_move_to_color_temperature
     return;
   }
 
-  int16_t color_temperature_mireds = {};
-  int16_t transition_time = {};
+  uint16_t color_temperature_mireds = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52124,9 +52124,9 @@ void uic_mqtt_dotdot_on_color_control_enhanced_move_to_hue(
     return;
   }
 
-  int16_t enhanced_hue = {};
+  uint16_t enhanced_hue = {};
   CCDirection direction = {};
-  int16_t transition_time = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52203,9 +52203,9 @@ static void uic_mqtt_dotdot_on_generated_color_control_enhanced_move_to_hue(
     return;
   }
 
-  int16_t enhanced_hue = {};
+  uint16_t enhanced_hue = {};
   CCDirection direction = {};
-  int16_t transition_time = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52284,7 +52284,7 @@ void uic_mqtt_dotdot_on_color_control_enhanced_move_hue(
   }
 
   CCMoveMode move_mode = {};
-  int16_t rate = {};
+  uint16_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52358,7 +52358,7 @@ static void uic_mqtt_dotdot_on_generated_color_control_enhanced_move_hue(
   }
 
   CCMoveMode move_mode = {};
-  int16_t rate = {};
+  uint16_t rate = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52433,8 +52433,8 @@ void uic_mqtt_dotdot_on_color_control_enhanced_step_hue(
   }
 
   CCStepMode step_mode = {};
-  int16_t step_size = {};
-  int16_t transition_time = {};
+  uint16_t step_size = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52512,8 +52512,8 @@ static void uic_mqtt_dotdot_on_generated_color_control_enhanced_step_hue(
   }
 
   CCStepMode step_mode = {};
-  int16_t step_size = {};
-  int16_t transition_time = {};
+  uint16_t step_size = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52591,9 +52591,9 @@ void uic_mqtt_dotdot_on_color_control_enhanced_move_to_hue_and_saturation(
     return;
   }
 
-  int16_t enhanced_hue = {};
-  int8_t saturation = {};
-  int16_t transition_time = {};
+  uint16_t enhanced_hue = {};
+  uint8_t saturation = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52670,9 +52670,9 @@ static void uic_mqtt_dotdot_on_generated_color_control_enhanced_move_to_hue_and_
     return;
   }
 
-  int16_t enhanced_hue = {};
-  int8_t saturation = {};
-  int16_t transition_time = {};
+  uint16_t enhanced_hue = {};
+  uint8_t saturation = {};
+  uint16_t transition_time = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52753,8 +52753,8 @@ void uic_mqtt_dotdot_on_color_control_color_loop_set(
   uint8_t update_flags = {};
   ColorLoopSetAction action = {};
   CCColorLoopDirection direction = {};
-  int16_t time = {};
-  int16_t start_hue = {};
+  uint16_t time = {};
+  uint16_t start_hue = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -52842,8 +52842,8 @@ static void uic_mqtt_dotdot_on_generated_color_control_color_loop_set(
   uint8_t update_flags = {};
   ColorLoopSetAction action = {};
   CCColorLoopDirection direction = {};
-  int16_t time = {};
-  int16_t start_hue = {};
+  uint16_t time = {};
+  uint16_t start_hue = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -53059,9 +53059,9 @@ void uic_mqtt_dotdot_on_color_control_move_color_temperature(
   }
 
   CCMoveMode move_mode = {};
-  int16_t rate = {};
-  uint8_t * color_temperature_minimum_mireds = {};
-  uint8_t * color_temperature_maximum_mireds = {};
+  uint16_t rate = {};
+  uint16_t color_temperature_minimum_mireds = {};
+  uint16_t color_temperature_maximum_mireds = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -53143,9 +53143,9 @@ static void uic_mqtt_dotdot_on_generated_color_control_move_color_temperature(
   }
 
   CCMoveMode move_mode = {};
-  int16_t rate = {};
-  uint8_t * color_temperature_minimum_mireds = {};
-  uint8_t * color_temperature_maximum_mireds = {};
+  uint16_t rate = {};
+  uint16_t color_temperature_minimum_mireds = {};
+  uint16_t color_temperature_maximum_mireds = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -53228,10 +53228,10 @@ void uic_mqtt_dotdot_on_color_control_step_color_temperature(
   }
 
   CCStepMode step_mode = {};
-  int16_t step_size = {};
-  int16_t transition_time = {};
-  uint8_t * color_temperature_minimum_mireds = {};
-  uint8_t * color_temperature_maximum_mireds = {};
+  uint16_t step_size = {};
+  uint16_t transition_time = {};
+  uint16_t color_temperature_minimum_mireds = {};
+  uint16_t color_temperature_maximum_mireds = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -53317,10 +53317,10 @@ static void uic_mqtt_dotdot_on_generated_color_control_step_color_temperature(
   }
 
   CCStepMode step_mode = {};
-  int16_t step_size = {};
-  int16_t transition_time = {};
-  uint8_t * color_temperature_minimum_mireds = {};
-  uint8_t * color_temperature_maximum_mireds = {};
+  uint16_t step_size = {};
+  uint16_t transition_time = {};
+  uint16_t color_temperature_minimum_mireds = {};
+  uint16_t color_temperature_maximum_mireds = {};
   uint8_t options_mask = {};
   uint8_t options_override = {};
 
@@ -53612,7 +53612,7 @@ static void uic_mqtt_dotdot_on_color_control_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_color_control_current_hue_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -53682,7 +53682,7 @@ sl_status_t uic_mqtt_dotdot_color_control_current_hue_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_current_saturation_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -53752,7 +53752,7 @@ sl_status_t uic_mqtt_dotdot_color_control_current_saturation_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_remaining_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -53822,7 +53822,7 @@ sl_status_t uic_mqtt_dotdot_color_control_remaining_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_currentx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -53892,7 +53892,7 @@ sl_status_t uic_mqtt_dotdot_color_control_currentx_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_currenty_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54101,7 +54101,7 @@ sl_status_t uic_mqtt_dotdot_color_control_compensation_text_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_temperature_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54313,7 +54313,7 @@ sl_status_t uic_mqtt_dotdot_color_control_options_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_number_of_primaries_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54383,7 +54383,7 @@ sl_status_t uic_mqtt_dotdot_color_control_number_of_primaries_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary1x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54453,7 +54453,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary1x_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary1y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54523,7 +54523,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary1y_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary1_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54593,7 +54593,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary1_intensity_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary2x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54663,7 +54663,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary2x_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary2y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54733,7 +54733,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary2y_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary2_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54803,7 +54803,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary2_intensity_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary3x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54873,7 +54873,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary3x_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary3y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -54943,7 +54943,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary3y_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary3_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55013,7 +55013,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary3_intensity_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary4x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55083,7 +55083,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary4x_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary4y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55153,7 +55153,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary4y_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary4_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55223,7 +55223,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary4_intensity_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary5x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55293,7 +55293,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary5x_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary5y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55363,7 +55363,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary5y_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary5_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55433,7 +55433,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary5_intensity_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary6x_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55503,7 +55503,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary6x_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary6y_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55573,7 +55573,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary6y_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_primary6_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55643,7 +55643,7 @@ sl_status_t uic_mqtt_dotdot_color_control_primary6_intensity_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_white_pointx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55713,7 +55713,7 @@ sl_status_t uic_mqtt_dotdot_color_control_white_pointx_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_white_pointy_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55783,7 +55783,7 @@ sl_status_t uic_mqtt_dotdot_color_control_white_pointy_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_pointrx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55853,7 +55853,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointrx_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_pointry_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55923,7 +55923,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointry_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_pointr_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -55993,7 +55993,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointr_intensity_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_pointgx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56063,7 +56063,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointgx_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_pointgy_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56133,7 +56133,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointgy_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_pointg_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56203,7 +56203,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointg_intensity_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_pointbx_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56273,7 +56273,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointbx_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_pointby_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56343,7 +56343,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointby_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_pointb_intensity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56413,7 +56413,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_pointb_intensity_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_enhanced_current_hue_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56556,7 +56556,7 @@ sl_status_t uic_mqtt_dotdot_color_control_enhanced_color_mode_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_active_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56626,7 +56626,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_loop_active_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_direction_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56696,7 +56696,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_loop_direction_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56766,7 +56766,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_loop_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_start_enhanced_hue_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56836,7 +56836,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_loop_start_enhanced_hue_unretain
 
 sl_status_t uic_mqtt_dotdot_color_control_color_loop_stored_enhanced_hue_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -56975,7 +56975,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_capabilities_unretain(
 
 sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_min_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -57045,7 +57045,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_min_mireds_unretai
 
 sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_max_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -57115,7 +57115,7 @@ sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_max_mireds_unretai
 
 sl_status_t uic_mqtt_dotdot_color_control_couple_color_temp_to_level_min_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -57185,7 +57185,7 @@ sl_status_t uic_mqtt_dotdot_color_control_couple_color_temp_to_level_min_mireds_
 
 sl_status_t uic_mqtt_dotdot_color_control_start_up_color_temperature_mireds_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -57627,7 +57627,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_min_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -57697,7 +57697,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_min_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_max_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -57836,7 +57836,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_status_unretain(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_min_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -57906,7 +57906,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_min_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_max_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -57976,7 +57976,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_max_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -58046,7 +58046,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_fade_time_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -58116,7 +58116,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_fade_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_intrinsic_ballast_factor_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -58186,7 +58186,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_intrinsic_ballast_factor_unret
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_factor_adjustment_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -58256,7 +58256,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_factor_adjustment_unre
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_quantity_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -58458,7 +58458,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_manufacturer_unretain(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_rated_hours_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -58528,7 +58528,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_rated_hours_unretain(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -58667,7 +58667,7 @@ sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_alarm_mode_unretain(
 
 sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_trip_point_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -58935,7 +58935,7 @@ static void uic_mqtt_dotdot_on_illuminance_measurement_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_illuminance_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -59005,7 +59005,7 @@ sl_status_t uic_mqtt_dotdot_illuminance_measurement_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_illuminance_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -59075,7 +59075,7 @@ sl_status_t uic_mqtt_dotdot_illuminance_measurement_min_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_illuminance_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -59145,7 +59145,7 @@ sl_status_t uic_mqtt_dotdot_illuminance_measurement_max_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_illuminance_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -59628,7 +59628,7 @@ sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_light_sensor_type_unretain
 
 sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_illuminance_target_level_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -60104,7 +60104,7 @@ sl_status_t uic_mqtt_dotdot_temperature_measurement_max_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_temperature_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -60590,7 +60590,7 @@ sl_status_t uic_mqtt_dotdot_pressure_measurement_max_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_pressure_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -60870,7 +60870,7 @@ sl_status_t uic_mqtt_dotdot_pressure_measurement_max_scaled_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_pressure_measurement_scaled_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -61206,7 +61206,7 @@ static void uic_mqtt_dotdot_on_flow_measurement_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_flow_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -61276,7 +61276,7 @@ sl_status_t uic_mqtt_dotdot_flow_measurement_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_flow_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -61346,7 +61346,7 @@ sl_status_t uic_mqtt_dotdot_flow_measurement_min_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_flow_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -61416,7 +61416,7 @@ sl_status_t uic_mqtt_dotdot_flow_measurement_max_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_flow_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -61682,7 +61682,7 @@ static void uic_mqtt_dotdot_on_relativity_humidity_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_relativity_humidity_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -61752,7 +61752,7 @@ sl_status_t uic_mqtt_dotdot_relativity_humidity_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_relativity_humidity_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -61822,7 +61822,7 @@ sl_status_t uic_mqtt_dotdot_relativity_humidity_min_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_relativity_humidity_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -61892,7 +61892,7 @@ sl_status_t uic_mqtt_dotdot_relativity_humidity_max_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_relativity_humidity_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -62385,7 +62385,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_unret
 
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -62455,7 +62455,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_u
 
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -62525,7 +62525,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_u
 
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -62595,7 +62595,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_thresho
 
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -62665,7 +62665,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_
 
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -62735,7 +62735,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_
 
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -62805,7 +62805,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_
 
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -62875,7 +62875,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_occupied_to_unocc
 
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -62945,7 +62945,7 @@ sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occ
 
 sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -63211,7 +63211,7 @@ static void uic_mqtt_dotdot_on_soil_moisture_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_soil_moisture_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -63281,7 +63281,7 @@ sl_status_t uic_mqtt_dotdot_soil_moisture_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_soil_moisture_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -63351,7 +63351,7 @@ sl_status_t uic_mqtt_dotdot_soil_moisture_min_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_soil_moisture_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -63421,7 +63421,7 @@ sl_status_t uic_mqtt_dotdot_soil_moisture_max_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_soil_moisture_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -63687,7 +63687,7 @@ static void uic_mqtt_dotdot_on_ph_measurement_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_ph_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -63757,7 +63757,7 @@ sl_status_t uic_mqtt_dotdot_ph_measurement_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_ph_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -63827,7 +63827,7 @@ sl_status_t uic_mqtt_dotdot_ph_measurement_min_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_ph_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -63897,7 +63897,7 @@ sl_status_t uic_mqtt_dotdot_ph_measurement_max_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_ph_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -64163,7 +64163,7 @@ static void uic_mqtt_dotdot_on_electrical_conductivity_measurement_force_read_at
 
 sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -64233,7 +64233,7 @@ sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_measured_value_u
 
 sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -64303,7 +64303,7 @@ sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_min_measured_val
 
 sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -64373,7 +64373,7 @@ sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_max_measured_val
 
 sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -64639,7 +64639,7 @@ static void uic_mqtt_dotdot_on_wind_speed_measurement_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_wind_speed_measurement_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -64709,7 +64709,7 @@ sl_status_t uic_mqtt_dotdot_wind_speed_measurement_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_wind_speed_measurement_min_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -64779,7 +64779,7 @@ sl_status_t uic_mqtt_dotdot_wind_speed_measurement_min_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_wind_speed_measurement_max_measured_value_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -64849,7 +64849,7 @@ sl_status_t uic_mqtt_dotdot_wind_speed_measurement_max_measured_value_unretain(
 
 sl_status_t uic_mqtt_dotdot_wind_speed_measurement_tolerance_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -66609,7 +66609,7 @@ void uic_mqtt_dotdot_on_ias_zone_zone_enroll_response(
   }
 
   ZoneEnrollResponseEnrollResponseCode enroll_response_code = {};
-  int8_t zoneid = {};
+  uint8_t zoneid = {};
 
 
   nlohmann::json jsn;
@@ -66673,7 +66673,7 @@ static void uic_mqtt_dotdot_on_generated_ias_zone_zone_enroll_response(
   }
 
   ZoneEnrollResponseEnrollResponseCode enroll_response_code = {};
-  int8_t zoneid = {};
+  uint8_t zoneid = {};
 
 
   nlohmann::json jsn;
@@ -66739,8 +66739,8 @@ void uic_mqtt_dotdot_on_ias_zone_zone_status_change_notification(
 
   uint16_t zone_status = {};
   uint8_t extended_status = {};
-  int8_t zoneid = {};
-  int16_t delay = {};
+  uint8_t zoneid = {};
+  uint16_t delay = {};
 
 
   nlohmann::json jsn;
@@ -66813,8 +66813,8 @@ static void uic_mqtt_dotdot_on_generated_ias_zone_zone_status_change_notificatio
 
   uint16_t zone_status = {};
   uint8_t extended_status = {};
-  int8_t zoneid = {};
-  int16_t delay = {};
+  uint8_t zoneid = {};
+  uint16_t delay = {};
 
 
   nlohmann::json jsn;
@@ -66990,7 +66990,7 @@ void uic_mqtt_dotdot_on_ias_zone_zone_enroll_request(
   }
 
   IasZoneType zone_type = {};
-  int16_t manufacturer_code = {};
+  uint16_t manufacturer_code = {};
 
 
   nlohmann::json jsn;
@@ -67054,7 +67054,7 @@ static void uic_mqtt_dotdot_on_generated_ias_zone_zone_enroll_request(
   }
 
   IasZoneType zone_type = {};
-  int16_t manufacturer_code = {};
+  uint16_t manufacturer_code = {};
 
 
   nlohmann::json jsn;
@@ -67118,8 +67118,8 @@ void uic_mqtt_dotdot_on_ias_zone_initiate_test_mode(
     return;
   }
 
-  int8_t test_mode_duration = {};
-  int8_t current_zone_sensitivity_level = {};
+  uint8_t test_mode_duration = {};
+  uint8_t current_zone_sensitivity_level = {};
 
 
   nlohmann::json jsn;
@@ -67182,8 +67182,8 @@ static void uic_mqtt_dotdot_on_generated_ias_zone_initiate_test_mode(
     return;
   }
 
-  int8_t test_mode_duration = {};
-  int8_t current_zone_sensitivity_level = {};
+  uint8_t test_mode_duration = {};
+  uint8_t current_zone_sensitivity_level = {};
 
 
   nlohmann::json jsn;
@@ -67648,7 +67648,7 @@ sl_status_t uic_mqtt_dotdot_ias_zone_iascie_address_unretain(
 
 sl_status_t uic_mqtt_dotdot_ias_zone_zoneid_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -67718,7 +67718,7 @@ sl_status_t uic_mqtt_dotdot_ias_zone_zoneid_unretain(
 
 sl_status_t uic_mqtt_dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -67788,7 +67788,7 @@ sl_status_t uic_mqtt_dotdot_ias_zone_number_of_zone_sensitivity_levels_supported
 
 sl_status_t uic_mqtt_dotdot_ias_zone_current_zone_sensitivity_level_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -68055,8 +68055,8 @@ void uic_mqtt_dotdot_on_iaswd_start_warning(
   }
 
   uint8_t siren_configuration = {};
-  int16_t warning_duration = {};
-  int8_t strobe_duty_cycle = {};
+  uint16_t warning_duration = {};
+  uint8_t strobe_duty_cycle = {};
   IaswdLevel strobe_level = {};
 
 
@@ -68129,8 +68129,8 @@ static void uic_mqtt_dotdot_on_generated_iaswd_start_warning(
   }
 
   uint8_t siren_configuration = {};
-  int16_t warning_duration = {};
-  int8_t strobe_duty_cycle = {};
+  uint16_t warning_duration = {};
+  uint8_t strobe_duty_cycle = {};
   IaswdLevel strobe_level = {};
 
 
@@ -68426,7 +68426,7 @@ static void uic_mqtt_dotdot_on_iaswd_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_iaswd_max_duration_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -68752,7 +68752,7 @@ static void uic_mqtt_dotdot_on_metering_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_metering_current_summation_delivered_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -68822,7 +68822,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_summation_delivered_unretain(
 
 sl_status_t uic_mqtt_dotdot_metering_current_summation_received_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -68892,7 +68892,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_summation_received_unretain(
 
 sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -69102,7 +69102,7 @@ sl_status_t uic_mqtt_dotdot_metering_power_factor_unretain(
 
 sl_status_t uic_mqtt_dotdot_metering_reading_snap_shot_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -69172,7 +69172,7 @@ sl_status_t uic_mqtt_dotdot_metering_reading_snap_shot_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -69242,7 +69242,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_metering_current_max_demand_received_time_publish(
   const char *base_topic,
-  uint8_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -69312,7 +69312,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_max_demand_received_time_unretain(
 
 sl_status_t uic_mqtt_dotdot_metering_default_update_period_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -69455,7 +69455,7 @@ sl_status_t uic_mqtt_dotdot_metering_supply_status_unretain(
 
 sl_status_t uic_mqtt_dotdot_metering_current_inlet_energy_carrier_summation_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -69525,7 +69525,7 @@ sl_status_t uic_mqtt_dotdot_metering_current_inlet_energy_carrier_summation_unre
 
 sl_status_t uic_mqtt_dotdot_metering_current_outlet_energy_carrier_summation_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -69808,7 +69808,7 @@ sl_status_t uic_mqtt_dotdot_metering_unitof_measure_unretain(
 
 sl_status_t uic_mqtt_dotdot_metering_multiplier_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -69878,7 +69878,7 @@ sl_status_t uic_mqtt_dotdot_metering_multiplier_unretain(
 
 sl_status_t uic_mqtt_dotdot_metering_divisor_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -70807,10 +70807,10 @@ void uic_mqtt_dotdot_on_electrical_measurement_get_profile_info_response(
     return;
   }
 
-  int8_t profile_count = {};
+  uint8_t profile_count = {};
   ProfileIntervalPeriod profile_interval_period = {};
-  int8_t max_number_of_intervals = {};
-  std::vector<uint8_t> list_of_attributes;
+  uint8_t max_number_of_intervals = {};
+  std::vector<uint16_t> list_of_attributes;
 
 
   nlohmann::json jsn;
@@ -70882,10 +70882,10 @@ static void uic_mqtt_dotdot_on_generated_electrical_measurement_get_profile_info
     return;
   }
 
-  int8_t profile_count = {};
+  uint8_t profile_count = {};
   ProfileIntervalPeriod profile_interval_period = {};
-  int8_t max_number_of_intervals = {};
-  std::vector<uint8_t> list_of_attributes;
+  uint8_t max_number_of_intervals = {};
+  std::vector<uint16_t> list_of_attributes;
 
 
   nlohmann::json jsn;
@@ -71061,12 +71061,12 @@ void uic_mqtt_dotdot_on_electrical_measurement_get_measurement_profile_response(
     return;
   }
 
-  uint8_t start_time = {};
+  uint32_t start_time = {};
   GetMeasurementProfileResponseStatus status = {};
   ProfileIntervalPeriod profile_interval_period = {};
-  int8_t number_of_intervals_delivered = {};
-  uint8_t attribute_id = {};
-  std::vector<int8_t> intervals;
+  uint8_t number_of_intervals_delivered = {};
+  uint16_t attribute_id = {};
+  std::vector<uint8_t> intervals;
 
 
   nlohmann::json jsn;
@@ -71146,12 +71146,12 @@ static void uic_mqtt_dotdot_on_generated_electrical_measurement_get_measurement_
     return;
   }
 
-  uint8_t start_time = {};
+  uint32_t start_time = {};
   GetMeasurementProfileResponseStatus status = {};
   ProfileIntervalPeriod profile_interval_period = {};
-  int8_t number_of_intervals_delivered = {};
-  uint8_t attribute_id = {};
-  std::vector<int8_t> intervals;
+  uint8_t number_of_intervals_delivered = {};
+  uint16_t attribute_id = {};
+  std::vector<uint8_t> intervals;
 
 
   nlohmann::json jsn;
@@ -71232,9 +71232,9 @@ void uic_mqtt_dotdot_on_electrical_measurement_get_measurement_profile(
     return;
   }
 
-  uint8_t attributeid = {};
-  uint8_t start_time = {};
-  int8_t number_of_intervals = {};
+  uint16_t attributeid = {};
+  uint32_t start_time = {};
+  uint8_t number_of_intervals = {};
 
 
   nlohmann::json jsn;
@@ -71301,9 +71301,9 @@ static void uic_mqtt_dotdot_on_generated_electrical_measurement_get_measurement_
     return;
   }
 
-  uint8_t attributeid = {};
-  uint8_t start_time = {};
-  int8_t number_of_intervals = {};
+  uint16_t attributeid = {};
+  uint32_t start_time = {};
+  uint8_t number_of_intervals = {};
 
 
   nlohmann::json jsn;
@@ -72426,7 +72426,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_max_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -72496,7 +72496,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_multiplier_unretai
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -72566,7 +72566,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_divisor_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -72636,7 +72636,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_multiplier_unretai
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -72706,7 +72706,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_divisor_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -72776,7 +72776,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_multiplier_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -72846,7 +72846,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_divisor_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -72916,7 +72916,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_min_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -72986,7 +72986,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_min_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_max_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -73056,7 +73056,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_max_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_neutral_current_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -73266,7 +73266,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_total_reactive_power_unretain
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_total_apparent_power_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -74176,7 +74176,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase11th_harmonic_c
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -74246,7 +74246,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_multiplier_unret
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -74316,7 +74316,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_divisor_unretain
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_power_multiplier_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -74386,7 +74386,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_power_multiplier_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_power_divisor_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -74596,7 +74596,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_phase_harmonic_current_multip
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -74806,7 +74806,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -74876,7 +74876,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -74946,7 +74946,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75016,7 +75016,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75086,7 +75086,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75156,7 +75156,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75506,7 +75506,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75646,7 +75646,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75716,7 +75716,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measureme
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75786,7 +75786,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_coun
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75856,7 +75856,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_cou
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75926,7 +75926,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_peri
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -75996,7 +75996,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_per
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -76066,7 +76066,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_unreta
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -76136,7 +76136,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_unre
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -76206,7 +76206,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_multiplier_unretai
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -76276,7 +76276,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_divisor_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -76346,7 +76346,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_multiplier_unretai
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -76416,7 +76416,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_divisor_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_multiplier_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -76486,7 +76486,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_multiplier_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_divisor_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -77534,7 +77534,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -77744,7 +77744,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_phb_unretain
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -77814,7 +77814,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phb_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -77884,7 +77884,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phb_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -77954,7 +77954,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phb_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -78024,7 +78024,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phb_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -78094,7 +78094,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phb_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -78444,7 +78444,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_phb_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -78584,7 +78584,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_phb_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -78654,7 +78654,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measureme
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -78724,7 +78724,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_coun
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -78794,7 +78794,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_cou
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -78864,7 +78864,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_peri
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -78934,7 +78934,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_per
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -79004,7 +79004,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phb_un
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phb_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -79074,7 +79074,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phb_
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -79284,7 +79284,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_phc_unretain
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -79354,7 +79354,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phc_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -79424,7 +79424,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phc_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -79494,7 +79494,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phc_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -79564,7 +79564,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phc_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -79634,7 +79634,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phc_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -79984,7 +79984,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_phc_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -80124,7 +80124,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_phc_unretain(
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -80194,7 +80194,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measureme
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -80264,7 +80264,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_coun
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -80334,7 +80334,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_cou
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -80404,7 +80404,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_peri
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -80474,7 +80474,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_per
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -80544,7 +80544,7 @@ sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phc_un
 
 sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phc_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -80898,7 +80898,7 @@ static void uic_mqtt_dotdot_on_diagnostics_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_number_of_resets_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -80968,7 +80968,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_number_of_resets_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_persistent_memory_writes_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81038,7 +81038,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_persistent_memory_writes_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_bcast_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81108,7 +81108,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_bcast_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_bcast_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81178,7 +81178,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_bcast_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_ucast_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81248,7 +81248,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_ucast_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81318,7 +81318,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_retry_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81388,7 +81388,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_retry_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_fail_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81458,7 +81458,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_fail_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_bcast_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81528,7 +81528,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_bcast_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_bcast_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81598,7 +81598,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_bcast_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_ucast_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81668,7 +81668,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_ucast_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_success_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81738,7 +81738,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_success_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_retry_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81808,7 +81808,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_retry_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_fail_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81878,7 +81878,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_fail_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_route_disc_initiated_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -81948,7 +81948,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_route_disc_initiated_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_added_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82018,7 +82018,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_added_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_removed_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82088,7 +82088,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_removed_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_stale_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82158,7 +82158,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_stale_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_join_indication_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82228,7 +82228,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_join_indication_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_child_moved_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82298,7 +82298,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_child_moved_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_nwkfc_failure_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82368,7 +82368,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_nwkfc_failure_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_apsfc_failure_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82438,7 +82438,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_apsfc_failure_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_unauthorized_key_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82508,7 +82508,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_unauthorized_key_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_nwk_decrypt_failures_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82578,7 +82578,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_nwk_decrypt_failures_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_aps_decrypt_failures_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82648,7 +82648,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_aps_decrypt_failures_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_packet_buffer_allocate_failures_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82718,7 +82718,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_packet_buffer_allocate_failures_unretain
 
 sl_status_t uic_mqtt_dotdot_diagnostics_relayed_ucast_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82788,7 +82788,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_relayed_ucast_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_phy_to_mac_queue_limit_reached_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82858,7 +82858,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_phy_to_mac_queue_limit_reached_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_packet_validate_drop_count_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82928,7 +82928,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_packet_validate_drop_count_unretain(
 
 sl_status_t uic_mqtt_dotdot_diagnostics_average_mac_retry_per_aps_message_sent_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -82998,7 +82998,7 @@ sl_status_t uic_mqtt_dotdot_diagnostics_average_mac_retry_per_aps_message_sent_u
 
 sl_status_t uic_mqtt_dotdot_diagnostics_last_messagelqi_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -83262,17 +83262,17 @@ void uic_mqtt_dotdot_on_protocol_controller_rf_telemetry_tx_report(
   std::string sourceunid;
   std::string destinationunid;
   bool transmission_successful = {};
-  int16_t transmission_time_ms = {};
+  uint16_t transmission_time_ms = {};
   int8_t tx_powerd_bm = {};
-  int8_t tx_channel = {};
-  int8_t routing_attempts = {};
+  uint8_t tx_channel = {};
+  uint8_t routing_attempts = {};
   bool route_changed = {};
   TxReportTransmissionSpeed transmission_speed = {};
   int8_t measured_noise_floord_bm = {};
   std::vector<std::string> last_route_repeaters;
   std::vector<int8_t> incoming_rssi_repeaters;
   int8_t ackrssi = {};
-  int8_t ack_channel = {};
+  uint8_t ack_channel = {};
   std::string last_route_failed_link_functionalunid;
   std::string last_route_failed_link_non_functionalunid;
   int8_t destination_ack_tx_powerd_bm = {};
@@ -83419,17 +83419,17 @@ static void uic_mqtt_dotdot_on_generated_protocol_controller_rf_telemetry_tx_rep
   std::string sourceunid;
   std::string destinationunid;
   bool transmission_successful = {};
-  int16_t transmission_time_ms = {};
+  uint16_t transmission_time_ms = {};
   int8_t tx_powerd_bm = {};
-  int8_t tx_channel = {};
-  int8_t routing_attempts = {};
+  uint8_t tx_channel = {};
+  uint8_t routing_attempts = {};
   bool route_changed = {};
   TxReportTransmissionSpeed transmission_speed = {};
   int8_t measured_noise_floord_bm = {};
   std::vector<std::string> last_route_repeaters;
   std::vector<int8_t> incoming_rssi_repeaters;
   int8_t ackrssi = {};
-  int8_t ack_channel = {};
+  uint8_t ack_channel = {};
   std::string last_route_failed_link_functionalunid;
   std::string last_route_failed_link_non_functionalunid;
   int8_t destination_ack_tx_powerd_bm = {};
@@ -84854,7 +84854,7 @@ static void uic_mqtt_dotdot_on_state_force_read_attributes(
 sl_status_t uic_mqtt_dotdot_state_endpoint_id_list_publish(
   const char *base_topic,
   size_t value_count,
-  const int8_t* value,
+  const uint8_t* value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -85071,7 +85071,7 @@ sl_status_t uic_mqtt_dotdot_state_security_unretain(
 
 sl_status_t uic_mqtt_dotdot_state_maximum_command_delay_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -85489,7 +85489,7 @@ void uic_mqtt_dotdot_on_binding_bind(
 
   std::string cluster_name;
   std::string destination_unid;
-  int8_t destination_ep = {};
+  uint8_t destination_ep = {};
 
 
   nlohmann::json jsn;
@@ -85558,7 +85558,7 @@ static void uic_mqtt_dotdot_on_generated_binding_bind(
 
   std::string cluster_name;
   std::string destination_unid;
-  int8_t destination_ep = {};
+  uint8_t destination_ep = {};
 
 
   nlohmann::json jsn;
@@ -85628,7 +85628,7 @@ void uic_mqtt_dotdot_on_binding_unbind(
 
   std::string cluster_name;
   std::string destination_unid;
-  int8_t destination_ep = {};
+  uint8_t destination_ep = {};
 
 
   nlohmann::json jsn;
@@ -85697,7 +85697,7 @@ static void uic_mqtt_dotdot_on_generated_binding_unbind(
 
   std::string cluster_name;
   std::string destination_unid;
-  int8_t destination_ep = {};
+  uint8_t destination_ep = {};
 
 
   nlohmann::json jsn;
@@ -86605,7 +86605,7 @@ static void uic_mqtt_dotdot_on_system_metrics_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_system_metrics_reporting_interval_seconds_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -87972,7 +87972,7 @@ sl_status_t uic_mqtt_dotdot_system_metrics_fqdn_unretain(
 
 sl_status_t uic_mqtt_dotdot_system_metrics_uptime_minutes_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -88462,7 +88462,7 @@ sl_status_t uic_mqtt_dotdot_system_metrics_battery_percentage_unretain(
 
 sl_status_t uic_mqtt_dotdot_system_metrics_system_interrupts_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -89224,7 +89224,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_application_mqtt_topics_unret
 
 sl_status_t uic_mqtt_dotdot_application_monitoring_uptime_minutes_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -89294,7 +89294,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_uptime_minutes_unretain(
 
 sl_status_t uic_mqtt_dotdot_application_monitoring_process_id_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -89639,7 +89639,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_logging_level_unretain(
 
 sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -89709,7 +89709,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_statistics_reporting_int
 
 sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_sent_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -89779,7 +89779,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_sent_unretain(
 
 sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_received_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -89849,7 +89849,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_received_unreta
 
 sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_subscription_count_publish(
   const char *base_topic,
-  int64_t value,
+  uint64_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -90129,7 +90129,7 @@ sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_max_delivery_time_second
 
 sl_status_t uic_mqtt_dotdot_application_monitoring_application_statistics_reporting_interval_seconds_publish(
   const char *base_topic,
-  int32_t value,
+  uint32_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -91106,7 +91106,7 @@ void uic_mqtt_dotdot_on_configuration_parameters_discover_parameter(
     return;
   }
 
-  int16_t parameter_id = {};
+  uint16_t parameter_id = {};
 
 
   nlohmann::json jsn;
@@ -91165,7 +91165,7 @@ static void uic_mqtt_dotdot_on_generated_configuration_parameters_discover_param
     return;
   }
 
-  int16_t parameter_id = {};
+  uint16_t parameter_id = {};
 
 
   nlohmann::json jsn;
@@ -91328,7 +91328,7 @@ void uic_mqtt_dotdot_on_configuration_parameters_set_parameter(
     return;
   }
 
-  int16_t parameter_id = {};
+  uint16_t parameter_id = {};
   int64_t value = {};
 
 
@@ -91392,7 +91392,7 @@ static void uic_mqtt_dotdot_on_generated_configuration_parameters_set_parameter(
     return;
   }
 
-  int16_t parameter_id = {};
+  uint16_t parameter_id = {};
   int64_t value = {};
 
 
@@ -91457,8 +91457,8 @@ void uic_mqtt_dotdot_on_configuration_parameters_discover_parameter_range(
     return;
   }
 
-  int16_t first_parameter_id = {};
-  int16_t last_parameter_id = {};
+  uint16_t first_parameter_id = {};
+  uint16_t last_parameter_id = {};
 
 
   nlohmann::json jsn;
@@ -91521,8 +91521,8 @@ static void uic_mqtt_dotdot_on_generated_configuration_parameters_discover_param
     return;
   }
 
-  int16_t first_parameter_id = {};
-  int16_t last_parameter_id = {};
+  uint16_t first_parameter_id = {};
+  uint16_t last_parameter_id = {};
 
 
   nlohmann::json jsn;
@@ -92593,12 +92593,12 @@ void uic_mqtt_dotdot_on_user_credential_add_user(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   UserTypeEnum user_type = {};
   bool user_active_state = {};
   CredRule credential_rule = {};
   std::string user_name;
-  int16_t expiring_timeout_minutes = {};
+  uint16_t expiring_timeout_minutes = {};
   UserNameEncodingType user_name_encoding = {};
 
 
@@ -92682,12 +92682,12 @@ static void uic_mqtt_dotdot_on_generated_user_credential_add_user(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   UserTypeEnum user_type = {};
   bool user_active_state = {};
   CredRule credential_rule = {};
   std::string user_name;
-  int16_t expiring_timeout_minutes = {};
+  uint16_t expiring_timeout_minutes = {};
   UserNameEncodingType user_name_encoding = {};
 
 
@@ -92772,12 +92772,12 @@ void uic_mqtt_dotdot_on_user_credential_modify_user(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   UserTypeEnum user_type = {};
   bool user_active_state = {};
   CredRule credential_rule = {};
   std::string user_name;
-  int16_t expiring_timeout_minutes = {};
+  uint16_t expiring_timeout_minutes = {};
   UserNameEncodingType user_name_encoding = {};
 
 
@@ -92861,12 +92861,12 @@ static void uic_mqtt_dotdot_on_generated_user_credential_modify_user(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   UserTypeEnum user_type = {};
   bool user_active_state = {};
   CredRule credential_rule = {};
   std::string user_name;
-  int16_t expiring_timeout_minutes = {};
+  uint16_t expiring_timeout_minutes = {};
   UserNameEncodingType user_name_encoding = {};
 
 
@@ -92951,7 +92951,7 @@ void uic_mqtt_dotdot_on_user_credential_delete_user(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
 
 
   nlohmann::json jsn;
@@ -93010,7 +93010,7 @@ static void uic_mqtt_dotdot_on_generated_user_credential_delete_user(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
 
 
   nlohmann::json jsn;
@@ -93070,9 +93070,9 @@ void uic_mqtt_dotdot_on_user_credential_add_credential(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
+  uint16_t credential_slot = {};
   std::string credential_data;
 
 
@@ -93144,9 +93144,9 @@ static void uic_mqtt_dotdot_on_generated_user_credential_add_credential(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
+  uint16_t credential_slot = {};
   std::string credential_data;
 
 
@@ -93219,9 +93219,9 @@ void uic_mqtt_dotdot_on_user_credential_modify_credential(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
+  uint16_t credential_slot = {};
   std::string credential_data;
 
 
@@ -93293,9 +93293,9 @@ static void uic_mqtt_dotdot_on_generated_user_credential_modify_credential(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
+  uint16_t credential_slot = {};
   std::string credential_data;
 
 
@@ -93368,9 +93368,9 @@ void uic_mqtt_dotdot_on_user_credential_delete_credential(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
+  uint16_t credential_slot = {};
 
 
   nlohmann::json jsn;
@@ -93437,9 +93437,9 @@ static void uic_mqtt_dotdot_on_generated_user_credential_delete_credential(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
+  uint16_t credential_slot = {};
 
 
   nlohmann::json jsn;
@@ -93832,7 +93832,7 @@ void uic_mqtt_dotdot_on_user_credential_delete_all_credentials_for_user(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
 
 
   nlohmann::json jsn;
@@ -93891,7 +93891,7 @@ static void uic_mqtt_dotdot_on_generated_user_credential_delete_all_credentials_
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
 
 
   nlohmann::json jsn;
@@ -93951,7 +93951,7 @@ void uic_mqtt_dotdot_on_user_credential_delete_all_credentials_for_user_by_type(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
 
 
@@ -94015,7 +94015,7 @@ static void uic_mqtt_dotdot_on_generated_user_credential_delete_all_credentials_
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
 
 
@@ -94080,10 +94080,10 @@ void uic_mqtt_dotdot_on_user_credential_credential_learn_start_add(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
-  int8_t credential_learn_timeout = {};
+  uint16_t credential_slot = {};
+  uint8_t credential_learn_timeout = {};
 
 
   nlohmann::json jsn;
@@ -94154,10 +94154,10 @@ static void uic_mqtt_dotdot_on_generated_user_credential_credential_learn_start_
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
-  int8_t credential_learn_timeout = {};
+  uint16_t credential_slot = {};
+  uint8_t credential_learn_timeout = {};
 
 
   nlohmann::json jsn;
@@ -94229,10 +94229,10 @@ void uic_mqtt_dotdot_on_user_credential_credential_learn_start_modify(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
-  int8_t credential_learn_timeout = {};
+  uint16_t credential_slot = {};
+  uint8_t credential_learn_timeout = {};
 
 
   nlohmann::json jsn;
@@ -94303,10 +94303,10 @@ static void uic_mqtt_dotdot_on_generated_user_credential_credential_learn_start_
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
   CredType credential_type = {};
-  int16_t credential_slot = {};
-  int8_t credential_learn_timeout = {};
+  uint16_t credential_slot = {};
+  uint8_t credential_learn_timeout = {};
 
 
   nlohmann::json jsn;
@@ -94482,10 +94482,10 @@ void uic_mqtt_dotdot_on_user_credential_credential_association(
   }
 
   CredType credential_type = {};
-  int16_t source_user_uniqueid = {};
-  int16_t source_credential_slot = {};
-  int16_t destination_user_uniqueid = {};
-  int16_t destination_credential_slot = {};
+  uint16_t source_user_uniqueid = {};
+  uint16_t source_credential_slot = {};
+  uint16_t destination_user_uniqueid = {};
+  uint16_t destination_credential_slot = {};
 
 
   nlohmann::json jsn;
@@ -94561,10 +94561,10 @@ static void uic_mqtt_dotdot_on_generated_user_credential_credential_association(
   }
 
   CredType credential_type = {};
-  int16_t source_user_uniqueid = {};
-  int16_t source_credential_slot = {};
-  int16_t destination_user_uniqueid = {};
-  int16_t destination_credential_slot = {};
+  uint16_t source_user_uniqueid = {};
+  uint16_t source_credential_slot = {};
+  uint16_t destination_user_uniqueid = {};
+  uint16_t destination_credential_slot = {};
 
 
   nlohmann::json jsn;
@@ -94640,7 +94640,7 @@ void uic_mqtt_dotdot_on_user_credential_get_user_checksum(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
 
 
   nlohmann::json jsn;
@@ -94699,7 +94699,7 @@ static void uic_mqtt_dotdot_on_generated_user_credential_get_user_checksum(
     return;
   }
 
-  int16_t user_uniqueid = {};
+  uint16_t user_uniqueid = {};
 
 
   nlohmann::json jsn;
@@ -95321,7 +95321,7 @@ static void uic_mqtt_dotdot_on_user_credential_force_read_attributes(
 
 sl_status_t uic_mqtt_dotdot_user_credential_supported_user_unique_identifiers_publish(
   const char *base_topic,
-  int16_t value,
+  uint16_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -98108,8 +98108,8 @@ void uic_mqtt_dotdot_on_unify_humidity_control_setpoint_set(
   }
 
   SetpointType type = {};
-  int8_t precision = {};
-  int8_t scale = {};
+  uint8_t precision = {};
+  uint8_t scale = {};
   int32_t value = {};
 
 
@@ -98182,8 +98182,8 @@ static void uic_mqtt_dotdot_on_generated_unify_humidity_control_setpoint_set(
   }
 
   SetpointType type = {};
-  int8_t precision = {};
-  int8_t scale = {};
+  uint8_t precision = {};
+  uint8_t scale = {};
   int32_t value = {};
 
 
@@ -98963,7 +98963,7 @@ sl_status_t uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_scale_unr
 
 sl_status_t uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_precision_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -99316,7 +99316,7 @@ sl_status_t uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_scale_u
 
 sl_status_t uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_precision_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -99669,7 +99669,7 @@ sl_status_t uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_scale_unretain(
 
 sl_status_t uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_precision_publish(
   const char *base_topic,
-  int8_t value,
+  uint8_t value,
   uic_mqtt_dotdot_attribute_publish_type_t publish_type
 )
 {
@@ -100628,7 +100628,7 @@ static inline bool uic_mqtt_dotdot_identify_identify_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t identify_time_value;
+    uint16_t identify_time_value;
     memset(&identify_time_value, 0x00, sizeof(identify_time_value));
     for (const auto& callback: uic_mqtt_dotdot_identify_identify_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -100646,7 +100646,7 @@ static inline bool uic_mqtt_dotdot_identify_identify_query_response_is_supported
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t timeout_value;
+    uint16_t timeout_value;
     memset(&timeout_value, 0x00, sizeof(timeout_value));
     for (const auto& callback: uic_mqtt_dotdot_identify_identify_query_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -100876,7 +100876,7 @@ static inline bool uic_mqtt_dotdot_groups_add_group_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t group_id_value;
+    uint16_t group_id_value;
     memset(&group_id_value, 0x00, sizeof(group_id_value));
     const char* group_name_value;
     memset(&group_name_value, 0x00, sizeof(group_name_value));
@@ -100900,7 +100900,7 @@ static inline bool uic_mqtt_dotdot_groups_add_group_response_is_supported(
 {
     uint8_t status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    int16_t group_id_value;
+    uint16_t group_id_value;
     memset(&group_id_value, 0x00, sizeof(group_id_value));
     for (const auto& callback: uic_mqtt_dotdot_groups_add_group_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -100920,7 +100920,7 @@ static inline bool uic_mqtt_dotdot_groups_view_group_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t group_id_value;
+    uint16_t group_id_value;
     memset(&group_id_value, 0x00, sizeof(group_id_value));
     for (const auto& callback: uic_mqtt_dotdot_groups_view_group_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -100940,7 +100940,7 @@ static inline bool uic_mqtt_dotdot_groups_view_group_response_is_supported(
 {
     uint8_t status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    int16_t group_id_value;
+    uint16_t group_id_value;
     memset(&group_id_value, 0x00, sizeof(group_id_value));
     const char* group_name_value;
     memset(&group_name_value, 0x00, sizeof(group_name_value));
@@ -100980,7 +100980,7 @@ static inline bool uic_mqtt_dotdot_groups_get_group_membership_response_is_suppo
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t capacity_value;
+    uint8_t capacity_value;
     memset(&capacity_value, 0x00, sizeof(capacity_value));
     for (const auto& callback: uic_mqtt_dotdot_groups_get_group_membership_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101000,7 +101000,7 @@ static inline bool uic_mqtt_dotdot_groups_remove_group_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t group_id_value;
+    uint16_t group_id_value;
     memset(&group_id_value, 0x00, sizeof(group_id_value));
     for (const auto& callback: uic_mqtt_dotdot_groups_remove_group_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101020,7 +101020,7 @@ static inline bool uic_mqtt_dotdot_groups_remove_group_response_is_supported(
 {
     uint8_t status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    int16_t group_id_value;
+    uint16_t group_id_value;
     memset(&group_id_value, 0x00, sizeof(group_id_value));
     for (const auto& callback: uic_mqtt_dotdot_groups_remove_group_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101054,7 +101054,7 @@ static inline bool uic_mqtt_dotdot_groups_add_group_if_identifying_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t group_id_value;
+    uint16_t group_id_value;
     memset(&group_id_value, 0x00, sizeof(group_id_value));
     const char* group_name_value;
     memset(&group_name_value, 0x00, sizeof(group_name_value));
@@ -101294,15 +101294,15 @@ static inline bool uic_mqtt_dotdot_scenes_add_scene_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-    uint8_t * scene_name_value;
+    const char* scene_name_value;
     memset(&scene_name_value, 0x00, sizeof(scene_name_value));
-    int8_t transition_time100ms_value;
+    uint8_t transition_time100ms_value;
     memset(&transition_time100ms_value, 0x00, sizeof(transition_time100ms_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_add_scene_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101332,9 +101332,9 @@ static inline bool uic_mqtt_dotdot_scenes_add_scene_response_is_supported(
 {
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_add_scene_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101356,9 +101356,9 @@ static inline bool uic_mqtt_dotdot_scenes_view_scene_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_view_scene_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101380,13 +101380,13 @@ static inline bool uic_mqtt_dotdot_scenes_view_scene_response_is_supported(
 {
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-    uint8_t * scene_name_value;
+    const char* scene_name_value;
     memset(&scene_name_value, 0x00, sizeof(scene_name_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_view_scene_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101414,9 +101414,9 @@ static inline bool uic_mqtt_dotdot_scenes_remove_scene_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_remove_scene_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101438,9 +101438,9 @@ static inline bool uic_mqtt_dotdot_scenes_remove_scene_response_is_supported(
 {
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_remove_scene_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101462,7 +101462,7 @@ static inline bool uic_mqtt_dotdot_scenes_remove_all_scenes_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_remove_all_scenes_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101482,7 +101482,7 @@ static inline bool uic_mqtt_dotdot_scenes_remove_all_scenes_response_is_supporte
 {
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101502,9 +101502,9 @@ static inline bool uic_mqtt_dotdot_scenes_store_scene_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_store_scene_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101526,9 +101526,9 @@ static inline bool uic_mqtt_dotdot_scenes_store_scene_response_is_supported(
 {
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_store_scene_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101550,11 +101550,11 @@ static inline bool uic_mqtt_dotdot_scenes_recall_scene_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_recall_scene_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101576,7 +101576,7 @@ static inline bool uic_mqtt_dotdot_scenes_get_scene_membership_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_get_scene_membership_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101596,9 +101596,9 @@ static inline bool uic_mqtt_dotdot_scenes_get_scene_membership_response_is_suppo
 {
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    int8_t capacity_value;
+    uint8_t capacity_value;
     memset(&capacity_value, 0x00, sizeof(capacity_value));
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_get_scene_membership_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101622,13 +101622,13 @@ static inline bool uic_mqtt_dotdot_scenes_enhanced_add_scene_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-    uint8_t * scene_name_value;
+    const char* scene_name_value;
     memset(&scene_name_value, 0x00, sizeof(scene_name_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_enhanced_add_scene_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101656,9 +101656,9 @@ static inline bool uic_mqtt_dotdot_scenes_enhanced_add_scene_response_is_support
 {
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101680,9 +101680,9 @@ static inline bool uic_mqtt_dotdot_scenes_enhanced_view_scene_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_enhanced_view_scene_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101704,13 +101704,13 @@ static inline bool uic_mqtt_dotdot_scenes_enhanced_view_scene_response_is_suppor
 {
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    uint8_t * groupid_value;
+    uint16_t groupid_value;
     memset(&groupid_value, 0x00, sizeof(groupid_value));
-    int8_t sceneid_value;
+    uint8_t sceneid_value;
     memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-    uint8_t * scene_name_value;
+    const char* scene_name_value;
     memset(&scene_name_value, 0x00, sizeof(scene_name_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101740,13 +101740,13 @@ static inline bool uic_mqtt_dotdot_scenes_copy_scene_is_supported(
 {
     uint8_t mode_value;
     memset(&mode_value, 0x00, sizeof(mode_value));
-    uint8_t * group_identifier_from_value;
+    uint16_t group_identifier_from_value;
     memset(&group_identifier_from_value, 0x00, sizeof(group_identifier_from_value));
-    int8_t scene_identifier_from_value;
+    uint8_t scene_identifier_from_value;
     memset(&scene_identifier_from_value, 0x00, sizeof(scene_identifier_from_value));
-    uint8_t * group_identifier_to_value;
+    uint16_t group_identifier_to_value;
     memset(&group_identifier_to_value, 0x00, sizeof(group_identifier_to_value));
-    int8_t scene_identifier_to_value;
+    uint8_t scene_identifier_to_value;
     memset(&scene_identifier_to_value, 0x00, sizeof(scene_identifier_to_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_copy_scene_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -101774,9 +101774,9 @@ static inline bool uic_mqtt_dotdot_scenes_copy_scene_response_is_supported(
 {
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    uint8_t * group_identifier_from_value;
+    uint16_t group_identifier_from_value;
     memset(&group_identifier_from_value, 0x00, sizeof(group_identifier_from_value));
-    int8_t scene_identifier_from_value;
+    uint8_t scene_identifier_from_value;
     memset(&scene_identifier_from_value, 0x00, sizeof(scene_identifier_from_value));
     for (const auto& callback: uic_mqtt_dotdot_scenes_copy_scene_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -102123,7 +102123,7 @@ static inline bool uic_mqtt_dotdot_on_off_off_with_effect_is_supported(
 {
     OffWithEffectEffectIdentifier effect_identifier_value;
     memset(&effect_identifier_value, 0x00, sizeof(effect_identifier_value));
-    int8_t effect_variant_value;
+    uint8_t effect_variant_value;
     memset(&effect_variant_value, 0x00, sizeof(effect_variant_value));
     for (const auto& callback: uic_mqtt_dotdot_on_off_off_with_effect_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -102159,9 +102159,9 @@ static inline bool uic_mqtt_dotdot_on_off_on_with_timed_off_is_supported(
 {
     uint8_t on_off_control_value;
     memset(&on_off_control_value, 0x00, sizeof(on_off_control_value));
-    int16_t on_time_value;
+    uint16_t on_time_value;
     memset(&on_time_value, 0x00, sizeof(on_time_value));
-    int16_t off_wait_time_value;
+    uint16_t off_wait_time_value;
     memset(&off_wait_time_value, 0x00, sizeof(off_wait_time_value));
     for (const auto& callback: uic_mqtt_dotdot_on_off_on_with_timed_off_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -102373,9 +102373,9 @@ static inline bool uic_mqtt_dotdot_level_move_to_level_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t level_value;
+    uint8_t level_value;
     memset(&level_value, 0x00, sizeof(level_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -102405,7 +102405,7 @@ static inline bool uic_mqtt_dotdot_level_move_is_supported(
 {
     MoveStepMode move_mode_value;
     memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-    int8_t rate_value;
+    uint8_t rate_value;
     memset(&rate_value, 0x00, sizeof(rate_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -102435,9 +102435,9 @@ static inline bool uic_mqtt_dotdot_level_step_is_supported(
 {
     MoveStepMode step_mode_value;
     memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-    int8_t step_size_value;
+    uint8_t step_size_value;
     memset(&step_size_value, 0x00, sizeof(step_size_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -102489,9 +102489,9 @@ static inline bool uic_mqtt_dotdot_level_move_to_level_with_on_off_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t level_value;
+    uint8_t level_value;
     memset(&level_value, 0x00, sizeof(level_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -102521,7 +102521,7 @@ static inline bool uic_mqtt_dotdot_level_move_with_on_off_is_supported(
 {
     MoveStepMode move_mode_value;
     memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-    int8_t rate_value;
+    uint8_t rate_value;
     memset(&rate_value, 0x00, sizeof(rate_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -102551,9 +102551,9 @@ static inline bool uic_mqtt_dotdot_level_step_with_on_off_is_supported(
 {
     MoveStepMode step_mode_value;
     memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-    int8_t step_size_value;
+    uint8_t step_size_value;
     memset(&step_size_value, 0x00, sizeof(step_size_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -102605,7 +102605,7 @@ static inline bool uic_mqtt_dotdot_level_move_to_closest_frequency_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t frequency_value;
+    uint16_t frequency_value;
     memset(&frequency_value, 0x00, sizeof(frequency_value));
     for (const auto& callback: uic_mqtt_dotdot_level_move_to_closest_frequency_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -102836,7 +102836,7 @@ static inline bool uic_mqtt_dotdot_alarms_reset_alarm_is_supported(
 {
     uint8_t alarm_code_value;
     memset(&alarm_code_value, 0x00, sizeof(alarm_code_value));
-    uint8_t cluster_identifier_value;
+    uint16_t cluster_identifier_value;
     memset(&cluster_identifier_value, 0x00, sizeof(cluster_identifier_value));
     for (const auto& callback: uic_mqtt_dotdot_alarms_reset_alarm_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -102858,7 +102858,7 @@ static inline bool uic_mqtt_dotdot_alarms_alarm_is_supported(
 {
     uint8_t alarm_code_value;
     memset(&alarm_code_value, 0x00, sizeof(alarm_code_value));
-    uint8_t cluster_identifier_value;
+    uint16_t cluster_identifier_value;
     memset(&cluster_identifier_value, 0x00, sizeof(cluster_identifier_value));
     for (const auto& callback: uic_mqtt_dotdot_alarms_alarm_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -102896,9 +102896,9 @@ static inline bool uic_mqtt_dotdot_alarms_get_alarm_response_is_supported(
     memset(&status_value, 0x00, sizeof(status_value));
     uint8_t alarm_code_value;
     memset(&alarm_code_value, 0x00, sizeof(alarm_code_value));
-    uint8_t cluster_identifier_value;
+    uint16_t cluster_identifier_value;
     memset(&cluster_identifier_value, 0x00, sizeof(cluster_identifier_value));
-    int32_t time_stamp_value;
+    uint32_t time_stamp_value;
     memset(&time_stamp_value, 0x00, sizeof(time_stamp_value));
     for (const auto& callback: uic_mqtt_dotdot_alarms_get_alarm_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103304,7 +103304,7 @@ static inline bool uic_mqtt_dotdot_poll_control_check_in_response_is_supported(
 {
     bool start_fast_polling_value;
     memset(&start_fast_polling_value, 0x00, sizeof(start_fast_polling_value));
-    int16_t fast_poll_timeout_value;
+    uint16_t fast_poll_timeout_value;
     memset(&fast_poll_timeout_value, 0x00, sizeof(fast_poll_timeout_value));
     for (const auto& callback: uic_mqtt_dotdot_poll_control_check_in_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103338,7 +103338,7 @@ static inline bool uic_mqtt_dotdot_poll_control_set_long_poll_interval_is_suppor
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int32_t new_long_poll_interval_value;
+    uint32_t new_long_poll_interval_value;
     memset(&new_long_poll_interval_value, 0x00, sizeof(new_long_poll_interval_value));
     for (const auto& callback: uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103356,7 +103356,7 @@ static inline bool uic_mqtt_dotdot_poll_control_set_short_poll_interval_is_suppo
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t new_short_poll_interval_value;
+    uint16_t new_short_poll_interval_value;
     memset(&new_short_poll_interval_value, 0x00, sizeof(new_short_poll_interval_value));
     for (const auto& callback: uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103705,7 +103705,7 @@ static inline bool uic_mqtt_dotdot_door_lock_lock_door_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t pin_or_rfid_code_value;
+    const char* pin_or_rfid_code_value;
     memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_lock_door_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103741,7 +103741,7 @@ static inline bool uic_mqtt_dotdot_door_lock_unlock_door_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t pin_or_rfid_code_value;
+    const char* pin_or_rfid_code_value;
     memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_unlock_door_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103777,7 +103777,7 @@ static inline bool uic_mqtt_dotdot_door_lock_toggle_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t pin_or_rfid_code_value;
+    const char* pin_or_rfid_code_value;
     memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_toggle_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103813,9 +103813,9 @@ static inline bool uic_mqtt_dotdot_door_lock_unlock_with_timeout_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t timeout_in_seconds_value;
+    uint16_t timeout_in_seconds_value;
     memset(&timeout_in_seconds_value, 0x00, sizeof(timeout_in_seconds_value));
-    uint8_t pin_or_rfid_code_value;
+    const char* pin_or_rfid_code_value;
     memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103853,7 +103853,7 @@ static inline bool uic_mqtt_dotdot_door_lock_get_log_record_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t log_index_value;
+    uint16_t log_index_value;
     memset(&log_index_value, 0x00, sizeof(log_index_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_log_record_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103871,19 +103871,19 @@ static inline bool uic_mqtt_dotdot_door_lock_get_log_record_response_is_supporte
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t log_entryid_value;
+    uint16_t log_entryid_value;
     memset(&log_entryid_value, 0x00, sizeof(log_entryid_value));
-    int32_t timestamp_value;
+    uint32_t timestamp_value;
     memset(&timestamp_value, 0x00, sizeof(timestamp_value));
     GetLogRecordResponseEventType event_type_value;
     memset(&event_type_value, 0x00, sizeof(event_type_value));
     DrlkOperEventSource source_operation_event_value;
     memset(&source_operation_event_value, 0x00, sizeof(source_operation_event_value));
-    int8_t event_id_or_alarm_code_value;
+    uint8_t event_id_or_alarm_code_value;
     memset(&event_id_or_alarm_code_value, 0x00, sizeof(event_id_or_alarm_code_value));
-    int16_t userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
-    uint8_t pin_value;
+    const char* pin_value;
     memset(&pin_value, 0x00, sizeof(pin_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_log_record_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103913,13 +103913,13 @@ static inline bool uic_mqtt_dotdot_door_lock_set_pin_code_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     DrlkSettableUserStatus user_status_value;
     memset(&user_status_value, 0x00, sizeof(user_status_value));
     DrlkUserType user_type_value;
     memset(&user_type_value, 0x00, sizeof(user_type_value));
-    uint8_t pin_value;
+    const char* pin_value;
     memset(&pin_value, 0x00, sizeof(pin_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_set_pin_code_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103961,7 +103961,7 @@ static inline bool uic_mqtt_dotdot_door_lock_get_pin_code_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_pin_code_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -103979,13 +103979,13 @@ static inline bool uic_mqtt_dotdot_door_lock_get_pin_code_response_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     DrlkUserStatus user_status_value;
     memset(&user_status_value, 0x00, sizeof(user_status_value));
     DrlkUserType user_type_value;
     memset(&user_type_value, 0x00, sizeof(user_type_value));
-    uint8_t code_value;
+    const char* code_value;
     memset(&code_value, 0x00, sizeof(code_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_pin_code_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104009,7 +104009,7 @@ static inline bool uic_mqtt_dotdot_door_lock_clear_pin_code_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_clear_pin_code_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104077,7 +104077,7 @@ static inline bool uic_mqtt_dotdot_door_lock_set_user_status_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     DrlkSettableUserStatus user_status_value;
     memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -104117,7 +104117,7 @@ static inline bool uic_mqtt_dotdot_door_lock_get_user_status_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_user_status_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104135,7 +104135,7 @@ static inline bool uic_mqtt_dotdot_door_lock_get_user_status_response_is_support
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     DrlkUserStatus user_status_value;
     memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -104157,19 +104157,19 @@ static inline bool uic_mqtt_dotdot_door_lock_set_weekday_schedule_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * scheduleid_value;
+    uint8_t scheduleid_value;
     memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     uint8_t days_mask_value;
     memset(&days_mask_value, 0x00, sizeof(days_mask_value));
-    int8_t start_hour_value;
+    uint8_t start_hour_value;
     memset(&start_hour_value, 0x00, sizeof(start_hour_value));
-    int8_t start_minute_value;
+    uint8_t start_minute_value;
     memset(&start_minute_value, 0x00, sizeof(start_minute_value));
-    int8_t end_hour_value;
+    uint8_t end_hour_value;
     memset(&end_hour_value, 0x00, sizeof(end_hour_value));
-    int8_t end_minute_value;
+    uint8_t end_minute_value;
     memset(&end_minute_value, 0x00, sizeof(end_minute_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104217,9 +104217,9 @@ static inline bool uic_mqtt_dotdot_door_lock_get_weekday_schedule_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * scheduleid_value;
+    uint8_t scheduleid_value;
     memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104239,21 +104239,21 @@ static inline bool uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_is_su
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t scheduleid_value;
+    uint8_t scheduleid_value;
     memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-    int16_t userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
     uint8_t days_mask_value;
     memset(&days_mask_value, 0x00, sizeof(days_mask_value));
-    int8_t start_hour_value;
+    uint8_t start_hour_value;
     memset(&start_hour_value, 0x00, sizeof(start_hour_value));
-    int8_t start_minute_value;
+    uint8_t start_minute_value;
     memset(&start_minute_value, 0x00, sizeof(start_minute_value));
-    int8_t end_hour_value;
+    uint8_t end_hour_value;
     memset(&end_hour_value, 0x00, sizeof(end_hour_value));
-    int8_t end_minute_value;
+    uint8_t end_minute_value;
     memset(&end_minute_value, 0x00, sizeof(end_minute_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104285,9 +104285,9 @@ static inline bool uic_mqtt_dotdot_door_lock_clear_weekday_schedule_is_supported
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * scheduleid_value;
+    uint8_t scheduleid_value;
     memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104325,13 +104325,13 @@ static inline bool uic_mqtt_dotdot_door_lock_set_year_day_schedule_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * scheduleid_value;
+    uint8_t scheduleid_value;
     memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
-    int32_t local_start_time_value;
+    uint32_t local_start_time_value;
     memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-    int32_t local_end_time_value;
+    uint32_t local_end_time_value;
     memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104373,9 +104373,9 @@ static inline bool uic_mqtt_dotdot_door_lock_get_year_day_schedule_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * scheduleid_value;
+    uint8_t scheduleid_value;
     memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104395,15 +104395,15 @@ static inline bool uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_is_s
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t scheduleid_value;
+    uint8_t scheduleid_value;
     memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-    int16_t userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    int32_t local_start_time_value;
+    uint32_t local_start_time_value;
     memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-    int32_t local_end_time_value;
+    uint32_t local_end_time_value;
     memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104429,9 +104429,9 @@ static inline bool uic_mqtt_dotdot_door_lock_clear_year_day_schedule_is_supporte
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * scheduleid_value;
+    uint8_t scheduleid_value;
     memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104469,11 +104469,11 @@ static inline bool uic_mqtt_dotdot_door_lock_set_holiday_schedule_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * holiday_scheduleid_value;
+    uint8_t holiday_scheduleid_value;
     memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
-    int32_t local_start_time_value;
+    uint32_t local_start_time_value;
     memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-    int32_t local_end_time_value;
+    uint32_t local_end_time_value;
     memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
     DrlkOperMode operating_mode_during_holiday_value;
     memset(&operating_mode_during_holiday_value, 0x00, sizeof(operating_mode_during_holiday_value));
@@ -104517,7 +104517,7 @@ static inline bool uic_mqtt_dotdot_door_lock_get_holiday_schedule_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * holiday_scheduleid_value;
+    uint8_t holiday_scheduleid_value;
     memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104535,13 +104535,13 @@ static inline bool uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_is_su
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t holiday_scheduleid_value;
+    uint8_t holiday_scheduleid_value;
     memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
     zclStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
-    int32_t local_start_time_value;
+    uint32_t local_start_time_value;
     memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-    int32_t local_end_time_value;
+    uint32_t local_end_time_value;
     memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
     DrlkOperMode operating_mode_during_holiday_value;
     memset(&operating_mode_during_holiday_value, 0x00, sizeof(operating_mode_during_holiday_value));
@@ -104569,7 +104569,7 @@ static inline bool uic_mqtt_dotdot_door_lock_clear_holiday_schedule_is_supported
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * holiday_scheduleid_value;
+    uint8_t holiday_scheduleid_value;
     memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104605,7 +104605,7 @@ static inline bool uic_mqtt_dotdot_door_lock_set_user_type_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     DrlkUserType user_type_value;
     memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -104645,7 +104645,7 @@ static inline bool uic_mqtt_dotdot_door_lock_get_user_type_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_user_type_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104663,7 +104663,7 @@ static inline bool uic_mqtt_dotdot_door_lock_get_user_type_response_is_supported
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     DrlkUserType user_type_value;
     memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -104685,13 +104685,13 @@ static inline bool uic_mqtt_dotdot_door_lock_set_rfid_code_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     DrlkSettableUserStatus user_status_value;
     memset(&user_status_value, 0x00, sizeof(user_status_value));
     DrlkUserType user_type_value;
     memset(&user_type_value, 0x00, sizeof(user_type_value));
-    uint8_t rfid_code_value;
+    const char* rfid_code_value;
     memset(&rfid_code_value, 0x00, sizeof(rfid_code_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_set_rfid_code_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104733,7 +104733,7 @@ static inline bool uic_mqtt_dotdot_door_lock_get_rfid_code_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_rfid_code_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104751,13 +104751,13 @@ static inline bool uic_mqtt_dotdot_door_lock_get_rfid_code_response_is_supported
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     DrlkUserStatus user_status_value;
     memset(&user_status_value, 0x00, sizeof(user_status_value));
     DrlkUserType user_type_value;
     memset(&user_type_value, 0x00, sizeof(user_type_value));
-    uint8_t rfid_code_value;
+    const char* rfid_code_value;
     memset(&rfid_code_value, 0x00, sizeof(rfid_code_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_rfid_code_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104781,7 +104781,7 @@ static inline bool uic_mqtt_dotdot_door_lock_clear_rfid_code_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t * userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_clear_rfid_code_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104851,11 +104851,11 @@ static inline bool uic_mqtt_dotdot_door_lock_set_user_is_supported(
 {
     DataOperationTypeEnum operation_type_value;
     memset(&operation_type_value, 0x00, sizeof(operation_type_value));
-    int16_t user_index_value;
+    uint16_t user_index_value;
     memset(&user_index_value, 0x00, sizeof(user_index_value));
     const char* user_name_value;
     memset(&user_name_value, 0x00, sizeof(user_name_value));
-    int32_t user_uniqueid_value;
+    uint32_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     DrlkSettableUserStatus user_status_value;
     memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -104891,7 +104891,7 @@ static inline bool uic_mqtt_dotdot_door_lock_get_user_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_index_value;
+    uint16_t user_index_value;
     memset(&user_index_value, 0x00, sizeof(user_index_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_get_user_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104923,7 +104923,7 @@ static inline bool uic_mqtt_dotdot_door_lock_clear_user_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_index_value;
+    uint16_t user_index_value;
     memset(&user_index_value, 0x00, sizeof(user_index_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_clear_user_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -104945,11 +104945,11 @@ static inline bool uic_mqtt_dotdot_door_lock_operating_event_notification_is_sup
     memset(&operation_event_source_value, 0x00, sizeof(operation_event_source_value));
     OperatingEventNotificationOperationEventCode operation_event_code_value;
     memset(&operation_event_code_value, 0x00, sizeof(operation_event_code_value));
-    int16_t userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
-    uint8_t pin_value;
+    const char* pin_value;
     memset(&pin_value, 0x00, sizeof(pin_value));
-    int32_t local_time_value;
+    uint32_t local_time_value;
     memset(&local_time_value, 0x00, sizeof(local_time_value));
     const char* data_value;
     memset(&data_value, 0x00, sizeof(data_value));
@@ -104983,15 +104983,15 @@ static inline bool uic_mqtt_dotdot_door_lock_programming_event_notification_is_s
     memset(&program_event_source_value, 0x00, sizeof(program_event_source_value));
     ProgrammingEventNotificationProgramEventCode program_event_code_value;
     memset(&program_event_code_value, 0x00, sizeof(program_event_code_value));
-    int16_t userid_value;
+    uint16_t userid_value;
     memset(&userid_value, 0x00, sizeof(userid_value));
-    uint8_t pin_value;
+    const char* pin_value;
     memset(&pin_value, 0x00, sizeof(pin_value));
     DrlkUserType user_type_value;
     memset(&user_type_value, 0x00, sizeof(user_type_value));
     DrlkUserStatus user_status_value;
     memset(&user_status_value, 0x00, sizeof(user_status_value));
-    int32_t local_time_value;
+    uint32_t local_time_value;
     memset(&local_time_value, 0x00, sizeof(local_time_value));
     const char* data_value;
     memset(&data_value, 0x00, sizeof(data_value));
@@ -105029,9 +105029,9 @@ static inline bool uic_mqtt_dotdot_door_lock_set_credential_is_supported(
     memset(&operation_type_value, 0x00, sizeof(operation_type_value));
     CredentialStruct credential_value;
     memset(&credential_value, 0x00, sizeof(credential_value));
-    uint8_t credential_data_value;
+    const char* credential_data_value;
     memset(&credential_data_value, 0x00, sizeof(credential_data_value));
-    int16_t user_index_value;
+    uint16_t user_index_value;
     memset(&user_index_value, 0x00, sizeof(user_index_value));
     DrlkSettableUserStatus user_status_value;
     memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -105127,7 +105127,7 @@ static inline bool uic_mqtt_dotdot_door_lock_unbolt_door_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t pin_code_value;
+    const char* pin_code_value;
     memset(&pin_code_value, 0x00, sizeof(pin_code_value));
     for (const auto& callback: uic_mqtt_dotdot_door_lock_unbolt_door_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -105783,7 +105783,7 @@ static inline bool uic_mqtt_dotdot_window_covering_go_to_lift_value_is_supported
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t lift_value_value;
+    uint16_t lift_value_value;
     memset(&lift_value_value, 0x00, sizeof(lift_value_value));
     for (const auto& callback: uic_mqtt_dotdot_window_covering_go_to_lift_value_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -105801,7 +105801,7 @@ static inline bool uic_mqtt_dotdot_window_covering_go_to_lift_percentage_is_supp
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t percentage_lift_value_value;
+    uint8_t percentage_lift_value_value;
     memset(&percentage_lift_value_value, 0x00, sizeof(percentage_lift_value_value));
     for (const auto& callback: uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -105819,7 +105819,7 @@ static inline bool uic_mqtt_dotdot_window_covering_go_to_tilt_value_is_supported
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t tilt_value_value;
+    uint16_t tilt_value_value;
     memset(&tilt_value_value, 0x00, sizeof(tilt_value_value));
     for (const auto& callback: uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -105837,7 +105837,7 @@ static inline bool uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_is_supp
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t percentage_tilt_value_value;
+    uint8_t percentage_tilt_value_value;
     memset(&percentage_tilt_value_value, 0x00, sizeof(percentage_tilt_value_value));
     for (const auto& callback: uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -106052,7 +106052,7 @@ static inline bool uic_mqtt_dotdot_barrier_control_go_to_percent_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t percent_open_value;
+    uint8_t percent_open_value;
     memset(&percent_open_value, 0x00, sizeof(percent_open_value));
     for (const auto& callback: uic_mqtt_dotdot_barrier_control_go_to_percent_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -106472,17 +106472,17 @@ static inline bool uic_mqtt_dotdot_thermostat_get_relay_status_log_response_is_s
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t time_of_day_value;
+    uint16_t time_of_day_value;
     memset(&time_of_day_value, 0x00, sizeof(time_of_day_value));
     uint8_t relay_status_value;
     memset(&relay_status_value, 0x00, sizeof(relay_status_value));
     int16_t local_temperature_value;
     memset(&local_temperature_value, 0x00, sizeof(local_temperature_value));
-    int8_t humidity_percentage_value;
+    uint8_t humidity_percentage_value;
     memset(&humidity_percentage_value, 0x00, sizeof(humidity_percentage_value));
     int16_t set_point_value;
     memset(&set_point_value, 0x00, sizeof(set_point_value));
-    int16_t unread_entries_value;
+    uint16_t unread_entries_value;
     memset(&unread_entries_value, 0x00, sizeof(unread_entries_value));
     for (const auto& callback: uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -107201,11 +107201,11 @@ static inline bool uic_mqtt_dotdot_color_control_move_to_hue_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t hue_value;
+    uint8_t hue_value;
     memset(&hue_value, 0x00, sizeof(hue_value));
     CCDirection direction_value;
     memset(&direction_value, 0x00, sizeof(direction_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107237,7 +107237,7 @@ static inline bool uic_mqtt_dotdot_color_control_move_hue_is_supported(
 {
     CCMoveMode move_mode_value;
     memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-    int8_t rate_value;
+    uint8_t rate_value;
     memset(&rate_value, 0x00, sizeof(rate_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107267,9 +107267,9 @@ static inline bool uic_mqtt_dotdot_color_control_step_hue_is_supported(
 {
     CCStepMode step_mode_value;
     memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-    int8_t step_size_value;
+    uint8_t step_size_value;
     memset(&step_size_value, 0x00, sizeof(step_size_value));
-    int8_t transition_time_value;
+    uint8_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107299,9 +107299,9 @@ static inline bool uic_mqtt_dotdot_color_control_move_to_saturation_is_supported
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t saturation_value;
+    uint8_t saturation_value;
     memset(&saturation_value, 0x00, sizeof(saturation_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107331,7 +107331,7 @@ static inline bool uic_mqtt_dotdot_color_control_move_saturation_is_supported(
 {
     CCMoveMode move_mode_value;
     memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-    int8_t rate_value;
+    uint8_t rate_value;
     memset(&rate_value, 0x00, sizeof(rate_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107361,9 +107361,9 @@ static inline bool uic_mqtt_dotdot_color_control_step_saturation_is_supported(
 {
     CCStepMode step_mode_value;
     memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-    int8_t step_size_value;
+    uint8_t step_size_value;
     memset(&step_size_value, 0x00, sizeof(step_size_value));
-    int8_t transition_time_value;
+    uint8_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107393,11 +107393,11 @@ static inline bool uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_is_s
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t hue_value;
+    uint8_t hue_value;
     memset(&hue_value, 0x00, sizeof(hue_value));
-    int8_t saturation_value;
+    uint8_t saturation_value;
     memset(&saturation_value, 0x00, sizeof(saturation_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107427,11 +107427,11 @@ static inline bool uic_mqtt_dotdot_color_control_move_to_color_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t colorx_value;
+    uint16_t colorx_value;
     memset(&colorx_value, 0x00, sizeof(colorx_value));
-    int16_t colory_value;
+    uint16_t colory_value;
     memset(&colory_value, 0x00, sizeof(colory_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107495,7 +107495,7 @@ static inline bool uic_mqtt_dotdot_color_control_step_color_is_supported(
     memset(&stepx_value, 0x00, sizeof(stepx_value));
     int16_t stepy_value;
     memset(&stepy_value, 0x00, sizeof(stepy_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107525,9 +107525,9 @@ static inline bool uic_mqtt_dotdot_color_control_move_to_color_temperature_is_su
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t color_temperature_mireds_value;
+    uint16_t color_temperature_mireds_value;
     memset(&color_temperature_mireds_value, 0x00, sizeof(color_temperature_mireds_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107555,11 +107555,11 @@ static inline bool uic_mqtt_dotdot_color_control_enhanced_move_to_hue_is_support
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t enhanced_hue_value;
+    uint16_t enhanced_hue_value;
     memset(&enhanced_hue_value, 0x00, sizeof(enhanced_hue_value));
     CCDirection direction_value;
     memset(&direction_value, 0x00, sizeof(direction_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107591,7 +107591,7 @@ static inline bool uic_mqtt_dotdot_color_control_enhanced_move_hue_is_supported(
 {
     CCMoveMode move_mode_value;
     memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-    int16_t rate_value;
+    uint16_t rate_value;
     memset(&rate_value, 0x00, sizeof(rate_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107621,9 +107621,9 @@ static inline bool uic_mqtt_dotdot_color_control_enhanced_step_hue_is_supported(
 {
     CCStepMode step_mode_value;
     memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-    int16_t step_size_value;
+    uint16_t step_size_value;
     memset(&step_size_value, 0x00, sizeof(step_size_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107653,11 +107653,11 @@ static inline bool uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_satura
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t enhanced_hue_value;
+    uint16_t enhanced_hue_value;
     memset(&enhanced_hue_value, 0x00, sizeof(enhanced_hue_value));
-    int8_t saturation_value;
+    uint8_t saturation_value;
     memset(&saturation_value, 0x00, sizeof(saturation_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107693,9 +107693,9 @@ static inline bool uic_mqtt_dotdot_color_control_color_loop_set_is_supported(
     memset(&action_value, 0x00, sizeof(action_value));
     CCColorLoopDirection direction_value;
     memset(&direction_value, 0x00, sizeof(direction_value));
-    int16_t time_value;
+    uint16_t time_value;
     memset(&time_value, 0x00, sizeof(time_value));
-    int16_t start_hue_value;
+    uint16_t start_hue_value;
     memset(&start_hue_value, 0x00, sizeof(start_hue_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107753,11 +107753,11 @@ static inline bool uic_mqtt_dotdot_color_control_move_color_temperature_is_suppo
 {
     CCMoveMode move_mode_value;
     memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-    int16_t rate_value;
+    uint16_t rate_value;
     memset(&rate_value, 0x00, sizeof(rate_value));
-    uint8_t * color_temperature_minimum_mireds_value;
+    uint16_t color_temperature_minimum_mireds_value;
     memset(&color_temperature_minimum_mireds_value, 0x00, sizeof(color_temperature_minimum_mireds_value));
-    uint8_t * color_temperature_maximum_mireds_value;
+    uint16_t color_temperature_maximum_mireds_value;
     memset(&color_temperature_maximum_mireds_value, 0x00, sizeof(color_temperature_maximum_mireds_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -107791,13 +107791,13 @@ static inline bool uic_mqtt_dotdot_color_control_step_color_temperature_is_suppo
 {
     CCStepMode step_mode_value;
     memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-    int16_t step_size_value;
+    uint16_t step_size_value;
     memset(&step_size_value, 0x00, sizeof(step_size_value));
-    int16_t transition_time_value;
+    uint16_t transition_time_value;
     memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-    uint8_t * color_temperature_minimum_mireds_value;
+    uint16_t color_temperature_minimum_mireds_value;
     memset(&color_temperature_minimum_mireds_value, 0x00, sizeof(color_temperature_minimum_mireds_value));
-    uint8_t * color_temperature_maximum_mireds_value;
+    uint16_t color_temperature_maximum_mireds_value;
     memset(&color_temperature_maximum_mireds_value, 0x00, sizeof(color_temperature_maximum_mireds_value));
     uint8_t options_mask_value;
     memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -110334,7 +110334,7 @@ static inline bool uic_mqtt_dotdot_ias_zone_zone_enroll_response_is_supported(
 {
     ZoneEnrollResponseEnrollResponseCode enroll_response_code_value;
     memset(&enroll_response_code_value, 0x00, sizeof(enroll_response_code_value));
-    int8_t zoneid_value;
+    uint8_t zoneid_value;
     memset(&zoneid_value, 0x00, sizeof(zoneid_value));
     for (const auto& callback: uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -110358,9 +110358,9 @@ static inline bool uic_mqtt_dotdot_ias_zone_zone_status_change_notification_is_s
     memset(&zone_status_value, 0x00, sizeof(zone_status_value));
     uint8_t extended_status_value;
     memset(&extended_status_value, 0x00, sizeof(extended_status_value));
-    int8_t zoneid_value;
+    uint8_t zoneid_value;
     memset(&zoneid_value, 0x00, sizeof(zoneid_value));
-    int16_t delay_value;
+    uint16_t delay_value;
     memset(&delay_value, 0x00, sizeof(delay_value));
     for (const auto& callback: uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -110400,7 +110400,7 @@ static inline bool uic_mqtt_dotdot_ias_zone_zone_enroll_request_is_supported(
 {
     IasZoneType zone_type_value;
     memset(&zone_type_value, 0x00, sizeof(zone_type_value));
-    int16_t manufacturer_code_value;
+    uint16_t manufacturer_code_value;
     memset(&manufacturer_code_value, 0x00, sizeof(manufacturer_code_value));
     for (const auto& callback: uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -110420,9 +110420,9 @@ static inline bool uic_mqtt_dotdot_ias_zone_initiate_test_mode_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t test_mode_duration_value;
+    uint8_t test_mode_duration_value;
     memset(&test_mode_duration_value, 0x00, sizeof(test_mode_duration_value));
-    int8_t current_zone_sensitivity_level_value;
+    uint8_t current_zone_sensitivity_level_value;
     memset(&current_zone_sensitivity_level_value, 0x00, sizeof(current_zone_sensitivity_level_value));
     for (const auto& callback: uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -110627,9 +110627,9 @@ static inline bool uic_mqtt_dotdot_iaswd_start_warning_is_supported(
 {
     uint8_t siren_configuration_value;
     memset(&siren_configuration_value, 0x00, sizeof(siren_configuration_value));
-    int16_t warning_duration_value;
+    uint16_t warning_duration_value;
     memset(&warning_duration_value, 0x00, sizeof(warning_duration_value));
-    int8_t strobe_duty_cycle_value;
+    uint8_t strobe_duty_cycle_value;
     memset(&strobe_duty_cycle_value, 0x00, sizeof(strobe_duty_cycle_value));
     IaswdLevel strobe_level_value;
     memset(&strobe_level_value, 0x00, sizeof(strobe_level_value));
@@ -110983,11 +110983,11 @@ static inline bool uic_mqtt_dotdot_electrical_measurement_get_profile_info_respo
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int8_t profile_count_value;
+    uint8_t profile_count_value;
     memset(&profile_count_value, 0x00, sizeof(profile_count_value));
     ProfileIntervalPeriod profile_interval_period_value;
     memset(&profile_interval_period_value, 0x00, sizeof(profile_interval_period_value));
-    int8_t max_number_of_intervals_value;
+    uint8_t max_number_of_intervals_value;
     memset(&max_number_of_intervals_value, 0x00, sizeof(max_number_of_intervals_value));
     for (const auto& callback: uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -111025,15 +111025,15 @@ static inline bool uic_mqtt_dotdot_electrical_measurement_get_measurement_profil
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t start_time_value;
+    uint32_t start_time_value;
     memset(&start_time_value, 0x00, sizeof(start_time_value));
     GetMeasurementProfileResponseStatus status_value;
     memset(&status_value, 0x00, sizeof(status_value));
     ProfileIntervalPeriod profile_interval_period_value;
     memset(&profile_interval_period_value, 0x00, sizeof(profile_interval_period_value));
-    int8_t number_of_intervals_delivered_value;
+    uint8_t number_of_intervals_delivered_value;
     memset(&number_of_intervals_delivered_value, 0x00, sizeof(number_of_intervals_delivered_value));
-    uint8_t attribute_id_value;
+    uint16_t attribute_id_value;
     memset(&attribute_id_value, 0x00, sizeof(attribute_id_value));
     for (const auto& callback: uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -111061,11 +111061,11 @@ static inline bool uic_mqtt_dotdot_electrical_measurement_get_measurement_profil
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    uint8_t attributeid_value;
+    uint16_t attributeid_value;
     memset(&attributeid_value, 0x00, sizeof(attributeid_value));
-    uint8_t start_time_value;
+    uint32_t start_time_value;
     memset(&start_time_value, 0x00, sizeof(start_time_value));
-    int8_t number_of_intervals_value;
+    uint8_t number_of_intervals_value;
     memset(&number_of_intervals_value, 0x00, sizeof(number_of_intervals_value));
     for (const auto& callback: uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -111417,13 +111417,13 @@ static inline bool uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_is
     memset(&destinationunid_value, 0x00, sizeof(destinationunid_value));
     bool transmission_successful_value;
     memset(&transmission_successful_value, 0x00, sizeof(transmission_successful_value));
-    int16_t transmission_time_ms_value;
+    uint16_t transmission_time_ms_value;
     memset(&transmission_time_ms_value, 0x00, sizeof(transmission_time_ms_value));
     int8_t tx_powerd_bm_value;
     memset(&tx_powerd_bm_value, 0x00, sizeof(tx_powerd_bm_value));
-    int8_t tx_channel_value;
+    uint8_t tx_channel_value;
     memset(&tx_channel_value, 0x00, sizeof(tx_channel_value));
-    int8_t routing_attempts_value;
+    uint8_t routing_attempts_value;
     memset(&routing_attempts_value, 0x00, sizeof(routing_attempts_value));
     bool route_changed_value;
     memset(&route_changed_value, 0x00, sizeof(route_changed_value));
@@ -111433,7 +111433,7 @@ static inline bool uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_is
     memset(&measured_noise_floord_bm_value, 0x00, sizeof(measured_noise_floord_bm_value));
     int8_t ackrssi_value;
     memset(&ackrssi_value, 0x00, sizeof(ackrssi_value));
-    int8_t ack_channel_value;
+    uint8_t ack_channel_value;
     memset(&ack_channel_value, 0x00, sizeof(ack_channel_value));
     const char* last_route_failed_link_functionalunid_value;
     memset(&last_route_failed_link_functionalunid_value, 0x00, sizeof(last_route_failed_link_functionalunid_value));
@@ -111928,7 +111928,7 @@ static inline bool uic_mqtt_dotdot_binding_bind_is_supported(
     memset(&cluster_name_value, 0x00, sizeof(cluster_name_value));
     const char* destination_unid_value;
     memset(&destination_unid_value, 0x00, sizeof(destination_unid_value));
-    int8_t destination_ep_value;
+    uint8_t destination_ep_value;
     memset(&destination_ep_value, 0x00, sizeof(destination_ep_value));
     for (const auto& callback: uic_mqtt_dotdot_binding_bind_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -111954,7 +111954,7 @@ static inline bool uic_mqtt_dotdot_binding_unbind_is_supported(
     memset(&cluster_name_value, 0x00, sizeof(cluster_name_value));
     const char* destination_unid_value;
     memset(&destination_unid_value, 0x00, sizeof(destination_unid_value));
-    int8_t destination_ep_value;
+    uint8_t destination_ep_value;
     memset(&destination_ep_value, 0x00, sizeof(destination_ep_value));
     for (const auto& callback: uic_mqtt_dotdot_binding_unbind_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -112667,7 +112667,7 @@ static inline bool uic_mqtt_dotdot_configuration_parameters_discover_parameter_i
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t parameter_id_value;
+    uint16_t parameter_id_value;
     memset(&parameter_id_value, 0x00, sizeof(parameter_id_value));
     for (const auto& callback: uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -112699,7 +112699,7 @@ static inline bool uic_mqtt_dotdot_configuration_parameters_set_parameter_is_sup
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t parameter_id_value;
+    uint16_t parameter_id_value;
     memset(&parameter_id_value, 0x00, sizeof(parameter_id_value));
     int64_t value_value;
     memset(&value_value, 0x00, sizeof(value_value));
@@ -112721,9 +112721,9 @@ static inline bool uic_mqtt_dotdot_configuration_parameters_discover_parameter_r
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t first_parameter_id_value;
+    uint16_t first_parameter_id_value;
     memset(&first_parameter_id_value, 0x00, sizeof(first_parameter_id_value));
-    int16_t last_parameter_id_value;
+    uint16_t last_parameter_id_value;
     memset(&last_parameter_id_value, 0x00, sizeof(last_parameter_id_value));
     for (const auto& callback: uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -112919,7 +112919,7 @@ static inline bool uic_mqtt_dotdot_user_credential_add_user_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     UserTypeEnum user_type_value;
     memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -112929,7 +112929,7 @@ static inline bool uic_mqtt_dotdot_user_credential_add_user_is_supported(
     memset(&credential_rule_value, 0x00, sizeof(credential_rule_value));
     const char* user_name_value;
     memset(&user_name_value, 0x00, sizeof(user_name_value));
-    int16_t expiring_timeout_minutes_value;
+    uint16_t expiring_timeout_minutes_value;
     memset(&expiring_timeout_minutes_value, 0x00, sizeof(expiring_timeout_minutes_value));
     UserNameEncodingType user_name_encoding_value;
     memset(&user_name_encoding_value, 0x00, sizeof(user_name_encoding_value));
@@ -112961,7 +112961,7 @@ static inline bool uic_mqtt_dotdot_user_credential_modify_user_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     UserTypeEnum user_type_value;
     memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -112971,7 +112971,7 @@ static inline bool uic_mqtt_dotdot_user_credential_modify_user_is_supported(
     memset(&credential_rule_value, 0x00, sizeof(credential_rule_value));
     const char* user_name_value;
     memset(&user_name_value, 0x00, sizeof(user_name_value));
-    int16_t expiring_timeout_minutes_value;
+    uint16_t expiring_timeout_minutes_value;
     memset(&expiring_timeout_minutes_value, 0x00, sizeof(expiring_timeout_minutes_value));
     UserNameEncodingType user_name_encoding_value;
     memset(&user_name_encoding_value, 0x00, sizeof(user_name_encoding_value));
@@ -113003,7 +113003,7 @@ static inline bool uic_mqtt_dotdot_user_credential_delete_user_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     for (const auto& callback: uic_mqtt_dotdot_user_credential_delete_user_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -113021,11 +113021,11 @@ static inline bool uic_mqtt_dotdot_user_credential_add_credential_is_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     CredType credential_type_value;
     memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-    int16_t credential_slot_value;
+    uint16_t credential_slot_value;
     memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
     const char* credential_data_value;
     memset(&credential_data_value, 0x00, sizeof(credential_data_value));
@@ -113051,11 +113051,11 @@ static inline bool uic_mqtt_dotdot_user_credential_modify_credential_is_supporte
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     CredType credential_type_value;
     memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-    int16_t credential_slot_value;
+    uint16_t credential_slot_value;
     memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
     const char* credential_data_value;
     memset(&credential_data_value, 0x00, sizeof(credential_data_value));
@@ -113081,11 +113081,11 @@ static inline bool uic_mqtt_dotdot_user_credential_delete_credential_is_supporte
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     CredType credential_type_value;
     memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-    int16_t credential_slot_value;
+    uint16_t credential_slot_value;
     memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
     for (const auto& callback: uic_mqtt_dotdot_user_credential_delete_credential_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -113153,7 +113153,7 @@ static inline bool uic_mqtt_dotdot_user_credential_delete_all_credentials_for_us
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     for (const auto& callback: uic_mqtt_dotdot_user_credential_delete_all_credentials_for_user_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -113171,7 +113171,7 @@ static inline bool uic_mqtt_dotdot_user_credential_delete_all_credentials_for_us
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     CredType credential_type_value;
     memset(&credential_type_value, 0x00, sizeof(credential_type_value));
@@ -113193,13 +113193,13 @@ static inline bool uic_mqtt_dotdot_user_credential_credential_learn_start_add_is
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     CredType credential_type_value;
     memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-    int16_t credential_slot_value;
+    uint16_t credential_slot_value;
     memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
-    int8_t credential_learn_timeout_value;
+    uint8_t credential_learn_timeout_value;
     memset(&credential_learn_timeout_value, 0x00, sizeof(credential_learn_timeout_value));
     for (const auto& callback: uic_mqtt_dotdot_user_credential_credential_learn_start_add_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -113223,13 +113223,13 @@ static inline bool uic_mqtt_dotdot_user_credential_credential_learn_start_modify
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     CredType credential_type_value;
     memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-    int16_t credential_slot_value;
+    uint16_t credential_slot_value;
     memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
-    int8_t credential_learn_timeout_value;
+    uint8_t credential_learn_timeout_value;
     memset(&credential_learn_timeout_value, 0x00, sizeof(credential_learn_timeout_value));
     for (const auto& callback: uic_mqtt_dotdot_user_credential_credential_learn_start_modify_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -113269,13 +113269,13 @@ static inline bool uic_mqtt_dotdot_user_credential_credential_association_is_sup
 {
     CredType credential_type_value;
     memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-    int16_t source_user_uniqueid_value;
+    uint16_t source_user_uniqueid_value;
     memset(&source_user_uniqueid_value, 0x00, sizeof(source_user_uniqueid_value));
-    int16_t source_credential_slot_value;
+    uint16_t source_credential_slot_value;
     memset(&source_credential_slot_value, 0x00, sizeof(source_credential_slot_value));
-    int16_t destination_user_uniqueid_value;
+    uint16_t destination_user_uniqueid_value;
     memset(&destination_user_uniqueid_value, 0x00, sizeof(destination_user_uniqueid_value));
-    int16_t destination_credential_slot_value;
+    uint16_t destination_credential_slot_value;
     memset(&destination_credential_slot_value, 0x00, sizeof(destination_credential_slot_value));
     for (const auto& callback: uic_mqtt_dotdot_user_credential_credential_association_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -113301,7 +113301,7 @@ static inline bool uic_mqtt_dotdot_user_credential_get_user_checksum_is_supporte
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id)
 {
-    int16_t user_uniqueid_value;
+    uint16_t user_uniqueid_value;
     memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
     for (const auto& callback: uic_mqtt_dotdot_user_credential_get_user_checksum_callback) {
       if (callback( unid, endpoint_id, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -114349,9 +114349,9 @@ static inline bool uic_mqtt_dotdot_unify_humidity_control_setpoint_set_is_suppor
 {
     SetpointType type_value;
     memset(&type_value, 0x00, sizeof(type_value));
-    int8_t precision_value;
+    uint8_t precision_value;
     memset(&precision_value, 0x00, sizeof(precision_value));
-    int8_t scale_value;
+    uint8_t scale_value;
     memset(&scale_value, 0x00, sizeof(scale_value));
     int32_t value_value;
     memset(&value_value, 0x00, sizeof(value_value));
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.hpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.hpp
index a954bd2658..cef2277e5a 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.hpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt.hpp
@@ -5653,7 +5653,7 @@ const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<st
 { {"CopyAllScenes", "bool", "0x1", "0"}, {
 } }
 };
-const dotdot_bitmap CopySceneMode("CopySceneMode", "map0", CopySceneMode_bitmap_data);
+const dotdot_bitmap CopySceneMode("CopySceneMode", "map8", CopySceneMode_bitmap_data);
 
 const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DeviceTemperatureConfigurationDeviceTempAlarmMask_bitmap_data {
 { {"DeviceTemperatureTooLow", "bool", "0x1", "0"}, {
@@ -6089,7 +6089,7 @@ const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<st
 { {"AcceptOnlyWhenOn", "bool", "0x1", "0"}, {
 } }
 };
-const dotdot_bitmap OnWithTimedOffOnOffControl("OnWithTimedOffOnOffControl", "map0", OnWithTimedOffOnOffControl_bitmap_data);
+const dotdot_bitmap OnWithTimedOffOnOffControl("OnWithTimedOffOnOffControl", "map8", OnWithTimedOffOnOffControl_bitmap_data);
 
 const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> PowerConfigurationMainsAlarmMask_bitmap_data {
 { {"MainsVoltageTooLow", "bool", "0x1", "0"}, {
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_attributes.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_attributes.cpp
index 200e293797..87fddb1ebf 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_attributes.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_attributes.cpp
@@ -135,7 +135,7 @@ static void uic_mqtt_dotdot_on_basic_zcl_version_attribute_update(
   }
 
 
-  int8_t zcl_version = {};
+  uint8_t zcl_version = {};
 
   nlohmann::json json_payload;
   try {
@@ -148,7 +148,7 @@ static void uic_mqtt_dotdot_on_basic_zcl_version_attribute_update(
         return;
       }
 // Start parsing value
-      zcl_version = json_payload.at("value").get<int8_t>();
+      zcl_version = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -211,7 +211,7 @@ static void uic_mqtt_dotdot_on_basic_application_version_attribute_update(
   }
 
 
-  int8_t application_version = {};
+  uint8_t application_version = {};
 
   nlohmann::json json_payload;
   try {
@@ -224,7 +224,7 @@ static void uic_mqtt_dotdot_on_basic_application_version_attribute_update(
         return;
       }
 // Start parsing value
-      application_version = json_payload.at("value").get<int8_t>();
+      application_version = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -287,7 +287,7 @@ static void uic_mqtt_dotdot_on_basic_stack_version_attribute_update(
   }
 
 
-  int8_t stack_version = {};
+  uint8_t stack_version = {};
 
   nlohmann::json json_payload;
   try {
@@ -300,7 +300,7 @@ static void uic_mqtt_dotdot_on_basic_stack_version_attribute_update(
         return;
       }
 // Start parsing value
-      stack_version = json_payload.at("value").get<int8_t>();
+      stack_version = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -363,7 +363,7 @@ static void uic_mqtt_dotdot_on_basic_hw_version_attribute_update(
   }
 
 
-  int8_t hw_version = {};
+  uint8_t hw_version = {};
 
   nlohmann::json json_payload;
   try {
@@ -376,7 +376,7 @@ static void uic_mqtt_dotdot_on_basic_hw_version_attribute_update(
         return;
       }
 // Start parsing value
-      hw_version = json_payload.at("value").get<int8_t>();
+      hw_version = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -919,7 +919,7 @@ static void uic_mqtt_dotdot_on_basic_product_code_attribute_update(
   }
 
 
-  uint8_t product_code = {};
+  const char* product_code = {};
 
   nlohmann::json json_payload;
   try {
@@ -2015,7 +2015,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_voltage_attribute_updat
   }
 
 
-  int16_t mains_voltage = {};
+  uint16_t mains_voltage = {};
 
   nlohmann::json json_payload;
   try {
@@ -2028,7 +2028,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_voltage_attribute_updat
         return;
       }
 // Start parsing value
-      mains_voltage = json_payload.at("value").get<int16_t>();
+      mains_voltage = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -2091,7 +2091,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_frequency_attribute_upd
   }
 
 
-  int8_t mains_frequency = {};
+  uint8_t mains_frequency = {};
 
   nlohmann::json json_payload;
   try {
@@ -2104,7 +2104,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_frequency_attribute_upd
         return;
       }
 // Start parsing value
-      mains_frequency = json_payload.at("value").get<int8_t>();
+      mains_frequency = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -2243,7 +2243,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_voltage_min_threshold_a
   }
 
 
-  int16_t mains_voltage_min_threshold = {};
+  uint16_t mains_voltage_min_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -2256,7 +2256,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_voltage_min_threshold_a
         return;
       }
 // Start parsing value
-      mains_voltage_min_threshold = json_payload.at("value").get<int16_t>();
+      mains_voltage_min_threshold = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -2319,7 +2319,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_voltage_max_threshold_a
   }
 
 
-  int16_t mains_voltage_max_threshold = {};
+  uint16_t mains_voltage_max_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -2332,7 +2332,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_voltage_max_threshold_a
         return;
       }
 // Start parsing value
-      mains_voltage_max_threshold = json_payload.at("value").get<int16_t>();
+      mains_voltage_max_threshold = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -2395,7 +2395,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_voltage_dwell_trip_poin
   }
 
 
-  int16_t mains_voltage_dwell_trip_point = {};
+  uint16_t mains_voltage_dwell_trip_point = {};
 
   nlohmann::json json_payload;
   try {
@@ -2408,7 +2408,7 @@ static void uic_mqtt_dotdot_on_power_configuration_mains_voltage_dwell_trip_poin
         return;
       }
 // Start parsing value
-      mains_voltage_dwell_trip_point = json_payload.at("value").get<int16_t>();
+      mains_voltage_dwell_trip_point = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -2471,7 +2471,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_attribute_upd
   }
 
 
-  int8_t battery_voltage = {};
+  uint8_t battery_voltage = {};
 
   nlohmann::json json_payload;
   try {
@@ -2484,7 +2484,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_attribute_upd
         return;
       }
 // Start parsing value
-      battery_voltage = json_payload.at("value").get<int8_t>();
+      battery_voltage = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -2547,7 +2547,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_remaining_
   }
 
 
-  int8_t battery_percentage_remaining = {};
+  uint8_t battery_percentage_remaining = {};
 
   nlohmann::json json_payload;
   try {
@@ -2560,7 +2560,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_remaining_
         return;
       }
 // Start parsing value
-      battery_percentage_remaining = json_payload.at("value").get<int8_t>();
+      battery_percentage_remaining = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -2783,7 +2783,7 @@ static void uic_mqtt_dotdot_on_power_configuration_batterya_hr_rating_attribute_
   }
 
 
-  int16_t batterya_hr_rating = {};
+  uint16_t batterya_hr_rating = {};
 
   nlohmann::json json_payload;
   try {
@@ -2796,7 +2796,7 @@ static void uic_mqtt_dotdot_on_power_configuration_batterya_hr_rating_attribute_
         return;
       }
 // Start parsing value
-      batterya_hr_rating = json_payload.at("value").get<int16_t>();
+      batterya_hr_rating = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -2859,7 +2859,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_quantity_attribute_up
   }
 
 
-  int8_t battery_quantity = {};
+  uint8_t battery_quantity = {};
 
   nlohmann::json json_payload;
   try {
@@ -2872,7 +2872,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_quantity_attribute_up
         return;
       }
 // Start parsing value
-      battery_quantity = json_payload.at("value").get<int8_t>();
+      battery_quantity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -2935,7 +2935,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_rated_voltage_attribu
   }
 
 
-  int8_t battery_rated_voltage = {};
+  uint8_t battery_rated_voltage = {};
 
   nlohmann::json json_payload;
   try {
@@ -2948,7 +2948,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_rated_voltage_attribu
         return;
       }
 // Start parsing value
-      battery_rated_voltage = json_payload.at("value").get<int8_t>();
+      battery_rated_voltage = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3087,7 +3087,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_min_threshold
   }
 
 
-  int8_t battery_voltage_min_threshold = {};
+  uint8_t battery_voltage_min_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -3100,7 +3100,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_min_threshold
         return;
       }
 // Start parsing value
-      battery_voltage_min_threshold = json_payload.at("value").get<int8_t>();
+      battery_voltage_min_threshold = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3163,7 +3163,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_threshold1_at
   }
 
 
-  int8_t battery_voltage_threshold1 = {};
+  uint8_t battery_voltage_threshold1 = {};
 
   nlohmann::json json_payload;
   try {
@@ -3176,7 +3176,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_threshold1_at
         return;
       }
 // Start parsing value
-      battery_voltage_threshold1 = json_payload.at("value").get<int8_t>();
+      battery_voltage_threshold1 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3239,7 +3239,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_threshold2_at
   }
 
 
-  int8_t battery_voltage_threshold2 = {};
+  uint8_t battery_voltage_threshold2 = {};
 
   nlohmann::json json_payload;
   try {
@@ -3252,7 +3252,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_threshold2_at
         return;
       }
 // Start parsing value
-      battery_voltage_threshold2 = json_payload.at("value").get<int8_t>();
+      battery_voltage_threshold2 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3315,7 +3315,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_threshold3_at
   }
 
 
-  int8_t battery_voltage_threshold3 = {};
+  uint8_t battery_voltage_threshold3 = {};
 
   nlohmann::json json_payload;
   try {
@@ -3328,7 +3328,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_voltage_threshold3_at
         return;
       }
 // Start parsing value
-      battery_voltage_threshold3 = json_payload.at("value").get<int8_t>();
+      battery_voltage_threshold3 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3391,7 +3391,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_min_thresh
   }
 
 
-  int8_t battery_percentage_min_threshold = {};
+  uint8_t battery_percentage_min_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -3404,7 +3404,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_min_thresh
         return;
       }
 // Start parsing value
-      battery_percentage_min_threshold = json_payload.at("value").get<int8_t>();
+      battery_percentage_min_threshold = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3467,7 +3467,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_threshold1
   }
 
 
-  int8_t battery_percentage_threshold1 = {};
+  uint8_t battery_percentage_threshold1 = {};
 
   nlohmann::json json_payload;
   try {
@@ -3480,7 +3480,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_threshold1
         return;
       }
 // Start parsing value
-      battery_percentage_threshold1 = json_payload.at("value").get<int8_t>();
+      battery_percentage_threshold1 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3543,7 +3543,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_threshold2
   }
 
 
-  int8_t battery_percentage_threshold2 = {};
+  uint8_t battery_percentage_threshold2 = {};
 
   nlohmann::json json_payload;
   try {
@@ -3556,7 +3556,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_threshold2
         return;
       }
 // Start parsing value
-      battery_percentage_threshold2 = json_payload.at("value").get<int8_t>();
+      battery_percentage_threshold2 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3619,7 +3619,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_threshold3
   }
 
 
-  int8_t battery_percentage_threshold3 = {};
+  uint8_t battery_percentage_threshold3 = {};
 
   nlohmann::json json_payload;
   try {
@@ -3632,7 +3632,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery_percentage_threshold3
         return;
       }
 // Start parsing value
-      battery_percentage_threshold3 = json_payload.at("value").get<int8_t>();
+      battery_percentage_threshold3 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3771,7 +3771,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_attribute_up
   }
 
 
-  int8_t battery2_voltage = {};
+  uint8_t battery2_voltage = {};
 
   nlohmann::json json_payload;
   try {
@@ -3784,7 +3784,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_attribute_up
         return;
       }
 // Start parsing value
-      battery2_voltage = json_payload.at("value").get<int8_t>();
+      battery2_voltage = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -3847,7 +3847,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_remaining
   }
 
 
-  int8_t battery2_percentage_remaining = {};
+  uint8_t battery2_percentage_remaining = {};
 
   nlohmann::json json_payload;
   try {
@@ -3860,7 +3860,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_remaining
         return;
       }
 // Start parsing value
-      battery2_percentage_remaining = json_payload.at("value").get<int8_t>();
+      battery2_percentage_remaining = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4083,7 +4083,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2a_hr_rating_attribute
   }
 
 
-  int16_t battery2a_hr_rating = {};
+  uint16_t battery2a_hr_rating = {};
 
   nlohmann::json json_payload;
   try {
@@ -4096,7 +4096,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2a_hr_rating_attribute
         return;
       }
 // Start parsing value
-      battery2a_hr_rating = json_payload.at("value").get<int16_t>();
+      battery2a_hr_rating = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -4159,7 +4159,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_quantity_attribute_u
   }
 
 
-  int8_t battery2_quantity = {};
+  uint8_t battery2_quantity = {};
 
   nlohmann::json json_payload;
   try {
@@ -4172,7 +4172,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_quantity_attribute_u
         return;
       }
 // Start parsing value
-      battery2_quantity = json_payload.at("value").get<int8_t>();
+      battery2_quantity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4235,7 +4235,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_rated_voltage_attrib
   }
 
 
-  int8_t battery2_rated_voltage = {};
+  uint8_t battery2_rated_voltage = {};
 
   nlohmann::json json_payload;
   try {
@@ -4248,7 +4248,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_rated_voltage_attrib
         return;
       }
 // Start parsing value
-      battery2_rated_voltage = json_payload.at("value").get<int8_t>();
+      battery2_rated_voltage = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4387,7 +4387,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_min_threshol
   }
 
 
-  int8_t battery2_voltage_min_threshold = {};
+  uint8_t battery2_voltage_min_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -4400,7 +4400,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_min_threshol
         return;
       }
 // Start parsing value
-      battery2_voltage_min_threshold = json_payload.at("value").get<int8_t>();
+      battery2_voltage_min_threshold = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4463,7 +4463,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_threshold1_a
   }
 
 
-  int8_t battery2_voltage_threshold1 = {};
+  uint8_t battery2_voltage_threshold1 = {};
 
   nlohmann::json json_payload;
   try {
@@ -4476,7 +4476,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_threshold1_a
         return;
       }
 // Start parsing value
-      battery2_voltage_threshold1 = json_payload.at("value").get<int8_t>();
+      battery2_voltage_threshold1 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4539,7 +4539,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_threshold2_a
   }
 
 
-  int8_t battery2_voltage_threshold2 = {};
+  uint8_t battery2_voltage_threshold2 = {};
 
   nlohmann::json json_payload;
   try {
@@ -4552,7 +4552,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_threshold2_a
         return;
       }
 // Start parsing value
-      battery2_voltage_threshold2 = json_payload.at("value").get<int8_t>();
+      battery2_voltage_threshold2 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4615,7 +4615,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_threshold3_a
   }
 
 
-  int8_t battery2_voltage_threshold3 = {};
+  uint8_t battery2_voltage_threshold3 = {};
 
   nlohmann::json json_payload;
   try {
@@ -4628,7 +4628,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_voltage_threshold3_a
         return;
       }
 // Start parsing value
-      battery2_voltage_threshold3 = json_payload.at("value").get<int8_t>();
+      battery2_voltage_threshold3 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4691,7 +4691,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_min_thres
   }
 
 
-  int8_t battery2_percentage_min_threshold = {};
+  uint8_t battery2_percentage_min_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -4704,7 +4704,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_min_thres
         return;
       }
 // Start parsing value
-      battery2_percentage_min_threshold = json_payload.at("value").get<int8_t>();
+      battery2_percentage_min_threshold = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4767,7 +4767,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_threshold
   }
 
 
-  int8_t battery2_percentage_threshold1 = {};
+  uint8_t battery2_percentage_threshold1 = {};
 
   nlohmann::json json_payload;
   try {
@@ -4780,7 +4780,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_threshold
         return;
       }
 // Start parsing value
-      battery2_percentage_threshold1 = json_payload.at("value").get<int8_t>();
+      battery2_percentage_threshold1 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4843,7 +4843,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_threshold
   }
 
 
-  int8_t battery2_percentage_threshold2 = {};
+  uint8_t battery2_percentage_threshold2 = {};
 
   nlohmann::json json_payload;
   try {
@@ -4856,7 +4856,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_threshold
         return;
       }
 // Start parsing value
-      battery2_percentage_threshold2 = json_payload.at("value").get<int8_t>();
+      battery2_percentage_threshold2 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -4919,7 +4919,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_threshold
   }
 
 
-  int8_t battery2_percentage_threshold3 = {};
+  uint8_t battery2_percentage_threshold3 = {};
 
   nlohmann::json json_payload;
   try {
@@ -4932,7 +4932,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery2_percentage_threshold
         return;
       }
 // Start parsing value
-      battery2_percentage_threshold3 = json_payload.at("value").get<int8_t>();
+      battery2_percentage_threshold3 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -5071,7 +5071,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_attribute_up
   }
 
 
-  int8_t battery3_voltage = {};
+  uint8_t battery3_voltage = {};
 
   nlohmann::json json_payload;
   try {
@@ -5084,7 +5084,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_attribute_up
         return;
       }
 // Start parsing value
-      battery3_voltage = json_payload.at("value").get<int8_t>();
+      battery3_voltage = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -5147,7 +5147,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_remaining
   }
 
 
-  int8_t battery3_percentage_remaining = {};
+  uint8_t battery3_percentage_remaining = {};
 
   nlohmann::json json_payload;
   try {
@@ -5160,7 +5160,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_remaining
         return;
       }
 // Start parsing value
-      battery3_percentage_remaining = json_payload.at("value").get<int8_t>();
+      battery3_percentage_remaining = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -5383,7 +5383,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3a_hr_rating_attribute
   }
 
 
-  int16_t battery3a_hr_rating = {};
+  uint16_t battery3a_hr_rating = {};
 
   nlohmann::json json_payload;
   try {
@@ -5396,7 +5396,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3a_hr_rating_attribute
         return;
       }
 // Start parsing value
-      battery3a_hr_rating = json_payload.at("value").get<int16_t>();
+      battery3a_hr_rating = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -5459,7 +5459,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_quantity_attribute_u
   }
 
 
-  int8_t battery3_quantity = {};
+  uint8_t battery3_quantity = {};
 
   nlohmann::json json_payload;
   try {
@@ -5472,7 +5472,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_quantity_attribute_u
         return;
       }
 // Start parsing value
-      battery3_quantity = json_payload.at("value").get<int8_t>();
+      battery3_quantity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -5535,7 +5535,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_rated_voltage_attrib
   }
 
 
-  int8_t battery3_rated_voltage = {};
+  uint8_t battery3_rated_voltage = {};
 
   nlohmann::json json_payload;
   try {
@@ -5548,7 +5548,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_rated_voltage_attrib
         return;
       }
 // Start parsing value
-      battery3_rated_voltage = json_payload.at("value").get<int8_t>();
+      battery3_rated_voltage = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -5687,7 +5687,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_min_threshol
   }
 
 
-  int8_t battery3_voltage_min_threshold = {};
+  uint8_t battery3_voltage_min_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -5700,7 +5700,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_min_threshol
         return;
       }
 // Start parsing value
-      battery3_voltage_min_threshold = json_payload.at("value").get<int8_t>();
+      battery3_voltage_min_threshold = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -5763,7 +5763,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_threshold1_a
   }
 
 
-  int8_t battery3_voltage_threshold1 = {};
+  uint8_t battery3_voltage_threshold1 = {};
 
   nlohmann::json json_payload;
   try {
@@ -5776,7 +5776,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_threshold1_a
         return;
       }
 // Start parsing value
-      battery3_voltage_threshold1 = json_payload.at("value").get<int8_t>();
+      battery3_voltage_threshold1 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -5839,7 +5839,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_threshold2_a
   }
 
 
-  int8_t battery3_voltage_threshold2 = {};
+  uint8_t battery3_voltage_threshold2 = {};
 
   nlohmann::json json_payload;
   try {
@@ -5852,7 +5852,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_threshold2_a
         return;
       }
 // Start parsing value
-      battery3_voltage_threshold2 = json_payload.at("value").get<int8_t>();
+      battery3_voltage_threshold2 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -5915,7 +5915,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_threshold3_a
   }
 
 
-  int8_t battery3_voltage_threshold3 = {};
+  uint8_t battery3_voltage_threshold3 = {};
 
   nlohmann::json json_payload;
   try {
@@ -5928,7 +5928,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_voltage_threshold3_a
         return;
       }
 // Start parsing value
-      battery3_voltage_threshold3 = json_payload.at("value").get<int8_t>();
+      battery3_voltage_threshold3 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -5991,7 +5991,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_min_thres
   }
 
 
-  int8_t battery3_percentage_min_threshold = {};
+  uint8_t battery3_percentage_min_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -6004,7 +6004,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_min_thres
         return;
       }
 // Start parsing value
-      battery3_percentage_min_threshold = json_payload.at("value").get<int8_t>();
+      battery3_percentage_min_threshold = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -6067,7 +6067,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_threshold
   }
 
 
-  int8_t battery3_percentage_threshold1 = {};
+  uint8_t battery3_percentage_threshold1 = {};
 
   nlohmann::json json_payload;
   try {
@@ -6080,7 +6080,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_threshold
         return;
       }
 // Start parsing value
-      battery3_percentage_threshold1 = json_payload.at("value").get<int8_t>();
+      battery3_percentage_threshold1 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -6143,7 +6143,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_threshold
   }
 
 
-  int8_t battery3_percentage_threshold2 = {};
+  uint8_t battery3_percentage_threshold2 = {};
 
   nlohmann::json json_payload;
   try {
@@ -6156,7 +6156,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_threshold
         return;
       }
 // Start parsing value
-      battery3_percentage_threshold2 = json_payload.at("value").get<int8_t>();
+      battery3_percentage_threshold2 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -6219,7 +6219,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_threshold
   }
 
 
-  int8_t battery3_percentage_threshold3 = {};
+  uint8_t battery3_percentage_threshold3 = {};
 
   nlohmann::json json_payload;
   try {
@@ -6232,7 +6232,7 @@ static void uic_mqtt_dotdot_on_power_configuration_battery3_percentage_threshold
         return;
       }
 // Start parsing value
-      battery3_percentage_threshold3 = json_payload.at("value").get<int8_t>();
+      battery3_percentage_threshold3 = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -7091,7 +7091,7 @@ static void uic_mqtt_dotdot_on_device_temperature_configuration_over_temp_total_
   }
 
 
-  int16_t over_temp_total_dwell = {};
+  uint16_t over_temp_total_dwell = {};
 
   nlohmann::json json_payload;
   try {
@@ -7104,7 +7104,7 @@ static void uic_mqtt_dotdot_on_device_temperature_configuration_over_temp_total_
         return;
       }
 // Start parsing value
-      over_temp_total_dwell = json_payload.at("value").get<int16_t>();
+      over_temp_total_dwell = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -7395,7 +7395,7 @@ static void uic_mqtt_dotdot_on_device_temperature_configuration_low_temp_dwell_t
   }
 
 
-  int32_t low_temp_dwell_trip_point = {};
+  uint32_t low_temp_dwell_trip_point = {};
 
   nlohmann::json json_payload;
   try {
@@ -7408,7 +7408,7 @@ static void uic_mqtt_dotdot_on_device_temperature_configuration_low_temp_dwell_t
         return;
       }
 // Start parsing value
-      low_temp_dwell_trip_point = json_payload.at("value").get<int32_t>();
+      low_temp_dwell_trip_point = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -7471,7 +7471,7 @@ static void uic_mqtt_dotdot_on_device_temperature_configuration_high_temp_dwell_
   }
 
 
-  int32_t high_temp_dwell_trip_point = {};
+  uint32_t high_temp_dwell_trip_point = {};
 
   nlohmann::json json_payload;
   try {
@@ -7484,7 +7484,7 @@ static void uic_mqtt_dotdot_on_device_temperature_configuration_high_temp_dwell_
         return;
       }
 // Start parsing value
-      high_temp_dwell_trip_point = json_payload.at("value").get<int32_t>();
+      high_temp_dwell_trip_point = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -7647,7 +7647,7 @@ static void uic_mqtt_dotdot_on_identify_identify_time_attribute_update(
   }
 
 
-  int16_t identify_time = {};
+  uint16_t identify_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -7660,7 +7660,7 @@ static void uic_mqtt_dotdot_on_identify_identify_time_attribute_update(
         return;
       }
 // Start parsing value
-      identify_time = json_payload.at("value").get<int16_t>();
+      identify_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -7877,7 +7877,7 @@ static void uic_mqtt_dotdot_on_scenes_scene_count_attribute_update(
   }
 
 
-  int8_t scene_count = {};
+  uint8_t scene_count = {};
 
   nlohmann::json json_payload;
   try {
@@ -7890,7 +7890,7 @@ static void uic_mqtt_dotdot_on_scenes_scene_count_attribute_update(
         return;
       }
 // Start parsing value
-      scene_count = json_payload.at("value").get<int8_t>();
+      scene_count = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -7953,7 +7953,7 @@ static void uic_mqtt_dotdot_on_scenes_current_scene_attribute_update(
   }
 
 
-  int8_t current_scene = {};
+  uint8_t current_scene = {};
 
   nlohmann::json json_payload;
   try {
@@ -7966,7 +7966,7 @@ static void uic_mqtt_dotdot_on_scenes_current_scene_attribute_update(
         return;
       }
 // Start parsing value
-      current_scene = json_payload.at("value").get<int8_t>();
+      current_scene = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -8029,7 +8029,7 @@ static void uic_mqtt_dotdot_on_scenes_current_group_attribute_update(
   }
 
 
-  uint8_t * current_group = {};
+  uint16_t current_group = {};
 
   nlohmann::json json_payload;
   try {
@@ -8042,7 +8042,7 @@ static void uic_mqtt_dotdot_on_scenes_current_group_attribute_update(
         return;
       }
 // Start parsing value
-      current_group = json_payload.at("value").get<uint8_t *>();
+      current_group = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -8350,11 +8350,11 @@ static void uic_mqtt_dotdot_on_scenes_scene_table_attribute_update(
       auto &scene_table_json = json_payload.at("value");
       for (size_t i = 0; i < scene_table_json.size(); i++) {
         SSceneTable element = {};
-        element.SceneID = scene_table_json.at(i).at("SceneID").get<int16_t>();
-        element.GroupID = scene_table_json.at(i).at("GroupID").get<int16_t>();
+        element.SceneID = scene_table_json.at(i).at("SceneID").get<uint16_t>();
+        element.GroupID = scene_table_json.at(i).at("GroupID").get<uint16_t>();
         element.SceneName = scene_table_json.at(i).at("SceneName").get_ptr<const std::string*>()->c_str();
-        element.TransitionTime = scene_table_json.at(i).at("TransitionTime").get<int16_t>();
-        element.TransitionTime100ms = scene_table_json.at(i).at("TransitionTime100ms").get<int8_t>();
+        element.TransitionTime = scene_table_json.at(i).at("TransitionTime").get<uint16_t>();
+        element.TransitionTime100ms = scene_table_json.at(i).at("TransitionTime100ms").get<uint8_t>();
         element.SceneTableExtensions = scene_table_json.at(i).at("SceneTableExtensions").get_ptr<const std::string*>()->c_str();
         scene_table.push_back(element);
       }
@@ -8663,7 +8663,7 @@ static void uic_mqtt_dotdot_on_on_off_on_time_attribute_update(
   }
 
 
-  int16_t on_time = {};
+  uint16_t on_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -8676,7 +8676,7 @@ static void uic_mqtt_dotdot_on_on_off_on_time_attribute_update(
         return;
       }
 // Start parsing value
-      on_time = json_payload.at("value").get<int16_t>();
+      on_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -8739,7 +8739,7 @@ static void uic_mqtt_dotdot_on_on_off_off_wait_time_attribute_update(
   }
 
 
-  int16_t off_wait_time = {};
+  uint16_t off_wait_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -8752,7 +8752,7 @@ static void uic_mqtt_dotdot_on_on_off_off_wait_time_attribute_update(
         return;
       }
 // Start parsing value
-      off_wait_time = json_payload.at("value").get<int16_t>();
+      off_wait_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -8980,7 +8980,7 @@ static void uic_mqtt_dotdot_on_level_current_level_attribute_update(
   }
 
 
-  int8_t current_level = {};
+  uint8_t current_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -8993,7 +8993,7 @@ static void uic_mqtt_dotdot_on_level_current_level_attribute_update(
         return;
       }
 // Start parsing value
-      current_level = json_payload.at("value").get<int8_t>();
+      current_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -9056,7 +9056,7 @@ static void uic_mqtt_dotdot_on_level_remaining_time_attribute_update(
   }
 
 
-  int16_t remaining_time = {};
+  uint16_t remaining_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -9069,7 +9069,7 @@ static void uic_mqtt_dotdot_on_level_remaining_time_attribute_update(
         return;
       }
 // Start parsing value
-      remaining_time = json_payload.at("value").get<int16_t>();
+      remaining_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -9132,7 +9132,7 @@ static void uic_mqtt_dotdot_on_level_min_level_attribute_update(
   }
 
 
-  int8_t min_level = {};
+  uint8_t min_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -9145,7 +9145,7 @@ static void uic_mqtt_dotdot_on_level_min_level_attribute_update(
         return;
       }
 // Start parsing value
-      min_level = json_payload.at("value").get<int8_t>();
+      min_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -9208,7 +9208,7 @@ static void uic_mqtt_dotdot_on_level_max_level_attribute_update(
   }
 
 
-  int8_t max_level = {};
+  uint8_t max_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -9221,7 +9221,7 @@ static void uic_mqtt_dotdot_on_level_max_level_attribute_update(
         return;
       }
 // Start parsing value
-      max_level = json_payload.at("value").get<int8_t>();
+      max_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -9284,7 +9284,7 @@ static void uic_mqtt_dotdot_on_level_current_frequency_attribute_update(
   }
 
 
-  int16_t current_frequency = {};
+  uint16_t current_frequency = {};
 
   nlohmann::json json_payload;
   try {
@@ -9297,7 +9297,7 @@ static void uic_mqtt_dotdot_on_level_current_frequency_attribute_update(
         return;
       }
 // Start parsing value
-      current_frequency = json_payload.at("value").get<int16_t>();
+      current_frequency = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -9360,7 +9360,7 @@ static void uic_mqtt_dotdot_on_level_min_frequency_attribute_update(
   }
 
 
-  int16_t min_frequency = {};
+  uint16_t min_frequency = {};
 
   nlohmann::json json_payload;
   try {
@@ -9373,7 +9373,7 @@ static void uic_mqtt_dotdot_on_level_min_frequency_attribute_update(
         return;
       }
 // Start parsing value
-      min_frequency = json_payload.at("value").get<int16_t>();
+      min_frequency = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -9436,7 +9436,7 @@ static void uic_mqtt_dotdot_on_level_max_frequency_attribute_update(
   }
 
 
-  int16_t max_frequency = {};
+  uint16_t max_frequency = {};
 
   nlohmann::json json_payload;
   try {
@@ -9449,7 +9449,7 @@ static void uic_mqtt_dotdot_on_level_max_frequency_attribute_update(
         return;
       }
 // Start parsing value
-      max_frequency = json_payload.at("value").get<int16_t>();
+      max_frequency = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -9588,7 +9588,7 @@ static void uic_mqtt_dotdot_on_level_on_off_transition_time_attribute_update(
   }
 
 
-  int16_t on_off_transition_time = {};
+  uint16_t on_off_transition_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -9601,7 +9601,7 @@ static void uic_mqtt_dotdot_on_level_on_off_transition_time_attribute_update(
         return;
       }
 // Start parsing value
-      on_off_transition_time = json_payload.at("value").get<int16_t>();
+      on_off_transition_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -9664,7 +9664,7 @@ static void uic_mqtt_dotdot_on_level_on_level_attribute_update(
   }
 
 
-  int8_t on_level = {};
+  uint8_t on_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -9677,7 +9677,7 @@ static void uic_mqtt_dotdot_on_level_on_level_attribute_update(
         return;
       }
 // Start parsing value
-      on_level = json_payload.at("value").get<int8_t>();
+      on_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -9740,7 +9740,7 @@ static void uic_mqtt_dotdot_on_level_on_transition_time_attribute_update(
   }
 
 
-  int16_t on_transition_time = {};
+  uint16_t on_transition_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -9753,7 +9753,7 @@ static void uic_mqtt_dotdot_on_level_on_transition_time_attribute_update(
         return;
       }
 // Start parsing value
-      on_transition_time = json_payload.at("value").get<int16_t>();
+      on_transition_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -9816,7 +9816,7 @@ static void uic_mqtt_dotdot_on_level_off_transition_time_attribute_update(
   }
 
 
-  int16_t off_transition_time = {};
+  uint16_t off_transition_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -9829,7 +9829,7 @@ static void uic_mqtt_dotdot_on_level_off_transition_time_attribute_update(
         return;
       }
 // Start parsing value
-      off_transition_time = json_payload.at("value").get<int16_t>();
+      off_transition_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -9892,7 +9892,7 @@ static void uic_mqtt_dotdot_on_level_default_move_rate_attribute_update(
   }
 
 
-  int16_t default_move_rate = {};
+  uint16_t default_move_rate = {};
 
   nlohmann::json json_payload;
   try {
@@ -9905,7 +9905,7 @@ static void uic_mqtt_dotdot_on_level_default_move_rate_attribute_update(
         return;
       }
 // Start parsing value
-      default_move_rate = json_payload.at("value").get<int16_t>();
+      default_move_rate = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -9968,7 +9968,7 @@ static void uic_mqtt_dotdot_on_level_start_up_current_level_attribute_update(
   }
 
 
-  int8_t start_up_current_level = {};
+  uint8_t start_up_current_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -9981,7 +9981,7 @@ static void uic_mqtt_dotdot_on_level_start_up_current_level_attribute_update(
         return;
       }
 // Start parsing value
-      start_up_current_level = json_payload.at("value").get<int8_t>();
+      start_up_current_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -10184,7 +10184,7 @@ static void uic_mqtt_dotdot_on_alarms_alarm_count_attribute_update(
   }
 
 
-  int16_t alarm_count = {};
+  uint16_t alarm_count = {};
 
   nlohmann::json json_payload;
   try {
@@ -10197,7 +10197,7 @@ static void uic_mqtt_dotdot_on_alarms_alarm_count_attribute_update(
         return;
       }
 // Start parsing value
-      alarm_count = json_payload.at("value").get<int16_t>();
+      alarm_count = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -10305,7 +10305,7 @@ static void uic_mqtt_dotdot_on_time_time_attribute_update(
   }
 
 
-  uint8_t time = {};
+  uint32_t time = {};
 
   nlohmann::json json_payload;
   try {
@@ -10318,7 +10318,7 @@ static void uic_mqtt_dotdot_on_time_time_attribute_update(
         return;
       }
 // Start parsing value
-      time = json_payload.at("value").get<uint8_t>();
+      time = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -10533,7 +10533,7 @@ static void uic_mqtt_dotdot_on_time_dst_start_attribute_update(
   }
 
 
-  int32_t dst_start = {};
+  uint32_t dst_start = {};
 
   nlohmann::json json_payload;
   try {
@@ -10546,7 +10546,7 @@ static void uic_mqtt_dotdot_on_time_dst_start_attribute_update(
         return;
       }
 // Start parsing value
-      dst_start = json_payload.at("value").get<int32_t>();
+      dst_start = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -10609,7 +10609,7 @@ static void uic_mqtt_dotdot_on_time_dst_end_attribute_update(
   }
 
 
-  int32_t dst_end = {};
+  uint32_t dst_end = {};
 
   nlohmann::json json_payload;
   try {
@@ -10622,7 +10622,7 @@ static void uic_mqtt_dotdot_on_time_dst_end_attribute_update(
         return;
       }
 // Start parsing value
-      dst_end = json_payload.at("value").get<int32_t>();
+      dst_end = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -10761,7 +10761,7 @@ static void uic_mqtt_dotdot_on_time_standard_time_attribute_update(
   }
 
 
-  int32_t standard_time = {};
+  uint32_t standard_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -10774,7 +10774,7 @@ static void uic_mqtt_dotdot_on_time_standard_time_attribute_update(
         return;
       }
 // Start parsing value
-      standard_time = json_payload.at("value").get<int32_t>();
+      standard_time = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -10837,7 +10837,7 @@ static void uic_mqtt_dotdot_on_time_local_time_attribute_update(
   }
 
 
-  int32_t local_time = {};
+  uint32_t local_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -10850,7 +10850,7 @@ static void uic_mqtt_dotdot_on_time_local_time_attribute_update(
         return;
       }
 // Start parsing value
-      local_time = json_payload.at("value").get<int32_t>();
+      local_time = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -10913,7 +10913,7 @@ static void uic_mqtt_dotdot_on_time_last_set_time_attribute_update(
   }
 
 
-  uint8_t last_set_time = {};
+  uint32_t last_set_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -10926,7 +10926,7 @@ static void uic_mqtt_dotdot_on_time_last_set_time_attribute_update(
         return;
       }
 // Start parsing value
-      last_set_time = json_payload.at("value").get<uint8_t>();
+      last_set_time = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -10989,7 +10989,7 @@ static void uic_mqtt_dotdot_on_time_valid_until_time_attribute_update(
   }
 
 
-  uint8_t valid_until_time = {};
+  uint32_t valid_until_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -11002,7 +11002,7 @@ static void uic_mqtt_dotdot_on_time_valid_until_time_attribute_update(
         return;
       }
 // Start parsing value
-      valid_until_time = json_payload.at("value").get<uint8_t>();
+      valid_until_time = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -11179,7 +11179,7 @@ static void uic_mqtt_dotdot_on_poll_control_check_in_interval_attribute_update(
   }
 
 
-  int32_t check_in_interval = {};
+  uint32_t check_in_interval = {};
 
   nlohmann::json json_payload;
   try {
@@ -11192,7 +11192,7 @@ static void uic_mqtt_dotdot_on_poll_control_check_in_interval_attribute_update(
         return;
       }
 // Start parsing value
-      check_in_interval = json_payload.at("value").get<int32_t>();
+      check_in_interval = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -11255,7 +11255,7 @@ static void uic_mqtt_dotdot_on_poll_control_long_poll_interval_attribute_update(
   }
 
 
-  int32_t long_poll_interval = {};
+  uint32_t long_poll_interval = {};
 
   nlohmann::json json_payload;
   try {
@@ -11268,7 +11268,7 @@ static void uic_mqtt_dotdot_on_poll_control_long_poll_interval_attribute_update(
         return;
       }
 // Start parsing value
-      long_poll_interval = json_payload.at("value").get<int32_t>();
+      long_poll_interval = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -11331,7 +11331,7 @@ static void uic_mqtt_dotdot_on_poll_control_short_poll_interval_attribute_update
   }
 
 
-  int16_t short_poll_interval = {};
+  uint16_t short_poll_interval = {};
 
   nlohmann::json json_payload;
   try {
@@ -11344,7 +11344,7 @@ static void uic_mqtt_dotdot_on_poll_control_short_poll_interval_attribute_update
         return;
       }
 // Start parsing value
-      short_poll_interval = json_payload.at("value").get<int16_t>();
+      short_poll_interval = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -11407,7 +11407,7 @@ static void uic_mqtt_dotdot_on_poll_control_fast_poll_timeout_attribute_update(
   }
 
 
-  int16_t fast_poll_timeout = {};
+  uint16_t fast_poll_timeout = {};
 
   nlohmann::json json_payload;
   try {
@@ -11420,7 +11420,7 @@ static void uic_mqtt_dotdot_on_poll_control_fast_poll_timeout_attribute_update(
         return;
       }
 // Start parsing value
-      fast_poll_timeout = json_payload.at("value").get<int16_t>();
+      fast_poll_timeout = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -11483,7 +11483,7 @@ static void uic_mqtt_dotdot_on_poll_control_check_in_interval_min_attribute_upda
   }
 
 
-  int32_t check_in_interval_min = {};
+  uint32_t check_in_interval_min = {};
 
   nlohmann::json json_payload;
   try {
@@ -11496,7 +11496,7 @@ static void uic_mqtt_dotdot_on_poll_control_check_in_interval_min_attribute_upda
         return;
       }
 // Start parsing value
-      check_in_interval_min = json_payload.at("value").get<int32_t>();
+      check_in_interval_min = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -11559,7 +11559,7 @@ static void uic_mqtt_dotdot_on_poll_control_long_poll_interval_min_attribute_upd
   }
 
 
-  int32_t long_poll_interval_min = {};
+  uint32_t long_poll_interval_min = {};
 
   nlohmann::json json_payload;
   try {
@@ -11572,7 +11572,7 @@ static void uic_mqtt_dotdot_on_poll_control_long_poll_interval_min_attribute_upd
         return;
       }
 // Start parsing value
-      long_poll_interval_min = json_payload.at("value").get<int32_t>();
+      long_poll_interval_min = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -11635,7 +11635,7 @@ static void uic_mqtt_dotdot_on_poll_control_fast_poll_timeout_max_attribute_upda
   }
 
 
-  int16_t fast_poll_timeout_max = {};
+  uint16_t fast_poll_timeout_max = {};
 
   nlohmann::json json_payload;
   try {
@@ -11648,7 +11648,7 @@ static void uic_mqtt_dotdot_on_poll_control_fast_poll_timeout_max_attribute_upda
         return;
       }
 // Start parsing value
-      fast_poll_timeout_max = json_payload.at("value").get<int16_t>();
+      fast_poll_timeout_max = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -11799,7 +11799,7 @@ static void uic_mqtt_dotdot_on_shade_configuration_physical_closed_limit_attribu
   }
 
 
-  int16_t physical_closed_limit = {};
+  uint16_t physical_closed_limit = {};
 
   nlohmann::json json_payload;
   try {
@@ -11812,7 +11812,7 @@ static void uic_mqtt_dotdot_on_shade_configuration_physical_closed_limit_attribu
         return;
       }
 // Start parsing value
-      physical_closed_limit = json_payload.at("value").get<int16_t>();
+      physical_closed_limit = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -11875,7 +11875,7 @@ static void uic_mqtt_dotdot_on_shade_configuration_motor_step_size_attribute_upd
   }
 
 
-  int8_t motor_step_size = {};
+  uint8_t motor_step_size = {};
 
   nlohmann::json json_payload;
   try {
@@ -11888,7 +11888,7 @@ static void uic_mqtt_dotdot_on_shade_configuration_motor_step_size_attribute_upd
         return;
       }
 // Start parsing value
-      motor_step_size = json_payload.at("value").get<int8_t>();
+      motor_step_size = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -12027,7 +12027,7 @@ static void uic_mqtt_dotdot_on_shade_configuration_closed_limit_attribute_update
   }
 
 
-  int16_t closed_limit = {};
+  uint16_t closed_limit = {};
 
   nlohmann::json json_payload;
   try {
@@ -12040,7 +12040,7 @@ static void uic_mqtt_dotdot_on_shade_configuration_closed_limit_attribute_update
         return;
       }
 // Start parsing value
-      closed_limit = json_payload.at("value").get<int16_t>();
+      closed_limit = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -12630,7 +12630,7 @@ static void uic_mqtt_dotdot_on_door_lock_door_open_events_attribute_update(
   }
 
 
-  int32_t door_open_events = {};
+  uint32_t door_open_events = {};
 
   nlohmann::json json_payload;
   try {
@@ -12643,7 +12643,7 @@ static void uic_mqtt_dotdot_on_door_lock_door_open_events_attribute_update(
         return;
       }
 // Start parsing value
-      door_open_events = json_payload.at("value").get<int32_t>();
+      door_open_events = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -12706,7 +12706,7 @@ static void uic_mqtt_dotdot_on_door_lock_door_closed_events_attribute_update(
   }
 
 
-  int32_t door_closed_events = {};
+  uint32_t door_closed_events = {};
 
   nlohmann::json json_payload;
   try {
@@ -12719,7 +12719,7 @@ static void uic_mqtt_dotdot_on_door_lock_door_closed_events_attribute_update(
         return;
       }
 // Start parsing value
-      door_closed_events = json_payload.at("value").get<int32_t>();
+      door_closed_events = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -12782,7 +12782,7 @@ static void uic_mqtt_dotdot_on_door_lock_open_period_attribute_update(
   }
 
 
-  int16_t open_period = {};
+  uint16_t open_period = {};
 
   nlohmann::json json_payload;
   try {
@@ -12795,7 +12795,7 @@ static void uic_mqtt_dotdot_on_door_lock_open_period_attribute_update(
         return;
       }
 // Start parsing value
-      open_period = json_payload.at("value").get<int16_t>();
+      open_period = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -12858,7 +12858,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_log_records_supported_attribu
   }
 
 
-  int16_t number_of_log_records_supported = {};
+  uint16_t number_of_log_records_supported = {};
 
   nlohmann::json json_payload;
   try {
@@ -12871,7 +12871,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_log_records_supported_attribu
         return;
       }
 // Start parsing value
-      number_of_log_records_supported = json_payload.at("value").get<int16_t>();
+      number_of_log_records_supported = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -12934,7 +12934,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_total_users_supported_attribu
   }
 
 
-  int16_t number_of_total_users_supported = {};
+  uint16_t number_of_total_users_supported = {};
 
   nlohmann::json json_payload;
   try {
@@ -12947,7 +12947,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_total_users_supported_attribu
         return;
       }
 // Start parsing value
-      number_of_total_users_supported = json_payload.at("value").get<int16_t>();
+      number_of_total_users_supported = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -13010,7 +13010,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_pin_users_supported_attribute
   }
 
 
-  int16_t number_of_pin_users_supported = {};
+  uint16_t number_of_pin_users_supported = {};
 
   nlohmann::json json_payload;
   try {
@@ -13023,7 +13023,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_pin_users_supported_attribute
         return;
       }
 // Start parsing value
-      number_of_pin_users_supported = json_payload.at("value").get<int16_t>();
+      number_of_pin_users_supported = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -13086,7 +13086,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_rfid_users_supported_attribut
   }
 
 
-  int16_t number_of_rfid_users_supported = {};
+  uint16_t number_of_rfid_users_supported = {};
 
   nlohmann::json json_payload;
   try {
@@ -13099,7 +13099,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_rfid_users_supported_attribut
         return;
       }
 // Start parsing value
-      number_of_rfid_users_supported = json_payload.at("value").get<int16_t>();
+      number_of_rfid_users_supported = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -13162,7 +13162,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_week_day_schedules_supported_
   }
 
 
-  int8_t number_of_week_day_schedules_supported_per_user = {};
+  uint8_t number_of_week_day_schedules_supported_per_user = {};
 
   nlohmann::json json_payload;
   try {
@@ -13175,7 +13175,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_week_day_schedules_supported_
         return;
       }
 // Start parsing value
-      number_of_week_day_schedules_supported_per_user = json_payload.at("value").get<int8_t>();
+      number_of_week_day_schedules_supported_per_user = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -13238,7 +13238,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_year_day_schedules_supported_
   }
 
 
-  int8_t number_of_year_day_schedules_supported_per_user = {};
+  uint8_t number_of_year_day_schedules_supported_per_user = {};
 
   nlohmann::json json_payload;
   try {
@@ -13251,7 +13251,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_year_day_schedules_supported_
         return;
       }
 // Start parsing value
-      number_of_year_day_schedules_supported_per_user = json_payload.at("value").get<int8_t>();
+      number_of_year_day_schedules_supported_per_user = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -13314,7 +13314,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_holiday_schedules_supported_a
   }
 
 
-  int8_t number_of_holiday_schedules_supported = {};
+  uint8_t number_of_holiday_schedules_supported = {};
 
   nlohmann::json json_payload;
   try {
@@ -13327,7 +13327,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_holiday_schedules_supported_a
         return;
       }
 // Start parsing value
-      number_of_holiday_schedules_supported = json_payload.at("value").get<int8_t>();
+      number_of_holiday_schedules_supported = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -13390,7 +13390,7 @@ static void uic_mqtt_dotdot_on_door_lock_max_pin_code_length_attribute_update(
   }
 
 
-  int8_t max_pin_code_length = {};
+  uint8_t max_pin_code_length = {};
 
   nlohmann::json json_payload;
   try {
@@ -13403,7 +13403,7 @@ static void uic_mqtt_dotdot_on_door_lock_max_pin_code_length_attribute_update(
         return;
       }
 // Start parsing value
-      max_pin_code_length = json_payload.at("value").get<int8_t>();
+      max_pin_code_length = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -13466,7 +13466,7 @@ static void uic_mqtt_dotdot_on_door_lock_min_pin_code_length_attribute_update(
   }
 
 
-  int8_t min_pin_code_length = {};
+  uint8_t min_pin_code_length = {};
 
   nlohmann::json json_payload;
   try {
@@ -13479,7 +13479,7 @@ static void uic_mqtt_dotdot_on_door_lock_min_pin_code_length_attribute_update(
         return;
       }
 // Start parsing value
-      min_pin_code_length = json_payload.at("value").get<int8_t>();
+      min_pin_code_length = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -13542,7 +13542,7 @@ static void uic_mqtt_dotdot_on_door_lock_max_rfid_code_length_attribute_update(
   }
 
 
-  int8_t max_rfid_code_length = {};
+  uint8_t max_rfid_code_length = {};
 
   nlohmann::json json_payload;
   try {
@@ -13555,7 +13555,7 @@ static void uic_mqtt_dotdot_on_door_lock_max_rfid_code_length_attribute_update(
         return;
       }
 // Start parsing value
-      max_rfid_code_length = json_payload.at("value").get<int8_t>();
+      max_rfid_code_length = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -13618,7 +13618,7 @@ static void uic_mqtt_dotdot_on_door_lock_min_rfid_code_length_attribute_update(
   }
 
 
-  int8_t min_rfid_code_length = {};
+  uint8_t min_rfid_code_length = {};
 
   nlohmann::json json_payload;
   try {
@@ -13631,7 +13631,7 @@ static void uic_mqtt_dotdot_on_door_lock_min_rfid_code_length_attribute_update(
         return;
       }
 // Start parsing value
-      min_rfid_code_length = json_payload.at("value").get<int8_t>();
+      min_rfid_code_length = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -13770,7 +13770,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_credentials_supported_per_use
   }
 
 
-  int8_t number_of_credentials_supported_per_user = {};
+  uint8_t number_of_credentials_supported_per_user = {};
 
   nlohmann::json json_payload;
   try {
@@ -13783,7 +13783,7 @@ static void uic_mqtt_dotdot_on_door_lock_number_of_credentials_supported_per_use
         return;
       }
 // Start parsing value
-      number_of_credentials_supported_per_user = json_payload.at("value").get<int8_t>();
+      number_of_credentials_supported_per_user = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -13998,7 +13998,7 @@ static void uic_mqtt_dotdot_on_door_lock_led_settings_attribute_update(
   }
 
 
-  int8_t led_settings = {};
+  uint8_t led_settings = {};
 
   nlohmann::json json_payload;
   try {
@@ -14011,7 +14011,7 @@ static void uic_mqtt_dotdot_on_door_lock_led_settings_attribute_update(
         return;
       }
 // Start parsing value
-      led_settings = json_payload.at("value").get<int8_t>();
+      led_settings = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -14074,7 +14074,7 @@ static void uic_mqtt_dotdot_on_door_lock_auto_relock_time_attribute_update(
   }
 
 
-  int32_t auto_relock_time = {};
+  uint32_t auto_relock_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -14087,7 +14087,7 @@ static void uic_mqtt_dotdot_on_door_lock_auto_relock_time_attribute_update(
         return;
       }
 // Start parsing value
-      auto_relock_time = json_payload.at("value").get<int32_t>();
+      auto_relock_time = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -14150,7 +14150,7 @@ static void uic_mqtt_dotdot_on_door_lock_sound_volume_attribute_update(
   }
 
 
-  int8_t sound_volume = {};
+  uint8_t sound_volume = {};
 
   nlohmann::json json_payload;
   try {
@@ -14163,7 +14163,7 @@ static void uic_mqtt_dotdot_on_door_lock_sound_volume_attribute_update(
         return;
       }
 // Start parsing value
-      sound_volume = json_payload.at("value").get<int8_t>();
+      sound_volume = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -14842,7 +14842,7 @@ static void uic_mqtt_dotdot_on_door_lock_wrong_code_entry_limit_attribute_update
   }
 
 
-  int8_t wrong_code_entry_limit = {};
+  uint8_t wrong_code_entry_limit = {};
 
   nlohmann::json json_payload;
   try {
@@ -14855,7 +14855,7 @@ static void uic_mqtt_dotdot_on_door_lock_wrong_code_entry_limit_attribute_update
         return;
       }
 // Start parsing value
-      wrong_code_entry_limit = json_payload.at("value").get<int8_t>();
+      wrong_code_entry_limit = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -14918,7 +14918,7 @@ static void uic_mqtt_dotdot_on_door_lock_user_code_temporary_disable_time_attrib
   }
 
 
-  int8_t user_code_temporary_disable_time = {};
+  uint8_t user_code_temporary_disable_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -14931,7 +14931,7 @@ static void uic_mqtt_dotdot_on_door_lock_user_code_temporary_disable_time_attrib
         return;
       }
 // Start parsing value
-      user_code_temporary_disable_time = json_payload.at("value").get<int8_t>();
+      user_code_temporary_disable_time = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -15230,7 +15230,7 @@ static void uic_mqtt_dotdot_on_door_lock_expiring_user_timeout_attribute_update(
   }
 
 
-  int16_t expiring_user_timeout = {};
+  uint16_t expiring_user_timeout = {};
 
   nlohmann::json json_payload;
   try {
@@ -15243,7 +15243,7 @@ static void uic_mqtt_dotdot_on_door_lock_expiring_user_timeout_attribute_update(
         return;
       }
 // Start parsing value
-      expiring_user_timeout = json_payload.at("value").get<int16_t>();
+      expiring_user_timeout = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -16505,7 +16505,7 @@ static void uic_mqtt_dotdot_on_window_covering_physical_closed_limit_lift_attrib
   }
 
 
-  int16_t physical_closed_limit_lift = {};
+  uint16_t physical_closed_limit_lift = {};
 
   nlohmann::json json_payload;
   try {
@@ -16518,7 +16518,7 @@ static void uic_mqtt_dotdot_on_window_covering_physical_closed_limit_lift_attrib
         return;
       }
 // Start parsing value
-      physical_closed_limit_lift = json_payload.at("value").get<int16_t>();
+      physical_closed_limit_lift = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -16581,7 +16581,7 @@ static void uic_mqtt_dotdot_on_window_covering_physical_closed_limit_tilt_attrib
   }
 
 
-  int16_t physical_closed_limit_tilt = {};
+  uint16_t physical_closed_limit_tilt = {};
 
   nlohmann::json json_payload;
   try {
@@ -16594,7 +16594,7 @@ static void uic_mqtt_dotdot_on_window_covering_physical_closed_limit_tilt_attrib
         return;
       }
 // Start parsing value
-      physical_closed_limit_tilt = json_payload.at("value").get<int16_t>();
+      physical_closed_limit_tilt = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -16657,7 +16657,7 @@ static void uic_mqtt_dotdot_on_window_covering_current_position_lift_attribute_u
   }
 
 
-  int16_t current_position_lift = {};
+  uint16_t current_position_lift = {};
 
   nlohmann::json json_payload;
   try {
@@ -16670,7 +16670,7 @@ static void uic_mqtt_dotdot_on_window_covering_current_position_lift_attribute_u
         return;
       }
 // Start parsing value
-      current_position_lift = json_payload.at("value").get<int16_t>();
+      current_position_lift = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -16733,7 +16733,7 @@ static void uic_mqtt_dotdot_on_window_covering_current_position_tilt_attribute_u
   }
 
 
-  int16_t current_position_tilt = {};
+  uint16_t current_position_tilt = {};
 
   nlohmann::json json_payload;
   try {
@@ -16746,7 +16746,7 @@ static void uic_mqtt_dotdot_on_window_covering_current_position_tilt_attribute_u
         return;
       }
 // Start parsing value
-      current_position_tilt = json_payload.at("value").get<int16_t>();
+      current_position_tilt = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -16809,7 +16809,7 @@ static void uic_mqtt_dotdot_on_window_covering_number_of_actuations_lift_attribu
   }
 
 
-  int16_t number_of_actuations_lift = {};
+  uint16_t number_of_actuations_lift = {};
 
   nlohmann::json json_payload;
   try {
@@ -16822,7 +16822,7 @@ static void uic_mqtt_dotdot_on_window_covering_number_of_actuations_lift_attribu
         return;
       }
 // Start parsing value
-      number_of_actuations_lift = json_payload.at("value").get<int16_t>();
+      number_of_actuations_lift = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -16885,7 +16885,7 @@ static void uic_mqtt_dotdot_on_window_covering_number_of_actuations_tilt_attribu
   }
 
 
-  int16_t number_of_actuations_tilt = {};
+  uint16_t number_of_actuations_tilt = {};
 
   nlohmann::json json_payload;
   try {
@@ -16898,7 +16898,7 @@ static void uic_mqtt_dotdot_on_window_covering_number_of_actuations_tilt_attribu
         return;
       }
 // Start parsing value
-      number_of_actuations_tilt = json_payload.at("value").get<int16_t>();
+      number_of_actuations_tilt = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -17037,7 +17037,7 @@ static void uic_mqtt_dotdot_on_window_covering_current_position_lift_percentage_
   }
 
 
-  int8_t current_position_lift_percentage = {};
+  uint8_t current_position_lift_percentage = {};
 
   nlohmann::json json_payload;
   try {
@@ -17050,7 +17050,7 @@ static void uic_mqtt_dotdot_on_window_covering_current_position_lift_percentage_
         return;
       }
 // Start parsing value
-      current_position_lift_percentage = json_payload.at("value").get<int8_t>();
+      current_position_lift_percentage = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -17113,7 +17113,7 @@ static void uic_mqtt_dotdot_on_window_covering_current_position_tilt_percentage_
   }
 
 
-  int8_t current_position_tilt_percentage = {};
+  uint8_t current_position_tilt_percentage = {};
 
   nlohmann::json json_payload;
   try {
@@ -17126,7 +17126,7 @@ static void uic_mqtt_dotdot_on_window_covering_current_position_tilt_percentage_
         return;
       }
 // Start parsing value
-      current_position_tilt_percentage = json_payload.at("value").get<int8_t>();
+      current_position_tilt_percentage = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -17189,7 +17189,7 @@ static void uic_mqtt_dotdot_on_window_covering_installed_open_limit_lift_attribu
   }
 
 
-  int16_t installed_open_limit_lift = {};
+  uint16_t installed_open_limit_lift = {};
 
   nlohmann::json json_payload;
   try {
@@ -17202,7 +17202,7 @@ static void uic_mqtt_dotdot_on_window_covering_installed_open_limit_lift_attribu
         return;
       }
 // Start parsing value
-      installed_open_limit_lift = json_payload.at("value").get<int16_t>();
+      installed_open_limit_lift = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -17265,7 +17265,7 @@ static void uic_mqtt_dotdot_on_window_covering_installed_closed_limit_lift_attri
   }
 
 
-  int16_t installed_closed_limit_lift = {};
+  uint16_t installed_closed_limit_lift = {};
 
   nlohmann::json json_payload;
   try {
@@ -17278,7 +17278,7 @@ static void uic_mqtt_dotdot_on_window_covering_installed_closed_limit_lift_attri
         return;
       }
 // Start parsing value
-      installed_closed_limit_lift = json_payload.at("value").get<int16_t>();
+      installed_closed_limit_lift = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -17341,7 +17341,7 @@ static void uic_mqtt_dotdot_on_window_covering_installed_open_limit_tilt_attribu
   }
 
 
-  int16_t installed_open_limit_tilt = {};
+  uint16_t installed_open_limit_tilt = {};
 
   nlohmann::json json_payload;
   try {
@@ -17354,7 +17354,7 @@ static void uic_mqtt_dotdot_on_window_covering_installed_open_limit_tilt_attribu
         return;
       }
 // Start parsing value
-      installed_open_limit_tilt = json_payload.at("value").get<int16_t>();
+      installed_open_limit_tilt = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -17417,7 +17417,7 @@ static void uic_mqtt_dotdot_on_window_covering_installed_closed_limit_tilt_attri
   }
 
 
-  int16_t installed_closed_limit_tilt = {};
+  uint16_t installed_closed_limit_tilt = {};
 
   nlohmann::json json_payload;
   try {
@@ -17430,7 +17430,7 @@ static void uic_mqtt_dotdot_on_window_covering_installed_closed_limit_tilt_attri
         return;
       }
 // Start parsing value
-      installed_closed_limit_tilt = json_payload.at("value").get<int16_t>();
+      installed_closed_limit_tilt = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -17493,7 +17493,7 @@ static void uic_mqtt_dotdot_on_window_covering_velocity_lift_attribute_update(
   }
 
 
-  int16_t velocity_lift = {};
+  uint16_t velocity_lift = {};
 
   nlohmann::json json_payload;
   try {
@@ -17506,7 +17506,7 @@ static void uic_mqtt_dotdot_on_window_covering_velocity_lift_attribute_update(
         return;
       }
 // Start parsing value
-      velocity_lift = json_payload.at("value").get<int16_t>();
+      velocity_lift = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -17569,7 +17569,7 @@ static void uic_mqtt_dotdot_on_window_covering_acceleration_time_lift_attribute_
   }
 
 
-  int16_t acceleration_time_lift = {};
+  uint16_t acceleration_time_lift = {};
 
   nlohmann::json json_payload;
   try {
@@ -17582,7 +17582,7 @@ static void uic_mqtt_dotdot_on_window_covering_acceleration_time_lift_attribute_
         return;
       }
 // Start parsing value
-      acceleration_time_lift = json_payload.at("value").get<int16_t>();
+      acceleration_time_lift = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -17645,7 +17645,7 @@ static void uic_mqtt_dotdot_on_window_covering_deceleration_time_lift_attribute_
   }
 
 
-  int16_t deceleration_time_lift = {};
+  uint16_t deceleration_time_lift = {};
 
   nlohmann::json json_payload;
   try {
@@ -17658,7 +17658,7 @@ static void uic_mqtt_dotdot_on_window_covering_deceleration_time_lift_attribute_
         return;
       }
 // Start parsing value
-      deceleration_time_lift = json_payload.at("value").get<int16_t>();
+      deceleration_time_lift = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -17797,7 +17797,7 @@ static void uic_mqtt_dotdot_on_window_covering_intermediate_setpoints_lift_attri
   }
 
 
-  uint8_t intermediate_setpoints_lift = {};
+  const char* intermediate_setpoints_lift = {};
 
   nlohmann::json json_payload;
   try {
@@ -17873,7 +17873,7 @@ static void uic_mqtt_dotdot_on_window_covering_intermediate_setpoints_tilt_attri
   }
 
 
-  uint8_t intermediate_setpoints_tilt = {};
+  const char* intermediate_setpoints_tilt = {};
 
   nlohmann::json json_payload;
   try {
@@ -18382,7 +18382,7 @@ static void uic_mqtt_dotdot_on_barrier_control_open_events_attribute_update(
   }
 
 
-  int16_t open_events = {};
+  uint16_t open_events = {};
 
   nlohmann::json json_payload;
   try {
@@ -18395,7 +18395,7 @@ static void uic_mqtt_dotdot_on_barrier_control_open_events_attribute_update(
         return;
       }
 // Start parsing value
-      open_events = json_payload.at("value").get<int16_t>();
+      open_events = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -18458,7 +18458,7 @@ static void uic_mqtt_dotdot_on_barrier_control_close_events_attribute_update(
   }
 
 
-  int16_t close_events = {};
+  uint16_t close_events = {};
 
   nlohmann::json json_payload;
   try {
@@ -18471,7 +18471,7 @@ static void uic_mqtt_dotdot_on_barrier_control_close_events_attribute_update(
         return;
       }
 // Start parsing value
-      close_events = json_payload.at("value").get<int16_t>();
+      close_events = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -18534,7 +18534,7 @@ static void uic_mqtt_dotdot_on_barrier_control_command_open_events_attribute_upd
   }
 
 
-  int16_t command_open_events = {};
+  uint16_t command_open_events = {};
 
   nlohmann::json json_payload;
   try {
@@ -18547,7 +18547,7 @@ static void uic_mqtt_dotdot_on_barrier_control_command_open_events_attribute_upd
         return;
       }
 // Start parsing value
-      command_open_events = json_payload.at("value").get<int16_t>();
+      command_open_events = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -18610,7 +18610,7 @@ static void uic_mqtt_dotdot_on_barrier_control_command_close_events_attribute_up
   }
 
 
-  int16_t command_close_events = {};
+  uint16_t command_close_events = {};
 
   nlohmann::json json_payload;
   try {
@@ -18623,7 +18623,7 @@ static void uic_mqtt_dotdot_on_barrier_control_command_close_events_attribute_up
         return;
       }
 // Start parsing value
-      command_close_events = json_payload.at("value").get<int16_t>();
+      command_close_events = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -18686,7 +18686,7 @@ static void uic_mqtt_dotdot_on_barrier_control_open_period_attribute_update(
   }
 
 
-  int16_t open_period = {};
+  uint16_t open_period = {};
 
   nlohmann::json json_payload;
   try {
@@ -18699,7 +18699,7 @@ static void uic_mqtt_dotdot_on_barrier_control_open_period_attribute_update(
         return;
       }
 // Start parsing value
-      open_period = json_payload.at("value").get<int16_t>();
+      open_period = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -18762,7 +18762,7 @@ static void uic_mqtt_dotdot_on_barrier_control_close_period_attribute_update(
   }
 
 
-  int16_t close_period = {};
+  uint16_t close_period = {};
 
   nlohmann::json json_payload;
   try {
@@ -18775,7 +18775,7 @@ static void uic_mqtt_dotdot_on_barrier_control_close_period_attribute_update(
         return;
       }
 // Start parsing value
-      close_period = json_payload.at("value").get<int16_t>();
+      close_period = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -18838,7 +18838,7 @@ static void uic_mqtt_dotdot_on_barrier_control_barrier_position_attribute_update
   }
 
 
-  int8_t barrier_position = {};
+  uint8_t barrier_position = {};
 
   nlohmann::json json_payload;
   try {
@@ -18851,7 +18851,7 @@ static void uic_mqtt_dotdot_on_barrier_control_barrier_position_attribute_update
         return;
       }
 // Start parsing value
-      barrier_position = json_payload.at("value").get<int8_t>();
+      barrier_position = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -19121,7 +19121,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_max_speed_attribut
   }
 
 
-  int16_t max_speed = {};
+  uint16_t max_speed = {};
 
   nlohmann::json json_payload;
   try {
@@ -19134,7 +19134,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_max_speed_attribut
         return;
       }
 // Start parsing value
-      max_speed = json_payload.at("value").get<int16_t>();
+      max_speed = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -19197,7 +19197,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_max_flow_attribute
   }
 
 
-  int16_t max_flow = {};
+  uint16_t max_flow = {};
 
   nlohmann::json json_payload;
   try {
@@ -19210,7 +19210,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_max_flow_attribute
         return;
       }
 // Start parsing value
-      max_flow = json_payload.at("value").get<int16_t>();
+      max_flow = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -19577,7 +19577,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_min_const_speed_at
   }
 
 
-  int16_t min_const_speed = {};
+  uint16_t min_const_speed = {};
 
   nlohmann::json json_payload;
   try {
@@ -19590,7 +19590,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_min_const_speed_at
         return;
       }
 // Start parsing value
-      min_const_speed = json_payload.at("value").get<int16_t>();
+      min_const_speed = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -19653,7 +19653,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_max_const_speed_at
   }
 
 
-  int16_t max_const_speed = {};
+  uint16_t max_const_speed = {};
 
   nlohmann::json json_payload;
   try {
@@ -19666,7 +19666,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_max_const_speed_at
         return;
       }
 // Start parsing value
-      max_const_speed = json_payload.at("value").get<int16_t>();
+      max_const_speed = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -19729,7 +19729,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_min_const_flow_att
   }
 
 
-  int16_t min_const_flow = {};
+  uint16_t min_const_flow = {};
 
   nlohmann::json json_payload;
   try {
@@ -19742,7 +19742,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_min_const_flow_att
         return;
       }
 // Start parsing value
-      min_const_flow = json_payload.at("value").get<int16_t>();
+      min_const_flow = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -19805,7 +19805,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_max_const_flow_att
   }
 
 
-  int16_t max_const_flow = {};
+  uint16_t max_const_flow = {};
 
   nlohmann::json json_payload;
   try {
@@ -19818,7 +19818,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_max_const_flow_att
         return;
       }
 // Start parsing value
-      max_const_flow = json_payload.at("value").get<int16_t>();
+      max_const_flow = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -20353,7 +20353,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_speed_attribute_up
   }
 
 
-  int16_t speed = {};
+  uint16_t speed = {};
 
   nlohmann::json json_payload;
   try {
@@ -20366,7 +20366,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_speed_attribute_up
         return;
       }
 // Start parsing value
-      speed = json_payload.at("value").get<int16_t>();
+      speed = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -20429,7 +20429,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_lifetime_running_h
   }
 
 
-  int32_t lifetime_running_hours = {};
+  uint32_t lifetime_running_hours = {};
 
   nlohmann::json json_payload;
   try {
@@ -20442,7 +20442,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_lifetime_running_h
         return;
       }
 // Start parsing value
-      lifetime_running_hours = json_payload.at("value").get<int32_t>();
+      lifetime_running_hours = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -20505,7 +20505,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_power_attribute_up
   }
 
 
-  int32_t power = {};
+  uint32_t power = {};
 
   nlohmann::json json_payload;
   try {
@@ -20518,7 +20518,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_power_attribute_up
         return;
       }
 // Start parsing value
-      power = json_payload.at("value").get<int32_t>();
+      power = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -20581,7 +20581,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_lifetime_energy_co
   }
 
 
-  int32_t lifetime_energy_consumed = {};
+  uint32_t lifetime_energy_consumed = {};
 
   nlohmann::json json_payload;
   try {
@@ -20594,7 +20594,7 @@ static void uic_mqtt_dotdot_on_pump_configuration_and_control_lifetime_energy_co
         return;
       }
 // Start parsing value
-      lifetime_energy_consumed = json_payload.at("value").get<int32_t>();
+      lifetime_energy_consumed = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -21702,7 +21702,7 @@ static void uic_mqtt_dotdot_on_thermostat_pi_cooling_demand_attribute_update(
   }
 
 
-  int8_t pi_cooling_demand = {};
+  uint8_t pi_cooling_demand = {};
 
   nlohmann::json json_payload;
   try {
@@ -21715,7 +21715,7 @@ static void uic_mqtt_dotdot_on_thermostat_pi_cooling_demand_attribute_update(
         return;
       }
 // Start parsing value
-      pi_cooling_demand = json_payload.at("value").get<int8_t>();
+      pi_cooling_demand = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -21778,7 +21778,7 @@ static void uic_mqtt_dotdot_on_thermostat_pi_heating_demand_attribute_update(
   }
 
 
-  int8_t pi_heating_demand = {};
+  uint8_t pi_heating_demand = {};
 
   nlohmann::json json_payload;
   try {
@@ -21791,7 +21791,7 @@ static void uic_mqtt_dotdot_on_thermostat_pi_heating_demand_attribute_update(
         return;
       }
 // Start parsing value
-      pi_heating_demand = json_payload.at("value").get<int8_t>();
+      pi_heating_demand = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -23178,7 +23178,7 @@ static void uic_mqtt_dotdot_on_thermostat_number_of_weekly_transitions_attribute
   }
 
 
-  int8_t number_of_weekly_transitions = {};
+  uint8_t number_of_weekly_transitions = {};
 
   nlohmann::json json_payload;
   try {
@@ -23191,7 +23191,7 @@ static void uic_mqtt_dotdot_on_thermostat_number_of_weekly_transitions_attribute
         return;
       }
 // Start parsing value
-      number_of_weekly_transitions = json_payload.at("value").get<int8_t>();
+      number_of_weekly_transitions = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -23254,7 +23254,7 @@ static void uic_mqtt_dotdot_on_thermostat_number_of_daily_transitions_attribute_
   }
 
 
-  int8_t number_of_daily_transitions = {};
+  uint8_t number_of_daily_transitions = {};
 
   nlohmann::json json_payload;
   try {
@@ -23267,7 +23267,7 @@ static void uic_mqtt_dotdot_on_thermostat_number_of_daily_transitions_attribute_
         return;
       }
 // Start parsing value
-      number_of_daily_transitions = json_payload.at("value").get<int8_t>();
+      number_of_daily_transitions = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -23414,7 +23414,7 @@ static void uic_mqtt_dotdot_on_thermostat_temperature_setpoint_hold_duration_att
   }
 
 
-  int16_t temperature_setpoint_hold_duration = {};
+  uint16_t temperature_setpoint_hold_duration = {};
 
   nlohmann::json json_payload;
   try {
@@ -23427,7 +23427,7 @@ static void uic_mqtt_dotdot_on_thermostat_temperature_setpoint_hold_duration_att
         return;
       }
 // Start parsing value
-      temperature_setpoint_hold_duration = json_payload.at("value").get<int16_t>();
+      temperature_setpoint_hold_duration = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -23802,7 +23802,7 @@ static void uic_mqtt_dotdot_on_thermostat_setpoint_change_source_timestamp_attri
   }
 
 
-  uint8_t setpoint_change_source_timestamp = {};
+  uint32_t setpoint_change_source_timestamp = {};
 
   nlohmann::json json_payload;
   try {
@@ -23815,7 +23815,7 @@ static void uic_mqtt_dotdot_on_thermostat_setpoint_change_source_timestamp_attri
         return;
       }
 // Start parsing value
-      setpoint_change_source_timestamp = json_payload.at("value").get<uint8_t>();
+      setpoint_change_source_timestamp = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -23878,7 +23878,7 @@ static void uic_mqtt_dotdot_on_thermostat_occupied_setback_attribute_update(
   }
 
 
-  int8_t occupied_setback = {};
+  uint8_t occupied_setback = {};
 
   nlohmann::json json_payload;
   try {
@@ -23891,7 +23891,7 @@ static void uic_mqtt_dotdot_on_thermostat_occupied_setback_attribute_update(
         return;
       }
 // Start parsing value
-      occupied_setback = json_payload.at("value").get<int8_t>();
+      occupied_setback = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -23954,7 +23954,7 @@ static void uic_mqtt_dotdot_on_thermostat_occupied_setback_min_attribute_update(
   }
 
 
-  int8_t occupied_setback_min = {};
+  uint8_t occupied_setback_min = {};
 
   nlohmann::json json_payload;
   try {
@@ -23967,7 +23967,7 @@ static void uic_mqtt_dotdot_on_thermostat_occupied_setback_min_attribute_update(
         return;
       }
 // Start parsing value
-      occupied_setback_min = json_payload.at("value").get<int8_t>();
+      occupied_setback_min = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -24030,7 +24030,7 @@ static void uic_mqtt_dotdot_on_thermostat_occupied_setback_max_attribute_update(
   }
 
 
-  int8_t occupied_setback_max = {};
+  uint8_t occupied_setback_max = {};
 
   nlohmann::json json_payload;
   try {
@@ -24043,7 +24043,7 @@ static void uic_mqtt_dotdot_on_thermostat_occupied_setback_max_attribute_update(
         return;
       }
 // Start parsing value
-      occupied_setback_max = json_payload.at("value").get<int8_t>();
+      occupied_setback_max = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -24106,7 +24106,7 @@ static void uic_mqtt_dotdot_on_thermostat_unoccupied_setback_attribute_update(
   }
 
 
-  int8_t unoccupied_setback = {};
+  uint8_t unoccupied_setback = {};
 
   nlohmann::json json_payload;
   try {
@@ -24119,7 +24119,7 @@ static void uic_mqtt_dotdot_on_thermostat_unoccupied_setback_attribute_update(
         return;
       }
 // Start parsing value
-      unoccupied_setback = json_payload.at("value").get<int8_t>();
+      unoccupied_setback = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -24182,7 +24182,7 @@ static void uic_mqtt_dotdot_on_thermostat_unoccupied_setback_min_attribute_updat
   }
 
 
-  int8_t unoccupied_setback_min = {};
+  uint8_t unoccupied_setback_min = {};
 
   nlohmann::json json_payload;
   try {
@@ -24195,7 +24195,7 @@ static void uic_mqtt_dotdot_on_thermostat_unoccupied_setback_min_attribute_updat
         return;
       }
 // Start parsing value
-      unoccupied_setback_min = json_payload.at("value").get<int8_t>();
+      unoccupied_setback_min = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -24258,7 +24258,7 @@ static void uic_mqtt_dotdot_on_thermostat_unoccupied_setback_max_attribute_updat
   }
 
 
-  int8_t unoccupied_setback_max = {};
+  uint8_t unoccupied_setback_max = {};
 
   nlohmann::json json_payload;
   try {
@@ -24271,7 +24271,7 @@ static void uic_mqtt_dotdot_on_thermostat_unoccupied_setback_max_attribute_updat
         return;
       }
 // Start parsing value
-      unoccupied_setback_max = json_payload.at("value").get<int8_t>();
+      unoccupied_setback_max = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -24334,7 +24334,7 @@ static void uic_mqtt_dotdot_on_thermostat_emergency_heat_delta_attribute_update(
   }
 
 
-  int8_t emergency_heat_delta = {};
+  uint8_t emergency_heat_delta = {};
 
   nlohmann::json json_payload;
   try {
@@ -24347,7 +24347,7 @@ static void uic_mqtt_dotdot_on_thermostat_emergency_heat_delta_attribute_update(
         return;
       }
 // Start parsing value
-      emergency_heat_delta = json_payload.at("value").get<int8_t>();
+      emergency_heat_delta = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -24494,7 +24494,7 @@ static void uic_mqtt_dotdot_on_thermostat_ac_capacity_attribute_update(
   }
 
 
-  int16_t ac_capacity = {};
+  uint16_t ac_capacity = {};
 
   nlohmann::json json_payload;
   try {
@@ -24507,7 +24507,7 @@ static void uic_mqtt_dotdot_on_thermostat_ac_capacity_attribute_update(
         return;
       }
 // Start parsing value
-      ac_capacity = json_payload.at("value").get<int16_t>();
+      ac_capacity = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -25706,7 +25706,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_relative_humidity_attrib
   }
 
 
-  int8_t relative_humidity = {};
+  uint8_t relative_humidity = {};
 
   nlohmann::json json_payload;
   try {
@@ -25719,7 +25719,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_relative_humidity_attrib
         return;
       }
 // Start parsing value
-      relative_humidity = json_payload.at("value").get<int8_t>();
+      relative_humidity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -25782,7 +25782,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_dehumidification_cooling
   }
 
 
-  int8_t dehumidification_cooling = {};
+  uint8_t dehumidification_cooling = {};
 
   nlohmann::json json_payload;
   try {
@@ -25795,7 +25795,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_dehumidification_cooling
         return;
       }
 // Start parsing value
-      dehumidification_cooling = json_payload.at("value").get<int8_t>();
+      dehumidification_cooling = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -25858,7 +25858,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_rh_dehumidification_setp
   }
 
 
-  int8_t rh_dehumidification_setpoint = {};
+  uint8_t rh_dehumidification_setpoint = {};
 
   nlohmann::json json_payload;
   try {
@@ -25871,7 +25871,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_rh_dehumidification_setp
         return;
       }
 // Start parsing value
-      rh_dehumidification_setpoint = json_payload.at("value").get<int8_t>();
+      rh_dehumidification_setpoint = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -26102,7 +26102,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_dehumidification_hystere
   }
 
 
-  int8_t dehumidification_hysteresis = {};
+  uint8_t dehumidification_hysteresis = {};
 
   nlohmann::json json_payload;
   try {
@@ -26115,7 +26115,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_dehumidification_hystere
         return;
       }
 // Start parsing value
-      dehumidification_hysteresis = json_payload.at("value").get<int8_t>();
+      dehumidification_hysteresis = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -26178,7 +26178,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_dehumidification_max_coo
   }
 
 
-  int8_t dehumidification_max_cool = {};
+  uint8_t dehumidification_max_cool = {};
 
   nlohmann::json json_payload;
   try {
@@ -26191,7 +26191,7 @@ static void uic_mqtt_dotdot_on_dehumidification_control_dehumidification_max_coo
         return;
       }
 // Start parsing value
-      dehumidification_max_cool = json_payload.at("value").get<int8_t>();
+      dehumidification_max_cool = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -26787,7 +26787,7 @@ static void uic_mqtt_dotdot_on_color_control_current_hue_attribute_update(
   }
 
 
-  int8_t current_hue = {};
+  uint8_t current_hue = {};
 
   nlohmann::json json_payload;
   try {
@@ -26800,7 +26800,7 @@ static void uic_mqtt_dotdot_on_color_control_current_hue_attribute_update(
         return;
       }
 // Start parsing value
-      current_hue = json_payload.at("value").get<int8_t>();
+      current_hue = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -26863,7 +26863,7 @@ static void uic_mqtt_dotdot_on_color_control_current_saturation_attribute_update
   }
 
 
-  int8_t current_saturation = {};
+  uint8_t current_saturation = {};
 
   nlohmann::json json_payload;
   try {
@@ -26876,7 +26876,7 @@ static void uic_mqtt_dotdot_on_color_control_current_saturation_attribute_update
         return;
       }
 // Start parsing value
-      current_saturation = json_payload.at("value").get<int8_t>();
+      current_saturation = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -26939,7 +26939,7 @@ static void uic_mqtt_dotdot_on_color_control_remaining_time_attribute_update(
   }
 
 
-  int16_t remaining_time = {};
+  uint16_t remaining_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -26952,7 +26952,7 @@ static void uic_mqtt_dotdot_on_color_control_remaining_time_attribute_update(
         return;
       }
 // Start parsing value
-      remaining_time = json_payload.at("value").get<int16_t>();
+      remaining_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -27015,7 +27015,7 @@ static void uic_mqtt_dotdot_on_color_control_currentx_attribute_update(
   }
 
 
-  int16_t currentx = {};
+  uint16_t currentx = {};
 
   nlohmann::json json_payload;
   try {
@@ -27028,7 +27028,7 @@ static void uic_mqtt_dotdot_on_color_control_currentx_attribute_update(
         return;
       }
 // Start parsing value
-      currentx = json_payload.at("value").get<int16_t>();
+      currentx = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -27091,7 +27091,7 @@ static void uic_mqtt_dotdot_on_color_control_currenty_attribute_update(
   }
 
 
-  int16_t currenty = {};
+  uint16_t currenty = {};
 
   nlohmann::json json_payload;
   try {
@@ -27104,7 +27104,7 @@ static void uic_mqtt_dotdot_on_color_control_currenty_attribute_update(
         return;
       }
 // Start parsing value
-      currenty = json_payload.at("value").get<int16_t>();
+      currenty = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -27327,7 +27327,7 @@ static void uic_mqtt_dotdot_on_color_control_color_temperature_mireds_attribute_
   }
 
 
-  int16_t color_temperature_mireds = {};
+  uint16_t color_temperature_mireds = {};
 
   nlohmann::json json_payload;
   try {
@@ -27340,7 +27340,7 @@ static void uic_mqtt_dotdot_on_color_control_color_temperature_mireds_attribute_
         return;
       }
 // Start parsing value
-      color_temperature_mireds = json_payload.at("value").get<int16_t>();
+      color_temperature_mireds = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -27563,7 +27563,7 @@ static void uic_mqtt_dotdot_on_color_control_number_of_primaries_attribute_updat
   }
 
 
-  int8_t number_of_primaries = {};
+  uint8_t number_of_primaries = {};
 
   nlohmann::json json_payload;
   try {
@@ -27576,7 +27576,7 @@ static void uic_mqtt_dotdot_on_color_control_number_of_primaries_attribute_updat
         return;
       }
 // Start parsing value
-      number_of_primaries = json_payload.at("value").get<int8_t>();
+      number_of_primaries = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -27639,7 +27639,7 @@ static void uic_mqtt_dotdot_on_color_control_primary1x_attribute_update(
   }
 
 
-  int16_t primary1x = {};
+  uint16_t primary1x = {};
 
   nlohmann::json json_payload;
   try {
@@ -27652,7 +27652,7 @@ static void uic_mqtt_dotdot_on_color_control_primary1x_attribute_update(
         return;
       }
 // Start parsing value
-      primary1x = json_payload.at("value").get<int16_t>();
+      primary1x = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -27715,7 +27715,7 @@ static void uic_mqtt_dotdot_on_color_control_primary1y_attribute_update(
   }
 
 
-  int16_t primary1y = {};
+  uint16_t primary1y = {};
 
   nlohmann::json json_payload;
   try {
@@ -27728,7 +27728,7 @@ static void uic_mqtt_dotdot_on_color_control_primary1y_attribute_update(
         return;
       }
 // Start parsing value
-      primary1y = json_payload.at("value").get<int16_t>();
+      primary1y = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -27791,7 +27791,7 @@ static void uic_mqtt_dotdot_on_color_control_primary1_intensity_attribute_update
   }
 
 
-  int8_t primary1_intensity = {};
+  uint8_t primary1_intensity = {};
 
   nlohmann::json json_payload;
   try {
@@ -27804,7 +27804,7 @@ static void uic_mqtt_dotdot_on_color_control_primary1_intensity_attribute_update
         return;
       }
 // Start parsing value
-      primary1_intensity = json_payload.at("value").get<int8_t>();
+      primary1_intensity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -27867,7 +27867,7 @@ static void uic_mqtt_dotdot_on_color_control_primary2x_attribute_update(
   }
 
 
-  int16_t primary2x = {};
+  uint16_t primary2x = {};
 
   nlohmann::json json_payload;
   try {
@@ -27880,7 +27880,7 @@ static void uic_mqtt_dotdot_on_color_control_primary2x_attribute_update(
         return;
       }
 // Start parsing value
-      primary2x = json_payload.at("value").get<int16_t>();
+      primary2x = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -27943,7 +27943,7 @@ static void uic_mqtt_dotdot_on_color_control_primary2y_attribute_update(
   }
 
 
-  int16_t primary2y = {};
+  uint16_t primary2y = {};
 
   nlohmann::json json_payload;
   try {
@@ -27956,7 +27956,7 @@ static void uic_mqtt_dotdot_on_color_control_primary2y_attribute_update(
         return;
       }
 // Start parsing value
-      primary2y = json_payload.at("value").get<int16_t>();
+      primary2y = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -28019,7 +28019,7 @@ static void uic_mqtt_dotdot_on_color_control_primary2_intensity_attribute_update
   }
 
 
-  int8_t primary2_intensity = {};
+  uint8_t primary2_intensity = {};
 
   nlohmann::json json_payload;
   try {
@@ -28032,7 +28032,7 @@ static void uic_mqtt_dotdot_on_color_control_primary2_intensity_attribute_update
         return;
       }
 // Start parsing value
-      primary2_intensity = json_payload.at("value").get<int8_t>();
+      primary2_intensity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -28095,7 +28095,7 @@ static void uic_mqtt_dotdot_on_color_control_primary3x_attribute_update(
   }
 
 
-  int16_t primary3x = {};
+  uint16_t primary3x = {};
 
   nlohmann::json json_payload;
   try {
@@ -28108,7 +28108,7 @@ static void uic_mqtt_dotdot_on_color_control_primary3x_attribute_update(
         return;
       }
 // Start parsing value
-      primary3x = json_payload.at("value").get<int16_t>();
+      primary3x = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -28171,7 +28171,7 @@ static void uic_mqtt_dotdot_on_color_control_primary3y_attribute_update(
   }
 
 
-  int16_t primary3y = {};
+  uint16_t primary3y = {};
 
   nlohmann::json json_payload;
   try {
@@ -28184,7 +28184,7 @@ static void uic_mqtt_dotdot_on_color_control_primary3y_attribute_update(
         return;
       }
 // Start parsing value
-      primary3y = json_payload.at("value").get<int16_t>();
+      primary3y = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -28247,7 +28247,7 @@ static void uic_mqtt_dotdot_on_color_control_primary3_intensity_attribute_update
   }
 
 
-  int8_t primary3_intensity = {};
+  uint8_t primary3_intensity = {};
 
   nlohmann::json json_payload;
   try {
@@ -28260,7 +28260,7 @@ static void uic_mqtt_dotdot_on_color_control_primary3_intensity_attribute_update
         return;
       }
 // Start parsing value
-      primary3_intensity = json_payload.at("value").get<int8_t>();
+      primary3_intensity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -28323,7 +28323,7 @@ static void uic_mqtt_dotdot_on_color_control_primary4x_attribute_update(
   }
 
 
-  int16_t primary4x = {};
+  uint16_t primary4x = {};
 
   nlohmann::json json_payload;
   try {
@@ -28336,7 +28336,7 @@ static void uic_mqtt_dotdot_on_color_control_primary4x_attribute_update(
         return;
       }
 // Start parsing value
-      primary4x = json_payload.at("value").get<int16_t>();
+      primary4x = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -28399,7 +28399,7 @@ static void uic_mqtt_dotdot_on_color_control_primary4y_attribute_update(
   }
 
 
-  int16_t primary4y = {};
+  uint16_t primary4y = {};
 
   nlohmann::json json_payload;
   try {
@@ -28412,7 +28412,7 @@ static void uic_mqtt_dotdot_on_color_control_primary4y_attribute_update(
         return;
       }
 // Start parsing value
-      primary4y = json_payload.at("value").get<int16_t>();
+      primary4y = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -28475,7 +28475,7 @@ static void uic_mqtt_dotdot_on_color_control_primary4_intensity_attribute_update
   }
 
 
-  int8_t primary4_intensity = {};
+  uint8_t primary4_intensity = {};
 
   nlohmann::json json_payload;
   try {
@@ -28488,7 +28488,7 @@ static void uic_mqtt_dotdot_on_color_control_primary4_intensity_attribute_update
         return;
       }
 // Start parsing value
-      primary4_intensity = json_payload.at("value").get<int8_t>();
+      primary4_intensity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -28551,7 +28551,7 @@ static void uic_mqtt_dotdot_on_color_control_primary5x_attribute_update(
   }
 
 
-  int16_t primary5x = {};
+  uint16_t primary5x = {};
 
   nlohmann::json json_payload;
   try {
@@ -28564,7 +28564,7 @@ static void uic_mqtt_dotdot_on_color_control_primary5x_attribute_update(
         return;
       }
 // Start parsing value
-      primary5x = json_payload.at("value").get<int16_t>();
+      primary5x = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -28627,7 +28627,7 @@ static void uic_mqtt_dotdot_on_color_control_primary5y_attribute_update(
   }
 
 
-  int16_t primary5y = {};
+  uint16_t primary5y = {};
 
   nlohmann::json json_payload;
   try {
@@ -28640,7 +28640,7 @@ static void uic_mqtt_dotdot_on_color_control_primary5y_attribute_update(
         return;
       }
 // Start parsing value
-      primary5y = json_payload.at("value").get<int16_t>();
+      primary5y = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -28703,7 +28703,7 @@ static void uic_mqtt_dotdot_on_color_control_primary5_intensity_attribute_update
   }
 
 
-  int8_t primary5_intensity = {};
+  uint8_t primary5_intensity = {};
 
   nlohmann::json json_payload;
   try {
@@ -28716,7 +28716,7 @@ static void uic_mqtt_dotdot_on_color_control_primary5_intensity_attribute_update
         return;
       }
 // Start parsing value
-      primary5_intensity = json_payload.at("value").get<int8_t>();
+      primary5_intensity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -28779,7 +28779,7 @@ static void uic_mqtt_dotdot_on_color_control_primary6x_attribute_update(
   }
 
 
-  int16_t primary6x = {};
+  uint16_t primary6x = {};
 
   nlohmann::json json_payload;
   try {
@@ -28792,7 +28792,7 @@ static void uic_mqtt_dotdot_on_color_control_primary6x_attribute_update(
         return;
       }
 // Start parsing value
-      primary6x = json_payload.at("value").get<int16_t>();
+      primary6x = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -28855,7 +28855,7 @@ static void uic_mqtt_dotdot_on_color_control_primary6y_attribute_update(
   }
 
 
-  int16_t primary6y = {};
+  uint16_t primary6y = {};
 
   nlohmann::json json_payload;
   try {
@@ -28868,7 +28868,7 @@ static void uic_mqtt_dotdot_on_color_control_primary6y_attribute_update(
         return;
       }
 // Start parsing value
-      primary6y = json_payload.at("value").get<int16_t>();
+      primary6y = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -28931,7 +28931,7 @@ static void uic_mqtt_dotdot_on_color_control_primary6_intensity_attribute_update
   }
 
 
-  int8_t primary6_intensity = {};
+  uint8_t primary6_intensity = {};
 
   nlohmann::json json_payload;
   try {
@@ -28944,7 +28944,7 @@ static void uic_mqtt_dotdot_on_color_control_primary6_intensity_attribute_update
         return;
       }
 // Start parsing value
-      primary6_intensity = json_payload.at("value").get<int8_t>();
+      primary6_intensity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -29007,7 +29007,7 @@ static void uic_mqtt_dotdot_on_color_control_white_pointx_attribute_update(
   }
 
 
-  int16_t white_pointx = {};
+  uint16_t white_pointx = {};
 
   nlohmann::json json_payload;
   try {
@@ -29020,7 +29020,7 @@ static void uic_mqtt_dotdot_on_color_control_white_pointx_attribute_update(
         return;
       }
 // Start parsing value
-      white_pointx = json_payload.at("value").get<int16_t>();
+      white_pointx = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -29083,7 +29083,7 @@ static void uic_mqtt_dotdot_on_color_control_white_pointy_attribute_update(
   }
 
 
-  int16_t white_pointy = {};
+  uint16_t white_pointy = {};
 
   nlohmann::json json_payload;
   try {
@@ -29096,7 +29096,7 @@ static void uic_mqtt_dotdot_on_color_control_white_pointy_attribute_update(
         return;
       }
 // Start parsing value
-      white_pointy = json_payload.at("value").get<int16_t>();
+      white_pointy = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -29159,7 +29159,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointrx_attribute_update(
   }
 
 
-  int16_t color_pointrx = {};
+  uint16_t color_pointrx = {};
 
   nlohmann::json json_payload;
   try {
@@ -29172,7 +29172,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointrx_attribute_update(
         return;
       }
 // Start parsing value
-      color_pointrx = json_payload.at("value").get<int16_t>();
+      color_pointrx = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -29235,7 +29235,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointry_attribute_update(
   }
 
 
-  int16_t color_pointry = {};
+  uint16_t color_pointry = {};
 
   nlohmann::json json_payload;
   try {
@@ -29248,7 +29248,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointry_attribute_update(
         return;
       }
 // Start parsing value
-      color_pointry = json_payload.at("value").get<int16_t>();
+      color_pointry = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -29311,7 +29311,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointr_intensity_attribute_up
   }
 
 
-  int8_t color_pointr_intensity = {};
+  uint8_t color_pointr_intensity = {};
 
   nlohmann::json json_payload;
   try {
@@ -29324,7 +29324,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointr_intensity_attribute_up
         return;
       }
 // Start parsing value
-      color_pointr_intensity = json_payload.at("value").get<int8_t>();
+      color_pointr_intensity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -29387,7 +29387,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointgx_attribute_update(
   }
 
 
-  int16_t color_pointgx = {};
+  uint16_t color_pointgx = {};
 
   nlohmann::json json_payload;
   try {
@@ -29400,7 +29400,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointgx_attribute_update(
         return;
       }
 // Start parsing value
-      color_pointgx = json_payload.at("value").get<int16_t>();
+      color_pointgx = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -29463,7 +29463,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointgy_attribute_update(
   }
 
 
-  int16_t color_pointgy = {};
+  uint16_t color_pointgy = {};
 
   nlohmann::json json_payload;
   try {
@@ -29476,7 +29476,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointgy_attribute_update(
         return;
       }
 // Start parsing value
-      color_pointgy = json_payload.at("value").get<int16_t>();
+      color_pointgy = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -29539,7 +29539,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointg_intensity_attribute_up
   }
 
 
-  int8_t color_pointg_intensity = {};
+  uint8_t color_pointg_intensity = {};
 
   nlohmann::json json_payload;
   try {
@@ -29552,7 +29552,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointg_intensity_attribute_up
         return;
       }
 // Start parsing value
-      color_pointg_intensity = json_payload.at("value").get<int8_t>();
+      color_pointg_intensity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -29615,7 +29615,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointbx_attribute_update(
   }
 
 
-  int16_t color_pointbx = {};
+  uint16_t color_pointbx = {};
 
   nlohmann::json json_payload;
   try {
@@ -29628,7 +29628,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointbx_attribute_update(
         return;
       }
 // Start parsing value
-      color_pointbx = json_payload.at("value").get<int16_t>();
+      color_pointbx = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -29691,7 +29691,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointby_attribute_update(
   }
 
 
-  int16_t color_pointby = {};
+  uint16_t color_pointby = {};
 
   nlohmann::json json_payload;
   try {
@@ -29704,7 +29704,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointby_attribute_update(
         return;
       }
 // Start parsing value
-      color_pointby = json_payload.at("value").get<int16_t>();
+      color_pointby = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -29767,7 +29767,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointb_intensity_attribute_up
   }
 
 
-  int8_t color_pointb_intensity = {};
+  uint8_t color_pointb_intensity = {};
 
   nlohmann::json json_payload;
   try {
@@ -29780,7 +29780,7 @@ static void uic_mqtt_dotdot_on_color_control_color_pointb_intensity_attribute_up
         return;
       }
 // Start parsing value
-      color_pointb_intensity = json_payload.at("value").get<int8_t>();
+      color_pointb_intensity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -29843,7 +29843,7 @@ static void uic_mqtt_dotdot_on_color_control_enhanced_current_hue_attribute_upda
   }
 
 
-  int16_t enhanced_current_hue = {};
+  uint16_t enhanced_current_hue = {};
 
   nlohmann::json json_payload;
   try {
@@ -29856,7 +29856,7 @@ static void uic_mqtt_dotdot_on_color_control_enhanced_current_hue_attribute_upda
         return;
       }
 // Start parsing value
-      enhanced_current_hue = json_payload.at("value").get<int16_t>();
+      enhanced_current_hue = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -30003,7 +30003,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_active_attribute_update(
   }
 
 
-  int8_t color_loop_active = {};
+  uint8_t color_loop_active = {};
 
   nlohmann::json json_payload;
   try {
@@ -30016,7 +30016,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_active_attribute_update(
         return;
       }
 // Start parsing value
-      color_loop_active = json_payload.at("value").get<int8_t>();
+      color_loop_active = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -30079,7 +30079,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_direction_attribute_upda
   }
 
 
-  int8_t color_loop_direction = {};
+  uint8_t color_loop_direction = {};
 
   nlohmann::json json_payload;
   try {
@@ -30092,7 +30092,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_direction_attribute_upda
         return;
       }
 // Start parsing value
-      color_loop_direction = json_payload.at("value").get<int8_t>();
+      color_loop_direction = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -30155,7 +30155,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_time_attribute_update(
   }
 
 
-  int16_t color_loop_time = {};
+  uint16_t color_loop_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -30168,7 +30168,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_time_attribute_update(
         return;
       }
 // Start parsing value
-      color_loop_time = json_payload.at("value").get<int16_t>();
+      color_loop_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -30231,7 +30231,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_start_enhanced_hue_attri
   }
 
 
-  int16_t color_loop_start_enhanced_hue = {};
+  uint16_t color_loop_start_enhanced_hue = {};
 
   nlohmann::json json_payload;
   try {
@@ -30244,7 +30244,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_start_enhanced_hue_attri
         return;
       }
 // Start parsing value
-      color_loop_start_enhanced_hue = json_payload.at("value").get<int16_t>();
+      color_loop_start_enhanced_hue = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -30307,7 +30307,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_stored_enhanced_hue_attr
   }
 
 
-  int16_t color_loop_stored_enhanced_hue = {};
+  uint16_t color_loop_stored_enhanced_hue = {};
 
   nlohmann::json json_payload;
   try {
@@ -30320,7 +30320,7 @@ static void uic_mqtt_dotdot_on_color_control_color_loop_stored_enhanced_hue_attr
         return;
       }
 // Start parsing value
-      color_loop_stored_enhanced_hue = json_payload.at("value").get<int16_t>();
+      color_loop_stored_enhanced_hue = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -30459,7 +30459,7 @@ static void uic_mqtt_dotdot_on_color_control_color_temp_physical_min_mireds_attr
   }
 
 
-  int16_t color_temp_physical_min_mireds = {};
+  uint16_t color_temp_physical_min_mireds = {};
 
   nlohmann::json json_payload;
   try {
@@ -30472,7 +30472,7 @@ static void uic_mqtt_dotdot_on_color_control_color_temp_physical_min_mireds_attr
         return;
       }
 // Start parsing value
-      color_temp_physical_min_mireds = json_payload.at("value").get<int16_t>();
+      color_temp_physical_min_mireds = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -30535,7 +30535,7 @@ static void uic_mqtt_dotdot_on_color_control_color_temp_physical_max_mireds_attr
   }
 
 
-  int16_t color_temp_physical_max_mireds = {};
+  uint16_t color_temp_physical_max_mireds = {};
 
   nlohmann::json json_payload;
   try {
@@ -30548,7 +30548,7 @@ static void uic_mqtt_dotdot_on_color_control_color_temp_physical_max_mireds_attr
         return;
       }
 // Start parsing value
-      color_temp_physical_max_mireds = json_payload.at("value").get<int16_t>();
+      color_temp_physical_max_mireds = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -30611,7 +30611,7 @@ static void uic_mqtt_dotdot_on_color_control_couple_color_temp_to_level_min_mire
   }
 
 
-  int16_t couple_color_temp_to_level_min_mireds = {};
+  uint16_t couple_color_temp_to_level_min_mireds = {};
 
   nlohmann::json json_payload;
   try {
@@ -30624,7 +30624,7 @@ static void uic_mqtt_dotdot_on_color_control_couple_color_temp_to_level_min_mire
         return;
       }
 // Start parsing value
-      couple_color_temp_to_level_min_mireds = json_payload.at("value").get<int16_t>();
+      couple_color_temp_to_level_min_mireds = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -30687,7 +30687,7 @@ static void uic_mqtt_dotdot_on_color_control_start_up_color_temperature_mireds_a
   }
 
 
-  int16_t start_up_color_temperature_mireds = {};
+  uint16_t start_up_color_temperature_mireds = {};
 
   nlohmann::json json_payload;
   try {
@@ -30700,7 +30700,7 @@ static void uic_mqtt_dotdot_on_color_control_start_up_color_temperature_mireds_a
         return;
       }
 // Start parsing value
-      start_up_color_temperature_mireds = json_payload.at("value").get<int16_t>();
+      start_up_color_temperature_mireds = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -31222,7 +31222,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_physical_min_level_attribut
   }
 
 
-  int8_t physical_min_level = {};
+  uint8_t physical_min_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -31235,7 +31235,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_physical_min_level_attribut
         return;
       }
 // Start parsing value
-      physical_min_level = json_payload.at("value").get<int8_t>();
+      physical_min_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -31298,7 +31298,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_physical_max_level_attribut
   }
 
 
-  int8_t physical_max_level = {};
+  uint8_t physical_max_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -31311,7 +31311,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_physical_max_level_attribut
         return;
       }
 // Start parsing value
-      physical_max_level = json_payload.at("value").get<int8_t>();
+      physical_max_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -31450,7 +31450,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_min_level_attribute_update(
   }
 
 
-  int8_t min_level = {};
+  uint8_t min_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -31463,7 +31463,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_min_level_attribute_update(
         return;
       }
 // Start parsing value
-      min_level = json_payload.at("value").get<int8_t>();
+      min_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -31526,7 +31526,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_max_level_attribute_update(
   }
 
 
-  int8_t max_level = {};
+  uint8_t max_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -31539,7 +31539,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_max_level_attribute_update(
         return;
       }
 // Start parsing value
-      max_level = json_payload.at("value").get<int8_t>();
+      max_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -31602,7 +31602,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_power_on_level_attribute_up
   }
 
 
-  int8_t power_on_level = {};
+  uint8_t power_on_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -31615,7 +31615,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_power_on_level_attribute_up
         return;
       }
 // Start parsing value
-      power_on_level = json_payload.at("value").get<int8_t>();
+      power_on_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -31678,7 +31678,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_power_on_fade_time_attribut
   }
 
 
-  int16_t power_on_fade_time = {};
+  uint16_t power_on_fade_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -31691,7 +31691,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_power_on_fade_time_attribut
         return;
       }
 // Start parsing value
-      power_on_fade_time = json_payload.at("value").get<int16_t>();
+      power_on_fade_time = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -31754,7 +31754,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_intrinsic_ballast_factor_at
   }
 
 
-  int8_t intrinsic_ballast_factor = {};
+  uint8_t intrinsic_ballast_factor = {};
 
   nlohmann::json json_payload;
   try {
@@ -31767,7 +31767,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_intrinsic_ballast_factor_at
         return;
       }
 // Start parsing value
-      intrinsic_ballast_factor = json_payload.at("value").get<int8_t>();
+      intrinsic_ballast_factor = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -31830,7 +31830,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_ballast_factor_adjustment_a
   }
 
 
-  int8_t ballast_factor_adjustment = {};
+  uint8_t ballast_factor_adjustment = {};
 
   nlohmann::json json_payload;
   try {
@@ -31843,7 +31843,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_ballast_factor_adjustment_a
         return;
       }
 // Start parsing value
-      ballast_factor_adjustment = json_payload.at("value").get<int8_t>();
+      ballast_factor_adjustment = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -31906,7 +31906,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_lamp_quantity_attribute_upd
   }
 
 
-  int8_t lamp_quantity = {};
+  uint8_t lamp_quantity = {};
 
   nlohmann::json json_payload;
   try {
@@ -31919,7 +31919,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_lamp_quantity_attribute_upd
         return;
       }
 // Start parsing value
-      lamp_quantity = json_payload.at("value").get<int8_t>();
+      lamp_quantity = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -32134,7 +32134,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_lamp_rated_hours_attribute_
   }
 
 
-  int32_t lamp_rated_hours = {};
+  uint32_t lamp_rated_hours = {};
 
   nlohmann::json json_payload;
   try {
@@ -32147,7 +32147,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_lamp_rated_hours_attribute_
         return;
       }
 // Start parsing value
-      lamp_rated_hours = json_payload.at("value").get<int32_t>();
+      lamp_rated_hours = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -32210,7 +32210,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_lamp_burn_hours_attribute_u
   }
 
 
-  int32_t lamp_burn_hours = {};
+  uint32_t lamp_burn_hours = {};
 
   nlohmann::json json_payload;
   try {
@@ -32223,7 +32223,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_lamp_burn_hours_attribute_u
         return;
       }
 // Start parsing value
-      lamp_burn_hours = json_payload.at("value").get<int32_t>();
+      lamp_burn_hours = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -32362,7 +32362,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_lamp_burn_hours_trip_point_
   }
 
 
-  int32_t lamp_burn_hours_trip_point = {};
+  uint32_t lamp_burn_hours_trip_point = {};
 
   nlohmann::json json_payload;
   try {
@@ -32375,7 +32375,7 @@ static void uic_mqtt_dotdot_on_ballast_configuration_lamp_burn_hours_trip_point_
         return;
       }
 // Start parsing value
-      lamp_burn_hours_trip_point = json_payload.at("value").get<int32_t>();
+      lamp_burn_hours_trip_point = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -32598,7 +32598,7 @@ static void uic_mqtt_dotdot_on_illuminance_measurement_measured_value_attribute_
   }
 
 
-  int16_t measured_value = {};
+  uint16_t measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -32611,7 +32611,7 @@ static void uic_mqtt_dotdot_on_illuminance_measurement_measured_value_attribute_
         return;
       }
 // Start parsing value
-      measured_value = json_payload.at("value").get<int16_t>();
+      measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -32674,7 +32674,7 @@ static void uic_mqtt_dotdot_on_illuminance_measurement_min_measured_value_attrib
   }
 
 
-  int16_t min_measured_value = {};
+  uint16_t min_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -32687,7 +32687,7 @@ static void uic_mqtt_dotdot_on_illuminance_measurement_min_measured_value_attrib
         return;
       }
 // Start parsing value
-      min_measured_value = json_payload.at("value").get<int16_t>();
+      min_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -32750,7 +32750,7 @@ static void uic_mqtt_dotdot_on_illuminance_measurement_max_measured_value_attrib
   }
 
 
-  int16_t max_measured_value = {};
+  uint16_t max_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -32763,7 +32763,7 @@ static void uic_mqtt_dotdot_on_illuminance_measurement_max_measured_value_attrib
         return;
       }
 // Start parsing value
-      max_measured_value = json_payload.at("value").get<int16_t>();
+      max_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -32826,7 +32826,7 @@ static void uic_mqtt_dotdot_on_illuminance_measurement_tolerance_attribute_updat
   }
 
 
-  int16_t tolerance = {};
+  uint16_t tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -32839,7 +32839,7 @@ static void uic_mqtt_dotdot_on_illuminance_measurement_tolerance_attribute_updat
         return;
       }
 // Start parsing value
-      tolerance = json_payload.at("value").get<int16_t>();
+      tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -33224,7 +33224,7 @@ static void uic_mqtt_dotdot_on_illuminance_level_sensing_illuminance_target_leve
   }
 
 
-  int16_t illuminance_target_level = {};
+  uint16_t illuminance_target_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -33237,7 +33237,7 @@ static void uic_mqtt_dotdot_on_illuminance_level_sensing_illuminance_target_leve
         return;
       }
 // Start parsing value
-      illuminance_target_level = json_payload.at("value").get<int16_t>();
+      illuminance_target_level = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -33583,7 +33583,7 @@ static void uic_mqtt_dotdot_on_temperature_measurement_tolerance_attribute_updat
   }
 
 
-  int16_t tolerance = {};
+  uint16_t tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -33596,7 +33596,7 @@ static void uic_mqtt_dotdot_on_temperature_measurement_tolerance_attribute_updat
         return;
       }
 // Start parsing value
-      tolerance = json_payload.at("value").get<int16_t>();
+      tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -33955,7 +33955,7 @@ static void uic_mqtt_dotdot_on_pressure_measurement_tolerance_attribute_update(
   }
 
 
-  int16_t tolerance = {};
+  uint16_t tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -33968,7 +33968,7 @@ static void uic_mqtt_dotdot_on_pressure_measurement_tolerance_attribute_update(
         return;
       }
 // Start parsing value
-      tolerance = json_payload.at("value").get<int16_t>();
+      tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -34259,7 +34259,7 @@ static void uic_mqtt_dotdot_on_pressure_measurement_scaled_tolerance_attribute_u
   }
 
 
-  int16_t scaled_tolerance = {};
+  uint16_t scaled_tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -34272,7 +34272,7 @@ static void uic_mqtt_dotdot_on_pressure_measurement_scaled_tolerance_attribute_u
         return;
       }
 // Start parsing value
-      scaled_tolerance = json_payload.at("value").get<int16_t>();
+      scaled_tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -34514,7 +34514,7 @@ static void uic_mqtt_dotdot_on_flow_measurement_measured_value_attribute_update(
   }
 
 
-  int16_t measured_value = {};
+  uint16_t measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -34527,7 +34527,7 @@ static void uic_mqtt_dotdot_on_flow_measurement_measured_value_attribute_update(
         return;
       }
 // Start parsing value
-      measured_value = json_payload.at("value").get<int16_t>();
+      measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -34590,7 +34590,7 @@ static void uic_mqtt_dotdot_on_flow_measurement_min_measured_value_attribute_upd
   }
 
 
-  int16_t min_measured_value = {};
+  uint16_t min_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -34603,7 +34603,7 @@ static void uic_mqtt_dotdot_on_flow_measurement_min_measured_value_attribute_upd
         return;
       }
 // Start parsing value
-      min_measured_value = json_payload.at("value").get<int16_t>();
+      min_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -34666,7 +34666,7 @@ static void uic_mqtt_dotdot_on_flow_measurement_max_measured_value_attribute_upd
   }
 
 
-  int16_t max_measured_value = {};
+  uint16_t max_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -34679,7 +34679,7 @@ static void uic_mqtt_dotdot_on_flow_measurement_max_measured_value_attribute_upd
         return;
       }
 // Start parsing value
-      max_measured_value = json_payload.at("value").get<int16_t>();
+      max_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -34742,7 +34742,7 @@ static void uic_mqtt_dotdot_on_flow_measurement_tolerance_attribute_update(
   }
 
 
-  int16_t tolerance = {};
+  uint16_t tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -34755,7 +34755,7 @@ static void uic_mqtt_dotdot_on_flow_measurement_tolerance_attribute_update(
         return;
       }
 // Start parsing value
-      tolerance = json_payload.at("value").get<int16_t>();
+      tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -34881,7 +34881,7 @@ static void uic_mqtt_dotdot_on_relativity_humidity_measured_value_attribute_upda
   }
 
 
-  int16_t measured_value = {};
+  uint16_t measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -34894,7 +34894,7 @@ static void uic_mqtt_dotdot_on_relativity_humidity_measured_value_attribute_upda
         return;
       }
 // Start parsing value
-      measured_value = json_payload.at("value").get<int16_t>();
+      measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -34957,7 +34957,7 @@ static void uic_mqtt_dotdot_on_relativity_humidity_min_measured_value_attribute_
   }
 
 
-  int16_t min_measured_value = {};
+  uint16_t min_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -34970,7 +34970,7 @@ static void uic_mqtt_dotdot_on_relativity_humidity_min_measured_value_attribute_
         return;
       }
 // Start parsing value
-      min_measured_value = json_payload.at("value").get<int16_t>();
+      min_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -35033,7 +35033,7 @@ static void uic_mqtt_dotdot_on_relativity_humidity_max_measured_value_attribute_
   }
 
 
-  int16_t max_measured_value = {};
+  uint16_t max_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -35046,7 +35046,7 @@ static void uic_mqtt_dotdot_on_relativity_humidity_max_measured_value_attribute_
         return;
       }
 // Start parsing value
-      max_measured_value = json_payload.at("value").get<int16_t>();
+      max_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -35109,7 +35109,7 @@ static void uic_mqtt_dotdot_on_relativity_humidity_tolerance_attribute_update(
   }
 
 
-  int16_t tolerance = {};
+  uint16_t tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -35122,7 +35122,7 @@ static void uic_mqtt_dotdot_on_relativity_humidity_tolerance_attribute_update(
         return;
       }
 // Start parsing value
-      tolerance = json_payload.at("value").get<int16_t>();
+      tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -35492,7 +35492,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_pir_occupied_to_unoccupied_dela
   }
 
 
-  int16_t pir_occupied_to_unoccupied_delay = {};
+  uint16_t pir_occupied_to_unoccupied_delay = {};
 
   nlohmann::json json_payload;
   try {
@@ -35505,7 +35505,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_pir_occupied_to_unoccupied_dela
         return;
       }
 // Start parsing value
-      pir_occupied_to_unoccupied_delay = json_payload.at("value").get<int16_t>();
+      pir_occupied_to_unoccupied_delay = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -35568,7 +35568,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_pir_unoccupied_to_occupied_dela
   }
 
 
-  int16_t pir_unoccupied_to_occupied_delay = {};
+  uint16_t pir_unoccupied_to_occupied_delay = {};
 
   nlohmann::json json_payload;
   try {
@@ -35581,7 +35581,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_pir_unoccupied_to_occupied_dela
         return;
       }
 // Start parsing value
-      pir_unoccupied_to_occupied_delay = json_payload.at("value").get<int16_t>();
+      pir_unoccupied_to_occupied_delay = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -35644,7 +35644,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_pir_unoccupied_to_occupied_thre
   }
 
 
-  int8_t pir_unoccupied_to_occupied_threshold = {};
+  uint8_t pir_unoccupied_to_occupied_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -35657,7 +35657,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_pir_unoccupied_to_occupied_thre
         return;
       }
 // Start parsing value
-      pir_unoccupied_to_occupied_threshold = json_payload.at("value").get<int8_t>();
+      pir_unoccupied_to_occupied_threshold = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -35720,7 +35720,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_ultrasonic_occupied_to_unoccupi
   }
 
 
-  int16_t ultrasonic_occupied_to_unoccupied_delay = {};
+  uint16_t ultrasonic_occupied_to_unoccupied_delay = {};
 
   nlohmann::json json_payload;
   try {
@@ -35733,7 +35733,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_ultrasonic_occupied_to_unoccupi
         return;
       }
 // Start parsing value
-      ultrasonic_occupied_to_unoccupied_delay = json_payload.at("value").get<int16_t>();
+      ultrasonic_occupied_to_unoccupied_delay = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -35796,7 +35796,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_ultrasonic_unoccupied_to_occupi
   }
 
 
-  int16_t ultrasonic_unoccupied_to_occupied_delay = {};
+  uint16_t ultrasonic_unoccupied_to_occupied_delay = {};
 
   nlohmann::json json_payload;
   try {
@@ -35809,7 +35809,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_ultrasonic_unoccupied_to_occupi
         return;
       }
 // Start parsing value
-      ultrasonic_unoccupied_to_occupied_delay = json_payload.at("value").get<int16_t>();
+      ultrasonic_unoccupied_to_occupied_delay = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -35872,7 +35872,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_ultrasonic_unoccupied_to_occupi
   }
 
 
-  int8_t ultrasonic_unoccupied_to_occupied_threshold = {};
+  uint8_t ultrasonic_unoccupied_to_occupied_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -35885,7 +35885,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_ultrasonic_unoccupied_to_occupi
         return;
       }
 // Start parsing value
-      ultrasonic_unoccupied_to_occupied_threshold = json_payload.at("value").get<int8_t>();
+      ultrasonic_unoccupied_to_occupied_threshold = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -35948,7 +35948,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_physical_contact_occupied_to_un
   }
 
 
-  int16_t physical_contact_occupied_to_unoccupied_delay = {};
+  uint16_t physical_contact_occupied_to_unoccupied_delay = {};
 
   nlohmann::json json_payload;
   try {
@@ -35961,7 +35961,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_physical_contact_occupied_to_un
         return;
       }
 // Start parsing value
-      physical_contact_occupied_to_unoccupied_delay = json_payload.at("value").get<int16_t>();
+      physical_contact_occupied_to_unoccupied_delay = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -36024,7 +36024,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_physical_contact_unoccupied_to_
   }
 
 
-  int16_t physical_contact_unoccupied_to_occupied_delay = {};
+  uint16_t physical_contact_unoccupied_to_occupied_delay = {};
 
   nlohmann::json json_payload;
   try {
@@ -36037,7 +36037,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_physical_contact_unoccupied_to_
         return;
       }
 // Start parsing value
-      physical_contact_unoccupied_to_occupied_delay = json_payload.at("value").get<int16_t>();
+      physical_contact_unoccupied_to_occupied_delay = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -36100,7 +36100,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_physical_contact_unoccupied_to_
   }
 
 
-  int8_t physical_contact_unoccupied_to_occupied_threshold = {};
+  uint8_t physical_contact_unoccupied_to_occupied_threshold = {};
 
   nlohmann::json json_payload;
   try {
@@ -36113,7 +36113,7 @@ static void uic_mqtt_dotdot_on_occupancy_sensing_physical_contact_unoccupied_to_
         return;
       }
 // Start parsing value
-      physical_contact_unoccupied_to_occupied_threshold = json_payload.at("value").get<int8_t>();
+      physical_contact_unoccupied_to_occupied_threshold = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -36303,7 +36303,7 @@ static void uic_mqtt_dotdot_on_soil_moisture_measured_value_attribute_update(
   }
 
 
-  int16_t measured_value = {};
+  uint16_t measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -36316,7 +36316,7 @@ static void uic_mqtt_dotdot_on_soil_moisture_measured_value_attribute_update(
         return;
       }
 // Start parsing value
-      measured_value = json_payload.at("value").get<int16_t>();
+      measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -36379,7 +36379,7 @@ static void uic_mqtt_dotdot_on_soil_moisture_min_measured_value_attribute_update
   }
 
 
-  int16_t min_measured_value = {};
+  uint16_t min_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -36392,7 +36392,7 @@ static void uic_mqtt_dotdot_on_soil_moisture_min_measured_value_attribute_update
         return;
       }
 // Start parsing value
-      min_measured_value = json_payload.at("value").get<int16_t>();
+      min_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -36455,7 +36455,7 @@ static void uic_mqtt_dotdot_on_soil_moisture_max_measured_value_attribute_update
   }
 
 
-  int16_t max_measured_value = {};
+  uint16_t max_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -36468,7 +36468,7 @@ static void uic_mqtt_dotdot_on_soil_moisture_max_measured_value_attribute_update
         return;
       }
 // Start parsing value
-      max_measured_value = json_payload.at("value").get<int16_t>();
+      max_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -36531,7 +36531,7 @@ static void uic_mqtt_dotdot_on_soil_moisture_tolerance_attribute_update(
   }
 
 
-  int16_t tolerance = {};
+  uint16_t tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -36544,7 +36544,7 @@ static void uic_mqtt_dotdot_on_soil_moisture_tolerance_attribute_update(
         return;
       }
 // Start parsing value
-      tolerance = json_payload.at("value").get<int16_t>();
+      tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -36670,7 +36670,7 @@ static void uic_mqtt_dotdot_on_ph_measurement_measured_value_attribute_update(
   }
 
 
-  int16_t measured_value = {};
+  uint16_t measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -36683,7 +36683,7 @@ static void uic_mqtt_dotdot_on_ph_measurement_measured_value_attribute_update(
         return;
       }
 // Start parsing value
-      measured_value = json_payload.at("value").get<int16_t>();
+      measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -36746,7 +36746,7 @@ static void uic_mqtt_dotdot_on_ph_measurement_min_measured_value_attribute_updat
   }
 
 
-  int16_t min_measured_value = {};
+  uint16_t min_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -36759,7 +36759,7 @@ static void uic_mqtt_dotdot_on_ph_measurement_min_measured_value_attribute_updat
         return;
       }
 // Start parsing value
-      min_measured_value = json_payload.at("value").get<int16_t>();
+      min_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -36822,7 +36822,7 @@ static void uic_mqtt_dotdot_on_ph_measurement_max_measured_value_attribute_updat
   }
 
 
-  int16_t max_measured_value = {};
+  uint16_t max_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -36835,7 +36835,7 @@ static void uic_mqtt_dotdot_on_ph_measurement_max_measured_value_attribute_updat
         return;
       }
 // Start parsing value
-      max_measured_value = json_payload.at("value").get<int16_t>();
+      max_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -36898,7 +36898,7 @@ static void uic_mqtt_dotdot_on_ph_measurement_tolerance_attribute_update(
   }
 
 
-  int16_t tolerance = {};
+  uint16_t tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -36911,7 +36911,7 @@ static void uic_mqtt_dotdot_on_ph_measurement_tolerance_attribute_update(
         return;
       }
 // Start parsing value
-      tolerance = json_payload.at("value").get<int16_t>();
+      tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -37037,7 +37037,7 @@ static void uic_mqtt_dotdot_on_electrical_conductivity_measurement_measured_valu
   }
 
 
-  int16_t measured_value = {};
+  uint16_t measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -37050,7 +37050,7 @@ static void uic_mqtt_dotdot_on_electrical_conductivity_measurement_measured_valu
         return;
       }
 // Start parsing value
-      measured_value = json_payload.at("value").get<int16_t>();
+      measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -37113,7 +37113,7 @@ static void uic_mqtt_dotdot_on_electrical_conductivity_measurement_min_measured_
   }
 
 
-  int16_t min_measured_value = {};
+  uint16_t min_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -37126,7 +37126,7 @@ static void uic_mqtt_dotdot_on_electrical_conductivity_measurement_min_measured_
         return;
       }
 // Start parsing value
-      min_measured_value = json_payload.at("value").get<int16_t>();
+      min_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -37189,7 +37189,7 @@ static void uic_mqtt_dotdot_on_electrical_conductivity_measurement_max_measured_
   }
 
 
-  int16_t max_measured_value = {};
+  uint16_t max_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -37202,7 +37202,7 @@ static void uic_mqtt_dotdot_on_electrical_conductivity_measurement_max_measured_
         return;
       }
 // Start parsing value
-      max_measured_value = json_payload.at("value").get<int16_t>();
+      max_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -37265,7 +37265,7 @@ static void uic_mqtt_dotdot_on_electrical_conductivity_measurement_tolerance_att
   }
 
 
-  int16_t tolerance = {};
+  uint16_t tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -37278,7 +37278,7 @@ static void uic_mqtt_dotdot_on_electrical_conductivity_measurement_tolerance_att
         return;
       }
 // Start parsing value
-      tolerance = json_payload.at("value").get<int16_t>();
+      tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -37404,7 +37404,7 @@ static void uic_mqtt_dotdot_on_wind_speed_measurement_measured_value_attribute_u
   }
 
 
-  int16_t measured_value = {};
+  uint16_t measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -37417,7 +37417,7 @@ static void uic_mqtt_dotdot_on_wind_speed_measurement_measured_value_attribute_u
         return;
       }
 // Start parsing value
-      measured_value = json_payload.at("value").get<int16_t>();
+      measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -37480,7 +37480,7 @@ static void uic_mqtt_dotdot_on_wind_speed_measurement_min_measured_value_attribu
   }
 
 
-  int16_t min_measured_value = {};
+  uint16_t min_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -37493,7 +37493,7 @@ static void uic_mqtt_dotdot_on_wind_speed_measurement_min_measured_value_attribu
         return;
       }
 // Start parsing value
-      min_measured_value = json_payload.at("value").get<int16_t>();
+      min_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -37556,7 +37556,7 @@ static void uic_mqtt_dotdot_on_wind_speed_measurement_max_measured_value_attribu
   }
 
 
-  int16_t max_measured_value = {};
+  uint16_t max_measured_value = {};
 
   nlohmann::json json_payload;
   try {
@@ -37569,7 +37569,7 @@ static void uic_mqtt_dotdot_on_wind_speed_measurement_max_measured_value_attribu
         return;
       }
 // Start parsing value
-      max_measured_value = json_payload.at("value").get<int16_t>();
+      max_measured_value = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -37632,7 +37632,7 @@ static void uic_mqtt_dotdot_on_wind_speed_measurement_tolerance_attribute_update
   }
 
 
-  int16_t tolerance = {};
+  uint16_t tolerance = {};
 
   nlohmann::json json_payload;
   try {
@@ -37645,7 +37645,7 @@ static void uic_mqtt_dotdot_on_wind_speed_measurement_tolerance_attribute_update
         return;
       }
 // Start parsing value
-      tolerance = json_payload.at("value").get<int16_t>();
+      tolerance = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -39195,7 +39195,7 @@ static void uic_mqtt_dotdot_on_ias_zone_zoneid_attribute_update(
   }
 
 
-  int8_t zoneid = {};
+  uint8_t zoneid = {};
 
   nlohmann::json json_payload;
   try {
@@ -39208,7 +39208,7 @@ static void uic_mqtt_dotdot_on_ias_zone_zoneid_attribute_update(
         return;
       }
 // Start parsing value
-      zoneid = json_payload.at("value").get<int8_t>();
+      zoneid = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -39271,7 +39271,7 @@ static void uic_mqtt_dotdot_on_ias_zone_number_of_zone_sensitivity_levels_suppor
   }
 
 
-  int8_t number_of_zone_sensitivity_levels_supported = {};
+  uint8_t number_of_zone_sensitivity_levels_supported = {};
 
   nlohmann::json json_payload;
   try {
@@ -39284,7 +39284,7 @@ static void uic_mqtt_dotdot_on_ias_zone_number_of_zone_sensitivity_levels_suppor
         return;
       }
 // Start parsing value
-      number_of_zone_sensitivity_levels_supported = json_payload.at("value").get<int8_t>();
+      number_of_zone_sensitivity_levels_supported = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -39347,7 +39347,7 @@ static void uic_mqtt_dotdot_on_ias_zone_current_zone_sensitivity_level_attribute
   }
 
 
-  int8_t current_zone_sensitivity_level = {};
+  uint8_t current_zone_sensitivity_level = {};
 
   nlohmann::json json_payload;
   try {
@@ -39360,7 +39360,7 @@ static void uic_mqtt_dotdot_on_ias_zone_current_zone_sensitivity_level_attribute
         return;
       }
 // Start parsing value
-      current_zone_sensitivity_level = json_payload.at("value").get<int8_t>();
+      current_zone_sensitivity_level = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -39507,7 +39507,7 @@ static void uic_mqtt_dotdot_on_iaswd_max_duration_attribute_update(
   }
 
 
-  int16_t max_duration = {};
+  uint16_t max_duration = {};
 
   nlohmann::json json_payload;
   try {
@@ -39520,7 +39520,7 @@ static void uic_mqtt_dotdot_on_iaswd_max_duration_attribute_update(
         return;
       }
 // Start parsing value
-      max_duration = json_payload.at("value").get<int16_t>();
+      max_duration = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -39644,7 +39644,7 @@ static void uic_mqtt_dotdot_on_metering_current_summation_delivered_attribute_up
   }
 
 
-  int64_t current_summation_delivered = {};
+  uint64_t current_summation_delivered = {};
 
   nlohmann::json json_payload;
   try {
@@ -39657,7 +39657,7 @@ static void uic_mqtt_dotdot_on_metering_current_summation_delivered_attribute_up
         return;
       }
 // Start parsing value
-      current_summation_delivered = json_payload.at("value").get<int64_t>();
+      current_summation_delivered = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -39720,7 +39720,7 @@ static void uic_mqtt_dotdot_on_metering_current_summation_received_attribute_upd
   }
 
 
-  int64_t current_summation_received = {};
+  uint64_t current_summation_received = {};
 
   nlohmann::json json_payload;
   try {
@@ -39733,7 +39733,7 @@ static void uic_mqtt_dotdot_on_metering_current_summation_received_attribute_upd
         return;
       }
 // Start parsing value
-      current_summation_received = json_payload.at("value").get<int64_t>();
+      current_summation_received = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -39796,7 +39796,7 @@ static void uic_mqtt_dotdot_on_metering_current_max_demand_delivered_attribute_u
   }
 
 
-  int64_t current_max_demand_delivered = {};
+  uint64_t current_max_demand_delivered = {};
 
   nlohmann::json json_payload;
   try {
@@ -39809,7 +39809,7 @@ static void uic_mqtt_dotdot_on_metering_current_max_demand_delivered_attribute_u
         return;
       }
 // Start parsing value
-      current_max_demand_delivered = json_payload.at("value").get<int64_t>();
+      current_max_demand_delivered = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -40024,7 +40024,7 @@ static void uic_mqtt_dotdot_on_metering_reading_snap_shot_time_attribute_update(
   }
 
 
-  uint8_t reading_snap_shot_time = {};
+  uint32_t reading_snap_shot_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -40037,7 +40037,7 @@ static void uic_mqtt_dotdot_on_metering_reading_snap_shot_time_attribute_update(
         return;
       }
 // Start parsing value
-      reading_snap_shot_time = json_payload.at("value").get<uint8_t>();
+      reading_snap_shot_time = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -40100,7 +40100,7 @@ static void uic_mqtt_dotdot_on_metering_current_max_demand_delivered_time_attrib
   }
 
 
-  uint8_t current_max_demand_delivered_time = {};
+  uint32_t current_max_demand_delivered_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -40113,7 +40113,7 @@ static void uic_mqtt_dotdot_on_metering_current_max_demand_delivered_time_attrib
         return;
       }
 // Start parsing value
-      current_max_demand_delivered_time = json_payload.at("value").get<uint8_t>();
+      current_max_demand_delivered_time = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -40176,7 +40176,7 @@ static void uic_mqtt_dotdot_on_metering_current_max_demand_received_time_attribu
   }
 
 
-  uint8_t current_max_demand_received_time = {};
+  uint32_t current_max_demand_received_time = {};
 
   nlohmann::json json_payload;
   try {
@@ -40189,7 +40189,7 @@ static void uic_mqtt_dotdot_on_metering_current_max_demand_received_time_attribu
         return;
       }
 // Start parsing value
-      current_max_demand_received_time = json_payload.at("value").get<uint8_t>();
+      current_max_demand_received_time = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -40252,7 +40252,7 @@ static void uic_mqtt_dotdot_on_metering_default_update_period_attribute_update(
   }
 
 
-  int8_t default_update_period = {};
+  uint8_t default_update_period = {};
 
   nlohmann::json json_payload;
   try {
@@ -40265,7 +40265,7 @@ static void uic_mqtt_dotdot_on_metering_default_update_period_attribute_update(
         return;
       }
 // Start parsing value
-      default_update_period = json_payload.at("value").get<int8_t>();
+      default_update_period = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -40412,7 +40412,7 @@ static void uic_mqtt_dotdot_on_metering_current_inlet_energy_carrier_summation_a
   }
 
 
-  int64_t current_inlet_energy_carrier_summation = {};
+  uint64_t current_inlet_energy_carrier_summation = {};
 
   nlohmann::json json_payload;
   try {
@@ -40425,7 +40425,7 @@ static void uic_mqtt_dotdot_on_metering_current_inlet_energy_carrier_summation_a
         return;
       }
 // Start parsing value
-      current_inlet_energy_carrier_summation = json_payload.at("value").get<int64_t>();
+      current_inlet_energy_carrier_summation = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -40488,7 +40488,7 @@ static void uic_mqtt_dotdot_on_metering_current_outlet_energy_carrier_summation_
   }
 
 
-  int64_t current_outlet_energy_carrier_summation = {};
+  uint64_t current_outlet_energy_carrier_summation = {};
 
   nlohmann::json json_payload;
   try {
@@ -40501,7 +40501,7 @@ static void uic_mqtt_dotdot_on_metering_current_outlet_energy_carrier_summation_
         return;
       }
 // Start parsing value
-      current_outlet_energy_carrier_summation = json_payload.at("value").get<int64_t>();
+      current_outlet_energy_carrier_summation = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -40800,7 +40800,7 @@ static void uic_mqtt_dotdot_on_metering_multiplier_attribute_update(
   }
 
 
-  int32_t multiplier = {};
+  uint32_t multiplier = {};
 
   nlohmann::json json_payload;
   try {
@@ -40813,7 +40813,7 @@ static void uic_mqtt_dotdot_on_metering_multiplier_attribute_update(
         return;
       }
 // Start parsing value
-      multiplier = json_payload.at("value").get<int32_t>();
+      multiplier = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -40876,7 +40876,7 @@ static void uic_mqtt_dotdot_on_metering_divisor_attribute_update(
   }
 
 
-  int32_t divisor = {};
+  uint32_t divisor = {};
 
   nlohmann::json json_payload;
   try {
@@ -40889,7 +40889,7 @@ static void uic_mqtt_dotdot_on_metering_divisor_attribute_update(
         return;
       }
 // Start parsing value
-      divisor = json_payload.at("value").get<int32_t>();
+      divisor = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -42782,7 +42782,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_voltage_multiplier_attr
   }
 
 
-  int16_t dc_voltage_multiplier = {};
+  uint16_t dc_voltage_multiplier = {};
 
   nlohmann::json json_payload;
   try {
@@ -42795,7 +42795,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_voltage_multiplier_attr
         return;
       }
 // Start parsing value
-      dc_voltage_multiplier = json_payload.at("value").get<int16_t>();
+      dc_voltage_multiplier = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -42858,7 +42858,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_voltage_divisor_attribu
   }
 
 
-  int16_t dc_voltage_divisor = {};
+  uint16_t dc_voltage_divisor = {};
 
   nlohmann::json json_payload;
   try {
@@ -42871,7 +42871,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_voltage_divisor_attribu
         return;
       }
 // Start parsing value
-      dc_voltage_divisor = json_payload.at("value").get<int16_t>();
+      dc_voltage_divisor = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -42934,7 +42934,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_current_multiplier_attr
   }
 
 
-  int16_t dc_current_multiplier = {};
+  uint16_t dc_current_multiplier = {};
 
   nlohmann::json json_payload;
   try {
@@ -42947,7 +42947,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_current_multiplier_attr
         return;
       }
 // Start parsing value
-      dc_current_multiplier = json_payload.at("value").get<int16_t>();
+      dc_current_multiplier = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -43010,7 +43010,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_current_divisor_attribu
   }
 
 
-  int16_t dc_current_divisor = {};
+  uint16_t dc_current_divisor = {};
 
   nlohmann::json json_payload;
   try {
@@ -43023,7 +43023,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_current_divisor_attribu
         return;
       }
 // Start parsing value
-      dc_current_divisor = json_payload.at("value").get<int16_t>();
+      dc_current_divisor = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -43086,7 +43086,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_power_multiplier_attrib
   }
 
 
-  int16_t dc_power_multiplier = {};
+  uint16_t dc_power_multiplier = {};
 
   nlohmann::json json_payload;
   try {
@@ -43099,7 +43099,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_power_multiplier_attrib
         return;
       }
 // Start parsing value
-      dc_power_multiplier = json_payload.at("value").get<int16_t>();
+      dc_power_multiplier = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -43162,7 +43162,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_power_divisor_attribute
   }
 
 
-  int16_t dc_power_divisor = {};
+  uint16_t dc_power_divisor = {};
 
   nlohmann::json json_payload;
   try {
@@ -43175,7 +43175,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_dc_power_divisor_attribute
         return;
       }
 // Start parsing value
-      dc_power_divisor = json_payload.at("value").get<int16_t>();
+      dc_power_divisor = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -43238,7 +43238,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_attribute_upd
   }
 
 
-  int16_t ac_frequency = {};
+  uint16_t ac_frequency = {};
 
   nlohmann::json json_payload;
   try {
@@ -43251,7 +43251,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_attribute_upd
         return;
       }
 // Start parsing value
-      ac_frequency = json_payload.at("value").get<int16_t>();
+      ac_frequency = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -43314,7 +43314,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_min_attribute
   }
 
 
-  int16_t ac_frequency_min = {};
+  uint16_t ac_frequency_min = {};
 
   nlohmann::json json_payload;
   try {
@@ -43327,7 +43327,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_min_attribute
         return;
       }
 // Start parsing value
-      ac_frequency_min = json_payload.at("value").get<int16_t>();
+      ac_frequency_min = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -43390,7 +43390,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_max_attribute
   }
 
 
-  int16_t ac_frequency_max = {};
+  uint16_t ac_frequency_max = {};
 
   nlohmann::json json_payload;
   try {
@@ -43403,7 +43403,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_max_attribute
         return;
       }
 // Start parsing value
-      ac_frequency_max = json_payload.at("value").get<int16_t>();
+      ac_frequency_max = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -43466,7 +43466,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_neutral_current_attribute_
   }
 
 
-  int16_t neutral_current = {};
+  uint16_t neutral_current = {};
 
   nlohmann::json json_payload;
   try {
@@ -43479,7 +43479,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_neutral_current_attribute_
         return;
       }
 // Start parsing value
-      neutral_current = json_payload.at("value").get<int16_t>();
+      neutral_current = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -43694,7 +43694,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_total_apparent_power_attri
   }
 
 
-  int32_t total_apparent_power = {};
+  uint32_t total_apparent_power = {};
 
   nlohmann::json json_payload;
   try {
@@ -43707,7 +43707,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_total_apparent_power_attri
         return;
       }
 // Start parsing value
-      total_apparent_power = json_payload.at("value").get<int32_t>();
+      total_apparent_power = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -44682,7 +44682,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_multiplier_at
   }
 
 
-  int16_t ac_frequency_multiplier = {};
+  uint16_t ac_frequency_multiplier = {};
 
   nlohmann::json json_payload;
   try {
@@ -44695,7 +44695,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_multiplier_at
         return;
       }
 // Start parsing value
-      ac_frequency_multiplier = json_payload.at("value").get<int16_t>();
+      ac_frequency_multiplier = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -44758,7 +44758,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_divisor_attri
   }
 
 
-  int16_t ac_frequency_divisor = {};
+  uint16_t ac_frequency_divisor = {};
 
   nlohmann::json json_payload;
   try {
@@ -44771,7 +44771,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_frequency_divisor_attri
         return;
       }
 // Start parsing value
-      ac_frequency_divisor = json_payload.at("value").get<int16_t>();
+      ac_frequency_divisor = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -44834,7 +44834,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_power_multiplier_attribute
   }
 
 
-  int32_t power_multiplier = {};
+  uint32_t power_multiplier = {};
 
   nlohmann::json json_payload;
   try {
@@ -44847,7 +44847,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_power_multiplier_attribute
         return;
       }
 // Start parsing value
-      power_multiplier = json_payload.at("value").get<int32_t>();
+      power_multiplier = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -44910,7 +44910,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_power_divisor_attribute_up
   }
 
 
-  int32_t power_divisor = {};
+  uint32_t power_divisor = {};
 
   nlohmann::json json_payload;
   try {
@@ -44923,7 +44923,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_power_divisor_attribute_up
         return;
       }
 // Start parsing value
-      power_divisor = json_payload.at("value").get<int32_t>();
+      power_divisor = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -45138,7 +45138,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_line_current_attribute_upd
   }
 
 
-  int16_t line_current = {};
+  uint16_t line_current = {};
 
   nlohmann::json json_payload;
   try {
@@ -45151,7 +45151,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_line_current_attribute_upd
         return;
       }
 // Start parsing value
-      line_current = json_payload.at("value").get<int16_t>();
+      line_current = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -45366,7 +45366,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_attribute_upda
   }
 
 
-  int16_t rms_voltage = {};
+  uint16_t rms_voltage = {};
 
   nlohmann::json json_payload;
   try {
@@ -45379,7 +45379,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_attribute_upda
         return;
       }
 // Start parsing value
-      rms_voltage = json_payload.at("value").get<int16_t>();
+      rms_voltage = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -45442,7 +45442,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_min_attribute_
   }
 
 
-  int16_t rms_voltage_min = {};
+  uint16_t rms_voltage_min = {};
 
   nlohmann::json json_payload;
   try {
@@ -45455,7 +45455,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_min_attribute_
         return;
       }
 // Start parsing value
-      rms_voltage_min = json_payload.at("value").get<int16_t>();
+      rms_voltage_min = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -45518,7 +45518,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_max_attribute_
   }
 
 
-  int16_t rms_voltage_max = {};
+  uint16_t rms_voltage_max = {};
 
   nlohmann::json json_payload;
   try {
@@ -45531,7 +45531,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_max_attribute_
         return;
       }
 // Start parsing value
-      rms_voltage_max = json_payload.at("value").get<int16_t>();
+      rms_voltage_max = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -45594,7 +45594,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_attribute_upda
   }
 
 
-  int16_t rms_current = {};
+  uint16_t rms_current = {};
 
   nlohmann::json json_payload;
   try {
@@ -45607,7 +45607,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_attribute_upda
         return;
       }
 // Start parsing value
-      rms_current = json_payload.at("value").get<int16_t>();
+      rms_current = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -45670,7 +45670,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_min_attribute_
   }
 
 
-  int16_t rms_current_min = {};
+  uint16_t rms_current_min = {};
 
   nlohmann::json json_payload;
   try {
@@ -45683,7 +45683,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_min_attribute_
         return;
       }
 // Start parsing value
-      rms_current_min = json_payload.at("value").get<int16_t>();
+      rms_current_min = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -45746,7 +45746,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_max_attribute_
   }
 
 
-  int16_t rms_current_max = {};
+  uint16_t rms_current_max = {};
 
   nlohmann::json json_payload;
   try {
@@ -45759,7 +45759,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_max_attribute_
         return;
       }
 // Start parsing value
-      rms_current_max = json_payload.at("value").get<int16_t>();
+      rms_current_max = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46126,7 +46126,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_apparent_power_attribute_u
   }
 
 
-  int16_t apparent_power = {};
+  uint16_t apparent_power = {};
 
   nlohmann::json json_payload;
   try {
@@ -46139,7 +46139,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_apparent_power_attribute_u
         return;
       }
 // Start parsing value
-      apparent_power = json_payload.at("value").get<int16_t>();
+      apparent_power = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46278,7 +46278,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_voltage_measur
   }
 
 
-  int16_t average_rms_voltage_measurement_period = {};
+  uint16_t average_rms_voltage_measurement_period = {};
 
   nlohmann::json json_payload;
   try {
@@ -46291,7 +46291,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_voltage_measur
         return;
       }
 // Start parsing value
-      average_rms_voltage_measurement_period = json_payload.at("value").get<int16_t>();
+      average_rms_voltage_measurement_period = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46354,7 +46354,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_over_voltage_c
   }
 
 
-  int16_t average_rms_over_voltage_counter = {};
+  uint16_t average_rms_over_voltage_counter = {};
 
   nlohmann::json json_payload;
   try {
@@ -46367,7 +46367,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_over_voltage_c
         return;
       }
 // Start parsing value
-      average_rms_over_voltage_counter = json_payload.at("value").get<int16_t>();
+      average_rms_over_voltage_counter = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46430,7 +46430,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_under_voltage_
   }
 
 
-  int16_t average_rms_under_voltage_counter = {};
+  uint16_t average_rms_under_voltage_counter = {};
 
   nlohmann::json json_payload;
   try {
@@ -46443,7 +46443,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_under_voltage_
         return;
       }
 // Start parsing value
-      average_rms_under_voltage_counter = json_payload.at("value").get<int16_t>();
+      average_rms_under_voltage_counter = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46506,7 +46506,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_over_voltage_p
   }
 
 
-  int16_t rms_extreme_over_voltage_period = {};
+  uint16_t rms_extreme_over_voltage_period = {};
 
   nlohmann::json json_payload;
   try {
@@ -46519,7 +46519,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_over_voltage_p
         return;
       }
 // Start parsing value
-      rms_extreme_over_voltage_period = json_payload.at("value").get<int16_t>();
+      rms_extreme_over_voltage_period = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46582,7 +46582,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_under_voltage_
   }
 
 
-  int16_t rms_extreme_under_voltage_period = {};
+  uint16_t rms_extreme_under_voltage_period = {};
 
   nlohmann::json json_payload;
   try {
@@ -46595,7 +46595,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_under_voltage_
         return;
       }
 // Start parsing value
-      rms_extreme_under_voltage_period = json_payload.at("value").get<int16_t>();
+      rms_extreme_under_voltage_period = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46658,7 +46658,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_sag_period_att
   }
 
 
-  int16_t rms_voltage_sag_period = {};
+  uint16_t rms_voltage_sag_period = {};
 
   nlohmann::json json_payload;
   try {
@@ -46671,7 +46671,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_sag_period_att
         return;
       }
 // Start parsing value
-      rms_voltage_sag_period = json_payload.at("value").get<int16_t>();
+      rms_voltage_sag_period = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46734,7 +46734,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_swell_period_a
   }
 
 
-  int16_t rms_voltage_swell_period = {};
+  uint16_t rms_voltage_swell_period = {};
 
   nlohmann::json json_payload;
   try {
@@ -46747,7 +46747,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_swell_period_a
         return;
       }
 // Start parsing value
-      rms_voltage_swell_period = json_payload.at("value").get<int16_t>();
+      rms_voltage_swell_period = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46810,7 +46810,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_voltage_multiplier_attr
   }
 
 
-  int16_t ac_voltage_multiplier = {};
+  uint16_t ac_voltage_multiplier = {};
 
   nlohmann::json json_payload;
   try {
@@ -46823,7 +46823,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_voltage_multiplier_attr
         return;
       }
 // Start parsing value
-      ac_voltage_multiplier = json_payload.at("value").get<int16_t>();
+      ac_voltage_multiplier = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46886,7 +46886,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_voltage_divisor_attribu
   }
 
 
-  int16_t ac_voltage_divisor = {};
+  uint16_t ac_voltage_divisor = {};
 
   nlohmann::json json_payload;
   try {
@@ -46899,7 +46899,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_voltage_divisor_attribu
         return;
       }
 // Start parsing value
-      ac_voltage_divisor = json_payload.at("value").get<int16_t>();
+      ac_voltage_divisor = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -46962,7 +46962,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_current_multiplier_attr
   }
 
 
-  int16_t ac_current_multiplier = {};
+  uint16_t ac_current_multiplier = {};
 
   nlohmann::json json_payload;
   try {
@@ -46975,7 +46975,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_current_multiplier_attr
         return;
       }
 // Start parsing value
-      ac_current_multiplier = json_payload.at("value").get<int16_t>();
+      ac_current_multiplier = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -47038,7 +47038,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_current_divisor_attribu
   }
 
 
-  int16_t ac_current_divisor = {};
+  uint16_t ac_current_divisor = {};
 
   nlohmann::json json_payload;
   try {
@@ -47051,7 +47051,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_current_divisor_attribu
         return;
       }
 // Start parsing value
-      ac_current_divisor = json_payload.at("value").get<int16_t>();
+      ac_current_divisor = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -47114,7 +47114,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_power_multiplier_attrib
   }
 
 
-  int16_t ac_power_multiplier = {};
+  uint16_t ac_power_multiplier = {};
 
   nlohmann::json json_payload;
   try {
@@ -47127,7 +47127,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_power_multiplier_attrib
         return;
       }
 // Start parsing value
-      ac_power_multiplier = json_payload.at("value").get<int16_t>();
+      ac_power_multiplier = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -47190,7 +47190,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_power_divisor_attribute
   }
 
 
-  int16_t ac_power_divisor = {};
+  uint16_t ac_power_divisor = {};
 
   nlohmann::json json_payload;
   try {
@@ -47203,7 +47203,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_ac_power_divisor_attribute
         return;
       }
 // Start parsing value
-      ac_power_divisor = json_payload.at("value").get<int16_t>();
+      ac_power_divisor = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -48330,7 +48330,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_line_current_phb_attribute
   }
 
 
-  int16_t line_current_phb = {};
+  uint16_t line_current_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -48343,7 +48343,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_line_current_phb_attribute
         return;
       }
 // Start parsing value
-      line_current_phb = json_payload.at("value").get<int16_t>();
+      line_current_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -48558,7 +48558,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_phb_attribute_
   }
 
 
-  int16_t rms_voltage_phb = {};
+  uint16_t rms_voltage_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -48571,7 +48571,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_phb_attribute_
         return;
       }
 // Start parsing value
-      rms_voltage_phb = json_payload.at("value").get<int16_t>();
+      rms_voltage_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -48634,7 +48634,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_min_phb_attrib
   }
 
 
-  int16_t rms_voltage_min_phb = {};
+  uint16_t rms_voltage_min_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -48647,7 +48647,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_min_phb_attrib
         return;
       }
 // Start parsing value
-      rms_voltage_min_phb = json_payload.at("value").get<int16_t>();
+      rms_voltage_min_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -48710,7 +48710,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_max_phb_attrib
   }
 
 
-  int16_t rms_voltage_max_phb = {};
+  uint16_t rms_voltage_max_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -48723,7 +48723,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_max_phb_attrib
         return;
       }
 // Start parsing value
-      rms_voltage_max_phb = json_payload.at("value").get<int16_t>();
+      rms_voltage_max_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -48786,7 +48786,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_phb_attribute_
   }
 
 
-  int16_t rms_current_phb = {};
+  uint16_t rms_current_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -48799,7 +48799,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_phb_attribute_
         return;
       }
 // Start parsing value
-      rms_current_phb = json_payload.at("value").get<int16_t>();
+      rms_current_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -48862,7 +48862,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_min_phb_attrib
   }
 
 
-  int16_t rms_current_min_phb = {};
+  uint16_t rms_current_min_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -48875,7 +48875,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_min_phb_attrib
         return;
       }
 // Start parsing value
-      rms_current_min_phb = json_payload.at("value").get<int16_t>();
+      rms_current_min_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -48938,7 +48938,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_max_phb_attrib
   }
 
 
-  int16_t rms_current_max_phb = {};
+  uint16_t rms_current_max_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -48951,7 +48951,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_max_phb_attrib
         return;
       }
 // Start parsing value
-      rms_current_max_phb = json_payload.at("value").get<int16_t>();
+      rms_current_max_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -49318,7 +49318,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_apparent_power_phb_attribu
   }
 
 
-  int16_t apparent_power_phb = {};
+  uint16_t apparent_power_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -49331,7 +49331,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_apparent_power_phb_attribu
         return;
       }
 // Start parsing value
-      apparent_power_phb = json_payload.at("value").get<int16_t>();
+      apparent_power_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -49470,7 +49470,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_voltage_measur
   }
 
 
-  int16_t average_rms_voltage_measurement_period_phb = {};
+  uint16_t average_rms_voltage_measurement_period_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -49483,7 +49483,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_voltage_measur
         return;
       }
 // Start parsing value
-      average_rms_voltage_measurement_period_phb = json_payload.at("value").get<int16_t>();
+      average_rms_voltage_measurement_period_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -49546,7 +49546,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_over_voltage_c
   }
 
 
-  int16_t average_rms_over_voltage_counter_phb = {};
+  uint16_t average_rms_over_voltage_counter_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -49559,7 +49559,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_over_voltage_c
         return;
       }
 // Start parsing value
-      average_rms_over_voltage_counter_phb = json_payload.at("value").get<int16_t>();
+      average_rms_over_voltage_counter_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -49622,7 +49622,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_under_voltage_
   }
 
 
-  int16_t average_rms_under_voltage_counter_phb = {};
+  uint16_t average_rms_under_voltage_counter_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -49635,7 +49635,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_under_voltage_
         return;
       }
 // Start parsing value
-      average_rms_under_voltage_counter_phb = json_payload.at("value").get<int16_t>();
+      average_rms_under_voltage_counter_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -49698,7 +49698,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_over_voltage_p
   }
 
 
-  int16_t rms_extreme_over_voltage_period_phb = {};
+  uint16_t rms_extreme_over_voltage_period_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -49711,7 +49711,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_over_voltage_p
         return;
       }
 // Start parsing value
-      rms_extreme_over_voltage_period_phb = json_payload.at("value").get<int16_t>();
+      rms_extreme_over_voltage_period_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -49774,7 +49774,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_under_voltage_
   }
 
 
-  int16_t rms_extreme_under_voltage_period_phb = {};
+  uint16_t rms_extreme_under_voltage_period_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -49787,7 +49787,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_under_voltage_
         return;
       }
 // Start parsing value
-      rms_extreme_under_voltage_period_phb = json_payload.at("value").get<int16_t>();
+      rms_extreme_under_voltage_period_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -49850,7 +49850,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_sag_period_phb
   }
 
 
-  int16_t rms_voltage_sag_period_phb = {};
+  uint16_t rms_voltage_sag_period_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -49863,7 +49863,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_sag_period_phb
         return;
       }
 // Start parsing value
-      rms_voltage_sag_period_phb = json_payload.at("value").get<int16_t>();
+      rms_voltage_sag_period_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -49926,7 +49926,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_swell_period_p
   }
 
 
-  int16_t rms_voltage_swell_period_phb = {};
+  uint16_t rms_voltage_swell_period_phb = {};
 
   nlohmann::json json_payload;
   try {
@@ -49939,7 +49939,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_swell_period_p
         return;
       }
 // Start parsing value
-      rms_voltage_swell_period_phb = json_payload.at("value").get<int16_t>();
+      rms_voltage_swell_period_phb = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -50002,7 +50002,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_line_current_phc_attribute
   }
 
 
-  int16_t line_current_phc = {};
+  uint16_t line_current_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -50015,7 +50015,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_line_current_phc_attribute
         return;
       }
 // Start parsing value
-      line_current_phc = json_payload.at("value").get<int16_t>();
+      line_current_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -50230,7 +50230,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_phc_attribute_
   }
 
 
-  int16_t rms_voltage_phc = {};
+  uint16_t rms_voltage_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -50243,7 +50243,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_phc_attribute_
         return;
       }
 // Start parsing value
-      rms_voltage_phc = json_payload.at("value").get<int16_t>();
+      rms_voltage_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -50306,7 +50306,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_min_phc_attrib
   }
 
 
-  int16_t rms_voltage_min_phc = {};
+  uint16_t rms_voltage_min_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -50319,7 +50319,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_min_phc_attrib
         return;
       }
 // Start parsing value
-      rms_voltage_min_phc = json_payload.at("value").get<int16_t>();
+      rms_voltage_min_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -50382,7 +50382,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_max_phc_attrib
   }
 
 
-  int16_t rms_voltage_max_phc = {};
+  uint16_t rms_voltage_max_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -50395,7 +50395,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_max_phc_attrib
         return;
       }
 // Start parsing value
-      rms_voltage_max_phc = json_payload.at("value").get<int16_t>();
+      rms_voltage_max_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -50458,7 +50458,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_phc_attribute_
   }
 
 
-  int16_t rms_current_phc = {};
+  uint16_t rms_current_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -50471,7 +50471,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_phc_attribute_
         return;
       }
 // Start parsing value
-      rms_current_phc = json_payload.at("value").get<int16_t>();
+      rms_current_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -50534,7 +50534,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_min_phc_attrib
   }
 
 
-  int16_t rms_current_min_phc = {};
+  uint16_t rms_current_min_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -50547,7 +50547,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_min_phc_attrib
         return;
       }
 // Start parsing value
-      rms_current_min_phc = json_payload.at("value").get<int16_t>();
+      rms_current_min_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -50610,7 +50610,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_max_phc_attrib
   }
 
 
-  int16_t rms_current_max_phc = {};
+  uint16_t rms_current_max_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -50623,7 +50623,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_current_max_phc_attrib
         return;
       }
 // Start parsing value
-      rms_current_max_phc = json_payload.at("value").get<int16_t>();
+      rms_current_max_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -50990,7 +50990,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_apparent_power_phc_attribu
   }
 
 
-  int16_t apparent_power_phc = {};
+  uint16_t apparent_power_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -51003,7 +51003,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_apparent_power_phc_attribu
         return;
       }
 // Start parsing value
-      apparent_power_phc = json_payload.at("value").get<int16_t>();
+      apparent_power_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -51142,7 +51142,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_voltage_measur
   }
 
 
-  int16_t average_rms_voltage_measurement_period_phc = {};
+  uint16_t average_rms_voltage_measurement_period_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -51155,7 +51155,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_voltage_measur
         return;
       }
 // Start parsing value
-      average_rms_voltage_measurement_period_phc = json_payload.at("value").get<int16_t>();
+      average_rms_voltage_measurement_period_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -51218,7 +51218,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_over_voltage_c
   }
 
 
-  int16_t average_rms_over_voltage_counter_phc = {};
+  uint16_t average_rms_over_voltage_counter_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -51231,7 +51231,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_over_voltage_c
         return;
       }
 // Start parsing value
-      average_rms_over_voltage_counter_phc = json_payload.at("value").get<int16_t>();
+      average_rms_over_voltage_counter_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -51294,7 +51294,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_under_voltage_
   }
 
 
-  int16_t average_rms_under_voltage_counter_phc = {};
+  uint16_t average_rms_under_voltage_counter_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -51307,7 +51307,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_average_rms_under_voltage_
         return;
       }
 // Start parsing value
-      average_rms_under_voltage_counter_phc = json_payload.at("value").get<int16_t>();
+      average_rms_under_voltage_counter_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -51370,7 +51370,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_over_voltage_p
   }
 
 
-  int16_t rms_extreme_over_voltage_period_phc = {};
+  uint16_t rms_extreme_over_voltage_period_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -51383,7 +51383,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_over_voltage_p
         return;
       }
 // Start parsing value
-      rms_extreme_over_voltage_period_phc = json_payload.at("value").get<int16_t>();
+      rms_extreme_over_voltage_period_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -51446,7 +51446,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_under_voltage_
   }
 
 
-  int16_t rms_extreme_under_voltage_period_phc = {};
+  uint16_t rms_extreme_under_voltage_period_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -51459,7 +51459,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_extreme_under_voltage_
         return;
       }
 // Start parsing value
-      rms_extreme_under_voltage_period_phc = json_payload.at("value").get<int16_t>();
+      rms_extreme_under_voltage_period_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -51522,7 +51522,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_sag_period_phc
   }
 
 
-  int16_t rms_voltage_sag_period_phc = {};
+  uint16_t rms_voltage_sag_period_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -51535,7 +51535,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_sag_period_phc
         return;
       }
 // Start parsing value
-      rms_voltage_sag_period_phc = json_payload.at("value").get<int16_t>();
+      rms_voltage_sag_period_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -51598,7 +51598,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_swell_period_p
   }
 
 
-  int16_t rms_voltage_swell_period_phc = {};
+  uint16_t rms_voltage_swell_period_phc = {};
 
   nlohmann::json json_payload;
   try {
@@ -51611,7 +51611,7 @@ static void uic_mqtt_dotdot_on_electrical_measurement_rms_voltage_swell_period_p
         return;
       }
 // Start parsing value
-      rms_voltage_swell_period_phc = json_payload.at("value").get<int16_t>();
+      rms_voltage_swell_period_phc = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -52749,7 +52749,7 @@ static void uic_mqtt_dotdot_on_diagnostics_number_of_resets_attribute_update(
   }
 
 
-  int16_t number_of_resets = {};
+  uint16_t number_of_resets = {};
 
   nlohmann::json json_payload;
   try {
@@ -52762,7 +52762,7 @@ static void uic_mqtt_dotdot_on_diagnostics_number_of_resets_attribute_update(
         return;
       }
 // Start parsing value
-      number_of_resets = json_payload.at("value").get<int16_t>();
+      number_of_resets = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -52825,7 +52825,7 @@ static void uic_mqtt_dotdot_on_diagnostics_persistent_memory_writes_attribute_up
   }
 
 
-  int16_t persistent_memory_writes = {};
+  uint16_t persistent_memory_writes = {};
 
   nlohmann::json json_payload;
   try {
@@ -52838,7 +52838,7 @@ static void uic_mqtt_dotdot_on_diagnostics_persistent_memory_writes_attribute_up
         return;
       }
 // Start parsing value
-      persistent_memory_writes = json_payload.at("value").get<int16_t>();
+      persistent_memory_writes = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -52901,7 +52901,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_rx_bcast_attribute_update(
   }
 
 
-  int32_t mac_rx_bcast = {};
+  uint32_t mac_rx_bcast = {};
 
   nlohmann::json json_payload;
   try {
@@ -52914,7 +52914,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_rx_bcast_attribute_update(
         return;
       }
 // Start parsing value
-      mac_rx_bcast = json_payload.at("value").get<int32_t>();
+      mac_rx_bcast = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -52977,7 +52977,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_tx_bcast_attribute_update(
   }
 
 
-  int32_t mac_tx_bcast = {};
+  uint32_t mac_tx_bcast = {};
 
   nlohmann::json json_payload;
   try {
@@ -52990,7 +52990,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_tx_bcast_attribute_update(
         return;
       }
 // Start parsing value
-      mac_tx_bcast = json_payload.at("value").get<int32_t>();
+      mac_tx_bcast = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -53053,7 +53053,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_rx_ucast_attribute_update(
   }
 
 
-  int32_t mac_rx_ucast = {};
+  uint32_t mac_rx_ucast = {};
 
   nlohmann::json json_payload;
   try {
@@ -53066,7 +53066,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_rx_ucast_attribute_update(
         return;
       }
 // Start parsing value
-      mac_rx_ucast = json_payload.at("value").get<int32_t>();
+      mac_rx_ucast = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -53129,7 +53129,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_tx_ucast_attribute_update(
   }
 
 
-  int32_t mac_tx_ucast = {};
+  uint32_t mac_tx_ucast = {};
 
   nlohmann::json json_payload;
   try {
@@ -53142,7 +53142,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_tx_ucast_attribute_update(
         return;
       }
 // Start parsing value
-      mac_tx_ucast = json_payload.at("value").get<int32_t>();
+      mac_tx_ucast = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -53205,7 +53205,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_tx_ucast_retry_attribute_update(
   }
 
 
-  int16_t mac_tx_ucast_retry = {};
+  uint16_t mac_tx_ucast_retry = {};
 
   nlohmann::json json_payload;
   try {
@@ -53218,7 +53218,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_tx_ucast_retry_attribute_update(
         return;
       }
 // Start parsing value
-      mac_tx_ucast_retry = json_payload.at("value").get<int16_t>();
+      mac_tx_ucast_retry = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53281,7 +53281,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_tx_ucast_fail_attribute_update(
   }
 
 
-  int16_t mac_tx_ucast_fail = {};
+  uint16_t mac_tx_ucast_fail = {};
 
   nlohmann::json json_payload;
   try {
@@ -53294,7 +53294,7 @@ static void uic_mqtt_dotdot_on_diagnostics_mac_tx_ucast_fail_attribute_update(
         return;
       }
 // Start parsing value
-      mac_tx_ucast_fail = json_payload.at("value").get<int16_t>();
+      mac_tx_ucast_fail = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53357,7 +53357,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_rx_bcast_attribute_update(
   }
 
 
-  int16_t aps_rx_bcast = {};
+  uint16_t aps_rx_bcast = {};
 
   nlohmann::json json_payload;
   try {
@@ -53370,7 +53370,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_rx_bcast_attribute_update(
         return;
       }
 // Start parsing value
-      aps_rx_bcast = json_payload.at("value").get<int16_t>();
+      aps_rx_bcast = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53433,7 +53433,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_tx_bcast_attribute_update(
   }
 
 
-  int16_t aps_tx_bcast = {};
+  uint16_t aps_tx_bcast = {};
 
   nlohmann::json json_payload;
   try {
@@ -53446,7 +53446,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_tx_bcast_attribute_update(
         return;
       }
 // Start parsing value
-      aps_tx_bcast = json_payload.at("value").get<int16_t>();
+      aps_tx_bcast = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53509,7 +53509,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_rx_ucast_attribute_update(
   }
 
 
-  int16_t aps_rx_ucast = {};
+  uint16_t aps_rx_ucast = {};
 
   nlohmann::json json_payload;
   try {
@@ -53522,7 +53522,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_rx_ucast_attribute_update(
         return;
       }
 // Start parsing value
-      aps_rx_ucast = json_payload.at("value").get<int16_t>();
+      aps_rx_ucast = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53585,7 +53585,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_tx_ucast_success_attribute_update
   }
 
 
-  int16_t aps_tx_ucast_success = {};
+  uint16_t aps_tx_ucast_success = {};
 
   nlohmann::json json_payload;
   try {
@@ -53598,7 +53598,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_tx_ucast_success_attribute_update
         return;
       }
 // Start parsing value
-      aps_tx_ucast_success = json_payload.at("value").get<int16_t>();
+      aps_tx_ucast_success = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53661,7 +53661,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_tx_ucast_retry_attribute_update(
   }
 
 
-  int16_t aps_tx_ucast_retry = {};
+  uint16_t aps_tx_ucast_retry = {};
 
   nlohmann::json json_payload;
   try {
@@ -53674,7 +53674,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_tx_ucast_retry_attribute_update(
         return;
       }
 // Start parsing value
-      aps_tx_ucast_retry = json_payload.at("value").get<int16_t>();
+      aps_tx_ucast_retry = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53737,7 +53737,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_tx_ucast_fail_attribute_update(
   }
 
 
-  int16_t aps_tx_ucast_fail = {};
+  uint16_t aps_tx_ucast_fail = {};
 
   nlohmann::json json_payload;
   try {
@@ -53750,7 +53750,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_tx_ucast_fail_attribute_update(
         return;
       }
 // Start parsing value
-      aps_tx_ucast_fail = json_payload.at("value").get<int16_t>();
+      aps_tx_ucast_fail = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53813,7 +53813,7 @@ static void uic_mqtt_dotdot_on_diagnostics_route_disc_initiated_attribute_update
   }
 
 
-  int16_t route_disc_initiated = {};
+  uint16_t route_disc_initiated = {};
 
   nlohmann::json json_payload;
   try {
@@ -53826,7 +53826,7 @@ static void uic_mqtt_dotdot_on_diagnostics_route_disc_initiated_attribute_update
         return;
       }
 // Start parsing value
-      route_disc_initiated = json_payload.at("value").get<int16_t>();
+      route_disc_initiated = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53889,7 +53889,7 @@ static void uic_mqtt_dotdot_on_diagnostics_neighbor_added_attribute_update(
   }
 
 
-  int16_t neighbor_added = {};
+  uint16_t neighbor_added = {};
 
   nlohmann::json json_payload;
   try {
@@ -53902,7 +53902,7 @@ static void uic_mqtt_dotdot_on_diagnostics_neighbor_added_attribute_update(
         return;
       }
 // Start parsing value
-      neighbor_added = json_payload.at("value").get<int16_t>();
+      neighbor_added = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -53965,7 +53965,7 @@ static void uic_mqtt_dotdot_on_diagnostics_neighbor_removed_attribute_update(
   }
 
 
-  int16_t neighbor_removed = {};
+  uint16_t neighbor_removed = {};
 
   nlohmann::json json_payload;
   try {
@@ -53978,7 +53978,7 @@ static void uic_mqtt_dotdot_on_diagnostics_neighbor_removed_attribute_update(
         return;
       }
 // Start parsing value
-      neighbor_removed = json_payload.at("value").get<int16_t>();
+      neighbor_removed = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54041,7 +54041,7 @@ static void uic_mqtt_dotdot_on_diagnostics_neighbor_stale_attribute_update(
   }
 
 
-  int16_t neighbor_stale = {};
+  uint16_t neighbor_stale = {};
 
   nlohmann::json json_payload;
   try {
@@ -54054,7 +54054,7 @@ static void uic_mqtt_dotdot_on_diagnostics_neighbor_stale_attribute_update(
         return;
       }
 // Start parsing value
-      neighbor_stale = json_payload.at("value").get<int16_t>();
+      neighbor_stale = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54117,7 +54117,7 @@ static void uic_mqtt_dotdot_on_diagnostics_join_indication_attribute_update(
   }
 
 
-  int16_t join_indication = {};
+  uint16_t join_indication = {};
 
   nlohmann::json json_payload;
   try {
@@ -54130,7 +54130,7 @@ static void uic_mqtt_dotdot_on_diagnostics_join_indication_attribute_update(
         return;
       }
 // Start parsing value
-      join_indication = json_payload.at("value").get<int16_t>();
+      join_indication = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54193,7 +54193,7 @@ static void uic_mqtt_dotdot_on_diagnostics_child_moved_attribute_update(
   }
 
 
-  int16_t child_moved = {};
+  uint16_t child_moved = {};
 
   nlohmann::json json_payload;
   try {
@@ -54206,7 +54206,7 @@ static void uic_mqtt_dotdot_on_diagnostics_child_moved_attribute_update(
         return;
       }
 // Start parsing value
-      child_moved = json_payload.at("value").get<int16_t>();
+      child_moved = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54269,7 +54269,7 @@ static void uic_mqtt_dotdot_on_diagnostics_nwkfc_failure_attribute_update(
   }
 
 
-  int16_t nwkfc_failure = {};
+  uint16_t nwkfc_failure = {};
 
   nlohmann::json json_payload;
   try {
@@ -54282,7 +54282,7 @@ static void uic_mqtt_dotdot_on_diagnostics_nwkfc_failure_attribute_update(
         return;
       }
 // Start parsing value
-      nwkfc_failure = json_payload.at("value").get<int16_t>();
+      nwkfc_failure = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54345,7 +54345,7 @@ static void uic_mqtt_dotdot_on_diagnostics_apsfc_failure_attribute_update(
   }
 
 
-  int16_t apsfc_failure = {};
+  uint16_t apsfc_failure = {};
 
   nlohmann::json json_payload;
   try {
@@ -54358,7 +54358,7 @@ static void uic_mqtt_dotdot_on_diagnostics_apsfc_failure_attribute_update(
         return;
       }
 // Start parsing value
-      apsfc_failure = json_payload.at("value").get<int16_t>();
+      apsfc_failure = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54421,7 +54421,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_unauthorized_key_attribute_update
   }
 
 
-  int16_t aps_unauthorized_key = {};
+  uint16_t aps_unauthorized_key = {};
 
   nlohmann::json json_payload;
   try {
@@ -54434,7 +54434,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_unauthorized_key_attribute_update
         return;
       }
 // Start parsing value
-      aps_unauthorized_key = json_payload.at("value").get<int16_t>();
+      aps_unauthorized_key = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54497,7 +54497,7 @@ static void uic_mqtt_dotdot_on_diagnostics_nwk_decrypt_failures_attribute_update
   }
 
 
-  int16_t nwk_decrypt_failures = {};
+  uint16_t nwk_decrypt_failures = {};
 
   nlohmann::json json_payload;
   try {
@@ -54510,7 +54510,7 @@ static void uic_mqtt_dotdot_on_diagnostics_nwk_decrypt_failures_attribute_update
         return;
       }
 // Start parsing value
-      nwk_decrypt_failures = json_payload.at("value").get<int16_t>();
+      nwk_decrypt_failures = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54573,7 +54573,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_decrypt_failures_attribute_update
   }
 
 
-  int16_t aps_decrypt_failures = {};
+  uint16_t aps_decrypt_failures = {};
 
   nlohmann::json json_payload;
   try {
@@ -54586,7 +54586,7 @@ static void uic_mqtt_dotdot_on_diagnostics_aps_decrypt_failures_attribute_update
         return;
       }
 // Start parsing value
-      aps_decrypt_failures = json_payload.at("value").get<int16_t>();
+      aps_decrypt_failures = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54649,7 +54649,7 @@ static void uic_mqtt_dotdot_on_diagnostics_packet_buffer_allocate_failures_attri
   }
 
 
-  int16_t packet_buffer_allocate_failures = {};
+  uint16_t packet_buffer_allocate_failures = {};
 
   nlohmann::json json_payload;
   try {
@@ -54662,7 +54662,7 @@ static void uic_mqtt_dotdot_on_diagnostics_packet_buffer_allocate_failures_attri
         return;
       }
 // Start parsing value
-      packet_buffer_allocate_failures = json_payload.at("value").get<int16_t>();
+      packet_buffer_allocate_failures = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54725,7 +54725,7 @@ static void uic_mqtt_dotdot_on_diagnostics_relayed_ucast_attribute_update(
   }
 
 
-  int16_t relayed_ucast = {};
+  uint16_t relayed_ucast = {};
 
   nlohmann::json json_payload;
   try {
@@ -54738,7 +54738,7 @@ static void uic_mqtt_dotdot_on_diagnostics_relayed_ucast_attribute_update(
         return;
       }
 // Start parsing value
-      relayed_ucast = json_payload.at("value").get<int16_t>();
+      relayed_ucast = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54801,7 +54801,7 @@ static void uic_mqtt_dotdot_on_diagnostics_phy_to_mac_queue_limit_reached_attrib
   }
 
 
-  int16_t phy_to_mac_queue_limit_reached = {};
+  uint16_t phy_to_mac_queue_limit_reached = {};
 
   nlohmann::json json_payload;
   try {
@@ -54814,7 +54814,7 @@ static void uic_mqtt_dotdot_on_diagnostics_phy_to_mac_queue_limit_reached_attrib
         return;
       }
 // Start parsing value
-      phy_to_mac_queue_limit_reached = json_payload.at("value").get<int16_t>();
+      phy_to_mac_queue_limit_reached = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54877,7 +54877,7 @@ static void uic_mqtt_dotdot_on_diagnostics_packet_validate_drop_count_attribute_
   }
 
 
-  int16_t packet_validate_drop_count = {};
+  uint16_t packet_validate_drop_count = {};
 
   nlohmann::json json_payload;
   try {
@@ -54890,7 +54890,7 @@ static void uic_mqtt_dotdot_on_diagnostics_packet_validate_drop_count_attribute_
         return;
       }
 // Start parsing value
-      packet_validate_drop_count = json_payload.at("value").get<int16_t>();
+      packet_validate_drop_count = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -54953,7 +54953,7 @@ static void uic_mqtt_dotdot_on_diagnostics_average_mac_retry_per_aps_message_sen
   }
 
 
-  int16_t average_mac_retry_per_aps_message_sent = {};
+  uint16_t average_mac_retry_per_aps_message_sent = {};
 
   nlohmann::json json_payload;
   try {
@@ -54966,7 +54966,7 @@ static void uic_mqtt_dotdot_on_diagnostics_average_mac_retry_per_aps_message_sen
         return;
       }
 // Start parsing value
-      average_mac_retry_per_aps_message_sent = json_payload.at("value").get<int16_t>();
+      average_mac_retry_per_aps_message_sent = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -55029,7 +55029,7 @@ static void uic_mqtt_dotdot_on_diagnostics_last_messagelqi_attribute_update(
   }
 
 
-  int8_t last_messagelqi = {};
+  uint8_t last_messagelqi = {};
 
   nlohmann::json json_payload;
   try {
@@ -55042,7 +55042,7 @@ static void uic_mqtt_dotdot_on_diagnostics_last_messagelqi_attribute_update(
         return;
       }
 // Start parsing value
-      last_messagelqi = json_payload.at("value").get<int8_t>();
+      last_messagelqi = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -55666,7 +55666,7 @@ static void uic_mqtt_dotdot_on_state_endpoint_id_list_attribute_update(
   }
 
 
-  std::vector<int8_t> endpoint_id_list;
+  std::vector<uint8_t> endpoint_id_list;
   size_t endpoint_id_list_count = 0;
 
   nlohmann::json json_payload;
@@ -55682,7 +55682,7 @@ static void uic_mqtt_dotdot_on_state_endpoint_id_list_attribute_update(
 // Start parsing value
       auto &endpoint_id_list_json = json_payload.at("value");
       for (size_t i = 0; i < endpoint_id_list_json.size(); i++) {
-        endpoint_id_list.push_back(endpoint_id_list_json.at(i).get<int8_t>());
+        endpoint_id_list.push_back(endpoint_id_list_json.at(i).get<uint8_t>());
           }
       // Take our vector and pack it into the updated state
       endpoint_id_list_count = endpoint_id_list.size();
@@ -55917,7 +55917,7 @@ static void uic_mqtt_dotdot_on_state_maximum_command_delay_attribute_update(
   }
 
 
-  int32_t maximum_command_delay = {};
+  uint32_t maximum_command_delay = {};
 
   nlohmann::json json_payload;
   try {
@@ -55930,7 +55930,7 @@ static void uic_mqtt_dotdot_on_state_maximum_command_delay_attribute_update(
         return;
       }
 // Start parsing value
-      maximum_command_delay = json_payload.at("value").get<int32_t>();
+      maximum_command_delay = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -56324,7 +56324,7 @@ static void uic_mqtt_dotdot_on_binding_binding_table_attribute_update(
         BindingObject element = {};
         element.ClusterName = binding_table_json.at(i).at("ClusterName").get_ptr<const std::string*>()->c_str();
         element.DestinationUnid = binding_table_json.at(i).at("DestinationUnid").get_ptr<const std::string*>()->c_str();
-        element.DestinationEp = binding_table_json.at(i).at("DestinationEp").get<int8_t>();
+        element.DestinationEp = binding_table_json.at(i).at("DestinationEp").get<uint8_t>();
         binding_table.push_back(element);
       }
       // Take our vector and pack it into the updated state
@@ -56470,7 +56470,7 @@ static void uic_mqtt_dotdot_on_system_metrics_reporting_interval_seconds_attribu
   }
 
 
-  int32_t reporting_interval_seconds = {};
+  uint32_t reporting_interval_seconds = {};
 
   nlohmann::json json_payload;
   try {
@@ -56483,7 +56483,7 @@ static void uic_mqtt_dotdot_on_system_metrics_reporting_interval_seconds_attribu
         return;
       }
 // Start parsing value
-      reporting_interval_seconds = json_payload.at("value").get<int32_t>();
+      reporting_interval_seconds = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -57598,10 +57598,10 @@ static void uic_mqtt_dotdot_on_system_metrics_disks_counters_attribute_update(
       for (size_t i = 0; i < disks_counters_json.size(); i++) {
         DiskIOCounters element = {};
         element.UUID = disks_counters_json.at(i).at("UUID").get_ptr<const std::string*>()->c_str();
-        element.ReadCount = disks_counters_json.at(i).at("ReadCount").get<int64_t>();
-        element.WriteCount = disks_counters_json.at(i).at("WriteCount").get<int64_t>();
-        element.ReadBytes = disks_counters_json.at(i).at("ReadBytes").get<int64_t>();
-        element.WriteBytes = disks_counters_json.at(i).at("WriteBytes").get<int64_t>();
+        element.ReadCount = disks_counters_json.at(i).at("ReadCount").get<uint64_t>();
+        element.WriteCount = disks_counters_json.at(i).at("WriteCount").get<uint64_t>();
+        element.ReadBytes = disks_counters_json.at(i).at("ReadBytes").get<uint64_t>();
+        element.WriteBytes = disks_counters_json.at(i).at("WriteBytes").get<uint64_t>();
         disks_counters.push_back(element);
       }
       // Take our vector and pack it into the updated state
@@ -57687,14 +57687,14 @@ static void uic_mqtt_dotdot_on_system_metrics_network_interfaces_data_attribute_
       for (size_t i = 0; i < network_interfaces_data_json.size(); i++) {
         NetworkInterfaceData element = {};
         element.InterfaceName = network_interfaces_data_json.at(i).at("InterfaceName").get_ptr<const std::string*>()->c_str();
-        element.BytesSent = network_interfaces_data_json.at(i).at("BytesSent").get<int64_t>();
-        element.BytesReceived = network_interfaces_data_json.at(i).at("BytesReceived").get<int64_t>();
-        element.PacketsSent = network_interfaces_data_json.at(i).at("PacketsSent").get<int64_t>();
-        element.PacketsReceived = network_interfaces_data_json.at(i).at("PacketsReceived").get<int64_t>();
-        element.ErrorsIn = network_interfaces_data_json.at(i).at("ErrorsIn").get<int64_t>();
-        element.ErrorsOut = network_interfaces_data_json.at(i).at("ErrorsOut").get<int64_t>();
-        element.DropIn = network_interfaces_data_json.at(i).at("DropIn").get<int64_t>();
-        element.DropOut = network_interfaces_data_json.at(i).at("DropOut").get<int64_t>();
+        element.BytesSent = network_interfaces_data_json.at(i).at("BytesSent").get<uint64_t>();
+        element.BytesReceived = network_interfaces_data_json.at(i).at("BytesReceived").get<uint64_t>();
+        element.PacketsSent = network_interfaces_data_json.at(i).at("PacketsSent").get<uint64_t>();
+        element.PacketsReceived = network_interfaces_data_json.at(i).at("PacketsReceived").get<uint64_t>();
+        element.ErrorsIn = network_interfaces_data_json.at(i).at("ErrorsIn").get<uint64_t>();
+        element.ErrorsOut = network_interfaces_data_json.at(i).at("ErrorsOut").get<uint64_t>();
+        element.DropIn = network_interfaces_data_json.at(i).at("DropIn").get<uint64_t>();
+        element.DropOut = network_interfaces_data_json.at(i).at("DropOut").get<uint64_t>();
         network_interfaces_data.push_back(element);
       }
       // Take our vector and pack it into the updated state
@@ -58000,7 +58000,7 @@ static void uic_mqtt_dotdot_on_system_metrics_uptime_minutes_attribute_update(
   }
 
 
-  int64_t uptime_minutes = {};
+  uint64_t uptime_minutes = {};
 
   nlohmann::json json_payload;
   try {
@@ -58013,7 +58013,7 @@ static void uic_mqtt_dotdot_on_system_metrics_uptime_minutes_attribute_update(
         return;
       }
 // Start parsing value
-      uptime_minutes = json_payload.at("value").get<int64_t>();
+      uptime_minutes = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -58532,7 +58532,7 @@ static void uic_mqtt_dotdot_on_system_metrics_system_interrupts_attribute_update
   }
 
 
-  int64_t system_interrupts = {};
+  uint64_t system_interrupts = {};
 
   nlohmann::json json_payload;
   try {
@@ -58545,7 +58545,7 @@ static void uic_mqtt_dotdot_on_system_metrics_system_interrupts_attribute_update
         return;
       }
 // Start parsing value
-      system_interrupts = json_payload.at("value").get<int64_t>();
+      system_interrupts = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -59185,7 +59185,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_uptime_minutes_attribute_u
   }
 
 
-  int64_t uptime_minutes = {};
+  uint64_t uptime_minutes = {};
 
   nlohmann::json json_payload;
   try {
@@ -59198,7 +59198,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_uptime_minutes_attribute_u
         return;
       }
 // Start parsing value
-      uptime_minutes = json_payload.at("value").get<int64_t>();
+      uptime_minutes = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -59261,7 +59261,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_process_id_attribute_updat
   }
 
 
-  int64_t process_id = {};
+  uint64_t process_id = {};
 
   nlohmann::json json_payload;
   try {
@@ -59274,7 +59274,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_process_id_attribute_updat
         return;
       }
 // Start parsing value
-      process_id = json_payload.at("value").get<int64_t>();
+      process_id = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -59649,7 +59649,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_mqtt_statistics_reporting_
   }
 
 
-  int32_t mqtt_statistics_reporting_interval_seconds = {};
+  uint32_t mqtt_statistics_reporting_interval_seconds = {};
 
   nlohmann::json json_payload;
   try {
@@ -59662,7 +59662,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_mqtt_statistics_reporting_
         return;
       }
 // Start parsing value
-      mqtt_statistics_reporting_interval_seconds = json_payload.at("value").get<int32_t>();
+      mqtt_statistics_reporting_interval_seconds = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -59725,7 +59725,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_mqtt_messages_sent_attribu
   }
 
 
-  int64_t mqtt_messages_sent = {};
+  uint64_t mqtt_messages_sent = {};
 
   nlohmann::json json_payload;
   try {
@@ -59738,7 +59738,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_mqtt_messages_sent_attribu
         return;
       }
 // Start parsing value
-      mqtt_messages_sent = json_payload.at("value").get<int64_t>();
+      mqtt_messages_sent = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -59801,7 +59801,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_mqtt_messages_received_att
   }
 
 
-  int64_t mqtt_messages_received = {};
+  uint64_t mqtt_messages_received = {};
 
   nlohmann::json json_payload;
   try {
@@ -59814,7 +59814,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_mqtt_messages_received_att
         return;
       }
 // Start parsing value
-      mqtt_messages_received = json_payload.at("value").get<int64_t>();
+      mqtt_messages_received = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -59877,7 +59877,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_mqtt_subscription_count_at
   }
 
 
-  int64_t mqtt_subscription_count = {};
+  uint64_t mqtt_subscription_count = {};
 
   nlohmann::json json_payload;
   try {
@@ -59890,7 +59890,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_mqtt_subscription_count_at
         return;
       }
 // Start parsing value
-      mqtt_subscription_count = json_payload.at("value").get<int64_t>();
+      mqtt_subscription_count = json_payload.at("value").get<uint64_t>();
     
     // End parsing value
     }
@@ -60181,7 +60181,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_application_statistics_rep
   }
 
 
-  int32_t application_statistics_reporting_interval_seconds = {};
+  uint32_t application_statistics_reporting_interval_seconds = {};
 
   nlohmann::json json_payload;
   try {
@@ -60194,7 +60194,7 @@ static void uic_mqtt_dotdot_on_application_monitoring_application_statistics_rep
         return;
       }
 // Start parsing value
-      application_statistics_reporting_interval_seconds = json_payload.at("value").get<int32_t>();
+      application_statistics_reporting_interval_seconds = json_payload.at("value").get<uint32_t>();
     
     // End parsing value
     }
@@ -61063,7 +61063,7 @@ static void uic_mqtt_dotdot_on_configuration_parameters_configuration_parameters
       auto &configuration_parameters_json = json_payload.at("value");
       for (size_t i = 0; i < configuration_parameters_json.size(); i++) {
         ConfigurationParameter element = {};
-        element.ParameterId = configuration_parameters_json.at(i).at("ParameterId").get<int16_t>();
+        element.ParameterId = configuration_parameters_json.at(i).at("ParameterId").get<uint16_t>();
         element.Value = configuration_parameters_json.at(i).at("Value").get<int64_t>();
         element.Name = configuration_parameters_json.at(i).at("Name").get_ptr<const std::string*>()->c_str();
         element.Info = configuration_parameters_json.at(i).at("Info").get_ptr<const std::string*>()->c_str();
@@ -61184,7 +61184,7 @@ static void uic_mqtt_dotdot_on_user_credential_supported_user_unique_identifiers
   }
 
 
-  int16_t supported_user_unique_identifiers = {};
+  uint16_t supported_user_unique_identifiers = {};
 
   nlohmann::json json_payload;
   try {
@@ -61197,7 +61197,7 @@ static void uic_mqtt_dotdot_on_user_credential_supported_user_unique_identifiers
         return;
       }
 // Start parsing value
-      supported_user_unique_identifiers = json_payload.at("value").get<int16_t>();
+      supported_user_unique_identifiers = json_payload.at("value").get<uint16_t>();
     
     // End parsing value
     }
@@ -62017,7 +62017,7 @@ static void uic_mqtt_dotdot_on_descriptor_device_type_list_attribute_update(
       for (size_t i = 0; i < device_type_list_json.size(); i++) {
         DeviceTypeStruct element = {};
         element.DeviceType = device_type_list_json.at(i).at("DeviceType").get<DevTypeId>();
-        element.Revision = device_type_list_json.at(i).at("Revision").get<int16_t>();
+        element.Revision = device_type_list_json.at(i).at("Revision").get<uint16_t>();
         device_type_list.push_back(element);
       }
       // Take our vector and pack it into the updated state
@@ -63367,7 +63367,7 @@ static void uic_mqtt_dotdot_on_unify_humidity_control_humidifier_setpoint_precis
   }
 
 
-  int8_t humidifier_setpoint_precision = {};
+  uint8_t humidifier_setpoint_precision = {};
 
   nlohmann::json json_payload;
   try {
@@ -63380,7 +63380,7 @@ static void uic_mqtt_dotdot_on_unify_humidity_control_humidifier_setpoint_precis
         return;
       }
 // Start parsing value
-      humidifier_setpoint_precision = json_payload.at("value").get<int8_t>();
+      humidifier_setpoint_precision = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -63755,7 +63755,7 @@ static void uic_mqtt_dotdot_on_unify_humidity_control_dehumidifier_setpoint_prec
   }
 
 
-  int8_t dehumidifier_setpoint_precision = {};
+  uint8_t dehumidifier_setpoint_precision = {};
 
   nlohmann::json json_payload;
   try {
@@ -63768,7 +63768,7 @@ static void uic_mqtt_dotdot_on_unify_humidity_control_dehumidifier_setpoint_prec
         return;
       }
 // Start parsing value
-      dehumidifier_setpoint_precision = json_payload.at("value").get<int8_t>();
+      dehumidifier_setpoint_precision = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
@@ -64143,7 +64143,7 @@ static void uic_mqtt_dotdot_on_unify_humidity_control_auto_setpoint_precision_at
   }
 
 
-  int8_t auto_setpoint_precision = {};
+  uint8_t auto_setpoint_precision = {};
 
   nlohmann::json json_payload;
   try {
@@ -64156,7 +64156,7 @@ static void uic_mqtt_dotdot_on_unify_humidity_control_auto_setpoint_precision_at
         return;
       }
 // Start parsing value
-      auto_setpoint_precision = json_payload.at("value").get<int8_t>();
+      auto_setpoint_precision = json_payload.at("value").get<uint8_t>();
     
     // End parsing value
     }
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.cpp
index 64fc94ecbf..9dcceb98fc 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.cpp
@@ -160,21 +160,21 @@ void uic_mqtt_dotdot_parse_power_configuration_write_attributes(
 
   if (jsn.find("MainsVoltageMinThreshold") != jsn.end()) {
 
-    new_state.mains_voltage_min_threshold = jsn.at("MainsVoltageMinThreshold").get<int16_t>();
+    new_state.mains_voltage_min_threshold = jsn.at("MainsVoltageMinThreshold").get<uint16_t>();
         
     new_updated_state.mains_voltage_min_threshold = true;
   }
 
   if (jsn.find("MainsVoltageMaxThreshold") != jsn.end()) {
 
-    new_state.mains_voltage_max_threshold = jsn.at("MainsVoltageMaxThreshold").get<int16_t>();
+    new_state.mains_voltage_max_threshold = jsn.at("MainsVoltageMaxThreshold").get<uint16_t>();
         
     new_updated_state.mains_voltage_max_threshold = true;
   }
 
   if (jsn.find("MainsVoltageDwellTripPoint") != jsn.end()) {
 
-    new_state.mains_voltage_dwell_trip_point = jsn.at("MainsVoltageDwellTripPoint").get<int16_t>();
+    new_state.mains_voltage_dwell_trip_point = jsn.at("MainsVoltageDwellTripPoint").get<uint16_t>();
         
     new_updated_state.mains_voltage_dwell_trip_point = true;
   }
@@ -203,21 +203,21 @@ void uic_mqtt_dotdot_parse_power_configuration_write_attributes(
 
   if (jsn.find("BatteryAHrRating") != jsn.end()) {
 
-    new_state.batterya_hr_rating = jsn.at("BatteryAHrRating").get<int16_t>();
+    new_state.batterya_hr_rating = jsn.at("BatteryAHrRating").get<uint16_t>();
         
     new_updated_state.batterya_hr_rating = true;
   }
 
   if (jsn.find("BatteryQuantity") != jsn.end()) {
 
-    new_state.battery_quantity = jsn.at("BatteryQuantity").get<int8_t>();
+    new_state.battery_quantity = jsn.at("BatteryQuantity").get<uint8_t>();
         
     new_updated_state.battery_quantity = true;
   }
 
   if (jsn.find("BatteryRatedVoltage") != jsn.end()) {
 
-    new_state.battery_rated_voltage = jsn.at("BatteryRatedVoltage").get<int8_t>();
+    new_state.battery_rated_voltage = jsn.at("BatteryRatedVoltage").get<uint8_t>();
         
     new_updated_state.battery_rated_voltage = true;
   }
@@ -231,56 +231,56 @@ void uic_mqtt_dotdot_parse_power_configuration_write_attributes(
 
   if (jsn.find("BatteryVoltageMinThreshold") != jsn.end()) {
 
-    new_state.battery_voltage_min_threshold = jsn.at("BatteryVoltageMinThreshold").get<int8_t>();
+    new_state.battery_voltage_min_threshold = jsn.at("BatteryVoltageMinThreshold").get<uint8_t>();
         
     new_updated_state.battery_voltage_min_threshold = true;
   }
 
   if (jsn.find("BatteryVoltageThreshold1") != jsn.end()) {
 
-    new_state.battery_voltage_threshold1 = jsn.at("BatteryVoltageThreshold1").get<int8_t>();
+    new_state.battery_voltage_threshold1 = jsn.at("BatteryVoltageThreshold1").get<uint8_t>();
         
     new_updated_state.battery_voltage_threshold1 = true;
   }
 
   if (jsn.find("BatteryVoltageThreshold2") != jsn.end()) {
 
-    new_state.battery_voltage_threshold2 = jsn.at("BatteryVoltageThreshold2").get<int8_t>();
+    new_state.battery_voltage_threshold2 = jsn.at("BatteryVoltageThreshold2").get<uint8_t>();
         
     new_updated_state.battery_voltage_threshold2 = true;
   }
 
   if (jsn.find("BatteryVoltageThreshold3") != jsn.end()) {
 
-    new_state.battery_voltage_threshold3 = jsn.at("BatteryVoltageThreshold3").get<int8_t>();
+    new_state.battery_voltage_threshold3 = jsn.at("BatteryVoltageThreshold3").get<uint8_t>();
         
     new_updated_state.battery_voltage_threshold3 = true;
   }
 
   if (jsn.find("BatteryPercentageMinThreshold") != jsn.end()) {
 
-    new_state.battery_percentage_min_threshold = jsn.at("BatteryPercentageMinThreshold").get<int8_t>();
+    new_state.battery_percentage_min_threshold = jsn.at("BatteryPercentageMinThreshold").get<uint8_t>();
         
     new_updated_state.battery_percentage_min_threshold = true;
   }
 
   if (jsn.find("BatteryPercentageThreshold1") != jsn.end()) {
 
-    new_state.battery_percentage_threshold1 = jsn.at("BatteryPercentageThreshold1").get<int8_t>();
+    new_state.battery_percentage_threshold1 = jsn.at("BatteryPercentageThreshold1").get<uint8_t>();
         
     new_updated_state.battery_percentage_threshold1 = true;
   }
 
   if (jsn.find("BatteryPercentageThreshold2") != jsn.end()) {
 
-    new_state.battery_percentage_threshold2 = jsn.at("BatteryPercentageThreshold2").get<int8_t>();
+    new_state.battery_percentage_threshold2 = jsn.at("BatteryPercentageThreshold2").get<uint8_t>();
         
     new_updated_state.battery_percentage_threshold2 = true;
   }
 
   if (jsn.find("BatteryPercentageThreshold3") != jsn.end()) {
 
-    new_state.battery_percentage_threshold3 = jsn.at("BatteryPercentageThreshold3").get<int8_t>();
+    new_state.battery_percentage_threshold3 = jsn.at("BatteryPercentageThreshold3").get<uint8_t>();
         
     new_updated_state.battery_percentage_threshold3 = true;
   }
@@ -309,21 +309,21 @@ void uic_mqtt_dotdot_parse_power_configuration_write_attributes(
 
   if (jsn.find("Battery2AHrRating") != jsn.end()) {
 
-    new_state.battery2a_hr_rating = jsn.at("Battery2AHrRating").get<int16_t>();
+    new_state.battery2a_hr_rating = jsn.at("Battery2AHrRating").get<uint16_t>();
         
     new_updated_state.battery2a_hr_rating = true;
   }
 
   if (jsn.find("Battery2Quantity") != jsn.end()) {
 
-    new_state.battery2_quantity = jsn.at("Battery2Quantity").get<int8_t>();
+    new_state.battery2_quantity = jsn.at("Battery2Quantity").get<uint8_t>();
         
     new_updated_state.battery2_quantity = true;
   }
 
   if (jsn.find("Battery2RatedVoltage") != jsn.end()) {
 
-    new_state.battery2_rated_voltage = jsn.at("Battery2RatedVoltage").get<int8_t>();
+    new_state.battery2_rated_voltage = jsn.at("Battery2RatedVoltage").get<uint8_t>();
         
     new_updated_state.battery2_rated_voltage = true;
   }
@@ -337,56 +337,56 @@ void uic_mqtt_dotdot_parse_power_configuration_write_attributes(
 
   if (jsn.find("Battery2VoltageMinThreshold") != jsn.end()) {
 
-    new_state.battery2_voltage_min_threshold = jsn.at("Battery2VoltageMinThreshold").get<int8_t>();
+    new_state.battery2_voltage_min_threshold = jsn.at("Battery2VoltageMinThreshold").get<uint8_t>();
         
     new_updated_state.battery2_voltage_min_threshold = true;
   }
 
   if (jsn.find("Battery2VoltageThreshold1") != jsn.end()) {
 
-    new_state.battery2_voltage_threshold1 = jsn.at("Battery2VoltageThreshold1").get<int8_t>();
+    new_state.battery2_voltage_threshold1 = jsn.at("Battery2VoltageThreshold1").get<uint8_t>();
         
     new_updated_state.battery2_voltage_threshold1 = true;
   }
 
   if (jsn.find("Battery2VoltageThreshold2") != jsn.end()) {
 
-    new_state.battery2_voltage_threshold2 = jsn.at("Battery2VoltageThreshold2").get<int8_t>();
+    new_state.battery2_voltage_threshold2 = jsn.at("Battery2VoltageThreshold2").get<uint8_t>();
         
     new_updated_state.battery2_voltage_threshold2 = true;
   }
 
   if (jsn.find("Battery2VoltageThreshold3") != jsn.end()) {
 
-    new_state.battery2_voltage_threshold3 = jsn.at("Battery2VoltageThreshold3").get<int8_t>();
+    new_state.battery2_voltage_threshold3 = jsn.at("Battery2VoltageThreshold3").get<uint8_t>();
         
     new_updated_state.battery2_voltage_threshold3 = true;
   }
 
   if (jsn.find("Battery2PercentageMinThreshold") != jsn.end()) {
 
-    new_state.battery2_percentage_min_threshold = jsn.at("Battery2PercentageMinThreshold").get<int8_t>();
+    new_state.battery2_percentage_min_threshold = jsn.at("Battery2PercentageMinThreshold").get<uint8_t>();
         
     new_updated_state.battery2_percentage_min_threshold = true;
   }
 
   if (jsn.find("Battery2PercentageThreshold1") != jsn.end()) {
 
-    new_state.battery2_percentage_threshold1 = jsn.at("Battery2PercentageThreshold1").get<int8_t>();
+    new_state.battery2_percentage_threshold1 = jsn.at("Battery2PercentageThreshold1").get<uint8_t>();
         
     new_updated_state.battery2_percentage_threshold1 = true;
   }
 
   if (jsn.find("Battery2PercentageThreshold2") != jsn.end()) {
 
-    new_state.battery2_percentage_threshold2 = jsn.at("Battery2PercentageThreshold2").get<int8_t>();
+    new_state.battery2_percentage_threshold2 = jsn.at("Battery2PercentageThreshold2").get<uint8_t>();
         
     new_updated_state.battery2_percentage_threshold2 = true;
   }
 
   if (jsn.find("Battery2PercentageThreshold3") != jsn.end()) {
 
-    new_state.battery2_percentage_threshold3 = jsn.at("Battery2PercentageThreshold3").get<int8_t>();
+    new_state.battery2_percentage_threshold3 = jsn.at("Battery2PercentageThreshold3").get<uint8_t>();
         
     new_updated_state.battery2_percentage_threshold3 = true;
   }
@@ -415,21 +415,21 @@ void uic_mqtt_dotdot_parse_power_configuration_write_attributes(
 
   if (jsn.find("Battery3AHrRating") != jsn.end()) {
 
-    new_state.battery3a_hr_rating = jsn.at("Battery3AHrRating").get<int16_t>();
+    new_state.battery3a_hr_rating = jsn.at("Battery3AHrRating").get<uint16_t>();
         
     new_updated_state.battery3a_hr_rating = true;
   }
 
   if (jsn.find("Battery3Quantity") != jsn.end()) {
 
-    new_state.battery3_quantity = jsn.at("Battery3Quantity").get<int8_t>();
+    new_state.battery3_quantity = jsn.at("Battery3Quantity").get<uint8_t>();
         
     new_updated_state.battery3_quantity = true;
   }
 
   if (jsn.find("Battery3RatedVoltage") != jsn.end()) {
 
-    new_state.battery3_rated_voltage = jsn.at("Battery3RatedVoltage").get<int8_t>();
+    new_state.battery3_rated_voltage = jsn.at("Battery3RatedVoltage").get<uint8_t>();
         
     new_updated_state.battery3_rated_voltage = true;
   }
@@ -443,56 +443,56 @@ void uic_mqtt_dotdot_parse_power_configuration_write_attributes(
 
   if (jsn.find("Battery3VoltageMinThreshold") != jsn.end()) {
 
-    new_state.battery3_voltage_min_threshold = jsn.at("Battery3VoltageMinThreshold").get<int8_t>();
+    new_state.battery3_voltage_min_threshold = jsn.at("Battery3VoltageMinThreshold").get<uint8_t>();
         
     new_updated_state.battery3_voltage_min_threshold = true;
   }
 
   if (jsn.find("Battery3VoltageThreshold1") != jsn.end()) {
 
-    new_state.battery3_voltage_threshold1 = jsn.at("Battery3VoltageThreshold1").get<int8_t>();
+    new_state.battery3_voltage_threshold1 = jsn.at("Battery3VoltageThreshold1").get<uint8_t>();
         
     new_updated_state.battery3_voltage_threshold1 = true;
   }
 
   if (jsn.find("Battery3VoltageThreshold2") != jsn.end()) {
 
-    new_state.battery3_voltage_threshold2 = jsn.at("Battery3VoltageThreshold2").get<int8_t>();
+    new_state.battery3_voltage_threshold2 = jsn.at("Battery3VoltageThreshold2").get<uint8_t>();
         
     new_updated_state.battery3_voltage_threshold2 = true;
   }
 
   if (jsn.find("Battery3VoltageThreshold3") != jsn.end()) {
 
-    new_state.battery3_voltage_threshold3 = jsn.at("Battery3VoltageThreshold3").get<int8_t>();
+    new_state.battery3_voltage_threshold3 = jsn.at("Battery3VoltageThreshold3").get<uint8_t>();
         
     new_updated_state.battery3_voltage_threshold3 = true;
   }
 
   if (jsn.find("Battery3PercentageMinThreshold") != jsn.end()) {
 
-    new_state.battery3_percentage_min_threshold = jsn.at("Battery3PercentageMinThreshold").get<int8_t>();
+    new_state.battery3_percentage_min_threshold = jsn.at("Battery3PercentageMinThreshold").get<uint8_t>();
         
     new_updated_state.battery3_percentage_min_threshold = true;
   }
 
   if (jsn.find("Battery3PercentageThreshold1") != jsn.end()) {
 
-    new_state.battery3_percentage_threshold1 = jsn.at("Battery3PercentageThreshold1").get<int8_t>();
+    new_state.battery3_percentage_threshold1 = jsn.at("Battery3PercentageThreshold1").get<uint8_t>();
         
     new_updated_state.battery3_percentage_threshold1 = true;
   }
 
   if (jsn.find("Battery3PercentageThreshold2") != jsn.end()) {
 
-    new_state.battery3_percentage_threshold2 = jsn.at("Battery3PercentageThreshold2").get<int8_t>();
+    new_state.battery3_percentage_threshold2 = jsn.at("Battery3PercentageThreshold2").get<uint8_t>();
         
     new_updated_state.battery3_percentage_threshold2 = true;
   }
 
   if (jsn.find("Battery3PercentageThreshold3") != jsn.end()) {
 
-    new_state.battery3_percentage_threshold3 = jsn.at("Battery3PercentageThreshold3").get<int8_t>();
+    new_state.battery3_percentage_threshold3 = jsn.at("Battery3PercentageThreshold3").get<uint8_t>();
         
     new_updated_state.battery3_percentage_threshold3 = true;
   }
@@ -536,14 +536,14 @@ void uic_mqtt_dotdot_parse_device_temperature_configuration_write_attributes(
 
   if (jsn.find("LowTempDwellTripPoint") != jsn.end()) {
 
-    new_state.low_temp_dwell_trip_point = jsn.at("LowTempDwellTripPoint").get<int32_t>();
+    new_state.low_temp_dwell_trip_point = jsn.at("LowTempDwellTripPoint").get<uint32_t>();
         
     new_updated_state.low_temp_dwell_trip_point = true;
   }
 
   if (jsn.find("HighTempDwellTripPoint") != jsn.end()) {
 
-    new_state.high_temp_dwell_trip_point = jsn.at("HighTempDwellTripPoint").get<int32_t>();
+    new_state.high_temp_dwell_trip_point = jsn.at("HighTempDwellTripPoint").get<uint32_t>();
         
     new_updated_state.high_temp_dwell_trip_point = true;
   }
@@ -577,7 +577,7 @@ std::string get_json_payload_for_identify_identify_command(
 
 void uic_mqtt_dotdot_parse_identify_identify(
   nlohmann::json &jsn,
-  int16_t &identify_time
+  uint16_t &identify_time
   
 ) {
 
@@ -586,7 +586,7 @@ void uic_mqtt_dotdot_parse_identify_identify(
     return;
   }
         
-  identify_time = jsn.at("IdentifyTime").get< int16_t >();
+  identify_time = jsn.at("IdentifyTime").get< uint16_t >();
     }
 
 
@@ -615,7 +615,7 @@ std::string get_json_payload_for_identify_identify_query_response_command(
 
 void uic_mqtt_dotdot_parse_identify_identify_query_response(
   nlohmann::json &jsn,
-  int16_t &timeout
+  uint16_t &timeout
   
 ) {
 
@@ -624,7 +624,7 @@ void uic_mqtt_dotdot_parse_identify_identify_query_response(
     return;
   }
         
-  timeout = jsn.at("Timeout").get< int16_t >();
+  timeout = jsn.at("Timeout").get< uint16_t >();
     }
 
 
@@ -743,7 +743,7 @@ void uic_mqtt_dotdot_parse_identify_write_attributes(
 
   if (jsn.find("IdentifyTime") != jsn.end()) {
 
-    new_state.identify_time = jsn.at("IdentifyTime").get<int16_t>();
+    new_state.identify_time = jsn.at("IdentifyTime").get<uint16_t>();
         
     new_updated_state.identify_time = true;
   }
@@ -781,7 +781,7 @@ std::string get_json_payload_for_groups_add_group_command(
 
 void uic_mqtt_dotdot_parse_groups_add_group(
   nlohmann::json &jsn,
-  int16_t &group_id,
+  uint16_t &group_id,
   
   std::string &group_name
   
@@ -792,7 +792,7 @@ void uic_mqtt_dotdot_parse_groups_add_group(
     return;
   }
         
-  group_id = jsn.at("GroupId").get< int16_t >();
+  group_id = jsn.at("GroupId").get< uint16_t >();
       if (jsn.at("GroupName").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -844,7 +844,7 @@ void uic_mqtt_dotdot_parse_groups_add_group_response(
   nlohmann::json &jsn,
   uint8_t &status,
   
-  int16_t &group_id
+  uint16_t &group_id
   
 ) {
 
@@ -864,7 +864,7 @@ void uic_mqtt_dotdot_parse_groups_add_group_response(
     return;
   }
         
-  group_id = jsn.at("GroupId").get< int16_t >();
+  group_id = jsn.at("GroupId").get< uint16_t >();
     }
 
 
@@ -893,7 +893,7 @@ std::string get_json_payload_for_groups_view_group_command(
 
 void uic_mqtt_dotdot_parse_groups_view_group(
   nlohmann::json &jsn,
-  int16_t &group_id
+  uint16_t &group_id
   
 ) {
 
@@ -902,7 +902,7 @@ void uic_mqtt_dotdot_parse_groups_view_group(
     return;
   }
         
-  group_id = jsn.at("GroupId").get< int16_t >();
+  group_id = jsn.at("GroupId").get< uint16_t >();
     }
 
 
@@ -952,7 +952,7 @@ void uic_mqtt_dotdot_parse_groups_view_group_response(
   nlohmann::json &jsn,
   uint8_t &status,
   
-  int16_t &group_id,
+  uint16_t &group_id,
   
   std::string &group_name
   
@@ -974,7 +974,7 @@ void uic_mqtt_dotdot_parse_groups_view_group_response(
     return;
   }
         
-  group_id = jsn.at("GroupId").get< int16_t >();
+  group_id = jsn.at("GroupId").get< uint16_t >();
       if (jsn.at("GroupName").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -995,7 +995,7 @@ std::string get_json_payload_for_groups_get_group_membership_command(
   nlohmann::json json_payload;
   command_with_no_fields = false;
   // We assume arrays are Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["GroupList"] = std::vector< int16_t >(
+  json_payload["GroupList"] = std::vector< uint16_t >(
     fields->group_list,
     fields->group_list + fields->group_list_count);
 
@@ -1011,7 +1011,7 @@ std::string get_json_payload_for_groups_get_group_membership_command(
 
 void uic_mqtt_dotdot_parse_groups_get_group_membership(
   nlohmann::json &jsn,
-  std::vector<int16_t> &group_list
+  std::vector<uint16_t> &group_list
 
 ) {
 
@@ -1020,7 +1020,7 @@ void uic_mqtt_dotdot_parse_groups_get_group_membership(
     return;
   }
         
-  group_list = jsn.at("GroupList").get< std::vector< int16_t >>();
+  group_list = jsn.at("GroupList").get< std::vector< uint16_t >>();
       }
 
 
@@ -1039,7 +1039,7 @@ std::string get_json_payload_for_groups_get_group_membership_response_command(
   json_payload["Capacity"] = nlohmann::json(fields->capacity);
   command_with_no_fields = false;
   // We assume arrays are Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["GroupList"] = std::vector< int16_t >(
+  json_payload["GroupList"] = std::vector< uint16_t >(
     fields->group_list,
     fields->group_list + fields->group_list_count);
 
@@ -1055,9 +1055,9 @@ std::string get_json_payload_for_groups_get_group_membership_response_command(
 
 void uic_mqtt_dotdot_parse_groups_get_group_membership_response(
   nlohmann::json &jsn,
-  int8_t &capacity,
+  uint8_t &capacity,
   
-  std::vector<int16_t> &group_list
+  std::vector<uint16_t> &group_list
 
 ) {
 
@@ -1066,13 +1066,13 @@ void uic_mqtt_dotdot_parse_groups_get_group_membership_response(
     return;
   }
         
-  capacity = jsn.at("Capacity").get< int8_t >();
+  capacity = jsn.at("Capacity").get< uint8_t >();
       if (jsn.at("GroupList").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  group_list = jsn.at("GroupList").get< std::vector< int16_t >>();
+  group_list = jsn.at("GroupList").get< std::vector< uint16_t >>();
       }
 
 
@@ -1101,7 +1101,7 @@ std::string get_json_payload_for_groups_remove_group_command(
 
 void uic_mqtt_dotdot_parse_groups_remove_group(
   nlohmann::json &jsn,
-  int16_t &group_id
+  uint16_t &group_id
   
 ) {
 
@@ -1110,7 +1110,7 @@ void uic_mqtt_dotdot_parse_groups_remove_group(
     return;
   }
         
-  group_id = jsn.at("GroupId").get< int16_t >();
+  group_id = jsn.at("GroupId").get< uint16_t >();
     }
 
 
@@ -1156,7 +1156,7 @@ void uic_mqtt_dotdot_parse_groups_remove_group_response(
   nlohmann::json &jsn,
   uint8_t &status,
   
-  int16_t &group_id
+  uint16_t &group_id
   
 ) {
 
@@ -1176,7 +1176,7 @@ void uic_mqtt_dotdot_parse_groups_remove_group_response(
     return;
   }
         
-  group_id = jsn.at("GroupId").get< int16_t >();
+  group_id = jsn.at("GroupId").get< uint16_t >();
     }
 
 
@@ -1228,7 +1228,7 @@ std::string get_json_payload_for_groups_add_group_if_identifying_command(
 
 void uic_mqtt_dotdot_parse_groups_add_group_if_identifying(
   nlohmann::json &jsn,
-  int16_t &group_id,
+  uint16_t &group_id,
   
   std::string &group_name
   
@@ -1239,7 +1239,7 @@ void uic_mqtt_dotdot_parse_groups_add_group_if_identifying(
     return;
   }
         
-  group_id = jsn.at("GroupId").get< int16_t >();
+  group_id = jsn.at("GroupId").get< uint16_t >();
       if (jsn.at("GroupName").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -1312,17 +1312,17 @@ std::string get_json_payload_for_scenes_add_scene_command(
 
 void uic_mqtt_dotdot_parse_scenes_add_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid,
+  uint8_t &sceneid,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   std::string &scene_name,
   
   std::vector<SExtensionFieldSetList> &extension_field_sets,
 
-  int8_t &transition_time100ms
+  uint8_t &transition_time100ms
   
 ) {
 
@@ -1331,19 +1331,19 @@ void uic_mqtt_dotdot_parse_scenes_add_scene(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("SceneName").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -1375,7 +1375,7 @@ void uic_mqtt_dotdot_parse_scenes_add_scene(
     return;
   }
         
-  transition_time100ms = jsn.at("TransitionTime100ms").get< int8_t >();
+  transition_time100ms = jsn.at("TransitionTime100ms").get< uint8_t >();
     }
 
 
@@ -1425,9 +1425,9 @@ void uic_mqtt_dotdot_parse_scenes_add_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
   
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid
+  uint8_t &sceneid
   
 ) {
 
@@ -1447,13 +1447,13 @@ void uic_mqtt_dotdot_parse_scenes_add_scene_response(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
     }
 
 
@@ -1486,9 +1486,9 @@ std::string get_json_payload_for_scenes_view_scene_command(
 
 void uic_mqtt_dotdot_parse_scenes_view_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid
+  uint8_t &sceneid
   
 ) {
 
@@ -1497,13 +1497,13 @@ void uic_mqtt_dotdot_parse_scenes_view_scene(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
     }
 
 
@@ -1567,11 +1567,11 @@ void uic_mqtt_dotdot_parse_scenes_view_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
   
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid,
+  uint8_t &sceneid,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   std::string &scene_name,
   
@@ -1595,19 +1595,19 @@ void uic_mqtt_dotdot_parse_scenes_view_scene_response(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("SceneName").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -1666,9 +1666,9 @@ std::string get_json_payload_for_scenes_remove_scene_command(
 
 void uic_mqtt_dotdot_parse_scenes_remove_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid
+  uint8_t &sceneid
   
 ) {
 
@@ -1677,13 +1677,13 @@ void uic_mqtt_dotdot_parse_scenes_remove_scene(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
     }
 
 
@@ -1733,9 +1733,9 @@ void uic_mqtt_dotdot_parse_scenes_remove_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
   
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid
+  uint8_t &sceneid
   
 ) {
 
@@ -1755,13 +1755,13 @@ void uic_mqtt_dotdot_parse_scenes_remove_scene_response(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
     }
 
 
@@ -1790,7 +1790,7 @@ std::string get_json_payload_for_scenes_remove_all_scenes_command(
 
 void uic_mqtt_dotdot_parse_scenes_remove_all_scenes(
   nlohmann::json &jsn,
-  uint8_t * &groupid
+  uint16_t &groupid
   
 ) {
 
@@ -1799,7 +1799,7 @@ void uic_mqtt_dotdot_parse_scenes_remove_all_scenes(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
     }
 
 
@@ -1845,7 +1845,7 @@ void uic_mqtt_dotdot_parse_scenes_remove_all_scenes_response(
   nlohmann::json &jsn,
   zclStatus &status,
   
-  uint8_t * &groupid
+  uint16_t &groupid
   
 ) {
 
@@ -1865,7 +1865,7 @@ void uic_mqtt_dotdot_parse_scenes_remove_all_scenes_response(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
     }
 
 
@@ -1898,9 +1898,9 @@ std::string get_json_payload_for_scenes_store_scene_command(
 
 void uic_mqtt_dotdot_parse_scenes_store_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid
+  uint8_t &sceneid
   
 ) {
 
@@ -1909,13 +1909,13 @@ void uic_mqtt_dotdot_parse_scenes_store_scene(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
     }
 
 
@@ -1965,9 +1965,9 @@ void uic_mqtt_dotdot_parse_scenes_store_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
   
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid
+  uint8_t &sceneid
   
 ) {
 
@@ -1987,13 +1987,13 @@ void uic_mqtt_dotdot_parse_scenes_store_scene_response(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
     }
 
 
@@ -2030,11 +2030,11 @@ std::string get_json_payload_for_scenes_recall_scene_command(
 
 void uic_mqtt_dotdot_parse_scenes_recall_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid,
+  uint8_t &sceneid,
   
-  int16_t &transition_time
+  uint16_t &transition_time
   
 ) {
 
@@ -2043,19 +2043,19 @@ void uic_mqtt_dotdot_parse_scenes_recall_scene(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
     }
 
 
@@ -2084,7 +2084,7 @@ std::string get_json_payload_for_scenes_get_scene_membership_command(
 
 void uic_mqtt_dotdot_parse_scenes_get_scene_membership(
   nlohmann::json &jsn,
-  uint8_t * &groupid
+  uint16_t &groupid
   
 ) {
 
@@ -2093,7 +2093,7 @@ void uic_mqtt_dotdot_parse_scenes_get_scene_membership(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
     }
 
 
@@ -2131,7 +2131,7 @@ std::string get_json_payload_for_scenes_get_scene_membership_response_command(
   json_payload["GroupID"] = nlohmann::json(fields->groupid);
   command_with_no_fields = false;
   // We assume arrays are Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["SceneList"] = std::vector< int8_t >(
+  json_payload["SceneList"] = std::vector< uint8_t >(
     fields->scene_list,
     fields->scene_list + fields->scene_list_count);
 
@@ -2149,11 +2149,11 @@ void uic_mqtt_dotdot_parse_scenes_get_scene_membership_response(
   nlohmann::json &jsn,
   zclStatus &status,
   
-  int8_t &capacity,
+  uint8_t &capacity,
   
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  std::vector<int8_t> &scene_list
+  std::vector<uint8_t> &scene_list
 
 ) {
 
@@ -2173,19 +2173,19 @@ void uic_mqtt_dotdot_parse_scenes_get_scene_membership_response(
     return;
   }
         
-  capacity = jsn.at("Capacity").get< int8_t >();
+  capacity = jsn.at("Capacity").get< uint8_t >();
       if (jsn.at("GroupID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneList").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  scene_list = jsn.at("SceneList").get< std::vector< int8_t >>();
+  scene_list = jsn.at("SceneList").get< std::vector< uint8_t >>();
       }
 
 
@@ -2232,11 +2232,11 @@ std::string get_json_payload_for_scenes_enhanced_add_scene_command(
 
 void uic_mqtt_dotdot_parse_scenes_enhanced_add_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid,
+  uint8_t &sceneid,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   std::string &scene_name,
   
@@ -2249,19 +2249,19 @@ void uic_mqtt_dotdot_parse_scenes_enhanced_add_scene(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("SceneName").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -2337,9 +2337,9 @@ void uic_mqtt_dotdot_parse_scenes_enhanced_add_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
   
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid
+  uint8_t &sceneid
   
 ) {
 
@@ -2359,13 +2359,13 @@ void uic_mqtt_dotdot_parse_scenes_enhanced_add_scene_response(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
     }
 
 
@@ -2398,9 +2398,9 @@ std::string get_json_payload_for_scenes_enhanced_view_scene_command(
 
 void uic_mqtt_dotdot_parse_scenes_enhanced_view_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid
+  uint8_t &sceneid
   
 ) {
 
@@ -2409,13 +2409,13 @@ void uic_mqtt_dotdot_parse_scenes_enhanced_view_scene(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
     }
 
 
@@ -2479,11 +2479,11 @@ void uic_mqtt_dotdot_parse_scenes_enhanced_view_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
   
-  uint8_t * &groupid,
+  uint16_t &groupid,
   
-  int8_t &sceneid,
+  uint8_t &sceneid,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   std::string &scene_name,
   
@@ -2507,19 +2507,19 @@ void uic_mqtt_dotdot_parse_scenes_enhanced_view_scene_response(
     return;
   }
         
-  groupid = jsn.at("GroupID").get< uint8_t * >();
+  groupid = jsn.at("GroupID").get< uint16_t >();
       if (jsn.at("SceneID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  sceneid = jsn.at("SceneID").get< int8_t >();
+  sceneid = jsn.at("SceneID").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("SceneName").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -2594,13 +2594,13 @@ void uic_mqtt_dotdot_parse_scenes_copy_scene(
   nlohmann::json &jsn,
   uint8_t &mode,
   
-  uint8_t * &group_identifier_from,
+  uint16_t &group_identifier_from,
   
-  int8_t &scene_identifier_from,
+  uint8_t &scene_identifier_from,
   
-  uint8_t * &group_identifier_to,
+  uint16_t &group_identifier_to,
   
-  int8_t &scene_identifier_to
+  uint8_t &scene_identifier_to
   
 ) {
 
@@ -2614,25 +2614,25 @@ void uic_mqtt_dotdot_parse_scenes_copy_scene(
     return;
   }
         
-  group_identifier_from = jsn.at("GroupIdentifierFrom").get< uint8_t * >();
+  group_identifier_from = jsn.at("GroupIdentifierFrom").get< uint16_t >();
       if (jsn.at("SceneIdentifierFrom").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  scene_identifier_from = jsn.at("SceneIdentifierFrom").get< int8_t >();
+  scene_identifier_from = jsn.at("SceneIdentifierFrom").get< uint8_t >();
       if (jsn.at("GroupIdentifierTo").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  group_identifier_to = jsn.at("GroupIdentifierTo").get< uint8_t * >();
+  group_identifier_to = jsn.at("GroupIdentifierTo").get< uint16_t >();
       if (jsn.at("SceneIdentifierTo").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  scene_identifier_to = jsn.at("SceneIdentifierTo").get< int8_t >();
+  scene_identifier_to = jsn.at("SceneIdentifierTo").get< uint8_t >();
     }
 
 
@@ -2682,9 +2682,9 @@ void uic_mqtt_dotdot_parse_scenes_copy_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
   
-  uint8_t * &group_identifier_from,
+  uint16_t &group_identifier_from,
   
-  int8_t &scene_identifier_from
+  uint8_t &scene_identifier_from
   
 ) {
 
@@ -2704,13 +2704,13 @@ void uic_mqtt_dotdot_parse_scenes_copy_scene_response(
     return;
   }
         
-  group_identifier_from = jsn.at("GroupIdentifierFrom").get< uint8_t * >();
+  group_identifier_from = jsn.at("GroupIdentifierFrom").get< uint16_t >();
       if (jsn.at("SceneIdentifierFrom").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  scene_identifier_from = jsn.at("SceneIdentifierFrom").get< int8_t >();
+  scene_identifier_from = jsn.at("SceneIdentifierFrom").get< uint8_t >();
     }
 
 
@@ -2829,7 +2829,7 @@ void uic_mqtt_dotdot_parse_on_off_off_with_effect(
   nlohmann::json &jsn,
   OffWithEffectEffectIdentifier &effect_identifier,
   
-  int8_t &effect_variant
+  uint8_t &effect_variant
   
 ) {
 
@@ -2849,7 +2849,7 @@ void uic_mqtt_dotdot_parse_on_off_off_with_effect(
     return;
   }
         
-  effect_variant = jsn.at("EffectVariant").get< int8_t >();
+  effect_variant = jsn.at("EffectVariant").get< uint8_t >();
     }
 
 
@@ -2909,9 +2909,9 @@ void uic_mqtt_dotdot_parse_on_off_on_with_timed_off(
   nlohmann::json &jsn,
   uint8_t &on_off_control,
   
-  int16_t &on_time,
+  uint16_t &on_time,
   
-  int16_t &off_wait_time
+  uint16_t &off_wait_time
   
 ) {
 
@@ -2925,13 +2925,13 @@ void uic_mqtt_dotdot_parse_on_off_on_with_timed_off(
     return;
   }
         
-  on_time = jsn.at("OnTime").get< int16_t >();
+  on_time = jsn.at("OnTime").get< uint16_t >();
       if (jsn.at("OffWaitTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  off_wait_time = jsn.at("OffWaitTime").get< int16_t >();
+  off_wait_time = jsn.at("OffWaitTime").get< uint16_t >();
     }
 
 
@@ -2949,14 +2949,14 @@ void uic_mqtt_dotdot_parse_on_off_write_attributes(
 
   if (jsn.find("OnTime") != jsn.end()) {
 
-    new_state.on_time = jsn.at("OnTime").get<int16_t>();
+    new_state.on_time = jsn.at("OnTime").get<uint16_t>();
         
     new_updated_state.on_time = true;
   }
 
   if (jsn.find("OffWaitTime") != jsn.end()) {
 
-    new_state.off_wait_time = jsn.at("OffWaitTime").get<int16_t>();
+    new_state.off_wait_time = jsn.at("OffWaitTime").get<uint16_t>();
         
     new_updated_state.off_wait_time = true;
   }
@@ -3021,9 +3021,9 @@ std::string get_json_payload_for_level_move_to_level_command(
 
 void uic_mqtt_dotdot_parse_level_move_to_level(
   nlohmann::json &jsn,
-  int8_t &level,
+  uint8_t &level,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -3036,13 +3036,13 @@ void uic_mqtt_dotdot_parse_level_move_to_level(
     return;
   }
         
-  level = jsn.at("Level").get< int8_t >();
+  level = jsn.at("Level").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -3110,7 +3110,7 @@ void uic_mqtt_dotdot_parse_level_move(
   nlohmann::json &jsn,
   MoveStepMode &move_mode,
   
-  int8_t &rate,
+  uint8_t &rate,
   
   uint8_t &options_mask,
   
@@ -3134,7 +3134,7 @@ void uic_mqtt_dotdot_parse_level_move(
     return;
   }
         
-  rate = jsn.at("Rate").get< int8_t >();
+  rate = jsn.at("Rate").get< uint8_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -3206,9 +3206,9 @@ void uic_mqtt_dotdot_parse_level_step(
   nlohmann::json &jsn,
   MoveStepMode &step_mode,
   
-  int8_t &step_size,
+  uint8_t &step_size,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -3232,13 +3232,13 @@ void uic_mqtt_dotdot_parse_level_step(
     return;
   }
         
-  step_size = jsn.at("StepSize").get< int8_t >();
+  step_size = jsn.at("StepSize").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -3345,9 +3345,9 @@ std::string get_json_payload_for_level_move_to_level_with_on_off_command(
 
 void uic_mqtt_dotdot_parse_level_move_to_level_with_on_off(
   nlohmann::json &jsn,
-  int8_t &level,
+  uint8_t &level,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -3360,13 +3360,13 @@ void uic_mqtt_dotdot_parse_level_move_to_level_with_on_off(
     return;
   }
         
-  level = jsn.at("Level").get< int8_t >();
+  level = jsn.at("Level").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -3434,7 +3434,7 @@ void uic_mqtt_dotdot_parse_level_move_with_on_off(
   nlohmann::json &jsn,
   MoveStepMode &move_mode,
   
-  int8_t &rate,
+  uint8_t &rate,
   
   uint8_t &options_mask,
   
@@ -3458,7 +3458,7 @@ void uic_mqtt_dotdot_parse_level_move_with_on_off(
     return;
   }
         
-  rate = jsn.at("Rate").get< int8_t >();
+  rate = jsn.at("Rate").get< uint8_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -3530,9 +3530,9 @@ void uic_mqtt_dotdot_parse_level_step_with_on_off(
   nlohmann::json &jsn,
   MoveStepMode &step_mode,
   
-  int8_t &step_size,
+  uint8_t &step_size,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -3556,13 +3556,13 @@ void uic_mqtt_dotdot_parse_level_step_with_on_off(
     return;
   }
         
-  step_size = jsn.at("StepSize").get< int8_t >();
+  step_size = jsn.at("StepSize").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -3653,7 +3653,7 @@ std::string get_json_payload_for_level_move_to_closest_frequency_command(
 
 void uic_mqtt_dotdot_parse_level_move_to_closest_frequency(
   nlohmann::json &jsn,
-  int16_t &frequency
+  uint16_t &frequency
   
 ) {
 
@@ -3662,7 +3662,7 @@ void uic_mqtt_dotdot_parse_level_move_to_closest_frequency(
     return;
   }
         
-  frequency = jsn.at("Frequency").get< int16_t >();
+  frequency = jsn.at("Frequency").get< uint16_t >();
     }
 
 
@@ -3687,42 +3687,42 @@ void uic_mqtt_dotdot_parse_level_write_attributes(
 
   if (jsn.find("OnOffTransitionTime") != jsn.end()) {
 
-    new_state.on_off_transition_time = jsn.at("OnOffTransitionTime").get<int16_t>();
+    new_state.on_off_transition_time = jsn.at("OnOffTransitionTime").get<uint16_t>();
         
     new_updated_state.on_off_transition_time = true;
   }
 
   if (jsn.find("OnLevel") != jsn.end()) {
 
-    new_state.on_level = jsn.at("OnLevel").get<int8_t>();
+    new_state.on_level = jsn.at("OnLevel").get<uint8_t>();
         
     new_updated_state.on_level = true;
   }
 
   if (jsn.find("OnTransitionTime") != jsn.end()) {
 
-    new_state.on_transition_time = jsn.at("OnTransitionTime").get<int16_t>();
+    new_state.on_transition_time = jsn.at("OnTransitionTime").get<uint16_t>();
         
     new_updated_state.on_transition_time = true;
   }
 
   if (jsn.find("OffTransitionTime") != jsn.end()) {
 
-    new_state.off_transition_time = jsn.at("OffTransitionTime").get<int16_t>();
+    new_state.off_transition_time = jsn.at("OffTransitionTime").get<uint16_t>();
         
     new_updated_state.off_transition_time = true;
   }
 
   if (jsn.find("DefaultMoveRate") != jsn.end()) {
 
-    new_state.default_move_rate = jsn.at("DefaultMoveRate").get<int16_t>();
+    new_state.default_move_rate = jsn.at("DefaultMoveRate").get<uint16_t>();
         
     new_updated_state.default_move_rate = true;
   }
 
   if (jsn.find("StartUpCurrentLevel") != jsn.end()) {
 
-    new_state.start_up_current_level = jsn.at("StartUpCurrentLevel").get<int8_t>();
+    new_state.start_up_current_level = jsn.at("StartUpCurrentLevel").get<uint8_t>();
         
     new_updated_state.start_up_current_level = true;
   }
@@ -3773,7 +3773,7 @@ void uic_mqtt_dotdot_parse_alarms_reset_alarm(
   nlohmann::json &jsn,
   uint8_t &alarm_code,
   
-  uint8_t &cluster_identifier
+  uint16_t &cluster_identifier
   
 ) {
 
@@ -3793,7 +3793,7 @@ void uic_mqtt_dotdot_parse_alarms_reset_alarm(
     return;
   }
         
-  cluster_identifier = jsn.at("ClusterIdentifier").get< uint8_t >();
+  cluster_identifier = jsn.at("ClusterIdentifier").get< uint16_t >();
     }
 
 
@@ -3839,7 +3839,7 @@ void uic_mqtt_dotdot_parse_alarms_alarm(
   nlohmann::json &jsn,
   uint8_t &alarm_code,
   
-  uint8_t &cluster_identifier
+  uint16_t &cluster_identifier
   
 ) {
 
@@ -3859,7 +3859,7 @@ void uic_mqtt_dotdot_parse_alarms_alarm(
     return;
   }
         
-  cluster_identifier = jsn.at("ClusterIdentifier").get< uint8_t >();
+  cluster_identifier = jsn.at("ClusterIdentifier").get< uint16_t >();
     }
 
 
@@ -3945,9 +3945,9 @@ void uic_mqtt_dotdot_parse_alarms_get_alarm_response(
   
   uint8_t &alarm_code,
   
-  uint8_t &cluster_identifier,
+  uint16_t &cluster_identifier,
   
-  int32_t &time_stamp
+  uint32_t &time_stamp
   
 ) {
 
@@ -3978,13 +3978,13 @@ void uic_mqtt_dotdot_parse_alarms_get_alarm_response(
     return;
   }
         
-  cluster_identifier = jsn.at("ClusterIdentifier").get< uint8_t >();
+  cluster_identifier = jsn.at("ClusterIdentifier").get< uint16_t >();
       if (jsn.at("TimeStamp").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  time_stamp = jsn.at("TimeStamp").get< int32_t >();
+  time_stamp = jsn.at("TimeStamp").get< uint32_t >();
     }
 
 
@@ -4056,7 +4056,7 @@ void uic_mqtt_dotdot_parse_time_write_attributes(
 
   if (jsn.find("Time") != jsn.end()) {
 
-    new_state.time = jsn.at("Time").get<uint8_t>();
+    new_state.time = jsn.at("Time").get<uint32_t>();
         
     new_updated_state.time = true;
   }
@@ -4077,14 +4077,14 @@ void uic_mqtt_dotdot_parse_time_write_attributes(
 
   if (jsn.find("DstStart") != jsn.end()) {
 
-    new_state.dst_start = jsn.at("DstStart").get<int32_t>();
+    new_state.dst_start = jsn.at("DstStart").get<uint32_t>();
         
     new_updated_state.dst_start = true;
   }
 
   if (jsn.find("DstEnd") != jsn.end()) {
 
-    new_state.dst_end = jsn.at("DstEnd").get<int32_t>();
+    new_state.dst_end = jsn.at("DstEnd").get<uint32_t>();
         
     new_updated_state.dst_end = true;
   }
@@ -4098,7 +4098,7 @@ void uic_mqtt_dotdot_parse_time_write_attributes(
 
   if (jsn.find("ValidUntilTime") != jsn.end()) {
 
-    new_state.valid_until_time = jsn.at("ValidUntilTime").get<uint8_t>();
+    new_state.valid_until_time = jsn.at("ValidUntilTime").get<uint32_t>();
         
     new_updated_state.valid_until_time = true;
   }
@@ -4157,7 +4157,7 @@ void uic_mqtt_dotdot_parse_poll_control_check_in_response(
   nlohmann::json &jsn,
   bool &start_fast_polling,
   
-  int16_t &fast_poll_timeout
+  uint16_t &fast_poll_timeout
   
 ) {
 
@@ -4172,7 +4172,7 @@ void uic_mqtt_dotdot_parse_poll_control_check_in_response(
     return;
   }
         
-  fast_poll_timeout = jsn.at("FastPollTimeout").get< int16_t >();
+  fast_poll_timeout = jsn.at("FastPollTimeout").get< uint16_t >();
     }
 
 
@@ -4220,7 +4220,7 @@ std::string get_json_payload_for_poll_control_set_long_poll_interval_command(
 
 void uic_mqtt_dotdot_parse_poll_control_set_long_poll_interval(
   nlohmann::json &jsn,
-  int32_t &new_long_poll_interval
+  uint32_t &new_long_poll_interval
   
 ) {
 
@@ -4229,7 +4229,7 @@ void uic_mqtt_dotdot_parse_poll_control_set_long_poll_interval(
     return;
   }
         
-  new_long_poll_interval = jsn.at("NewLongPollInterval").get< int32_t >();
+  new_long_poll_interval = jsn.at("NewLongPollInterval").get< uint32_t >();
     }
 
 
@@ -4258,7 +4258,7 @@ std::string get_json_payload_for_poll_control_set_short_poll_interval_command(
 
 void uic_mqtt_dotdot_parse_poll_control_set_short_poll_interval(
   nlohmann::json &jsn,
-  int16_t &new_short_poll_interval
+  uint16_t &new_short_poll_interval
   
 ) {
 
@@ -4267,7 +4267,7 @@ void uic_mqtt_dotdot_parse_poll_control_set_short_poll_interval(
     return;
   }
         
-  new_short_poll_interval = jsn.at("NewShortPollInterval").get< int16_t >();
+  new_short_poll_interval = jsn.at("NewShortPollInterval").get< uint16_t >();
     }
 
 
@@ -4285,14 +4285,14 @@ void uic_mqtt_dotdot_parse_poll_control_write_attributes(
 
   if (jsn.find("CheckInInterval") != jsn.end()) {
 
-    new_state.check_in_interval = jsn.at("CheckInInterval").get<int32_t>();
+    new_state.check_in_interval = jsn.at("CheckInInterval").get<uint32_t>();
         
     new_updated_state.check_in_interval = true;
   }
 
   if (jsn.find("FastPollTimeout") != jsn.end()) {
 
-    new_state.fast_poll_timeout = jsn.at("FastPollTimeout").get<int16_t>();
+    new_state.fast_poll_timeout = jsn.at("FastPollTimeout").get<uint16_t>();
         
     new_updated_state.fast_poll_timeout = true;
   }
@@ -4322,7 +4322,7 @@ void uic_mqtt_dotdot_parse_shade_configuration_write_attributes(
 
   if (jsn.find("ClosedLimit") != jsn.end()) {
 
-    new_state.closed_limit = jsn.at("ClosedLimit").get<int16_t>();
+    new_state.closed_limit = jsn.at("ClosedLimit").get<uint16_t>();
         
     new_updated_state.closed_limit = true;
   }
@@ -4651,7 +4651,7 @@ std::string get_json_payload_for_door_lock_unlock_with_timeout_command(
 
 void uic_mqtt_dotdot_parse_door_lock_unlock_with_timeout(
   nlohmann::json &jsn,
-  int16_t &timeout_in_seconds,
+  uint16_t &timeout_in_seconds,
   
   std::string &pin_or_rfid_code
   
@@ -4662,7 +4662,7 @@ void uic_mqtt_dotdot_parse_door_lock_unlock_with_timeout(
     return;
   }
         
-  timeout_in_seconds = jsn.at("TimeoutInSeconds").get< int16_t >();
+  timeout_in_seconds = jsn.at("TimeoutInSeconds").get< uint16_t >();
       if (jsn.at("PINOrRFIDCode").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -4751,7 +4751,7 @@ std::string get_json_payload_for_door_lock_get_log_record_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_log_record(
   nlohmann::json &jsn,
-  int16_t &log_index
+  uint16_t &log_index
   
 ) {
 
@@ -4760,7 +4760,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_log_record(
     return;
   }
         
-  log_index = jsn.at("LogIndex").get< int16_t >();
+  log_index = jsn.at("LogIndex").get< uint16_t >();
     }
 
 
@@ -4835,17 +4835,17 @@ std::string get_json_payload_for_door_lock_get_log_record_response_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_log_record_response(
   nlohmann::json &jsn,
-  int16_t &log_entryid,
+  uint16_t &log_entryid,
   
-  int32_t &timestamp,
+  uint32_t &timestamp,
   
   GetLogRecordResponseEventType &event_type,
   
   DrlkOperEventSource &source_operation_event,
   
-  int8_t &event_id_or_alarm_code,
+  uint8_t &event_id_or_alarm_code,
   
-  int16_t &userid,
+  uint16_t &userid,
   
   std::string &pin
   
@@ -4868,13 +4868,13 @@ void uic_mqtt_dotdot_parse_door_lock_get_log_record_response(
     return;
   }
         
-  log_entryid = jsn.at("LogEntryID").get< int16_t >();
+  log_entryid = jsn.at("LogEntryID").get< uint16_t >();
       if (jsn.at("Timestamp").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  timestamp = jsn.at("Timestamp").get< int32_t >();
+  timestamp = jsn.at("Timestamp").get< uint32_t >();
       if (jsn.at("EventType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -4890,13 +4890,13 @@ void uic_mqtt_dotdot_parse_door_lock_get_log_record_response(
     return;
   }
         
-  event_id_or_alarm_code = jsn.at("EventIDOrAlarmCode").get< int8_t >();
+  event_id_or_alarm_code = jsn.at("EventIDOrAlarmCode").get< uint8_t >();
       if (jsn.at("UserID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  userid = jsn.at("UserID").get< int16_t >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("PIN").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -4965,7 +4965,7 @@ std::string get_json_payload_for_door_lock_set_pin_code_command(
 
 void uic_mqtt_dotdot_parse_door_lock_set_pin_code(
   nlohmann::json &jsn,
-  uint8_t * &userid,
+  uint16_t &userid,
   
   DrlkSettableUserStatus &user_status,
   
@@ -4992,7 +4992,7 @@ void uic_mqtt_dotdot_parse_door_lock_set_pin_code(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("UserStatus").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -5091,7 +5091,7 @@ std::string get_json_payload_for_door_lock_get_pin_code_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_pin_code(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -5100,7 +5100,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_pin_code(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -5163,7 +5163,7 @@ std::string get_json_payload_for_door_lock_get_pin_code_response_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_pin_code_response(
   nlohmann::json &jsn,
-  int16_t &userid,
+  uint16_t &userid,
   
   DrlkUserStatus &user_status,
   
@@ -5190,7 +5190,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_pin_code_response(
     return;
   }
         
-  userid = jsn.at("UserID").get< int16_t >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("UserStatus").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -5235,7 +5235,7 @@ std::string get_json_payload_for_door_lock_clear_pin_code_command(
 
 void uic_mqtt_dotdot_parse_door_lock_clear_pin_code(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -5244,7 +5244,7 @@ void uic_mqtt_dotdot_parse_door_lock_clear_pin_code(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -5415,7 +5415,7 @@ std::string get_json_payload_for_door_lock_set_user_status_command(
 
 void uic_mqtt_dotdot_parse_door_lock_set_user_status(
   nlohmann::json &jsn,
-  uint8_t * &userid,
+  uint16_t &userid,
   
   DrlkSettableUserStatus &user_status
   
@@ -5432,7 +5432,7 @@ void uic_mqtt_dotdot_parse_door_lock_set_user_status(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("UserStatus").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -5520,7 +5520,7 @@ std::string get_json_payload_for_door_lock_get_user_status_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_user_status(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -5529,7 +5529,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_user_status(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -5573,7 +5573,7 @@ std::string get_json_payload_for_door_lock_get_user_status_response_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_user_status_response(
   nlohmann::json &jsn,
-  int16_t &userid,
+  uint16_t &userid,
   
   DrlkUserStatus &user_status
   
@@ -5590,7 +5590,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_user_status_response(
     return;
   }
         
-  userid = jsn.at("UserID").get< int16_t >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("UserStatus").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -5650,19 +5650,19 @@ std::string get_json_payload_for_door_lock_set_weekday_schedule_command(
 
 void uic_mqtt_dotdot_parse_door_lock_set_weekday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
   
-  uint8_t * &userid,
+  uint16_t &userid,
   
   uint8_t &days_mask,
   
-  int8_t &start_hour,
+  uint8_t &start_hour,
   
-  int8_t &start_minute,
+  uint8_t &start_minute,
   
-  int8_t &end_hour,
+  uint8_t &end_hour,
   
-  int8_t &end_minute
+  uint8_t &end_minute
   
 ) {
 
@@ -5671,13 +5671,13 @@ void uic_mqtt_dotdot_parse_door_lock_set_weekday_schedule(
     return;
   }
         
-  scheduleid = jsn.at("ScheduleID").get< uint8_t * >();
+  scheduleid = jsn.at("ScheduleID").get< uint8_t >();
       if (jsn.at("UserID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("DaysMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -5688,25 +5688,25 @@ void uic_mqtt_dotdot_parse_door_lock_set_weekday_schedule(
     return;
   }
         
-  start_hour = jsn.at("StartHour").get< int8_t >();
+  start_hour = jsn.at("StartHour").get< uint8_t >();
       if (jsn.at("StartMinute").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  start_minute = jsn.at("StartMinute").get< int8_t >();
+  start_minute = jsn.at("StartMinute").get< uint8_t >();
       if (jsn.at("EndHour").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  end_hour = jsn.at("EndHour").get< int8_t >();
+  end_hour = jsn.at("EndHour").get< uint8_t >();
       if (jsn.at("EndMinute").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  end_minute = jsn.at("EndMinute").get< int8_t >();
+  end_minute = jsn.at("EndMinute").get< uint8_t >();
     }
 
 
@@ -5793,9 +5793,9 @@ std::string get_json_payload_for_door_lock_get_weekday_schedule_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_weekday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
   
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -5804,13 +5804,13 @@ void uic_mqtt_dotdot_parse_door_lock_get_weekday_schedule(
     return;
   }
         
-  scheduleid = jsn.at("ScheduleID").get< uint8_t * >();
+  scheduleid = jsn.at("ScheduleID").get< uint8_t >();
       if (jsn.at("UserID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -5880,21 +5880,21 @@ std::string get_json_payload_for_door_lock_get_weekday_schedule_response_command
 
 void uic_mqtt_dotdot_parse_door_lock_get_weekday_schedule_response(
   nlohmann::json &jsn,
-  int8_t &scheduleid,
+  uint8_t &scheduleid,
   
-  int16_t &userid,
+  uint16_t &userid,
   
   zclStatus &status,
   
   uint8_t &days_mask,
   
-  int8_t &start_hour,
+  uint8_t &start_hour,
   
-  int8_t &start_minute,
+  uint8_t &start_minute,
   
-  int8_t &end_hour,
+  uint8_t &end_hour,
   
-  int8_t &end_minute
+  uint8_t &end_minute
   
 ) {
 
@@ -5909,13 +5909,13 @@ void uic_mqtt_dotdot_parse_door_lock_get_weekday_schedule_response(
     return;
   }
         
-  scheduleid = jsn.at("ScheduleID").get< int8_t >();
+  scheduleid = jsn.at("ScheduleID").get< uint8_t >();
       if (jsn.at("UserID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  userid = jsn.at("UserID").get< int16_t >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("Status").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -5931,25 +5931,25 @@ void uic_mqtt_dotdot_parse_door_lock_get_weekday_schedule_response(
     return;
   }
         
-  start_hour = jsn.at("StartHour").get< int8_t >();
+  start_hour = jsn.at("StartHour").get< uint8_t >();
       if (jsn.at("StartMinute").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  start_minute = jsn.at("StartMinute").get< int8_t >();
+  start_minute = jsn.at("StartMinute").get< uint8_t >();
       if (jsn.at("EndHour").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  end_hour = jsn.at("EndHour").get< int8_t >();
+  end_hour = jsn.at("EndHour").get< uint8_t >();
       if (jsn.at("EndMinute").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  end_minute = jsn.at("EndMinute").get< int8_t >();
+  end_minute = jsn.at("EndMinute").get< uint8_t >();
     }
 
 
@@ -5982,9 +5982,9 @@ std::string get_json_payload_for_door_lock_clear_weekday_schedule_command(
 
 void uic_mqtt_dotdot_parse_door_lock_clear_weekday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
   
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -5993,13 +5993,13 @@ void uic_mqtt_dotdot_parse_door_lock_clear_weekday_schedule(
     return;
   }
         
-  scheduleid = jsn.at("ScheduleID").get< uint8_t * >();
+  scheduleid = jsn.at("ScheduleID").get< uint8_t >();
       if (jsn.at("UserID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -6094,13 +6094,13 @@ std::string get_json_payload_for_door_lock_set_year_day_schedule_command(
 
 void uic_mqtt_dotdot_parse_door_lock_set_year_day_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
   
-  uint8_t * &userid,
+  uint16_t &userid,
   
-  int32_t &local_start_time,
+  uint32_t &local_start_time,
   
-  int32_t &local_end_time
+  uint32_t &local_end_time
   
 ) {
 
@@ -6109,25 +6109,25 @@ void uic_mqtt_dotdot_parse_door_lock_set_year_day_schedule(
     return;
   }
         
-  scheduleid = jsn.at("ScheduleID").get< uint8_t * >();
+  scheduleid = jsn.at("ScheduleID").get< uint8_t >();
       if (jsn.at("UserID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("LocalStartTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  local_start_time = jsn.at("LocalStartTime").get< int32_t >();
+  local_start_time = jsn.at("LocalStartTime").get< uint32_t >();
       if (jsn.at("LocalEndTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  local_end_time = jsn.at("LocalEndTime").get< int32_t >();
+  local_end_time = jsn.at("LocalEndTime").get< uint32_t >();
     }
 
 
@@ -6214,9 +6214,9 @@ std::string get_json_payload_for_door_lock_get_year_day_schedule_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_year_day_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
   
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -6225,13 +6225,13 @@ void uic_mqtt_dotdot_parse_door_lock_get_year_day_schedule(
     return;
   }
         
-  scheduleid = jsn.at("ScheduleID").get< uint8_t * >();
+  scheduleid = jsn.at("ScheduleID").get< uint8_t >();
       if (jsn.at("UserID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -6287,15 +6287,15 @@ std::string get_json_payload_for_door_lock_get_year_day_schedule_response_comman
 
 void uic_mqtt_dotdot_parse_door_lock_get_year_day_schedule_response(
   nlohmann::json &jsn,
-  int8_t &scheduleid,
+  uint8_t &scheduleid,
   
-  int16_t &userid,
+  uint16_t &userid,
   
   zclStatus &status,
   
-  int32_t &local_start_time,
+  uint32_t &local_start_time,
   
-  int32_t &local_end_time
+  uint32_t &local_end_time
   
 ) {
 
@@ -6310,13 +6310,13 @@ void uic_mqtt_dotdot_parse_door_lock_get_year_day_schedule_response(
     return;
   }
         
-  scheduleid = jsn.at("ScheduleID").get< int8_t >();
+  scheduleid = jsn.at("ScheduleID").get< uint8_t >();
       if (jsn.at("UserID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  userid = jsn.at("UserID").get< int16_t >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("Status").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -6327,13 +6327,13 @@ void uic_mqtt_dotdot_parse_door_lock_get_year_day_schedule_response(
     return;
   }
         
-  local_start_time = jsn.at("LocalStartTime").get< int32_t >();
+  local_start_time = jsn.at("LocalStartTime").get< uint32_t >();
       if (jsn.at("LocalEndTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  local_end_time = jsn.at("LocalEndTime").get< int32_t >();
+  local_end_time = jsn.at("LocalEndTime").get< uint32_t >();
     }
 
 
@@ -6366,9 +6366,9 @@ std::string get_json_payload_for_door_lock_clear_year_day_schedule_command(
 
 void uic_mqtt_dotdot_parse_door_lock_clear_year_day_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
   
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -6377,13 +6377,13 @@ void uic_mqtt_dotdot_parse_door_lock_clear_year_day_schedule(
     return;
   }
         
-  scheduleid = jsn.at("ScheduleID").get< uint8_t * >();
+  scheduleid = jsn.at("ScheduleID").get< uint8_t >();
       if (jsn.at("UserID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -6489,11 +6489,11 @@ std::string get_json_payload_for_door_lock_set_holiday_schedule_command(
 
 void uic_mqtt_dotdot_parse_door_lock_set_holiday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &holiday_scheduleid,
+  uint8_t &holiday_scheduleid,
   
-  int32_t &local_start_time,
+  uint32_t &local_start_time,
   
-  int32_t &local_end_time,
+  uint32_t &local_end_time,
   
   DrlkOperMode &operating_mode_during_holiday
   
@@ -6510,19 +6510,19 @@ void uic_mqtt_dotdot_parse_door_lock_set_holiday_schedule(
     return;
   }
         
-  holiday_scheduleid = jsn.at("HolidayScheduleID").get< uint8_t * >();
+  holiday_scheduleid = jsn.at("HolidayScheduleID").get< uint8_t >();
       if (jsn.at("LocalStartTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  local_start_time = jsn.at("LocalStartTime").get< int32_t >();
+  local_start_time = jsn.at("LocalStartTime").get< uint32_t >();
       if (jsn.at("LocalEndTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  local_end_time = jsn.at("LocalEndTime").get< int32_t >();
+  local_end_time = jsn.at("LocalEndTime").get< uint32_t >();
       if (jsn.at("OperatingModeDuringHoliday").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -6610,7 +6610,7 @@ std::string get_json_payload_for_door_lock_get_holiday_schedule_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_holiday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &holiday_scheduleid
+  uint8_t &holiday_scheduleid
   
 ) {
 
@@ -6619,7 +6619,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_holiday_schedule(
     return;
   }
         
-  holiday_scheduleid = jsn.at("HolidayScheduleID").get< uint8_t * >();
+  holiday_scheduleid = jsn.at("HolidayScheduleID").get< uint8_t >();
     }
 
 
@@ -6686,13 +6686,13 @@ std::string get_json_payload_for_door_lock_get_holiday_schedule_response_command
 
 void uic_mqtt_dotdot_parse_door_lock_get_holiday_schedule_response(
   nlohmann::json &jsn,
-  int8_t &holiday_scheduleid,
+  uint8_t &holiday_scheduleid,
   
   zclStatus &status,
   
-  int32_t &local_start_time,
+  uint32_t &local_start_time,
   
-  int32_t &local_end_time,
+  uint32_t &local_end_time,
   
   DrlkOperMode &operating_mode_during_holiday
   
@@ -6715,7 +6715,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_holiday_schedule_response(
     return;
   }
         
-  holiday_scheduleid = jsn.at("HolidayScheduleID").get< int8_t >();
+  holiday_scheduleid = jsn.at("HolidayScheduleID").get< uint8_t >();
       if (jsn.at("Status").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -6726,13 +6726,13 @@ void uic_mqtt_dotdot_parse_door_lock_get_holiday_schedule_response(
     return;
   }
         
-  local_start_time = jsn.at("LocalStartTime").get< int32_t >();
+  local_start_time = jsn.at("LocalStartTime").get< uint32_t >();
       if (jsn.at("LocalEndTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  local_end_time = jsn.at("LocalEndTime").get< int32_t >();
+  local_end_time = jsn.at("LocalEndTime").get< uint32_t >();
       if (jsn.at("OperatingModeDuringHoliday").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -6766,7 +6766,7 @@ std::string get_json_payload_for_door_lock_clear_holiday_schedule_command(
 
 void uic_mqtt_dotdot_parse_door_lock_clear_holiday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &holiday_scheduleid
+  uint8_t &holiday_scheduleid
   
 ) {
 
@@ -6775,7 +6775,7 @@ void uic_mqtt_dotdot_parse_door_lock_clear_holiday_schedule(
     return;
   }
         
-  holiday_scheduleid = jsn.at("HolidayScheduleID").get< uint8_t * >();
+  holiday_scheduleid = jsn.at("HolidayScheduleID").get< uint8_t >();
     }
 
 
@@ -6873,7 +6873,7 @@ std::string get_json_payload_for_door_lock_set_user_type_command(
 
 void uic_mqtt_dotdot_parse_door_lock_set_user_type(
   nlohmann::json &jsn,
-  uint8_t * &userid,
+  uint16_t &userid,
   
   DrlkUserType &user_type
   
@@ -6890,7 +6890,7 @@ void uic_mqtt_dotdot_parse_door_lock_set_user_type(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("UserType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -6978,7 +6978,7 @@ std::string get_json_payload_for_door_lock_get_user_type_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_user_type(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -6987,7 +6987,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_user_type(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -7031,7 +7031,7 @@ std::string get_json_payload_for_door_lock_get_user_type_response_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_user_type_response(
   nlohmann::json &jsn,
-  int16_t &userid,
+  uint16_t &userid,
   
   DrlkUserType &user_type
   
@@ -7048,7 +7048,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_user_type_response(
     return;
   }
         
-  userid = jsn.at("UserID").get< int16_t >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("UserType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -7116,7 +7116,7 @@ std::string get_json_payload_for_door_lock_set_rfid_code_command(
 
 void uic_mqtt_dotdot_parse_door_lock_set_rfid_code(
   nlohmann::json &jsn,
-  uint8_t * &userid,
+  uint16_t &userid,
   
   DrlkSettableUserStatus &user_status,
   
@@ -7143,7 +7143,7 @@ void uic_mqtt_dotdot_parse_door_lock_set_rfid_code(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("UserStatus").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -7242,7 +7242,7 @@ std::string get_json_payload_for_door_lock_get_rfid_code_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_rfid_code(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -7251,7 +7251,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_rfid_code(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -7314,7 +7314,7 @@ std::string get_json_payload_for_door_lock_get_rfid_code_response_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_rfid_code_response(
   nlohmann::json &jsn,
-  int16_t &userid,
+  uint16_t &userid,
   
   DrlkUserStatus &user_status,
   
@@ -7341,7 +7341,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_rfid_code_response(
     return;
   }
         
-  userid = jsn.at("UserID").get< int16_t >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("UserStatus").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -7386,7 +7386,7 @@ std::string get_json_payload_for_door_lock_clear_rfid_code_command(
 
 void uic_mqtt_dotdot_parse_door_lock_clear_rfid_code(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
   
 ) {
 
@@ -7395,7 +7395,7 @@ void uic_mqtt_dotdot_parse_door_lock_clear_rfid_code(
     return;
   }
         
-  userid = jsn.at("UserID").get< uint8_t * >();
+  userid = jsn.at("UserID").get< uint16_t >();
     }
 
 
@@ -7621,11 +7621,11 @@ void uic_mqtt_dotdot_parse_door_lock_set_user(
   nlohmann::json &jsn,
   DataOperationTypeEnum &operation_type,
   
-  int16_t &user_index,
+  uint16_t &user_index,
   
   std::string &user_name,
   
-  int32_t &user_uniqueid,
+  uint32_t &user_uniqueid,
   
   DrlkSettableUserStatus &user_status,
   
@@ -7669,7 +7669,7 @@ void uic_mqtt_dotdot_parse_door_lock_set_user(
     return;
   }
         
-  user_index = jsn.at("UserIndex").get< int16_t >();
+  user_index = jsn.at("UserIndex").get< uint16_t >();
       if (jsn.at("UserName").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -7681,7 +7681,7 @@ void uic_mqtt_dotdot_parse_door_lock_set_user(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int32_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint32_t >();
       if (jsn.at("UserStatus").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -7725,7 +7725,7 @@ std::string get_json_payload_for_door_lock_get_user_command(
 
 void uic_mqtt_dotdot_parse_door_lock_get_user(
   nlohmann::json &jsn,
-  int16_t &user_index
+  uint16_t &user_index
   
 ) {
 
@@ -7734,7 +7734,7 @@ void uic_mqtt_dotdot_parse_door_lock_get_user(
     return;
   }
         
-  user_index = jsn.at("UserIndex").get< int16_t >();
+  user_index = jsn.at("UserIndex").get< uint16_t >();
     }
 
 
@@ -7782,7 +7782,7 @@ std::string get_json_payload_for_door_lock_clear_user_command(
 
 void uic_mqtt_dotdot_parse_door_lock_clear_user(
   nlohmann::json &jsn,
-  int16_t &user_index
+  uint16_t &user_index
   
 ) {
 
@@ -7791,7 +7791,7 @@ void uic_mqtt_dotdot_parse_door_lock_clear_user(
     return;
   }
         
-  user_index = jsn.at("UserIndex").get< int16_t >();
+  user_index = jsn.at("UserIndex").get< uint16_t >();
     }
 
 
@@ -7866,11 +7866,11 @@ void uic_mqtt_dotdot_parse_door_lock_operating_event_notification(
   
   OperatingEventNotificationOperationEventCode &operation_event_code,
   
-  int16_t &userid,
+  uint16_t &userid,
   
   std::string &pin,
   
-  int32_t &local_time,
+  uint32_t &local_time,
   
   std::string &data
   
@@ -7903,7 +7903,7 @@ void uic_mqtt_dotdot_parse_door_lock_operating_event_notification(
     return;
   }
         
-  userid = jsn.at("UserID").get< int16_t >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("PIN").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -7915,7 +7915,7 @@ void uic_mqtt_dotdot_parse_door_lock_operating_event_notification(
     return;
   }
         
-  local_time = jsn.at("LocalTime").get< int32_t >();
+  local_time = jsn.at("LocalTime").get< uint32_t >();
       if (jsn.at("Data").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -8026,7 +8026,7 @@ void uic_mqtt_dotdot_parse_door_lock_programming_event_notification(
   
   ProgrammingEventNotificationProgramEventCode &program_event_code,
   
-  int16_t &userid,
+  uint16_t &userid,
   
   std::string &pin,
   
@@ -8034,7 +8034,7 @@ void uic_mqtt_dotdot_parse_door_lock_programming_event_notification(
   
   DrlkUserStatus &user_status,
   
-  int32_t &local_time,
+  uint32_t &local_time,
   
   std::string &data
   
@@ -8079,7 +8079,7 @@ void uic_mqtt_dotdot_parse_door_lock_programming_event_notification(
     return;
   }
         
-  userid = jsn.at("UserID").get< int16_t >();
+  userid = jsn.at("UserID").get< uint16_t >();
       if (jsn.at("PIN").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -8101,7 +8101,7 @@ void uic_mqtt_dotdot_parse_door_lock_programming_event_notification(
     return;
   }
         
-  local_time = jsn.at("LocalTime").get< int32_t >();
+  local_time = jsn.at("LocalTime").get< uint32_t >();
       if (jsn.at("Data").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -8195,7 +8195,7 @@ void uic_mqtt_dotdot_parse_door_lock_set_credential(
   
   std::string &credential_data,
   
-  int16_t &user_index,
+  uint16_t &user_index,
   
   DrlkSettableUserStatus &user_status,
   
@@ -8243,7 +8243,7 @@ void uic_mqtt_dotdot_parse_door_lock_set_credential(
     return;
   }
         
-  user_index = jsn.at("UserIndex").get< int16_t >();
+  user_index = jsn.at("UserIndex").get< uint16_t >();
       if (jsn.at("UserStatus").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -8423,21 +8423,21 @@ void uic_mqtt_dotdot_parse_door_lock_write_attributes(
 
   if (jsn.find("DoorOpenEvents") != jsn.end()) {
 
-    new_state.door_open_events = jsn.at("DoorOpenEvents").get<int32_t>();
+    new_state.door_open_events = jsn.at("DoorOpenEvents").get<uint32_t>();
         
     new_updated_state.door_open_events = true;
   }
 
   if (jsn.find("DoorClosedEvents") != jsn.end()) {
 
-    new_state.door_closed_events = jsn.at("DoorClosedEvents").get<int32_t>();
+    new_state.door_closed_events = jsn.at("DoorClosedEvents").get<uint32_t>();
         
     new_updated_state.door_closed_events = true;
   }
 
   if (jsn.find("OpenPeriod") != jsn.end()) {
 
-    new_state.open_period = jsn.at("OpenPeriod").get<int16_t>();
+    new_state.open_period = jsn.at("OpenPeriod").get<uint16_t>();
         
     new_updated_state.open_period = true;
   }
@@ -8458,21 +8458,21 @@ void uic_mqtt_dotdot_parse_door_lock_write_attributes(
 
   if (jsn.find("LEDSettings") != jsn.end()) {
 
-    new_state.led_settings = jsn.at("LEDSettings").get<int8_t>();
+    new_state.led_settings = jsn.at("LEDSettings").get<uint8_t>();
         
     new_updated_state.led_settings = true;
   }
 
   if (jsn.find("AutoRelockTime") != jsn.end()) {
 
-    new_state.auto_relock_time = jsn.at("AutoRelockTime").get<int32_t>();
+    new_state.auto_relock_time = jsn.at("AutoRelockTime").get<uint32_t>();
         
     new_updated_state.auto_relock_time = true;
   }
 
   if (jsn.find("SoundVolume") != jsn.end()) {
 
-    new_state.sound_volume = jsn.at("SoundVolume").get<int8_t>();
+    new_state.sound_volume = jsn.at("SoundVolume").get<uint8_t>();
         
     new_updated_state.sound_volume = true;
   }
@@ -8529,14 +8529,14 @@ void uic_mqtt_dotdot_parse_door_lock_write_attributes(
 
   if (jsn.find("WrongCodeEntryLimit") != jsn.end()) {
 
-    new_state.wrong_code_entry_limit = jsn.at("WrongCodeEntryLimit").get<int8_t>();
+    new_state.wrong_code_entry_limit = jsn.at("WrongCodeEntryLimit").get<uint8_t>();
         
     new_updated_state.wrong_code_entry_limit = true;
   }
 
   if (jsn.find("UserCodeTemporaryDisableTime") != jsn.end()) {
 
-    new_state.user_code_temporary_disable_time = jsn.at("UserCodeTemporaryDisableTime").get<int8_t>();
+    new_state.user_code_temporary_disable_time = jsn.at("UserCodeTemporaryDisableTime").get<uint8_t>();
         
     new_updated_state.user_code_temporary_disable_time = true;
   }
@@ -8557,7 +8557,7 @@ void uic_mqtt_dotdot_parse_door_lock_write_attributes(
 
   if (jsn.find("ExpiringUserTimeout") != jsn.end()) {
 
-    new_state.expiring_user_timeout = jsn.at("ExpiringUserTimeout").get<int16_t>();
+    new_state.expiring_user_timeout = jsn.at("ExpiringUserTimeout").get<uint16_t>();
         
     new_updated_state.expiring_user_timeout = true;
   }
@@ -8704,7 +8704,7 @@ std::string get_json_payload_for_window_covering_go_to_lift_value_command(
 
 void uic_mqtt_dotdot_parse_window_covering_go_to_lift_value(
   nlohmann::json &jsn,
-  int16_t &lift_value
+  uint16_t &lift_value
   
 ) {
 
@@ -8713,7 +8713,7 @@ void uic_mqtt_dotdot_parse_window_covering_go_to_lift_value(
     return;
   }
         
-  lift_value = jsn.at("LiftValue").get< int16_t >();
+  lift_value = jsn.at("LiftValue").get< uint16_t >();
     }
 
 
@@ -8742,7 +8742,7 @@ std::string get_json_payload_for_window_covering_go_to_lift_percentage_command(
 
 void uic_mqtt_dotdot_parse_window_covering_go_to_lift_percentage(
   nlohmann::json &jsn,
-  int8_t &percentage_lift_value
+  uint8_t &percentage_lift_value
   
 ) {
 
@@ -8751,7 +8751,7 @@ void uic_mqtt_dotdot_parse_window_covering_go_to_lift_percentage(
     return;
   }
         
-  percentage_lift_value = jsn.at("PercentageLiftValue").get< int8_t >();
+  percentage_lift_value = jsn.at("PercentageLiftValue").get< uint8_t >();
     }
 
 
@@ -8780,7 +8780,7 @@ std::string get_json_payload_for_window_covering_go_to_tilt_value_command(
 
 void uic_mqtt_dotdot_parse_window_covering_go_to_tilt_value(
   nlohmann::json &jsn,
-  int16_t &tilt_value
+  uint16_t &tilt_value
   
 ) {
 
@@ -8789,7 +8789,7 @@ void uic_mqtt_dotdot_parse_window_covering_go_to_tilt_value(
     return;
   }
         
-  tilt_value = jsn.at("TiltValue").get< int16_t >();
+  tilt_value = jsn.at("TiltValue").get< uint16_t >();
     }
 
 
@@ -8818,7 +8818,7 @@ std::string get_json_payload_for_window_covering_go_to_tilt_percentage_command(
 
 void uic_mqtt_dotdot_parse_window_covering_go_to_tilt_percentage(
   nlohmann::json &jsn,
-  int8_t &percentage_tilt_value
+  uint8_t &percentage_tilt_value
   
 ) {
 
@@ -8827,7 +8827,7 @@ void uic_mqtt_dotdot_parse_window_covering_go_to_tilt_percentage(
     return;
   }
         
-  percentage_tilt_value = jsn.at("PercentageTiltValue").get< int8_t >();
+  percentage_tilt_value = jsn.at("PercentageTiltValue").get< uint8_t >();
     }
 
 
@@ -8845,21 +8845,21 @@ void uic_mqtt_dotdot_parse_window_covering_write_attributes(
 
   if (jsn.find("VelocityLift") != jsn.end()) {
 
-    new_state.velocity_lift = jsn.at("VelocityLift").get<int16_t>();
+    new_state.velocity_lift = jsn.at("VelocityLift").get<uint16_t>();
         
     new_updated_state.velocity_lift = true;
   }
 
   if (jsn.find("AccelerationTimeLift") != jsn.end()) {
 
-    new_state.acceleration_time_lift = jsn.at("AccelerationTimeLift").get<int16_t>();
+    new_state.acceleration_time_lift = jsn.at("AccelerationTimeLift").get<uint16_t>();
         
     new_updated_state.acceleration_time_lift = true;
   }
 
   if (jsn.find("DecelerationTimeLift") != jsn.end()) {
 
-    new_state.deceleration_time_lift = jsn.at("DecelerationTimeLift").get<int16_t>();
+    new_state.deceleration_time_lift = jsn.at("DecelerationTimeLift").get<uint16_t>();
         
     new_updated_state.deceleration_time_lift = true;
   }
@@ -8900,7 +8900,7 @@ std::string get_json_payload_for_barrier_control_go_to_percent_command(
 
 void uic_mqtt_dotdot_parse_barrier_control_go_to_percent(
   nlohmann::json &jsn,
-  int8_t &percent_open
+  uint8_t &percent_open
   
 ) {
 
@@ -8909,7 +8909,7 @@ void uic_mqtt_dotdot_parse_barrier_control_go_to_percent(
     return;
   }
         
-  percent_open = jsn.at("PercentOpen").get< int8_t >();
+  percent_open = jsn.at("PercentOpen").get< uint8_t >();
     }
 
 
@@ -8946,42 +8946,42 @@ void uic_mqtt_dotdot_parse_barrier_control_write_attributes(
 
   if (jsn.find("OpenEvents") != jsn.end()) {
 
-    new_state.open_events = jsn.at("OpenEvents").get<int16_t>();
+    new_state.open_events = jsn.at("OpenEvents").get<uint16_t>();
         
     new_updated_state.open_events = true;
   }
 
   if (jsn.find("CloseEvents") != jsn.end()) {
 
-    new_state.close_events = jsn.at("CloseEvents").get<int16_t>();
+    new_state.close_events = jsn.at("CloseEvents").get<uint16_t>();
         
     new_updated_state.close_events = true;
   }
 
   if (jsn.find("CommandOpenEvents") != jsn.end()) {
 
-    new_state.command_open_events = jsn.at("CommandOpenEvents").get<int16_t>();
+    new_state.command_open_events = jsn.at("CommandOpenEvents").get<uint16_t>();
         
     new_updated_state.command_open_events = true;
   }
 
   if (jsn.find("CommandCloseEvents") != jsn.end()) {
 
-    new_state.command_close_events = jsn.at("CommandCloseEvents").get<int16_t>();
+    new_state.command_close_events = jsn.at("CommandCloseEvents").get<uint16_t>();
         
     new_updated_state.command_close_events = true;
   }
 
   if (jsn.find("OpenPeriod") != jsn.end()) {
 
-    new_state.open_period = jsn.at("OpenPeriod").get<int16_t>();
+    new_state.open_period = jsn.at("OpenPeriod").get<uint16_t>();
         
     new_updated_state.open_period = true;
   }
 
   if (jsn.find("ClosePeriod") != jsn.end()) {
 
-    new_state.close_period = jsn.at("ClosePeriod").get<int16_t>();
+    new_state.close_period = jsn.at("ClosePeriod").get<uint16_t>();
         
     new_updated_state.close_period = true;
   }
@@ -9004,14 +9004,14 @@ void uic_mqtt_dotdot_parse_pump_configuration_and_control_write_attributes(
 
   if (jsn.find("LifetimeRunningHours") != jsn.end()) {
 
-    new_state.lifetime_running_hours = jsn.at("LifetimeRunningHours").get<int32_t>();
+    new_state.lifetime_running_hours = jsn.at("LifetimeRunningHours").get<uint32_t>();
         
     new_updated_state.lifetime_running_hours = true;
   }
 
   if (jsn.find("Power") != jsn.end()) {
 
-    new_state.power = jsn.at("Power").get<int32_t>();
+    new_state.power = jsn.at("Power").get<uint32_t>();
         
     new_updated_state.power = true;
   }
@@ -9383,17 +9383,17 @@ std::string get_json_payload_for_thermostat_get_relay_status_log_response_comman
 
 void uic_mqtt_dotdot_parse_thermostat_get_relay_status_log_response(
   nlohmann::json &jsn,
-  int16_t &time_of_day,
+  uint16_t &time_of_day,
   
   uint8_t &relay_status,
   
   int16_t &local_temperature,
   
-  int8_t &humidity_percentage,
+  uint8_t &humidity_percentage,
   
   int16_t &set_point,
   
-  int16_t &unread_entries
+  uint16_t &unread_entries
   
 ) {
 
@@ -9402,7 +9402,7 @@ void uic_mqtt_dotdot_parse_thermostat_get_relay_status_log_response(
     return;
   }
         
-  time_of_day = jsn.at("TimeOfDay").get< int16_t >();
+  time_of_day = jsn.at("TimeOfDay").get< uint16_t >();
       if (jsn.at("RelayStatus").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -9419,7 +9419,7 @@ void uic_mqtt_dotdot_parse_thermostat_get_relay_status_log_response(
     return;
   }
         
-  humidity_percentage = jsn.at("HumidityPercentage").get< int8_t >();
+  humidity_percentage = jsn.at("HumidityPercentage").get< uint8_t >();
       if (jsn.at("SetPoint").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -9431,7 +9431,7 @@ void uic_mqtt_dotdot_parse_thermostat_get_relay_status_log_response(
     return;
   }
         
-  unread_entries = jsn.at("UnreadEntries").get< int16_t >();
+  unread_entries = jsn.at("UnreadEntries").get< uint16_t >();
     }
 
 
@@ -9668,7 +9668,7 @@ void uic_mqtt_dotdot_parse_thermostat_write_attributes(
 
   if (jsn.find("TemperatureSetpointHoldDuration") != jsn.end()) {
 
-    new_state.temperature_setpoint_hold_duration = jsn.at("TemperatureSetpointHoldDuration").get<int16_t>();
+    new_state.temperature_setpoint_hold_duration = jsn.at("TemperatureSetpointHoldDuration").get<uint16_t>();
         
     new_updated_state.temperature_setpoint_hold_duration = true;
   }
@@ -9682,21 +9682,21 @@ void uic_mqtt_dotdot_parse_thermostat_write_attributes(
 
   if (jsn.find("OccupiedSetback") != jsn.end()) {
 
-    new_state.occupied_setback = jsn.at("OccupiedSetback").get<int8_t>();
+    new_state.occupied_setback = jsn.at("OccupiedSetback").get<uint8_t>();
         
     new_updated_state.occupied_setback = true;
   }
 
   if (jsn.find("UnoccupiedSetback") != jsn.end()) {
 
-    new_state.unoccupied_setback = jsn.at("UnoccupiedSetback").get<int8_t>();
+    new_state.unoccupied_setback = jsn.at("UnoccupiedSetback").get<uint8_t>();
         
     new_updated_state.unoccupied_setback = true;
   }
 
   if (jsn.find("EmergencyHeatDelta") != jsn.end()) {
 
-    new_state.emergency_heat_delta = jsn.at("EmergencyHeatDelta").get<int8_t>();
+    new_state.emergency_heat_delta = jsn.at("EmergencyHeatDelta").get<uint8_t>();
         
     new_updated_state.emergency_heat_delta = true;
   }
@@ -9718,7 +9718,7 @@ void uic_mqtt_dotdot_parse_thermostat_write_attributes(
 
   if (jsn.find("ACCapacity") != jsn.end()) {
 
-    new_state.ac_capacity = jsn.at("ACCapacity").get<int16_t>();
+    new_state.ac_capacity = jsn.at("ACCapacity").get<uint16_t>();
         
     new_updated_state.ac_capacity = true;
   }
@@ -9854,7 +9854,7 @@ void uic_mqtt_dotdot_parse_dehumidification_control_write_attributes(
 
   if (jsn.find("RHDehumidificationSetpoint") != jsn.end()) {
 
-    new_state.rh_dehumidification_setpoint = jsn.at("RHDehumidificationSetpoint").get<int8_t>();
+    new_state.rh_dehumidification_setpoint = jsn.at("RHDehumidificationSetpoint").get<uint8_t>();
         
     new_updated_state.rh_dehumidification_setpoint = true;
   }
@@ -9891,14 +9891,14 @@ void uic_mqtt_dotdot_parse_dehumidification_control_write_attributes(
 
   if (jsn.find("DehumidificationHysteresis") != jsn.end()) {
 
-    new_state.dehumidification_hysteresis = jsn.at("DehumidificationHysteresis").get<int8_t>();
+    new_state.dehumidification_hysteresis = jsn.at("DehumidificationHysteresis").get<uint8_t>();
         
     new_updated_state.dehumidification_hysteresis = true;
   }
 
   if (jsn.find("DehumidificationMaxCool") != jsn.end()) {
 
-    new_state.dehumidification_max_cool = jsn.at("DehumidificationMaxCool").get<int8_t>();
+    new_state.dehumidification_max_cool = jsn.at("DehumidificationMaxCool").get<uint8_t>();
         
     new_updated_state.dehumidification_max_cool = true;
   }
@@ -10039,11 +10039,11 @@ std::string get_json_payload_for_color_control_move_to_hue_command(
 
 void uic_mqtt_dotdot_parse_color_control_move_to_hue(
   nlohmann::json &jsn,
-  int8_t &hue,
+  uint8_t &hue,
   
   CCDirection &direction,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -10062,7 +10062,7 @@ void uic_mqtt_dotdot_parse_color_control_move_to_hue(
     return;
   }
         
-  hue = jsn.at("Hue").get< int8_t >();
+  hue = jsn.at("Hue").get< uint8_t >();
       if (jsn.at("Direction").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10073,7 +10073,7 @@ void uic_mqtt_dotdot_parse_color_control_move_to_hue(
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10141,7 +10141,7 @@ void uic_mqtt_dotdot_parse_color_control_move_hue(
   nlohmann::json &jsn,
   CCMoveMode &move_mode,
   
-  int8_t &rate,
+  uint8_t &rate,
   
   uint8_t &options_mask,
   
@@ -10165,7 +10165,7 @@ void uic_mqtt_dotdot_parse_color_control_move_hue(
     return;
   }
         
-  rate = jsn.at("Rate").get< int8_t >();
+  rate = jsn.at("Rate").get< uint8_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10237,9 +10237,9 @@ void uic_mqtt_dotdot_parse_color_control_step_hue(
   nlohmann::json &jsn,
   CCStepMode &step_mode,
   
-  int8_t &step_size,
+  uint8_t &step_size,
   
-  int8_t &transition_time,
+  uint8_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -10263,13 +10263,13 @@ void uic_mqtt_dotdot_parse_color_control_step_hue(
     return;
   }
         
-  step_size = jsn.at("StepSize").get< int8_t >();
+  step_size = jsn.at("StepSize").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int8_t >();
+  transition_time = jsn.at("TransitionTime").get< uint8_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10324,9 +10324,9 @@ std::string get_json_payload_for_color_control_move_to_saturation_command(
 
 void uic_mqtt_dotdot_parse_color_control_move_to_saturation(
   nlohmann::json &jsn,
-  int8_t &saturation,
+  uint8_t &saturation,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -10339,13 +10339,13 @@ void uic_mqtt_dotdot_parse_color_control_move_to_saturation(
     return;
   }
         
-  saturation = jsn.at("Saturation").get< int8_t >();
+  saturation = jsn.at("Saturation").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10413,7 +10413,7 @@ void uic_mqtt_dotdot_parse_color_control_move_saturation(
   nlohmann::json &jsn,
   CCMoveMode &move_mode,
   
-  int8_t &rate,
+  uint8_t &rate,
   
   uint8_t &options_mask,
   
@@ -10437,7 +10437,7 @@ void uic_mqtt_dotdot_parse_color_control_move_saturation(
     return;
   }
         
-  rate = jsn.at("Rate").get< int8_t >();
+  rate = jsn.at("Rate").get< uint8_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10509,9 +10509,9 @@ void uic_mqtt_dotdot_parse_color_control_step_saturation(
   nlohmann::json &jsn,
   CCStepMode &step_mode,
   
-  int8_t &step_size,
+  uint8_t &step_size,
   
-  int8_t &transition_time,
+  uint8_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -10535,13 +10535,13 @@ void uic_mqtt_dotdot_parse_color_control_step_saturation(
     return;
   }
         
-  step_size = jsn.at("StepSize").get< int8_t >();
+  step_size = jsn.at("StepSize").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int8_t >();
+  transition_time = jsn.at("TransitionTime").get< uint8_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10600,11 +10600,11 @@ std::string get_json_payload_for_color_control_move_to_hue_and_saturation_comman
 
 void uic_mqtt_dotdot_parse_color_control_move_to_hue_and_saturation(
   nlohmann::json &jsn,
-  int8_t &hue,
+  uint8_t &hue,
   
-  int8_t &saturation,
+  uint8_t &saturation,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -10617,19 +10617,19 @@ void uic_mqtt_dotdot_parse_color_control_move_to_hue_and_saturation(
     return;
   }
         
-  hue = jsn.at("Hue").get< int8_t >();
+  hue = jsn.at("Hue").get< uint8_t >();
       if (jsn.at("Saturation").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  saturation = jsn.at("Saturation").get< int8_t >();
+  saturation = jsn.at("Saturation").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10688,11 +10688,11 @@ std::string get_json_payload_for_color_control_move_to_color_command(
 
 void uic_mqtt_dotdot_parse_color_control_move_to_color(
   nlohmann::json &jsn,
-  int16_t &colorx,
+  uint16_t &colorx,
   
-  int16_t &colory,
+  uint16_t &colory,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -10705,19 +10705,19 @@ void uic_mqtt_dotdot_parse_color_control_move_to_color(
     return;
   }
         
-  colorx = jsn.at("ColorX").get< int16_t >();
+  colorx = jsn.at("ColorX").get< uint16_t >();
       if (jsn.at("ColorY").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  colory = jsn.at("ColorY").get< int16_t >();
+  colory = jsn.at("ColorY").get< uint16_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10856,7 +10856,7 @@ void uic_mqtt_dotdot_parse_color_control_step_color(
   
   int16_t &stepy,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -10881,7 +10881,7 @@ void uic_mqtt_dotdot_parse_color_control_step_color(
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -10936,9 +10936,9 @@ std::string get_json_payload_for_color_control_move_to_color_temperature_command
 
 void uic_mqtt_dotdot_parse_color_control_move_to_color_temperature(
   nlohmann::json &jsn,
-  int16_t &color_temperature_mireds,
+  uint16_t &color_temperature_mireds,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -10951,13 +10951,13 @@ void uic_mqtt_dotdot_parse_color_control_move_to_color_temperature(
     return;
   }
         
-  color_temperature_mireds = jsn.at("ColorTemperatureMireds").get< int16_t >();
+  color_temperature_mireds = jsn.at("ColorTemperatureMireds").get< uint16_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -11027,11 +11027,11 @@ std::string get_json_payload_for_color_control_enhanced_move_to_hue_command(
 
 void uic_mqtt_dotdot_parse_color_control_enhanced_move_to_hue(
   nlohmann::json &jsn,
-  int16_t &enhanced_hue,
+  uint16_t &enhanced_hue,
   
   CCDirection &direction,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -11050,7 +11050,7 @@ void uic_mqtt_dotdot_parse_color_control_enhanced_move_to_hue(
     return;
   }
         
-  enhanced_hue = jsn.at("EnhancedHue").get< int16_t >();
+  enhanced_hue = jsn.at("EnhancedHue").get< uint16_t >();
       if (jsn.at("Direction").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -11061,7 +11061,7 @@ void uic_mqtt_dotdot_parse_color_control_enhanced_move_to_hue(
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -11129,7 +11129,7 @@ void uic_mqtt_dotdot_parse_color_control_enhanced_move_hue(
   nlohmann::json &jsn,
   CCMoveMode &move_mode,
   
-  int16_t &rate,
+  uint16_t &rate,
   
   uint8_t &options_mask,
   
@@ -11153,7 +11153,7 @@ void uic_mqtt_dotdot_parse_color_control_enhanced_move_hue(
     return;
   }
         
-  rate = jsn.at("Rate").get< int16_t >();
+  rate = jsn.at("Rate").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -11225,9 +11225,9 @@ void uic_mqtt_dotdot_parse_color_control_enhanced_step_hue(
   nlohmann::json &jsn,
   CCStepMode &step_mode,
   
-  int16_t &step_size,
+  uint16_t &step_size,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -11251,13 +11251,13 @@ void uic_mqtt_dotdot_parse_color_control_enhanced_step_hue(
     return;
   }
         
-  step_size = jsn.at("StepSize").get< int16_t >();
+  step_size = jsn.at("StepSize").get< uint16_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -11316,11 +11316,11 @@ std::string get_json_payload_for_color_control_enhanced_move_to_hue_and_saturati
 
 void uic_mqtt_dotdot_parse_color_control_enhanced_move_to_hue_and_saturation(
   nlohmann::json &jsn,
-  int16_t &enhanced_hue,
+  uint16_t &enhanced_hue,
   
-  int8_t &saturation,
+  uint8_t &saturation,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
   uint8_t &options_mask,
   
@@ -11333,19 +11333,19 @@ void uic_mqtt_dotdot_parse_color_control_enhanced_move_to_hue_and_saturation(
     return;
   }
         
-  enhanced_hue = jsn.at("EnhancedHue").get< int16_t >();
+  enhanced_hue = jsn.at("EnhancedHue").get< uint16_t >();
       if (jsn.at("Saturation").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  saturation = jsn.at("Saturation").get< int8_t >();
+  saturation = jsn.at("Saturation").get< uint8_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -11442,9 +11442,9 @@ void uic_mqtt_dotdot_parse_color_control_color_loop_set(
   
   CCColorLoopDirection &direction,
   
-  int16_t &time,
+  uint16_t &time,
   
-  int16_t &start_hue,
+  uint16_t &start_hue,
   
   uint8_t &options_mask,
   
@@ -11484,13 +11484,13 @@ void uic_mqtt_dotdot_parse_color_control_color_loop_set(
     return;
   }
         
-  time = jsn.at("Time").get< int16_t >();
+  time = jsn.at("Time").get< uint16_t >();
       if (jsn.at("StartHue").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  start_hue = jsn.at("StartHue").get< int16_t >();
+  start_hue = jsn.at("StartHue").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -11618,11 +11618,11 @@ void uic_mqtt_dotdot_parse_color_control_move_color_temperature(
   nlohmann::json &jsn,
   CCMoveMode &move_mode,
   
-  int16_t &rate,
+  uint16_t &rate,
   
-  uint8_t * &color_temperature_minimum_mireds,
+  uint16_t &color_temperature_minimum_mireds,
   
-  uint8_t * &color_temperature_maximum_mireds,
+  uint16_t &color_temperature_maximum_mireds,
   
   uint8_t &options_mask,
   
@@ -11646,19 +11646,19 @@ void uic_mqtt_dotdot_parse_color_control_move_color_temperature(
     return;
   }
         
-  rate = jsn.at("Rate").get< int16_t >();
+  rate = jsn.at("Rate").get< uint16_t >();
       if (jsn.at("ColorTemperatureMinimumMireds").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  color_temperature_minimum_mireds = jsn.at("ColorTemperatureMinimumMireds").get< uint8_t * >();
+  color_temperature_minimum_mireds = jsn.at("ColorTemperatureMinimumMireds").get< uint16_t >();
       if (jsn.at("ColorTemperatureMaximumMireds").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  color_temperature_maximum_mireds = jsn.at("ColorTemperatureMaximumMireds").get< uint8_t * >();
+  color_temperature_maximum_mireds = jsn.at("ColorTemperatureMaximumMireds").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -11738,13 +11738,13 @@ void uic_mqtt_dotdot_parse_color_control_step_color_temperature(
   nlohmann::json &jsn,
   CCStepMode &step_mode,
   
-  int16_t &step_size,
+  uint16_t &step_size,
   
-  int16_t &transition_time,
+  uint16_t &transition_time,
   
-  uint8_t * &color_temperature_minimum_mireds,
+  uint16_t &color_temperature_minimum_mireds,
   
-  uint8_t * &color_temperature_maximum_mireds,
+  uint16_t &color_temperature_maximum_mireds,
   
   uint8_t &options_mask,
   
@@ -11768,25 +11768,25 @@ void uic_mqtt_dotdot_parse_color_control_step_color_temperature(
     return;
   }
         
-  step_size = jsn.at("StepSize").get< int16_t >();
+  step_size = jsn.at("StepSize").get< uint16_t >();
       if (jsn.at("TransitionTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  transition_time = jsn.at("TransitionTime").get< int16_t >();
+  transition_time = jsn.at("TransitionTime").get< uint16_t >();
       if (jsn.at("ColorTemperatureMinimumMireds").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  color_temperature_minimum_mireds = jsn.at("ColorTemperatureMinimumMireds").get< uint8_t * >();
+  color_temperature_minimum_mireds = jsn.at("ColorTemperatureMinimumMireds").get< uint16_t >();
       if (jsn.at("ColorTemperatureMaximumMireds").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  color_temperature_maximum_mireds = jsn.at("ColorTemperatureMaximumMireds").get< uint8_t * >();
+  color_temperature_maximum_mireds = jsn.at("ColorTemperatureMaximumMireds").get< uint16_t >();
       if (jsn.at("OptionsMask").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -11821,84 +11821,84 @@ void uic_mqtt_dotdot_parse_color_control_write_attributes(
 
   if (jsn.find("WhitePointX") != jsn.end()) {
 
-    new_state.white_pointx = jsn.at("WhitePointX").get<int16_t>();
+    new_state.white_pointx = jsn.at("WhitePointX").get<uint16_t>();
         
     new_updated_state.white_pointx = true;
   }
 
   if (jsn.find("WhitePointY") != jsn.end()) {
 
-    new_state.white_pointy = jsn.at("WhitePointY").get<int16_t>();
+    new_state.white_pointy = jsn.at("WhitePointY").get<uint16_t>();
         
     new_updated_state.white_pointy = true;
   }
 
   if (jsn.find("ColorPointRX") != jsn.end()) {
 
-    new_state.color_pointrx = jsn.at("ColorPointRX").get<int16_t>();
+    new_state.color_pointrx = jsn.at("ColorPointRX").get<uint16_t>();
         
     new_updated_state.color_pointrx = true;
   }
 
   if (jsn.find("ColorPointRY") != jsn.end()) {
 
-    new_state.color_pointry = jsn.at("ColorPointRY").get<int16_t>();
+    new_state.color_pointry = jsn.at("ColorPointRY").get<uint16_t>();
         
     new_updated_state.color_pointry = true;
   }
 
   if (jsn.find("ColorPointRIntensity") != jsn.end()) {
 
-    new_state.color_pointr_intensity = jsn.at("ColorPointRIntensity").get<int8_t>();
+    new_state.color_pointr_intensity = jsn.at("ColorPointRIntensity").get<uint8_t>();
         
     new_updated_state.color_pointr_intensity = true;
   }
 
   if (jsn.find("ColorPointGX") != jsn.end()) {
 
-    new_state.color_pointgx = jsn.at("ColorPointGX").get<int16_t>();
+    new_state.color_pointgx = jsn.at("ColorPointGX").get<uint16_t>();
         
     new_updated_state.color_pointgx = true;
   }
 
   if (jsn.find("ColorPointGY") != jsn.end()) {
 
-    new_state.color_pointgy = jsn.at("ColorPointGY").get<int16_t>();
+    new_state.color_pointgy = jsn.at("ColorPointGY").get<uint16_t>();
         
     new_updated_state.color_pointgy = true;
   }
 
   if (jsn.find("ColorPointGIntensity") != jsn.end()) {
 
-    new_state.color_pointg_intensity = jsn.at("ColorPointGIntensity").get<int8_t>();
+    new_state.color_pointg_intensity = jsn.at("ColorPointGIntensity").get<uint8_t>();
         
     new_updated_state.color_pointg_intensity = true;
   }
 
   if (jsn.find("ColorPointBX") != jsn.end()) {
 
-    new_state.color_pointbx = jsn.at("ColorPointBX").get<int16_t>();
+    new_state.color_pointbx = jsn.at("ColorPointBX").get<uint16_t>();
         
     new_updated_state.color_pointbx = true;
   }
 
   if (jsn.find("ColorPointBY") != jsn.end()) {
 
-    new_state.color_pointby = jsn.at("ColorPointBY").get<int16_t>();
+    new_state.color_pointby = jsn.at("ColorPointBY").get<uint16_t>();
         
     new_updated_state.color_pointby = true;
   }
 
   if (jsn.find("ColorPointBIntensity") != jsn.end()) {
 
-    new_state.color_pointb_intensity = jsn.at("ColorPointBIntensity").get<int8_t>();
+    new_state.color_pointb_intensity = jsn.at("ColorPointBIntensity").get<uint8_t>();
         
     new_updated_state.color_pointb_intensity = true;
   }
 
   if (jsn.find("StartUpColorTemperatureMireds") != jsn.end()) {
 
-    new_state.start_up_color_temperature_mireds = jsn.at("StartUpColorTemperatureMireds").get<int16_t>();
+    new_state.start_up_color_temperature_mireds = jsn.at("StartUpColorTemperatureMireds").get<uint16_t>();
         
     new_updated_state.start_up_color_temperature_mireds = true;
   }
@@ -11921,42 +11921,42 @@ void uic_mqtt_dotdot_parse_ballast_configuration_write_attributes(
 
   if (jsn.find("MinLevel") != jsn.end()) {
 
-    new_state.min_level = jsn.at("MinLevel").get<int8_t>();
+    new_state.min_level = jsn.at("MinLevel").get<uint8_t>();
         
     new_updated_state.min_level = true;
   }
 
   if (jsn.find("MaxLevel") != jsn.end()) {
 
-    new_state.max_level = jsn.at("MaxLevel").get<int8_t>();
+    new_state.max_level = jsn.at("MaxLevel").get<uint8_t>();
         
     new_updated_state.max_level = true;
   }
 
   if (jsn.find("PowerOnLevel") != jsn.end()) {
 
-    new_state.power_on_level = jsn.at("PowerOnLevel").get<int8_t>();
+    new_state.power_on_level = jsn.at("PowerOnLevel").get<uint8_t>();
         
     new_updated_state.power_on_level = true;
   }
 
   if (jsn.find("PowerOnFadeTime") != jsn.end()) {
 
-    new_state.power_on_fade_time = jsn.at("PowerOnFadeTime").get<int16_t>();
+    new_state.power_on_fade_time = jsn.at("PowerOnFadeTime").get<uint16_t>();
         
     new_updated_state.power_on_fade_time = true;
   }
 
   if (jsn.find("IntrinsicBallastFactor") != jsn.end()) {
 
-    new_state.intrinsic_ballast_factor = jsn.at("IntrinsicBallastFactor").get<int8_t>();
+    new_state.intrinsic_ballast_factor = jsn.at("IntrinsicBallastFactor").get<uint8_t>();
         
     new_updated_state.intrinsic_ballast_factor = true;
   }
 
   if (jsn.find("BallastFactorAdjustment") != jsn.end()) {
 
-    new_state.ballast_factor_adjustment = jsn.at("BallastFactorAdjustment").get<int8_t>();
+    new_state.ballast_factor_adjustment = jsn.at("BallastFactorAdjustment").get<uint8_t>();
         
     new_updated_state.ballast_factor_adjustment = true;
   }
@@ -11977,14 +11977,14 @@ void uic_mqtt_dotdot_parse_ballast_configuration_write_attributes(
 
   if (jsn.find("LampRatedHours") != jsn.end()) {
 
-    new_state.lamp_rated_hours = jsn.at("LampRatedHours").get<int32_t>();
+    new_state.lamp_rated_hours = jsn.at("LampRatedHours").get<uint32_t>();
         
     new_updated_state.lamp_rated_hours = true;
   }
 
   if (jsn.find("LampBurnHours") != jsn.end()) {
 
-    new_state.lamp_burn_hours = jsn.at("LampBurnHours").get<int32_t>();
+    new_state.lamp_burn_hours = jsn.at("LampBurnHours").get<uint32_t>();
         
     new_updated_state.lamp_burn_hours = true;
   }
@@ -11998,7 +11998,7 @@ void uic_mqtt_dotdot_parse_ballast_configuration_write_attributes(
 
   if (jsn.find("LampBurnHoursTripPoint") != jsn.end()) {
 
-    new_state.lamp_burn_hours_trip_point = jsn.at("LampBurnHoursTripPoint").get<int32_t>();
+    new_state.lamp_burn_hours_trip_point = jsn.at("LampBurnHoursTripPoint").get<uint32_t>();
         
     new_updated_state.lamp_burn_hours_trip_point = true;
   }
@@ -12037,7 +12037,7 @@ void uic_mqtt_dotdot_parse_illuminance_level_sensing_write_attributes(
 
   if (jsn.find("IlluminanceTargetLevel") != jsn.end()) {
 
-    new_state.illuminance_target_level = jsn.at("IlluminanceTargetLevel").get<int16_t>();
+    new_state.illuminance_target_level = jsn.at("IlluminanceTargetLevel").get<uint16_t>();
         
     new_updated_state.illuminance_target_level = true;
   }
@@ -12124,63 +12124,63 @@ void uic_mqtt_dotdot_parse_occupancy_sensing_write_attributes(
 
   if (jsn.find("PIROccupiedToUnoccupiedDelay") != jsn.end()) {
 
-    new_state.pir_occupied_to_unoccupied_delay = jsn.at("PIROccupiedToUnoccupiedDelay").get<int16_t>();
+    new_state.pir_occupied_to_unoccupied_delay = jsn.at("PIROccupiedToUnoccupiedDelay").get<uint16_t>();
         
     new_updated_state.pir_occupied_to_unoccupied_delay = true;
   }
 
   if (jsn.find("PIRUnoccupiedToOccupiedDelay") != jsn.end()) {
 
-    new_state.pir_unoccupied_to_occupied_delay = jsn.at("PIRUnoccupiedToOccupiedDelay").get<int16_t>();
+    new_state.pir_unoccupied_to_occupied_delay = jsn.at("PIRUnoccupiedToOccupiedDelay").get<uint16_t>();
         
     new_updated_state.pir_unoccupied_to_occupied_delay = true;
   }
 
   if (jsn.find("PIRUnoccupiedToOccupiedThreshold") != jsn.end()) {
 
-    new_state.pir_unoccupied_to_occupied_threshold = jsn.at("PIRUnoccupiedToOccupiedThreshold").get<int8_t>();
+    new_state.pir_unoccupied_to_occupied_threshold = jsn.at("PIRUnoccupiedToOccupiedThreshold").get<uint8_t>();
         
     new_updated_state.pir_unoccupied_to_occupied_threshold = true;
   }
 
   if (jsn.find("UltrasonicOccupiedToUnoccupiedDelay") != jsn.end()) {
 
-    new_state.ultrasonic_occupied_to_unoccupied_delay = jsn.at("UltrasonicOccupiedToUnoccupiedDelay").get<int16_t>();
+    new_state.ultrasonic_occupied_to_unoccupied_delay = jsn.at("UltrasonicOccupiedToUnoccupiedDelay").get<uint16_t>();
         
     new_updated_state.ultrasonic_occupied_to_unoccupied_delay = true;
   }
 
   if (jsn.find("UltrasonicUnoccupiedToOccupiedDelay") != jsn.end()) {
 
-    new_state.ultrasonic_unoccupied_to_occupied_delay = jsn.at("UltrasonicUnoccupiedToOccupiedDelay").get<int16_t>();
+    new_state.ultrasonic_unoccupied_to_occupied_delay = jsn.at("UltrasonicUnoccupiedToOccupiedDelay").get<uint16_t>();
         
     new_updated_state.ultrasonic_unoccupied_to_occupied_delay = true;
   }
 
   if (jsn.find("UltrasonicUnoccupiedToOccupiedThreshold") != jsn.end()) {
 
-    new_state.ultrasonic_unoccupied_to_occupied_threshold = jsn.at("UltrasonicUnoccupiedToOccupiedThreshold").get<int8_t>();
+    new_state.ultrasonic_unoccupied_to_occupied_threshold = jsn.at("UltrasonicUnoccupiedToOccupiedThreshold").get<uint8_t>();
         
     new_updated_state.ultrasonic_unoccupied_to_occupied_threshold = true;
   }
 
   if (jsn.find("PhysicalContactOccupiedToUnoccupiedDelay") != jsn.end()) {
 
-    new_state.physical_contact_occupied_to_unoccupied_delay = jsn.at("PhysicalContactOccupiedToUnoccupiedDelay").get<int16_t>();
+    new_state.physical_contact_occupied_to_unoccupied_delay = jsn.at("PhysicalContactOccupiedToUnoccupiedDelay").get<uint16_t>();
         
     new_updated_state.physical_contact_occupied_to_unoccupied_delay = true;
   }
 
   if (jsn.find("PhysicalContactUnoccupiedToOccupiedDelay") != jsn.end()) {
 
-    new_state.physical_contact_unoccupied_to_occupied_delay = jsn.at("PhysicalContactUnoccupiedToOccupiedDelay").get<int16_t>();
+    new_state.physical_contact_unoccupied_to_occupied_delay = jsn.at("PhysicalContactUnoccupiedToOccupiedDelay").get<uint16_t>();
         
     new_updated_state.physical_contact_unoccupied_to_occupied_delay = true;
   }
 
   if (jsn.find("PhysicalContactUnoccupiedToOccupiedThreshold") != jsn.end()) {
 
-    new_state.physical_contact_unoccupied_to_occupied_threshold = jsn.at("PhysicalContactUnoccupiedToOccupiedThreshold").get<int8_t>();
+    new_state.physical_contact_unoccupied_to_occupied_threshold = jsn.at("PhysicalContactUnoccupiedToOccupiedThreshold").get<uint8_t>();
         
     new_updated_state.physical_contact_unoccupied_to_occupied_threshold = true;
   }
@@ -12343,7 +12343,7 @@ void uic_mqtt_dotdot_parse_ias_zone_zone_enroll_response(
   nlohmann::json &jsn,
   ZoneEnrollResponseEnrollResponseCode &enroll_response_code,
   
-  int8_t &zoneid
+  uint8_t &zoneid
   
 ) {
 
@@ -12363,7 +12363,7 @@ void uic_mqtt_dotdot_parse_ias_zone_zone_enroll_response(
     return;
   }
         
-  zoneid = jsn.at("ZoneID").get< int8_t >();
+  zoneid = jsn.at("ZoneID").get< uint8_t >();
     }
 
 
@@ -12410,9 +12410,9 @@ void uic_mqtt_dotdot_parse_ias_zone_zone_status_change_notification(
   
   uint8_t &extended_status,
   
-  int8_t &zoneid,
+  uint8_t &zoneid,
   
-  int16_t &delay
+  uint16_t &delay
   
 ) {
 
@@ -12431,13 +12431,13 @@ void uic_mqtt_dotdot_parse_ias_zone_zone_status_change_notification(
     return;
   }
         
-  zoneid = jsn.at("ZoneID").get< int8_t >();
+  zoneid = jsn.at("ZoneID").get< uint8_t >();
       if (jsn.at("Delay").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  delay = jsn.at("Delay").get< int16_t >();
+  delay = jsn.at("Delay").get< uint16_t >();
     }
 
 
@@ -12502,7 +12502,7 @@ void uic_mqtt_dotdot_parse_ias_zone_zone_enroll_request(
   nlohmann::json &jsn,
   IasZoneType &zone_type,
   
-  int16_t &manufacturer_code
+  uint16_t &manufacturer_code
   
 ) {
 
@@ -12522,7 +12522,7 @@ void uic_mqtt_dotdot_parse_ias_zone_zone_enroll_request(
     return;
   }
         
-  manufacturer_code = jsn.at("ManufacturerCode").get< int16_t >();
+  manufacturer_code = jsn.at("ManufacturerCode").get< uint16_t >();
     }
 
 
@@ -12555,9 +12555,9 @@ std::string get_json_payload_for_ias_zone_initiate_test_mode_command(
 
 void uic_mqtt_dotdot_parse_ias_zone_initiate_test_mode(
   nlohmann::json &jsn,
-  int8_t &test_mode_duration,
+  uint8_t &test_mode_duration,
   
-  int8_t &current_zone_sensitivity_level
+  uint8_t &current_zone_sensitivity_level
   
 ) {
 
@@ -12566,13 +12566,13 @@ void uic_mqtt_dotdot_parse_ias_zone_initiate_test_mode(
     return;
   }
         
-  test_mode_duration = jsn.at("TestModeDuration").get< int8_t >();
+  test_mode_duration = jsn.at("TestModeDuration").get< uint8_t >();
       if (jsn.at("CurrentZoneSensitivityLevel").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  current_zone_sensitivity_level = jsn.at("CurrentZoneSensitivityLevel").get< int8_t >();
+  current_zone_sensitivity_level = jsn.at("CurrentZoneSensitivityLevel").get< uint8_t >();
     }
 
 
@@ -12597,7 +12597,7 @@ void uic_mqtt_dotdot_parse_ias_zone_write_attributes(
 
   if (jsn.find("CurrentZoneSensitivityLevel") != jsn.end()) {
 
-    new_state.current_zone_sensitivity_level = jsn.at("CurrentZoneSensitivityLevel").get<int8_t>();
+    new_state.current_zone_sensitivity_level = jsn.at("CurrentZoneSensitivityLevel").get<uint8_t>();
         
     new_updated_state.current_zone_sensitivity_level = true;
   }
@@ -12658,9 +12658,9 @@ void uic_mqtt_dotdot_parse_iaswd_start_warning(
   nlohmann::json &jsn,
   uint8_t &siren_configuration,
   
-  int16_t &warning_duration,
+  uint16_t &warning_duration,
   
-  int8_t &strobe_duty_cycle,
+  uint8_t &strobe_duty_cycle,
   
   IaswdLevel &strobe_level
   
@@ -12682,13 +12682,13 @@ void uic_mqtt_dotdot_parse_iaswd_start_warning(
     return;
   }
         
-  warning_duration = jsn.at("WarningDuration").get< int16_t >();
+  warning_duration = jsn.at("WarningDuration").get< uint16_t >();
       if (jsn.at("StrobeDutyCycle").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  strobe_duty_cycle = jsn.at("StrobeDutyCycle").get< int8_t >();
+  strobe_duty_cycle = jsn.at("StrobeDutyCycle").get< uint8_t >();
       if (jsn.at("StrobeLevel").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -12750,7 +12750,7 @@ void uic_mqtt_dotdot_parse_iaswd_write_attributes(
 
   if (jsn.find("MaxDuration") != jsn.end()) {
 
-    new_state.max_duration = jsn.at("MaxDuration").get<int16_t>();
+    new_state.max_duration = jsn.at("MaxDuration").get<uint16_t>();
         
     new_updated_state.max_duration = true;
   }
@@ -12809,7 +12809,7 @@ std::string get_json_payload_for_electrical_measurement_get_profile_info_respons
   json_payload["MaxNumberOfIntervals"] = nlohmann::json(fields->max_number_of_intervals);
   command_with_no_fields = false;
   // We assume arrays are Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["ListOfAttributes"] = std::vector< uint8_t >(
+  json_payload["ListOfAttributes"] = std::vector< uint16_t >(
     fields->list_of_attributes,
     fields->list_of_attributes + fields->list_of_attributes_count);
 
@@ -12825,13 +12825,13 @@ std::string get_json_payload_for_electrical_measurement_get_profile_info_respons
 
 void uic_mqtt_dotdot_parse_electrical_measurement_get_profile_info_response(
   nlohmann::json &jsn,
-  int8_t &profile_count,
+  uint8_t &profile_count,
   
   ProfileIntervalPeriod &profile_interval_period,
   
-  int8_t &max_number_of_intervals,
+  uint8_t &max_number_of_intervals,
   
-  std::vector<uint8_t> &list_of_attributes
+  std::vector<uint16_t> &list_of_attributes
 
 ) {
 
@@ -12846,7 +12846,7 @@ void uic_mqtt_dotdot_parse_electrical_measurement_get_profile_info_response(
     return;
   }
         
-  profile_count = jsn.at("ProfileCount").get< int8_t >();
+  profile_count = jsn.at("ProfileCount").get< uint8_t >();
       if (jsn.at("ProfileIntervalPeriod").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -12857,13 +12857,13 @@ void uic_mqtt_dotdot_parse_electrical_measurement_get_profile_info_response(
     return;
   }
         
-  max_number_of_intervals = jsn.at("MaxNumberOfIntervals").get< int8_t >();
+  max_number_of_intervals = jsn.at("MaxNumberOfIntervals").get< uint8_t >();
       if (jsn.at("ListOfAttributes").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  list_of_attributes = jsn.at("ListOfAttributes").get< std::vector< uint8_t >>();
+  list_of_attributes = jsn.at("ListOfAttributes").get< std::vector< uint16_t >>();
       }
 
 
@@ -12939,7 +12939,7 @@ std::string get_json_payload_for_electrical_measurement_get_measurement_profile_
   json_payload["AttributeId"] = nlohmann::json(fields->attribute_id);
   command_with_no_fields = false;
   // We assume arrays are Non-enum and non-bitmask (struct, string or scalar)
-  json_payload["Intervals"] = std::vector< int8_t >(
+  json_payload["Intervals"] = std::vector< uint8_t >(
     fields->intervals,
     fields->intervals + fields->intervals_count);
 
@@ -12955,17 +12955,17 @@ std::string get_json_payload_for_electrical_measurement_get_measurement_profile_
 
 void uic_mqtt_dotdot_parse_electrical_measurement_get_measurement_profile_response(
   nlohmann::json &jsn,
-  uint8_t &start_time,
+  uint32_t &start_time,
   
   GetMeasurementProfileResponseStatus &status,
   
   ProfileIntervalPeriod &profile_interval_period,
   
-  int8_t &number_of_intervals_delivered,
+  uint8_t &number_of_intervals_delivered,
   
-  uint8_t &attribute_id,
+  uint16_t &attribute_id,
   
-  std::vector<int8_t> &intervals
+  std::vector<uint8_t> &intervals
 
 ) {
 
@@ -12986,7 +12986,7 @@ void uic_mqtt_dotdot_parse_electrical_measurement_get_measurement_profile_respon
     return;
   }
         
-  start_time = jsn.at("StartTime").get< uint8_t >();
+  start_time = jsn.at("StartTime").get< uint32_t >();
       if (jsn.at("Status").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -13002,19 +13002,19 @@ void uic_mqtt_dotdot_parse_electrical_measurement_get_measurement_profile_respon
     return;
   }
         
-  number_of_intervals_delivered = jsn.at("NumberOfIntervalsDelivered").get< int8_t >();
+  number_of_intervals_delivered = jsn.at("NumberOfIntervalsDelivered").get< uint8_t >();
       if (jsn.at("AttributeId").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  attribute_id = jsn.at("AttributeId").get< uint8_t >();
+  attribute_id = jsn.at("AttributeId").get< uint16_t >();
       if (jsn.at("Intervals").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  intervals = jsn.at("Intervals").get< std::vector< int8_t >>();
+  intervals = jsn.at("Intervals").get< std::vector< uint8_t >>();
       }
 
 
@@ -13051,11 +13051,11 @@ std::string get_json_payload_for_electrical_measurement_get_measurement_profile_
 
 void uic_mqtt_dotdot_parse_electrical_measurement_get_measurement_profile(
   nlohmann::json &jsn,
-  uint8_t &attributeid,
+  uint16_t &attributeid,
   
-  uint8_t &start_time,
+  uint32_t &start_time,
   
-  int8_t &number_of_intervals
+  uint8_t &number_of_intervals
   
 ) {
 
@@ -13064,19 +13064,19 @@ void uic_mqtt_dotdot_parse_electrical_measurement_get_measurement_profile(
     return;
   }
         
-  attributeid = jsn.at("AttributeID").get< uint8_t >();
+  attributeid = jsn.at("AttributeID").get< uint16_t >();
       if (jsn.at("StartTime").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  start_time = jsn.at("StartTime").get< uint8_t >();
+  start_time = jsn.at("StartTime").get< uint32_t >();
       if (jsn.at("NumberOfIntervals").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  number_of_intervals = jsn.at("NumberOfIntervals").get< int8_t >();
+  number_of_intervals = jsn.at("NumberOfIntervals").get< uint8_t >();
     }
 
 
@@ -13094,49 +13094,49 @@ void uic_mqtt_dotdot_parse_electrical_measurement_write_attributes(
 
   if (jsn.find("AverageRMSVoltageMeasurementPeriod") != jsn.end()) {
 
-    new_state.average_rms_voltage_measurement_period = jsn.at("AverageRMSVoltageMeasurementPeriod").get<int16_t>();
+    new_state.average_rms_voltage_measurement_period = jsn.at("AverageRMSVoltageMeasurementPeriod").get<uint16_t>();
         
     new_updated_state.average_rms_voltage_measurement_period = true;
   }
 
   if (jsn.find("AverageRMSOverVoltageCounter") != jsn.end()) {
 
-    new_state.average_rms_over_voltage_counter = jsn.at("AverageRMSOverVoltageCounter").get<int16_t>();
+    new_state.average_rms_over_voltage_counter = jsn.at("AverageRMSOverVoltageCounter").get<uint16_t>();
         
     new_updated_state.average_rms_over_voltage_counter = true;
   }
 
   if (jsn.find("AverageRMSUnderVoltageCounter") != jsn.end()) {
 
-    new_state.average_rms_under_voltage_counter = jsn.at("AverageRMSUnderVoltageCounter").get<int16_t>();
+    new_state.average_rms_under_voltage_counter = jsn.at("AverageRMSUnderVoltageCounter").get<uint16_t>();
         
     new_updated_state.average_rms_under_voltage_counter = true;
   }
 
   if (jsn.find("RMSExtremeOverVoltagePeriod") != jsn.end()) {
 
-    new_state.rms_extreme_over_voltage_period = jsn.at("RMSExtremeOverVoltagePeriod").get<int16_t>();
+    new_state.rms_extreme_over_voltage_period = jsn.at("RMSExtremeOverVoltagePeriod").get<uint16_t>();
         
     new_updated_state.rms_extreme_over_voltage_period = true;
   }
 
   if (jsn.find("RMSExtremeUnderVoltagePeriod") != jsn.end()) {
 
-    new_state.rms_extreme_under_voltage_period = jsn.at("RMSExtremeUnderVoltagePeriod").get<int16_t>();
+    new_state.rms_extreme_under_voltage_period = jsn.at("RMSExtremeUnderVoltagePeriod").get<uint16_t>();
         
     new_updated_state.rms_extreme_under_voltage_period = true;
   }
 
   if (jsn.find("RMSVoltageSagPeriod") != jsn.end()) {
 
-    new_state.rms_voltage_sag_period = jsn.at("RMSVoltageSagPeriod").get<int16_t>();
+    new_state.rms_voltage_sag_period = jsn.at("RMSVoltageSagPeriod").get<uint16_t>();
         
     new_updated_state.rms_voltage_sag_period = true;
   }
 
   if (jsn.find("RMSVoltageSwellPeriod") != jsn.end()) {
 
-    new_state.rms_voltage_swell_period = jsn.at("RMSVoltageSwellPeriod").get<int16_t>();
+    new_state.rms_voltage_swell_period = jsn.at("RMSVoltageSwellPeriod").get<uint16_t>();
         
     new_updated_state.rms_voltage_swell_period = true;
   }
@@ -13185,98 +13185,98 @@ void uic_mqtt_dotdot_parse_electrical_measurement_write_attributes(
 
   if (jsn.find("AverageRMSVoltageMeasurementPeriodPhB") != jsn.end()) {
 
-    new_state.average_rms_voltage_measurement_period_phb = jsn.at("AverageRMSVoltageMeasurementPeriodPhB").get<int16_t>();
+    new_state.average_rms_voltage_measurement_period_phb = jsn.at("AverageRMSVoltageMeasurementPeriodPhB").get<uint16_t>();
         
     new_updated_state.average_rms_voltage_measurement_period_phb = true;
   }
 
   if (jsn.find("AverageRMSOverVoltageCounterPhB") != jsn.end()) {
 
-    new_state.average_rms_over_voltage_counter_phb = jsn.at("AverageRMSOverVoltageCounterPhB").get<int16_t>();
+    new_state.average_rms_over_voltage_counter_phb = jsn.at("AverageRMSOverVoltageCounterPhB").get<uint16_t>();
         
     new_updated_state.average_rms_over_voltage_counter_phb = true;
   }
 
   if (jsn.find("AverageRMSUnderVoltageCounterPhB") != jsn.end()) {
 
-    new_state.average_rms_under_voltage_counter_phb = jsn.at("AverageRMSUnderVoltageCounterPhB").get<int16_t>();
+    new_state.average_rms_under_voltage_counter_phb = jsn.at("AverageRMSUnderVoltageCounterPhB").get<uint16_t>();
         
     new_updated_state.average_rms_under_voltage_counter_phb = true;
   }
 
   if (jsn.find("RMSExtremeOverVoltagePeriodPhB") != jsn.end()) {
 
-    new_state.rms_extreme_over_voltage_period_phb = jsn.at("RMSExtremeOverVoltagePeriodPhB").get<int16_t>();
+    new_state.rms_extreme_over_voltage_period_phb = jsn.at("RMSExtremeOverVoltagePeriodPhB").get<uint16_t>();
         
     new_updated_state.rms_extreme_over_voltage_period_phb = true;
   }
 
   if (jsn.find("RMSExtremeUnderVoltagePeriodPhB") != jsn.end()) {
 
-    new_state.rms_extreme_under_voltage_period_phb = jsn.at("RMSExtremeUnderVoltagePeriodPhB").get<int16_t>();
+    new_state.rms_extreme_under_voltage_period_phb = jsn.at("RMSExtremeUnderVoltagePeriodPhB").get<uint16_t>();
         
     new_updated_state.rms_extreme_under_voltage_period_phb = true;
   }
 
   if (jsn.find("RMSVoltageSagPeriodPhB") != jsn.end()) {
 
-    new_state.rms_voltage_sag_period_phb = jsn.at("RMSVoltageSagPeriodPhB").get<int16_t>();
+    new_state.rms_voltage_sag_period_phb = jsn.at("RMSVoltageSagPeriodPhB").get<uint16_t>();
         
     new_updated_state.rms_voltage_sag_period_phb = true;
   }
 
   if (jsn.find("RMSVoltageSwellPeriodPhB") != jsn.end()) {
 
-    new_state.rms_voltage_swell_period_phb = jsn.at("RMSVoltageSwellPeriodPhB").get<int16_t>();
+    new_state.rms_voltage_swell_period_phb = jsn.at("RMSVoltageSwellPeriodPhB").get<uint16_t>();
         
     new_updated_state.rms_voltage_swell_period_phb = true;
   }
 
   if (jsn.find("AverageRMSVoltageMeasurementPeriodPhC") != jsn.end()) {
 
-    new_state.average_rms_voltage_measurement_period_phc = jsn.at("AverageRMSVoltageMeasurementPeriodPhC").get<int16_t>();
+    new_state.average_rms_voltage_measurement_period_phc = jsn.at("AverageRMSVoltageMeasurementPeriodPhC").get<uint16_t>();
         
     new_updated_state.average_rms_voltage_measurement_period_phc = true;
   }
 
   if (jsn.find("AverageRMSOverVoltageCounterPhC") != jsn.end()) {
 
-    new_state.average_rms_over_voltage_counter_phc = jsn.at("AverageRMSOverVoltageCounterPhC").get<int16_t>();
+    new_state.average_rms_over_voltage_counter_phc = jsn.at("AverageRMSOverVoltageCounterPhC").get<uint16_t>();
         
     new_updated_state.average_rms_over_voltage_counter_phc = true;
   }
 
   if (jsn.find("AverageRMSUnderVoltageCounterPhC") != jsn.end()) {
 
-    new_state.average_rms_under_voltage_counter_phc = jsn.at("AverageRMSUnderVoltageCounterPhC").get<int16_t>();
+    new_state.average_rms_under_voltage_counter_phc = jsn.at("AverageRMSUnderVoltageCounterPhC").get<uint16_t>();
         
     new_updated_state.average_rms_under_voltage_counter_phc = true;
   }
 
   if (jsn.find("RMSExtremeOverVoltagePeriodPhC") != jsn.end()) {
 
-    new_state.rms_extreme_over_voltage_period_phc = jsn.at("RMSExtremeOverVoltagePeriodPhC").get<int16_t>();
+    new_state.rms_extreme_over_voltage_period_phc = jsn.at("RMSExtremeOverVoltagePeriodPhC").get<uint16_t>();
         
     new_updated_state.rms_extreme_over_voltage_period_phc = true;
   }
 
   if (jsn.find("RMSExtremeUnderVoltagePeriodPhC") != jsn.end()) {
 
-    new_state.rms_extreme_under_voltage_period_phc = jsn.at("RMSExtremeUnderVoltagePeriodPhC").get<int16_t>();
+    new_state.rms_extreme_under_voltage_period_phc = jsn.at("RMSExtremeUnderVoltagePeriodPhC").get<uint16_t>();
         
     new_updated_state.rms_extreme_under_voltage_period_phc = true;
   }
 
   if (jsn.find("RMSVoltageSagPeriodPhC") != jsn.end()) {
 
-    new_state.rms_voltage_sag_period_phc = jsn.at("RMSVoltageSagPeriodPhC").get<int16_t>();
+    new_state.rms_voltage_sag_period_phc = jsn.at("RMSVoltageSagPeriodPhC").get<uint16_t>();
         
     new_updated_state.rms_voltage_sag_period_phc = true;
   }
 
   if (jsn.find("RMSVoltageSwellPeriodPhC") != jsn.end()) {
 
-    new_state.rms_voltage_swell_period_phc = jsn.at("RMSVoltageSwellPeriodPhC").get<int16_t>();
+    new_state.rms_voltage_swell_period_phc = jsn.at("RMSVoltageSwellPeriodPhC").get<uint16_t>();
         
     new_updated_state.rms_voltage_swell_period_phc = true;
   }
@@ -13419,13 +13419,13 @@ void uic_mqtt_dotdot_parse_protocol_controller_rf_telemetry_tx_report(
   
   bool &transmission_successful,
   
-  int16_t &transmission_time_ms,
+  uint16_t &transmission_time_ms,
   
   int8_t &tx_powerd_bm,
   
-  int8_t &tx_channel,
+  uint8_t &tx_channel,
   
-  int8_t &routing_attempts,
+  uint8_t &routing_attempts,
   
   bool &route_changed,
   
@@ -13439,7 +13439,7 @@ void uic_mqtt_dotdot_parse_protocol_controller_rf_telemetry_tx_report(
 
   int8_t &ackrssi,
   
-  int8_t &ack_channel,
+  uint8_t &ack_channel,
   
   std::string &last_route_failed_link_functionalunid,
   
@@ -13482,7 +13482,7 @@ void uic_mqtt_dotdot_parse_protocol_controller_rf_telemetry_tx_report(
     return;
   }
         
-  transmission_time_ms = jsn.at("TransmissionTimeMs").get< int16_t >();
+  transmission_time_ms = jsn.at("TransmissionTimeMs").get< uint16_t >();
       if (jsn.at("TxPowerdBm").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -13494,13 +13494,13 @@ void uic_mqtt_dotdot_parse_protocol_controller_rf_telemetry_tx_report(
     return;
   }
         
-  tx_channel = jsn.at("TxChannel").get< int8_t >();
+  tx_channel = jsn.at("TxChannel").get< uint8_t >();
       if (jsn.at("RoutingAttempts").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  routing_attempts = jsn.at("RoutingAttempts").get< int8_t >();
+  routing_attempts = jsn.at("RoutingAttempts").get< uint8_t >();
       if (jsn.at("RouteChanged").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -13543,7 +13543,7 @@ void uic_mqtt_dotdot_parse_protocol_controller_rf_telemetry_tx_report(
     return;
   }
         
-  ack_channel = jsn.at("AckChannel").get< int8_t >();
+  ack_channel = jsn.at("AckChannel").get< uint8_t >();
       if (jsn.at("LastRouteFailedLinkFunctionalUNID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -13774,7 +13774,7 @@ void uic_mqtt_dotdot_parse_binding_bind(
   
   std::string &destination_unid,
   
-  int8_t &destination_ep
+  uint8_t &destination_ep
   
 ) {
 
@@ -13795,7 +13795,7 @@ void uic_mqtt_dotdot_parse_binding_bind(
     return;
   }
         
-  destination_ep = jsn.at("DestinationEp").get< int8_t >();
+  destination_ep = jsn.at("DestinationEp").get< uint8_t >();
     }
 
 
@@ -13836,7 +13836,7 @@ void uic_mqtt_dotdot_parse_binding_unbind(
   
   std::string &destination_unid,
   
-  int8_t &destination_ep
+  uint8_t &destination_ep
   
 ) {
 
@@ -13857,7 +13857,7 @@ void uic_mqtt_dotdot_parse_binding_unbind(
     return;
   }
         
-  destination_ep = jsn.at("DestinationEp").get< int8_t >();
+  destination_ep = jsn.at("DestinationEp").get< uint8_t >();
     }
 
 
@@ -13967,7 +13967,7 @@ void uic_mqtt_dotdot_parse_system_metrics_write_attributes(
 
   if (jsn.find("ReportingIntervalSeconds") != jsn.end()) {
 
-    new_state.reporting_interval_seconds = jsn.at("ReportingIntervalSeconds").get<int32_t>();
+    new_state.reporting_interval_seconds = jsn.at("ReportingIntervalSeconds").get<uint32_t>();
         
     new_updated_state.reporting_interval_seconds = true;
   }
@@ -14102,14 +14102,14 @@ void uic_mqtt_dotdot_parse_application_monitoring_write_attributes(
 
   if (jsn.find("MQTTStatisticsReportingIntervalSeconds") != jsn.end()) {
 
-    new_state.mqtt_statistics_reporting_interval_seconds = jsn.at("MQTTStatisticsReportingIntervalSeconds").get<int32_t>();
+    new_state.mqtt_statistics_reporting_interval_seconds = jsn.at("MQTTStatisticsReportingIntervalSeconds").get<uint32_t>();
         
     new_updated_state.mqtt_statistics_reporting_interval_seconds = true;
   }
 
   if (jsn.find("ApplicationStatisticsReportingIntervalSeconds") != jsn.end()) {
 
-    new_state.application_statistics_reporting_interval_seconds = jsn.at("ApplicationStatisticsReportingIntervalSeconds").get<int32_t>();
+    new_state.application_statistics_reporting_interval_seconds = jsn.at("ApplicationStatisticsReportingIntervalSeconds").get<uint32_t>();
         
     new_updated_state.application_statistics_reporting_interval_seconds = true;
   }
@@ -14173,7 +14173,7 @@ std::string get_json_payload_for_configuration_parameters_discover_parameter_com
 
 void uic_mqtt_dotdot_parse_configuration_parameters_discover_parameter(
   nlohmann::json &jsn,
-  int16_t &parameter_id
+  uint16_t &parameter_id
   
 ) {
 
@@ -14182,7 +14182,7 @@ void uic_mqtt_dotdot_parse_configuration_parameters_discover_parameter(
     return;
   }
         
-  parameter_id = jsn.at("ParameterId").get< int16_t >();
+  parameter_id = jsn.at("ParameterId").get< uint16_t >();
     }
 
 
@@ -14234,7 +14234,7 @@ std::string get_json_payload_for_configuration_parameters_set_parameter_command(
 
 void uic_mqtt_dotdot_parse_configuration_parameters_set_parameter(
   nlohmann::json &jsn,
-  int16_t &parameter_id,
+  uint16_t &parameter_id,
   
   int64_t &value
   
@@ -14245,7 +14245,7 @@ void uic_mqtt_dotdot_parse_configuration_parameters_set_parameter(
     return;
   }
         
-  parameter_id = jsn.at("ParameterId").get< int16_t >();
+  parameter_id = jsn.at("ParameterId").get< uint16_t >();
       if (jsn.at("Value").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14284,9 +14284,9 @@ std::string get_json_payload_for_configuration_parameters_discover_parameter_ran
 
 void uic_mqtt_dotdot_parse_configuration_parameters_discover_parameter_range(
   nlohmann::json &jsn,
-  int16_t &first_parameter_id,
+  uint16_t &first_parameter_id,
   
-  int16_t &last_parameter_id
+  uint16_t &last_parameter_id
   
 ) {
 
@@ -14295,13 +14295,13 @@ void uic_mqtt_dotdot_parse_configuration_parameters_discover_parameter_range(
     return;
   }
         
-  first_parameter_id = jsn.at("FirstParameterId").get< int16_t >();
+  first_parameter_id = jsn.at("FirstParameterId").get< uint16_t >();
       if (jsn.at("LastParameterId").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  last_parameter_id = jsn.at("LastParameterId").get< int16_t >();
+  last_parameter_id = jsn.at("LastParameterId").get< uint16_t >();
     }
 
 
@@ -14403,7 +14403,7 @@ std::string get_json_payload_for_user_credential_add_user_command(
 
 void uic_mqtt_dotdot_parse_user_credential_add_user(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
   
   UserTypeEnum &user_type,
   
@@ -14413,7 +14413,7 @@ void uic_mqtt_dotdot_parse_user_credential_add_user(
   
   std::string &user_name,
   
-  int16_t &expiring_timeout_minutes,
+  uint16_t &expiring_timeout_minutes,
   
   UserNameEncodingType &user_name_encoding
   
@@ -14442,7 +14442,7 @@ void uic_mqtt_dotdot_parse_user_credential_add_user(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
       if (jsn.at("UserType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14470,7 +14470,7 @@ void uic_mqtt_dotdot_parse_user_credential_add_user(
     return;
   }
         
-  expiring_timeout_minutes = jsn.at("ExpiringTimeoutMinutes").get< int16_t >();
+  expiring_timeout_minutes = jsn.at("ExpiringTimeoutMinutes").get< uint16_t >();
       if (jsn.at("UserNameEncoding").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14561,7 +14561,7 @@ std::string get_json_payload_for_user_credential_modify_user_command(
 
 void uic_mqtt_dotdot_parse_user_credential_modify_user(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
   
   UserTypeEnum &user_type,
   
@@ -14571,7 +14571,7 @@ void uic_mqtt_dotdot_parse_user_credential_modify_user(
   
   std::string &user_name,
   
-  int16_t &expiring_timeout_minutes,
+  uint16_t &expiring_timeout_minutes,
   
   UserNameEncodingType &user_name_encoding
   
@@ -14600,7 +14600,7 @@ void uic_mqtt_dotdot_parse_user_credential_modify_user(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
       if (jsn.at("UserType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14628,7 +14628,7 @@ void uic_mqtt_dotdot_parse_user_credential_modify_user(
     return;
   }
         
-  expiring_timeout_minutes = jsn.at("ExpiringTimeoutMinutes").get< int16_t >();
+  expiring_timeout_minutes = jsn.at("ExpiringTimeoutMinutes").get< uint16_t >();
       if (jsn.at("UserNameEncoding").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14662,7 +14662,7 @@ std::string get_json_payload_for_user_credential_delete_user_command(
 
 void uic_mqtt_dotdot_parse_user_credential_delete_user(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid
+  uint16_t &user_uniqueid
   
 ) {
 
@@ -14671,7 +14671,7 @@ void uic_mqtt_dotdot_parse_user_credential_delete_user(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
     }
 
 
@@ -14723,11 +14723,11 @@ std::string get_json_payload_for_user_credential_add_credential_command(
 
 void uic_mqtt_dotdot_parse_user_credential_add_credential(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
   
   CredType &credential_type,
   
-  int16_t &credential_slot,
+  uint16_t &credential_slot,
   
   std::string &credential_data
   
@@ -14744,7 +14744,7 @@ void uic_mqtt_dotdot_parse_user_credential_add_credential(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
       if (jsn.at("CredentialType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14755,7 +14755,7 @@ void uic_mqtt_dotdot_parse_user_credential_add_credential(
     return;
   }
         
-  credential_slot = jsn.at("CredentialSlot").get< int16_t >();
+  credential_slot = jsn.at("CredentialSlot").get< uint16_t >();
       if (jsn.at("CredentialData").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14813,11 +14813,11 @@ std::string get_json_payload_for_user_credential_modify_credential_command(
 
 void uic_mqtt_dotdot_parse_user_credential_modify_credential(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
   
   CredType &credential_type,
   
-  int16_t &credential_slot,
+  uint16_t &credential_slot,
   
   std::string &credential_data
   
@@ -14834,7 +14834,7 @@ void uic_mqtt_dotdot_parse_user_credential_modify_credential(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
       if (jsn.at("CredentialType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14845,7 +14845,7 @@ void uic_mqtt_dotdot_parse_user_credential_modify_credential(
     return;
   }
         
-  credential_slot = jsn.at("CredentialSlot").get< int16_t >();
+  credential_slot = jsn.at("CredentialSlot").get< uint16_t >();
       if (jsn.at("CredentialData").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14899,11 +14899,11 @@ std::string get_json_payload_for_user_credential_delete_credential_command(
 
 void uic_mqtt_dotdot_parse_user_credential_delete_credential(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
   
   CredType &credential_type,
   
-  int16_t &credential_slot
+  uint16_t &credential_slot
   
 ) {
 
@@ -14918,7 +14918,7 @@ void uic_mqtt_dotdot_parse_user_credential_delete_credential(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
       if (jsn.at("CredentialType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -14929,7 +14929,7 @@ void uic_mqtt_dotdot_parse_user_credential_delete_credential(
     return;
   }
         
-  credential_slot = jsn.at("CredentialSlot").get< int16_t >();
+  credential_slot = jsn.at("CredentialSlot").get< uint16_t >();
     }
 
 
@@ -15050,7 +15050,7 @@ std::string get_json_payload_for_user_credential_delete_all_credentials_for_user
 
 void uic_mqtt_dotdot_parse_user_credential_delete_all_credentials_for_user(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid
+  uint16_t &user_uniqueid
   
 ) {
 
@@ -15059,7 +15059,7 @@ void uic_mqtt_dotdot_parse_user_credential_delete_all_credentials_for_user(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
     }
 
 
@@ -15103,7 +15103,7 @@ std::string get_json_payload_for_user_credential_delete_all_credentials_for_user
 
 void uic_mqtt_dotdot_parse_user_credential_delete_all_credentials_for_user_by_type(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
   
   CredType &credential_type
   
@@ -15120,7 +15120,7 @@ void uic_mqtt_dotdot_parse_user_credential_delete_all_credentials_for_user_by_ty
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
       if (jsn.at("CredentialType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -15177,13 +15177,13 @@ std::string get_json_payload_for_user_credential_credential_learn_start_add_comm
 
 void uic_mqtt_dotdot_parse_user_credential_credential_learn_start_add(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
   
   CredType &credential_type,
   
-  int16_t &credential_slot,
+  uint16_t &credential_slot,
   
-  int8_t &credential_learn_timeout
+  uint8_t &credential_learn_timeout
   
 ) {
 
@@ -15198,7 +15198,7 @@ void uic_mqtt_dotdot_parse_user_credential_credential_learn_start_add(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
       if (jsn.at("CredentialType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -15209,13 +15209,13 @@ void uic_mqtt_dotdot_parse_user_credential_credential_learn_start_add(
     return;
   }
         
-  credential_slot = jsn.at("CredentialSlot").get< int16_t >();
+  credential_slot = jsn.at("CredentialSlot").get< uint16_t >();
       if (jsn.at("CredentialLearnTimeout").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  credential_learn_timeout = jsn.at("CredentialLearnTimeout").get< int8_t >();
+  credential_learn_timeout = jsn.at("CredentialLearnTimeout").get< uint8_t >();
     }
 
 
@@ -15267,13 +15267,13 @@ std::string get_json_payload_for_user_credential_credential_learn_start_modify_c
 
 void uic_mqtt_dotdot_parse_user_credential_credential_learn_start_modify(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
   
   CredType &credential_type,
   
-  int16_t &credential_slot,
+  uint16_t &credential_slot,
   
-  int8_t &credential_learn_timeout
+  uint8_t &credential_learn_timeout
   
 ) {
 
@@ -15288,7 +15288,7 @@ void uic_mqtt_dotdot_parse_user_credential_credential_learn_start_modify(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
       if (jsn.at("CredentialType").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
@@ -15299,13 +15299,13 @@ void uic_mqtt_dotdot_parse_user_credential_credential_learn_start_modify(
     return;
   }
         
-  credential_slot = jsn.at("CredentialSlot").get< int16_t >();
+  credential_slot = jsn.at("CredentialSlot").get< uint16_t >();
       if (jsn.at("CredentialLearnTimeout").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  credential_learn_timeout = jsn.at("CredentialLearnTimeout").get< int8_t >();
+  credential_learn_timeout = jsn.at("CredentialLearnTimeout").get< uint8_t >();
     }
 
 
@@ -15382,13 +15382,13 @@ void uic_mqtt_dotdot_parse_user_credential_credential_association(
   nlohmann::json &jsn,
   CredType &credential_type,
   
-  int16_t &source_user_uniqueid,
+  uint16_t &source_user_uniqueid,
   
-  int16_t &source_credential_slot,
+  uint16_t &source_credential_slot,
   
-  int16_t &destination_user_uniqueid,
+  uint16_t &destination_user_uniqueid,
   
-  int16_t &destination_credential_slot
+  uint16_t &destination_credential_slot
   
 ) {
 
@@ -15408,25 +15408,25 @@ void uic_mqtt_dotdot_parse_user_credential_credential_association(
     return;
   }
         
-  source_user_uniqueid = jsn.at("SourceUserUniqueID").get< int16_t >();
+  source_user_uniqueid = jsn.at("SourceUserUniqueID").get< uint16_t >();
       if (jsn.at("SourceCredentialSlot").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  source_credential_slot = jsn.at("SourceCredentialSlot").get< int16_t >();
+  source_credential_slot = jsn.at("SourceCredentialSlot").get< uint16_t >();
       if (jsn.at("DestinationUserUniqueID").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  destination_user_uniqueid = jsn.at("DestinationUserUniqueID").get< int16_t >();
+  destination_user_uniqueid = jsn.at("DestinationUserUniqueID").get< uint16_t >();
       if (jsn.at("DestinationCredentialSlot").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  destination_credential_slot = jsn.at("DestinationCredentialSlot").get< int16_t >();
+  destination_credential_slot = jsn.at("DestinationCredentialSlot").get< uint16_t >();
     }
 
 
@@ -15455,7 +15455,7 @@ std::string get_json_payload_for_user_credential_get_user_checksum_command(
 
 void uic_mqtt_dotdot_parse_user_credential_get_user_checksum(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid
+  uint16_t &user_uniqueid
   
 ) {
 
@@ -15464,7 +15464,7 @@ void uic_mqtt_dotdot_parse_user_credential_get_user_checksum(
     return;
   }
         
-  user_uniqueid = jsn.at("UserUniqueID").get< int16_t >();
+  user_uniqueid = jsn.at("UserUniqueID").get< uint16_t >();
     }
 
 
@@ -15904,9 +15904,9 @@ void uic_mqtt_dotdot_parse_unify_humidity_control_setpoint_set(
   nlohmann::json &jsn,
   SetpointType &type,
   
-  int8_t &precision,
+  uint8_t &precision,
   
-  int8_t &scale,
+  uint8_t &scale,
   
   int32_t &value
   
@@ -15928,13 +15928,13 @@ void uic_mqtt_dotdot_parse_unify_humidity_control_setpoint_set(
     return;
   }
         
-  precision = jsn.at("Precision").get< int8_t >();
+  precision = jsn.at("Precision").get< uint8_t >();
       if (jsn.at("Scale").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
   }
         
-  scale = jsn.at("Scale").get< int8_t >();
+  scale = jsn.at("Scale").get< uint8_t >();
       if (jsn.at("Value").is_null()) {
     sl_log_debug(LOG_TAG, "Ignoring JSON Null object");
     return;
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.hpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.hpp
index 762addab76..ede2d6189e 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.hpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_command_helpers.hpp
@@ -102,7 +102,7 @@ std::string get_json_payload_for_identify_identify_command(
  */
 void uic_mqtt_dotdot_parse_identify_identify(
   nlohmann::json &jsn,
-  int16_t &identify_time
+  uint16_t &identify_time
 
 );
 
@@ -130,7 +130,7 @@ std::string get_json_payload_for_identify_identify_query_response_command(
  */
 void uic_mqtt_dotdot_parse_identify_identify_query_response(
   nlohmann::json &jsn,
-  int16_t &timeout
+  uint16_t &timeout
 
 );
 
@@ -213,7 +213,7 @@ std::string get_json_payload_for_groups_add_group_command(
  */
 void uic_mqtt_dotdot_parse_groups_add_group(
   nlohmann::json &jsn,
-  int16_t &group_id,
+  uint16_t &group_id,
 
   std::string &group_name
 
@@ -245,7 +245,7 @@ void uic_mqtt_dotdot_parse_groups_add_group_response(
   nlohmann::json &jsn,
   uint8_t &status,
 
-  int16_t &group_id
+  uint16_t &group_id
 
 );
 
@@ -273,7 +273,7 @@ std::string get_json_payload_for_groups_view_group_command(
  */
 void uic_mqtt_dotdot_parse_groups_view_group(
   nlohmann::json &jsn,
-  int16_t &group_id
+  uint16_t &group_id
 
 );
 
@@ -303,7 +303,7 @@ void uic_mqtt_dotdot_parse_groups_view_group_response(
   nlohmann::json &jsn,
   uint8_t &status,
 
-  int16_t &group_id,
+  uint16_t &group_id,
 
   std::string &group_name
 
@@ -333,7 +333,7 @@ std::string get_json_payload_for_groups_get_group_membership_command(
  */
 void uic_mqtt_dotdot_parse_groups_get_group_membership(
   nlohmann::json &jsn,
-  std::vector<int16_t> &group_list
+  std::vector<uint16_t> &group_list
 
 );
 
@@ -361,9 +361,9 @@ std::string get_json_payload_for_groups_get_group_membership_response_command(
  */
 void uic_mqtt_dotdot_parse_groups_get_group_membership_response(
   nlohmann::json &jsn,
-  int8_t &capacity,
+  uint8_t &capacity,
 
-  std::vector<int16_t> &group_list
+  std::vector<uint16_t> &group_list
 
 );
 
@@ -391,7 +391,7 @@ std::string get_json_payload_for_groups_remove_group_command(
  */
 void uic_mqtt_dotdot_parse_groups_remove_group(
   nlohmann::json &jsn,
-  int16_t &group_id
+  uint16_t &group_id
 
 );
 
@@ -421,7 +421,7 @@ void uic_mqtt_dotdot_parse_groups_remove_group_response(
   nlohmann::json &jsn,
   uint8_t &status,
 
-  int16_t &group_id
+  uint16_t &group_id
 
 );
 
@@ -462,7 +462,7 @@ std::string get_json_payload_for_groups_add_group_if_identifying_command(
  */
 void uic_mqtt_dotdot_parse_groups_add_group_if_identifying(
   nlohmann::json &jsn,
-  int16_t &group_id,
+  uint16_t &group_id,
 
   std::string &group_name
 
@@ -504,17 +504,17 @@ std::string get_json_payload_for_scenes_add_scene_command(
  */
 void uic_mqtt_dotdot_parse_scenes_add_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid,
+  uint8_t &sceneid,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   std::string &scene_name,
 
   std::vector<SExtensionFieldSetList> &extension_field_sets,
 
-  int8_t &transition_time100ms
+  uint8_t &transition_time100ms
 
 );
 
@@ -544,9 +544,9 @@ void uic_mqtt_dotdot_parse_scenes_add_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
 
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid
+  uint8_t &sceneid
 
 );
 
@@ -574,9 +574,9 @@ std::string get_json_payload_for_scenes_view_scene_command(
  */
 void uic_mqtt_dotdot_parse_scenes_view_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid
+  uint8_t &sceneid
 
 );
 
@@ -606,11 +606,11 @@ void uic_mqtt_dotdot_parse_scenes_view_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
 
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid,
+  uint8_t &sceneid,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   std::string &scene_name,
 
@@ -642,9 +642,9 @@ std::string get_json_payload_for_scenes_remove_scene_command(
  */
 void uic_mqtt_dotdot_parse_scenes_remove_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid
+  uint8_t &sceneid
 
 );
 
@@ -674,9 +674,9 @@ void uic_mqtt_dotdot_parse_scenes_remove_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
 
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid
+  uint8_t &sceneid
 
 );
 
@@ -704,7 +704,7 @@ std::string get_json_payload_for_scenes_remove_all_scenes_command(
  */
 void uic_mqtt_dotdot_parse_scenes_remove_all_scenes(
   nlohmann::json &jsn,
-  uint8_t * &groupid
+  uint16_t &groupid
 
 );
 
@@ -734,7 +734,7 @@ void uic_mqtt_dotdot_parse_scenes_remove_all_scenes_response(
   nlohmann::json &jsn,
   zclStatus &status,
 
-  uint8_t * &groupid
+  uint16_t &groupid
 
 );
 
@@ -762,9 +762,9 @@ std::string get_json_payload_for_scenes_store_scene_command(
  */
 void uic_mqtt_dotdot_parse_scenes_store_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid
+  uint8_t &sceneid
 
 );
 
@@ -794,9 +794,9 @@ void uic_mqtt_dotdot_parse_scenes_store_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
 
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid
+  uint8_t &sceneid
 
 );
 
@@ -824,11 +824,11 @@ std::string get_json_payload_for_scenes_recall_scene_command(
  */
 void uic_mqtt_dotdot_parse_scenes_recall_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid,
+  uint8_t &sceneid,
 
-  int16_t &transition_time
+  uint16_t &transition_time
 
 );
 
@@ -856,7 +856,7 @@ std::string get_json_payload_for_scenes_get_scene_membership_command(
  */
 void uic_mqtt_dotdot_parse_scenes_get_scene_membership(
   nlohmann::json &jsn,
-  uint8_t * &groupid
+  uint16_t &groupid
 
 );
 
@@ -886,11 +886,11 @@ void uic_mqtt_dotdot_parse_scenes_get_scene_membership_response(
   nlohmann::json &jsn,
   zclStatus &status,
 
-  int8_t &capacity,
+  uint8_t &capacity,
 
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  std::vector<int8_t> &scene_list
+  std::vector<uint8_t> &scene_list
 
 );
 
@@ -918,11 +918,11 @@ std::string get_json_payload_for_scenes_enhanced_add_scene_command(
  */
 void uic_mqtt_dotdot_parse_scenes_enhanced_add_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid,
+  uint8_t &sceneid,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   std::string &scene_name,
 
@@ -956,9 +956,9 @@ void uic_mqtt_dotdot_parse_scenes_enhanced_add_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
 
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid
+  uint8_t &sceneid
 
 );
 
@@ -986,9 +986,9 @@ std::string get_json_payload_for_scenes_enhanced_view_scene_command(
  */
 void uic_mqtt_dotdot_parse_scenes_enhanced_view_scene(
   nlohmann::json &jsn,
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid
+  uint8_t &sceneid
 
 );
 
@@ -1018,11 +1018,11 @@ void uic_mqtt_dotdot_parse_scenes_enhanced_view_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
 
-  uint8_t * &groupid,
+  uint16_t &groupid,
 
-  int8_t &sceneid,
+  uint8_t &sceneid,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   std::string &scene_name,
 
@@ -1056,13 +1056,13 @@ void uic_mqtt_dotdot_parse_scenes_copy_scene(
   nlohmann::json &jsn,
   uint8_t &mode,
 
-  uint8_t * &group_identifier_from,
+  uint16_t &group_identifier_from,
 
-  int8_t &scene_identifier_from,
+  uint8_t &scene_identifier_from,
 
-  uint8_t * &group_identifier_to,
+  uint16_t &group_identifier_to,
 
-  int8_t &scene_identifier_to
+  uint8_t &scene_identifier_to
 
 );
 
@@ -1092,9 +1092,9 @@ void uic_mqtt_dotdot_parse_scenes_copy_scene_response(
   nlohmann::json &jsn,
   zclStatus &status,
 
-  uint8_t * &group_identifier_from,
+  uint16_t &group_identifier_from,
 
-  int8_t &scene_identifier_from
+  uint8_t &scene_identifier_from
 
 );
 
@@ -1175,7 +1175,7 @@ void uic_mqtt_dotdot_parse_on_off_off_with_effect(
   nlohmann::json &jsn,
   OffWithEffectEffectIdentifier &effect_identifier,
 
-  int8_t &effect_variant
+  uint8_t &effect_variant
 
 );
 
@@ -1218,9 +1218,9 @@ void uic_mqtt_dotdot_parse_on_off_on_with_timed_off(
   nlohmann::json &jsn,
   uint8_t &on_off_control,
 
-  int16_t &on_time,
+  uint16_t &on_time,
 
-  int16_t &off_wait_time
+  uint16_t &off_wait_time
 
 );
 
@@ -1260,9 +1260,9 @@ std::string get_json_payload_for_level_move_to_level_command(
  */
 void uic_mqtt_dotdot_parse_level_move_to_level(
   nlohmann::json &jsn,
-  int8_t &level,
+  uint8_t &level,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -1296,7 +1296,7 @@ void uic_mqtt_dotdot_parse_level_move(
   nlohmann::json &jsn,
   MoveStepMode &move_mode,
 
-  int8_t &rate,
+  uint8_t &rate,
 
   uint8_t &options_mask,
 
@@ -1330,9 +1330,9 @@ void uic_mqtt_dotdot_parse_level_step(
   nlohmann::json &jsn,
   MoveStepMode &step_mode,
 
-  int8_t &step_size,
+  uint8_t &step_size,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -1394,9 +1394,9 @@ std::string get_json_payload_for_level_move_to_level_with_on_off_command(
  */
 void uic_mqtt_dotdot_parse_level_move_to_level_with_on_off(
   nlohmann::json &jsn,
-  int8_t &level,
+  uint8_t &level,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -1430,7 +1430,7 @@ void uic_mqtt_dotdot_parse_level_move_with_on_off(
   nlohmann::json &jsn,
   MoveStepMode &move_mode,
 
-  int8_t &rate,
+  uint8_t &rate,
 
   uint8_t &options_mask,
 
@@ -1464,9 +1464,9 @@ void uic_mqtt_dotdot_parse_level_step_with_on_off(
   nlohmann::json &jsn,
   MoveStepMode &step_mode,
 
-  int8_t &step_size,
+  uint8_t &step_size,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -1528,7 +1528,7 @@ std::string get_json_payload_for_level_move_to_closest_frequency_command(
  */
 void uic_mqtt_dotdot_parse_level_move_to_closest_frequency(
   nlohmann::json &jsn,
-  int16_t &frequency
+  uint16_t &frequency
 
 );
 
@@ -1570,7 +1570,7 @@ void uic_mqtt_dotdot_parse_alarms_reset_alarm(
   nlohmann::json &jsn,
   uint8_t &alarm_code,
 
-  uint8_t &cluster_identifier
+  uint16_t &cluster_identifier
 
 );
 
@@ -1600,7 +1600,7 @@ void uic_mqtt_dotdot_parse_alarms_alarm(
   nlohmann::json &jsn,
   uint8_t &alarm_code,
 
-  uint8_t &cluster_identifier
+  uint16_t &cluster_identifier
 
 );
 
@@ -1645,9 +1645,9 @@ void uic_mqtt_dotdot_parse_alarms_get_alarm_response(
 
   uint8_t &alarm_code,
 
-  uint8_t &cluster_identifier,
+  uint16_t &cluster_identifier,
 
-  int32_t &time_stamp
+  uint32_t &time_stamp
 
 );
 
@@ -1740,7 +1740,7 @@ void uic_mqtt_dotdot_parse_poll_control_check_in_response(
   nlohmann::json &jsn,
   bool &start_fast_polling,
 
-  int16_t &fast_poll_timeout
+  uint16_t &fast_poll_timeout
 
 );
 
@@ -1781,7 +1781,7 @@ std::string get_json_payload_for_poll_control_set_long_poll_interval_command(
  */
 void uic_mqtt_dotdot_parse_poll_control_set_long_poll_interval(
   nlohmann::json &jsn,
-  int32_t &new_long_poll_interval
+  uint32_t &new_long_poll_interval
 
 );
 
@@ -1809,7 +1809,7 @@ std::string get_json_payload_for_poll_control_set_short_poll_interval_command(
  */
 void uic_mqtt_dotdot_parse_poll_control_set_short_poll_interval(
   nlohmann::json &jsn,
-  int16_t &new_short_poll_interval
+  uint16_t &new_short_poll_interval
 
 );
 
@@ -2029,7 +2029,7 @@ std::string get_json_payload_for_door_lock_unlock_with_timeout_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_unlock_with_timeout(
   nlohmann::json &jsn,
-  int16_t &timeout_in_seconds,
+  uint16_t &timeout_in_seconds,
 
   std::string &pin_or_rfid_code
 
@@ -2087,7 +2087,7 @@ std::string get_json_payload_for_door_lock_get_log_record_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_log_record(
   nlohmann::json &jsn,
-  int16_t &log_index
+  uint16_t &log_index
 
 );
 
@@ -2115,17 +2115,17 @@ std::string get_json_payload_for_door_lock_get_log_record_response_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_log_record_response(
   nlohmann::json &jsn,
-  int16_t &log_entryid,
+  uint16_t &log_entryid,
 
-  int32_t &timestamp,
+  uint32_t &timestamp,
 
   GetLogRecordResponseEventType &event_type,
 
   DrlkOperEventSource &source_operation_event,
 
-  int8_t &event_id_or_alarm_code,
+  uint8_t &event_id_or_alarm_code,
 
-  int16_t &userid,
+  uint16_t &userid,
 
   std::string &pin
 
@@ -2155,7 +2155,7 @@ std::string get_json_payload_for_door_lock_set_pin_code_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_set_pin_code(
   nlohmann::json &jsn,
-  uint8_t * &userid,
+  uint16_t &userid,
 
   DrlkSettableUserStatus &user_status,
 
@@ -2217,7 +2217,7 @@ std::string get_json_payload_for_door_lock_get_pin_code_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_pin_code(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -2245,7 +2245,7 @@ std::string get_json_payload_for_door_lock_get_pin_code_response_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_pin_code_response(
   nlohmann::json &jsn,
-  int16_t &userid,
+  uint16_t &userid,
 
   DrlkUserStatus &user_status,
 
@@ -2279,7 +2279,7 @@ std::string get_json_payload_for_door_lock_clear_pin_code_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_clear_pin_code(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -2376,7 +2376,7 @@ std::string get_json_payload_for_door_lock_set_user_status_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_set_user_status(
   nlohmann::json &jsn,
-  uint8_t * &userid,
+  uint16_t &userid,
 
   DrlkSettableUserStatus &user_status
 
@@ -2434,7 +2434,7 @@ std::string get_json_payload_for_door_lock_get_user_status_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_user_status(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -2462,7 +2462,7 @@ std::string get_json_payload_for_door_lock_get_user_status_response_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_user_status_response(
   nlohmann::json &jsn,
-  int16_t &userid,
+  uint16_t &userid,
 
   DrlkUserStatus &user_status
 
@@ -2492,19 +2492,19 @@ std::string get_json_payload_for_door_lock_set_weekday_schedule_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_set_weekday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
 
-  uint8_t * &userid,
+  uint16_t &userid,
 
   uint8_t &days_mask,
 
-  int8_t &start_hour,
+  uint8_t &start_hour,
 
-  int8_t &start_minute,
+  uint8_t &start_minute,
 
-  int8_t &end_hour,
+  uint8_t &end_hour,
 
-  int8_t &end_minute
+  uint8_t &end_minute
 
 );
 
@@ -2560,9 +2560,9 @@ std::string get_json_payload_for_door_lock_get_weekday_schedule_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_weekday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
 
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -2590,21 +2590,21 @@ std::string get_json_payload_for_door_lock_get_weekday_schedule_response_command
  */
 void uic_mqtt_dotdot_parse_door_lock_get_weekday_schedule_response(
   nlohmann::json &jsn,
-  int8_t &scheduleid,
+  uint8_t &scheduleid,
 
-  int16_t &userid,
+  uint16_t &userid,
 
   zclStatus &status,
 
   uint8_t &days_mask,
 
-  int8_t &start_hour,
+  uint8_t &start_hour,
 
-  int8_t &start_minute,
+  uint8_t &start_minute,
 
-  int8_t &end_hour,
+  uint8_t &end_hour,
 
-  int8_t &end_minute
+  uint8_t &end_minute
 
 );
 
@@ -2632,9 +2632,9 @@ std::string get_json_payload_for_door_lock_clear_weekday_schedule_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_clear_weekday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
 
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -2690,13 +2690,13 @@ std::string get_json_payload_for_door_lock_set_year_day_schedule_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_set_year_day_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
 
-  uint8_t * &userid,
+  uint16_t &userid,
 
-  int32_t &local_start_time,
+  uint32_t &local_start_time,
 
-  int32_t &local_end_time
+  uint32_t &local_end_time
 
 );
 
@@ -2752,9 +2752,9 @@ std::string get_json_payload_for_door_lock_get_year_day_schedule_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_year_day_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
 
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -2782,15 +2782,15 @@ std::string get_json_payload_for_door_lock_get_year_day_schedule_response_comman
  */
 void uic_mqtt_dotdot_parse_door_lock_get_year_day_schedule_response(
   nlohmann::json &jsn,
-  int8_t &scheduleid,
+  uint8_t &scheduleid,
 
-  int16_t &userid,
+  uint16_t &userid,
 
   zclStatus &status,
 
-  int32_t &local_start_time,
+  uint32_t &local_start_time,
 
-  int32_t &local_end_time
+  uint32_t &local_end_time
 
 );
 
@@ -2818,9 +2818,9 @@ std::string get_json_payload_for_door_lock_clear_year_day_schedule_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_clear_year_day_schedule(
   nlohmann::json &jsn,
-  uint8_t * &scheduleid,
+  uint8_t &scheduleid,
 
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -2876,11 +2876,11 @@ std::string get_json_payload_for_door_lock_set_holiday_schedule_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_set_holiday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &holiday_scheduleid,
+  uint8_t &holiday_scheduleid,
 
-  int32_t &local_start_time,
+  uint32_t &local_start_time,
 
-  int32_t &local_end_time,
+  uint32_t &local_end_time,
 
   DrlkOperMode &operating_mode_during_holiday
 
@@ -2938,7 +2938,7 @@ std::string get_json_payload_for_door_lock_get_holiday_schedule_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_holiday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &holiday_scheduleid
+  uint8_t &holiday_scheduleid
 
 );
 
@@ -2966,13 +2966,13 @@ std::string get_json_payload_for_door_lock_get_holiday_schedule_response_command
  */
 void uic_mqtt_dotdot_parse_door_lock_get_holiday_schedule_response(
   nlohmann::json &jsn,
-  int8_t &holiday_scheduleid,
+  uint8_t &holiday_scheduleid,
 
   zclStatus &status,
 
-  int32_t &local_start_time,
+  uint32_t &local_start_time,
 
-  int32_t &local_end_time,
+  uint32_t &local_end_time,
 
   DrlkOperMode &operating_mode_during_holiday
 
@@ -3002,7 +3002,7 @@ std::string get_json_payload_for_door_lock_clear_holiday_schedule_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_clear_holiday_schedule(
   nlohmann::json &jsn,
-  uint8_t * &holiday_scheduleid
+  uint8_t &holiday_scheduleid
 
 );
 
@@ -3058,7 +3058,7 @@ std::string get_json_payload_for_door_lock_set_user_type_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_set_user_type(
   nlohmann::json &jsn,
-  uint8_t * &userid,
+  uint16_t &userid,
 
   DrlkUserType &user_type
 
@@ -3116,7 +3116,7 @@ std::string get_json_payload_for_door_lock_get_user_type_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_user_type(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -3144,7 +3144,7 @@ std::string get_json_payload_for_door_lock_get_user_type_response_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_user_type_response(
   nlohmann::json &jsn,
-  int16_t &userid,
+  uint16_t &userid,
 
   DrlkUserType &user_type
 
@@ -3174,7 +3174,7 @@ std::string get_json_payload_for_door_lock_set_rfid_code_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_set_rfid_code(
   nlohmann::json &jsn,
-  uint8_t * &userid,
+  uint16_t &userid,
 
   DrlkSettableUserStatus &user_status,
 
@@ -3236,7 +3236,7 @@ std::string get_json_payload_for_door_lock_get_rfid_code_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_rfid_code(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -3264,7 +3264,7 @@ std::string get_json_payload_for_door_lock_get_rfid_code_response_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_rfid_code_response(
   nlohmann::json &jsn,
-  int16_t &userid,
+  uint16_t &userid,
 
   DrlkUserStatus &user_status,
 
@@ -3298,7 +3298,7 @@ std::string get_json_payload_for_door_lock_clear_rfid_code_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_clear_rfid_code(
   nlohmann::json &jsn,
-  uint8_t * &userid
+  uint16_t &userid
 
 );
 
@@ -3397,11 +3397,11 @@ void uic_mqtt_dotdot_parse_door_lock_set_user(
   nlohmann::json &jsn,
   DataOperationTypeEnum &operation_type,
 
-  int16_t &user_index,
+  uint16_t &user_index,
 
   std::string &user_name,
 
-  int32_t &user_uniqueid,
+  uint32_t &user_uniqueid,
 
   DrlkSettableUserStatus &user_status,
 
@@ -3435,7 +3435,7 @@ std::string get_json_payload_for_door_lock_get_user_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_get_user(
   nlohmann::json &jsn,
-  int16_t &user_index
+  uint16_t &user_index
 
 );
 
@@ -3476,7 +3476,7 @@ std::string get_json_payload_for_door_lock_clear_user_command(
  */
 void uic_mqtt_dotdot_parse_door_lock_clear_user(
   nlohmann::json &jsn,
-  int16_t &user_index
+  uint16_t &user_index
 
 );
 
@@ -3508,11 +3508,11 @@ void uic_mqtt_dotdot_parse_door_lock_operating_event_notification(
 
   OperatingEventNotificationOperationEventCode &operation_event_code,
 
-  int16_t &userid,
+  uint16_t &userid,
 
   std::string &pin,
 
-  int32_t &local_time,
+  uint32_t &local_time,
 
   std::string &data
 
@@ -3546,7 +3546,7 @@ void uic_mqtt_dotdot_parse_door_lock_programming_event_notification(
 
   ProgrammingEventNotificationProgramEventCode &program_event_code,
 
-  int16_t &userid,
+  uint16_t &userid,
 
   std::string &pin,
 
@@ -3554,7 +3554,7 @@ void uic_mqtt_dotdot_parse_door_lock_programming_event_notification(
 
   DrlkUserStatus &user_status,
 
-  int32_t &local_time,
+  uint32_t &local_time,
 
   std::string &data
 
@@ -3590,7 +3590,7 @@ void uic_mqtt_dotdot_parse_door_lock_set_credential(
 
   std::string &credential_data,
 
-  int16_t &user_index,
+  uint16_t &user_index,
 
   DrlkSettableUserStatus &user_status,
 
@@ -3783,7 +3783,7 @@ std::string get_json_payload_for_window_covering_go_to_lift_value_command(
  */
 void uic_mqtt_dotdot_parse_window_covering_go_to_lift_value(
   nlohmann::json &jsn,
-  int16_t &lift_value
+  uint16_t &lift_value
 
 );
 
@@ -3811,7 +3811,7 @@ std::string get_json_payload_for_window_covering_go_to_lift_percentage_command(
  */
 void uic_mqtt_dotdot_parse_window_covering_go_to_lift_percentage(
   nlohmann::json &jsn,
-  int8_t &percentage_lift_value
+  uint8_t &percentage_lift_value
 
 );
 
@@ -3839,7 +3839,7 @@ std::string get_json_payload_for_window_covering_go_to_tilt_value_command(
  */
 void uic_mqtt_dotdot_parse_window_covering_go_to_tilt_value(
   nlohmann::json &jsn,
-  int16_t &tilt_value
+  uint16_t &tilt_value
 
 );
 
@@ -3867,7 +3867,7 @@ std::string get_json_payload_for_window_covering_go_to_tilt_percentage_command(
  */
 void uic_mqtt_dotdot_parse_window_covering_go_to_tilt_percentage(
   nlohmann::json &jsn,
-  int8_t &percentage_tilt_value
+  uint8_t &percentage_tilt_value
 
 );
 
@@ -3907,7 +3907,7 @@ std::string get_json_payload_for_barrier_control_go_to_percent_command(
  */
 void uic_mqtt_dotdot_parse_barrier_control_go_to_percent(
   nlohmann::json &jsn,
-  int8_t &percent_open
+  uint8_t &percent_open
 
 );
 
@@ -4070,17 +4070,17 @@ std::string get_json_payload_for_thermostat_get_relay_status_log_response_comman
  */
 void uic_mqtt_dotdot_parse_thermostat_get_relay_status_log_response(
   nlohmann::json &jsn,
-  int16_t &time_of_day,
+  uint16_t &time_of_day,
 
   uint8_t &relay_status,
 
   int16_t &local_temperature,
 
-  int8_t &humidity_percentage,
+  uint8_t &humidity_percentage,
 
   int16_t &set_point,
 
-  int16_t &unread_entries
+  uint16_t &unread_entries
 
 );
 
@@ -4212,11 +4212,11 @@ std::string get_json_payload_for_color_control_move_to_hue_command(
  */
 void uic_mqtt_dotdot_parse_color_control_move_to_hue(
   nlohmann::json &jsn,
-  int8_t &hue,
+  uint8_t &hue,
 
   CCDirection &direction,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4250,7 +4250,7 @@ void uic_mqtt_dotdot_parse_color_control_move_hue(
   nlohmann::json &jsn,
   CCMoveMode &move_mode,
 
-  int8_t &rate,
+  uint8_t &rate,
 
   uint8_t &options_mask,
 
@@ -4284,9 +4284,9 @@ void uic_mqtt_dotdot_parse_color_control_step_hue(
   nlohmann::json &jsn,
   CCStepMode &step_mode,
 
-  int8_t &step_size,
+  uint8_t &step_size,
 
-  int8_t &transition_time,
+  uint8_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4318,9 +4318,9 @@ std::string get_json_payload_for_color_control_move_to_saturation_command(
  */
 void uic_mqtt_dotdot_parse_color_control_move_to_saturation(
   nlohmann::json &jsn,
-  int8_t &saturation,
+  uint8_t &saturation,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4354,7 +4354,7 @@ void uic_mqtt_dotdot_parse_color_control_move_saturation(
   nlohmann::json &jsn,
   CCMoveMode &move_mode,
 
-  int8_t &rate,
+  uint8_t &rate,
 
   uint8_t &options_mask,
 
@@ -4388,9 +4388,9 @@ void uic_mqtt_dotdot_parse_color_control_step_saturation(
   nlohmann::json &jsn,
   CCStepMode &step_mode,
 
-  int8_t &step_size,
+  uint8_t &step_size,
 
-  int8_t &transition_time,
+  uint8_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4422,11 +4422,11 @@ std::string get_json_payload_for_color_control_move_to_hue_and_saturation_comman
  */
 void uic_mqtt_dotdot_parse_color_control_move_to_hue_and_saturation(
   nlohmann::json &jsn,
-  int8_t &hue,
+  uint8_t &hue,
 
-  int8_t &saturation,
+  uint8_t &saturation,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4458,11 +4458,11 @@ std::string get_json_payload_for_color_control_move_to_color_command(
  */
 void uic_mqtt_dotdot_parse_color_control_move_to_color(
   nlohmann::json &jsn,
-  int16_t &colorx,
+  uint16_t &colorx,
 
-  int16_t &colory,
+  uint16_t &colory,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4532,7 +4532,7 @@ void uic_mqtt_dotdot_parse_color_control_step_color(
 
   int16_t &stepy,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4564,9 +4564,9 @@ std::string get_json_payload_for_color_control_move_to_color_temperature_command
  */
 void uic_mqtt_dotdot_parse_color_control_move_to_color_temperature(
   nlohmann::json &jsn,
-  int16_t &color_temperature_mireds,
+  uint16_t &color_temperature_mireds,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4598,11 +4598,11 @@ std::string get_json_payload_for_color_control_enhanced_move_to_hue_command(
  */
 void uic_mqtt_dotdot_parse_color_control_enhanced_move_to_hue(
   nlohmann::json &jsn,
-  int16_t &enhanced_hue,
+  uint16_t &enhanced_hue,
 
   CCDirection &direction,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4636,7 +4636,7 @@ void uic_mqtt_dotdot_parse_color_control_enhanced_move_hue(
   nlohmann::json &jsn,
   CCMoveMode &move_mode,
 
-  int16_t &rate,
+  uint16_t &rate,
 
   uint8_t &options_mask,
 
@@ -4670,9 +4670,9 @@ void uic_mqtt_dotdot_parse_color_control_enhanced_step_hue(
   nlohmann::json &jsn,
   CCStepMode &step_mode,
 
-  int16_t &step_size,
+  uint16_t &step_size,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4704,11 +4704,11 @@ std::string get_json_payload_for_color_control_enhanced_move_to_hue_and_saturati
  */
 void uic_mqtt_dotdot_parse_color_control_enhanced_move_to_hue_and_saturation(
   nlohmann::json &jsn,
-  int16_t &enhanced_hue,
+  uint16_t &enhanced_hue,
 
-  int8_t &saturation,
+  uint8_t &saturation,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
   uint8_t &options_mask,
 
@@ -4746,9 +4746,9 @@ void uic_mqtt_dotdot_parse_color_control_color_loop_set(
 
   CCColorLoopDirection &direction,
 
-  int16_t &time,
+  uint16_t &time,
 
-  int16_t &start_hue,
+  uint16_t &start_hue,
 
   uint8_t &options_mask,
 
@@ -4812,11 +4812,11 @@ void uic_mqtt_dotdot_parse_color_control_move_color_temperature(
   nlohmann::json &jsn,
   CCMoveMode &move_mode,
 
-  int16_t &rate,
+  uint16_t &rate,
 
-  uint8_t * &color_temperature_minimum_mireds,
+  uint16_t &color_temperature_minimum_mireds,
 
-  uint8_t * &color_temperature_maximum_mireds,
+  uint16_t &color_temperature_maximum_mireds,
 
   uint8_t &options_mask,
 
@@ -4850,13 +4850,13 @@ void uic_mqtt_dotdot_parse_color_control_step_color_temperature(
   nlohmann::json &jsn,
   CCStepMode &step_mode,
 
-  int16_t &step_size,
+  uint16_t &step_size,
 
-  int16_t &transition_time,
+  uint16_t &transition_time,
 
-  uint8_t * &color_temperature_minimum_mireds,
+  uint16_t &color_temperature_minimum_mireds,
 
-  uint8_t * &color_temperature_maximum_mireds,
+  uint16_t &color_temperature_maximum_mireds,
 
   uint8_t &options_mask,
 
@@ -5082,7 +5082,7 @@ void uic_mqtt_dotdot_parse_ias_zone_zone_enroll_response(
   nlohmann::json &jsn,
   ZoneEnrollResponseEnrollResponseCode &enroll_response_code,
 
-  int8_t &zoneid
+  uint8_t &zoneid
 
 );
 
@@ -5114,9 +5114,9 @@ void uic_mqtt_dotdot_parse_ias_zone_zone_status_change_notification(
 
   uint8_t &extended_status,
 
-  int8_t &zoneid,
+  uint8_t &zoneid,
 
-  int16_t &delay
+  uint16_t &delay
 
 );
 
@@ -5159,7 +5159,7 @@ void uic_mqtt_dotdot_parse_ias_zone_zone_enroll_request(
   nlohmann::json &jsn,
   IasZoneType &zone_type,
 
-  int16_t &manufacturer_code
+  uint16_t &manufacturer_code
 
 );
 
@@ -5187,9 +5187,9 @@ std::string get_json_payload_for_ias_zone_initiate_test_mode_command(
  */
 void uic_mqtt_dotdot_parse_ias_zone_initiate_test_mode(
   nlohmann::json &jsn,
-  int8_t &test_mode_duration,
+  uint8_t &test_mode_duration,
 
-  int8_t &current_zone_sensitivity_level
+  uint8_t &current_zone_sensitivity_level
 
 );
 
@@ -5231,9 +5231,9 @@ void uic_mqtt_dotdot_parse_iaswd_start_warning(
   nlohmann::json &jsn,
   uint8_t &siren_configuration,
 
-  int16_t &warning_duration,
+  uint16_t &warning_duration,
 
-  int8_t &strobe_duty_cycle,
+  uint8_t &strobe_duty_cycle,
 
   IaswdLevel &strobe_level
 
@@ -5315,13 +5315,13 @@ std::string get_json_payload_for_electrical_measurement_get_profile_info_respons
  */
 void uic_mqtt_dotdot_parse_electrical_measurement_get_profile_info_response(
   nlohmann::json &jsn,
-  int8_t &profile_count,
+  uint8_t &profile_count,
 
   ProfileIntervalPeriod &profile_interval_period,
 
-  int8_t &max_number_of_intervals,
+  uint8_t &max_number_of_intervals,
 
-  std::vector<uint8_t> &list_of_attributes
+  std::vector<uint16_t> &list_of_attributes
 
 );
 
@@ -5362,17 +5362,17 @@ std::string get_json_payload_for_electrical_measurement_get_measurement_profile_
  */
 void uic_mqtt_dotdot_parse_electrical_measurement_get_measurement_profile_response(
   nlohmann::json &jsn,
-  uint8_t &start_time,
+  uint32_t &start_time,
 
   GetMeasurementProfileResponseStatus &status,
 
   ProfileIntervalPeriod &profile_interval_period,
 
-  int8_t &number_of_intervals_delivered,
+  uint8_t &number_of_intervals_delivered,
 
-  uint8_t &attribute_id,
+  uint16_t &attribute_id,
 
-  std::vector<int8_t> &intervals
+  std::vector<uint8_t> &intervals
 
 );
 
@@ -5400,11 +5400,11 @@ std::string get_json_payload_for_electrical_measurement_get_measurement_profile_
  */
 void uic_mqtt_dotdot_parse_electrical_measurement_get_measurement_profile(
   nlohmann::json &jsn,
-  uint8_t &attributeid,
+  uint16_t &attributeid,
 
-  uint8_t &start_time,
+  uint32_t &start_time,
 
-  int8_t &number_of_intervals
+  uint8_t &number_of_intervals
 
 );
 
@@ -5462,13 +5462,13 @@ void uic_mqtt_dotdot_parse_protocol_controller_rf_telemetry_tx_report(
 
   bool &transmission_successful,
 
-  int16_t &transmission_time_ms,
+  uint16_t &transmission_time_ms,
 
   int8_t &tx_powerd_bm,
 
-  int8_t &tx_channel,
+  uint8_t &tx_channel,
 
-  int8_t &routing_attempts,
+  uint8_t &routing_attempts,
 
   bool &route_changed,
 
@@ -5482,7 +5482,7 @@ void uic_mqtt_dotdot_parse_protocol_controller_rf_telemetry_tx_report(
 
   int8_t &ackrssi,
 
-  int8_t &ack_channel,
+  uint8_t &ack_channel,
 
   std::string &last_route_failed_link_functionalunid,
 
@@ -5626,7 +5626,7 @@ void uic_mqtt_dotdot_parse_binding_bind(
 
   std::string &destination_unid,
 
-  int8_t &destination_ep
+  uint8_t &destination_ep
 
 );
 
@@ -5658,7 +5658,7 @@ void uic_mqtt_dotdot_parse_binding_unbind(
 
   std::string &destination_unid,
 
-  int8_t &destination_ep
+  uint8_t &destination_ep
 
 );
 
@@ -5824,7 +5824,7 @@ std::string get_json_payload_for_configuration_parameters_discover_parameter_com
  */
 void uic_mqtt_dotdot_parse_configuration_parameters_discover_parameter(
   nlohmann::json &jsn,
-  int16_t &parameter_id
+  uint16_t &parameter_id
 
 );
 
@@ -5865,7 +5865,7 @@ std::string get_json_payload_for_configuration_parameters_set_parameter_command(
  */
 void uic_mqtt_dotdot_parse_configuration_parameters_set_parameter(
   nlohmann::json &jsn,
-  int16_t &parameter_id,
+  uint16_t &parameter_id,
 
   int64_t &value
 
@@ -5895,9 +5895,9 @@ std::string get_json_payload_for_configuration_parameters_discover_parameter_ran
  */
 void uic_mqtt_dotdot_parse_configuration_parameters_discover_parameter_range(
   nlohmann::json &jsn,
-  int16_t &first_parameter_id,
+  uint16_t &first_parameter_id,
 
-  int16_t &last_parameter_id
+  uint16_t &last_parameter_id
 
 );
 
@@ -5937,7 +5937,7 @@ std::string get_json_payload_for_user_credential_add_user_command(
  */
 void uic_mqtt_dotdot_parse_user_credential_add_user(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
 
   UserTypeEnum &user_type,
 
@@ -5947,7 +5947,7 @@ void uic_mqtt_dotdot_parse_user_credential_add_user(
 
   std::string &user_name,
 
-  int16_t &expiring_timeout_minutes,
+  uint16_t &expiring_timeout_minutes,
 
   UserNameEncodingType &user_name_encoding
 
@@ -5977,7 +5977,7 @@ std::string get_json_payload_for_user_credential_modify_user_command(
  */
 void uic_mqtt_dotdot_parse_user_credential_modify_user(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
 
   UserTypeEnum &user_type,
 
@@ -5987,7 +5987,7 @@ void uic_mqtt_dotdot_parse_user_credential_modify_user(
 
   std::string &user_name,
 
-  int16_t &expiring_timeout_minutes,
+  uint16_t &expiring_timeout_minutes,
 
   UserNameEncodingType &user_name_encoding
 
@@ -6017,7 +6017,7 @@ std::string get_json_payload_for_user_credential_delete_user_command(
  */
 void uic_mqtt_dotdot_parse_user_credential_delete_user(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid
+  uint16_t &user_uniqueid
 
 );
 
@@ -6045,11 +6045,11 @@ std::string get_json_payload_for_user_credential_add_credential_command(
  */
 void uic_mqtt_dotdot_parse_user_credential_add_credential(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
 
   CredType &credential_type,
 
-  int16_t &credential_slot,
+  uint16_t &credential_slot,
 
   std::string &credential_data
 
@@ -6079,11 +6079,11 @@ std::string get_json_payload_for_user_credential_modify_credential_command(
  */
 void uic_mqtt_dotdot_parse_user_credential_modify_credential(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
 
   CredType &credential_type,
 
-  int16_t &credential_slot,
+  uint16_t &credential_slot,
 
   std::string &credential_data
 
@@ -6113,11 +6113,11 @@ std::string get_json_payload_for_user_credential_delete_credential_command(
  */
 void uic_mqtt_dotdot_parse_user_credential_delete_credential(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
 
   CredType &credential_type,
 
-  int16_t &credential_slot
+  uint16_t &credential_slot
 
 );
 
@@ -6199,7 +6199,7 @@ std::string get_json_payload_for_user_credential_delete_all_credentials_for_user
  */
 void uic_mqtt_dotdot_parse_user_credential_delete_all_credentials_for_user(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid
+  uint16_t &user_uniqueid
 
 );
 
@@ -6227,7 +6227,7 @@ std::string get_json_payload_for_user_credential_delete_all_credentials_for_user
  */
 void uic_mqtt_dotdot_parse_user_credential_delete_all_credentials_for_user_by_type(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
 
   CredType &credential_type
 
@@ -6257,13 +6257,13 @@ std::string get_json_payload_for_user_credential_credential_learn_start_add_comm
  */
 void uic_mqtt_dotdot_parse_user_credential_credential_learn_start_add(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
 
   CredType &credential_type,
 
-  int16_t &credential_slot,
+  uint16_t &credential_slot,
 
-  int8_t &credential_learn_timeout
+  uint8_t &credential_learn_timeout
 
 );
 
@@ -6291,13 +6291,13 @@ std::string get_json_payload_for_user_credential_credential_learn_start_modify_c
  */
 void uic_mqtt_dotdot_parse_user_credential_credential_learn_start_modify(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid,
+  uint16_t &user_uniqueid,
 
   CredType &credential_type,
 
-  int16_t &credential_slot,
+  uint16_t &credential_slot,
 
-  int8_t &credential_learn_timeout
+  uint8_t &credential_learn_timeout
 
 );
 
@@ -6340,13 +6340,13 @@ void uic_mqtt_dotdot_parse_user_credential_credential_association(
   nlohmann::json &jsn,
   CredType &credential_type,
 
-  int16_t &source_user_uniqueid,
+  uint16_t &source_user_uniqueid,
 
-  int16_t &source_credential_slot,
+  uint16_t &source_credential_slot,
 
-  int16_t &destination_user_uniqueid,
+  uint16_t &destination_user_uniqueid,
 
-  int16_t &destination_credential_slot
+  uint16_t &destination_credential_slot
 
 );
 
@@ -6374,7 +6374,7 @@ std::string get_json_payload_for_user_credential_get_user_checksum_command(
  */
 void uic_mqtt_dotdot_parse_user_credential_get_user_checksum(
   nlohmann::json &jsn,
-  int16_t &user_uniqueid
+  uint16_t &user_uniqueid
 
 );
 
@@ -6628,9 +6628,9 @@ void uic_mqtt_dotdot_parse_unify_humidity_control_setpoint_set(
   nlohmann::json &jsn,
   SetpointType &type,
 
-  int8_t &precision,
+  uint8_t &precision,
 
-  int8_t &scale,
+  uint8_t &scale,
 
   int32_t &value
 
diff --git a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_group_commands.cpp b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_group_commands.cpp
index 91713c17a0..295e2af47e 100644
--- a/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_group_commands.cpp
+++ b/components/uic_dotdot_mqtt/zap-generated/src/dotdot_mqtt_group_commands.cpp
@@ -3212,7 +3212,7 @@ static void uic_mqtt_dotdot_on_by_group_groups_get_group_membership(
 
     
     uic_mqtt_dotdot_groups_command_get_group_membership_fields_t fields;
-      std::vector<int16_t> group_list;
+      std::vector<uint16_t> group_list;
 
 
       nlohmann::json jsn;
@@ -3301,7 +3301,7 @@ static void uic_mqtt_dotdot_on_by_group_groups_get_group_membership_response(
 
     
     uic_mqtt_dotdot_groups_command_get_group_membership_response_fields_t fields;
-      std::vector<int16_t> group_list;
+      std::vector<uint16_t> group_list;
 
 
       nlohmann::json jsn;
@@ -5028,7 +5028,7 @@ static void uic_mqtt_dotdot_on_by_group_scenes_get_scene_membership_response(
 
     
     uic_mqtt_dotdot_scenes_command_get_scene_membership_response_fields_t fields;
-      std::vector<int8_t> scene_list;
+      std::vector<uint8_t> scene_list;
 
 
       nlohmann::json jsn;
@@ -21500,7 +21500,7 @@ static void uic_mqtt_dotdot_on_by_group_electrical_measurement_get_profile_info_
 
     
     uic_mqtt_dotdot_electrical_measurement_command_get_profile_info_response_fields_t fields;
-      std::vector<uint8_t> list_of_attributes;
+      std::vector<uint16_t> list_of_attributes;
 
 
       nlohmann::json jsn;
@@ -21681,7 +21681,7 @@ static void uic_mqtt_dotdot_on_by_group_electrical_measurement_get_measurement_p
 
     
     uic_mqtt_dotdot_electrical_measurement_command_get_measurement_profile_response_fields_t fields;
-      std::vector<int8_t> intervals;
+      std::vector<uint8_t> intervals;
 
 
       nlohmann::json jsn;
diff --git a/components/uic_dotdot_mqtt/zap-generated/test/dotdot_mqtt_test.include b/components/uic_dotdot_mqtt/zap-generated/test/dotdot_mqtt_test.include
index 85fbbbd53f..89a5002b0f 100644
--- a/components/uic_dotdot_mqtt/zap-generated/test/dotdot_mqtt_test.include
+++ b/components/uic_dotdot_mqtt/zap-generated/test/dotdot_mqtt_test.include
@@ -29,7 +29,7 @@ static sl_status_t uic_mqtt_dotdot_identify_identify_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t identify_time
+    uint16_t identify_time
 
 ) {
   uic_mqtt_dotdot_identify_identify_callback_count++;
@@ -42,7 +42,7 @@ static sl_status_t uic_mqtt_dotdot_identify_identify_query_response_callback_fun
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t timeout
+    uint16_t timeout
 
 ) {
   uic_mqtt_dotdot_identify_identify_query_response_callback_count++;
@@ -81,7 +81,7 @@ static sl_status_t uic_mqtt_dotdot_groups_add_group_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t group_id,
+    uint16_t group_id,
 
     const char* group_name
 
@@ -98,7 +98,7 @@ static sl_status_t uic_mqtt_dotdot_groups_add_group_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t status,
 
-    int16_t group_id
+    uint16_t group_id
 
 ) {
   uic_mqtt_dotdot_groups_add_group_response_callback_count++;
@@ -111,7 +111,7 @@ static sl_status_t uic_mqtt_dotdot_groups_view_group_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t group_id
+    uint16_t group_id
 
 ) {
   uic_mqtt_dotdot_groups_view_group_callback_count++;
@@ -126,7 +126,7 @@ static sl_status_t uic_mqtt_dotdot_groups_view_group_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t status,
 
-    int16_t group_id,
+    uint16_t group_id,
 
     const char* group_name
 
@@ -142,7 +142,7 @@ static sl_status_t uic_mqtt_dotdot_groups_get_group_membership_callback_func(
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t group_list_count,
-    const int16_t *group_list
+    const uint16_t *group_list
 
 ) {
   uic_mqtt_dotdot_groups_get_group_membership_callback_count++;
@@ -155,10 +155,10 @@ static sl_status_t uic_mqtt_dotdot_groups_get_group_membership_response_callback
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t capacity,
+    uint8_t capacity,
 
     uint8_t group_list_count,
-    const int16_t *group_list
+    const uint16_t *group_list
 
 ) {
   uic_mqtt_dotdot_groups_get_group_membership_response_callback_count++;
@@ -171,7 +171,7 @@ static sl_status_t uic_mqtt_dotdot_groups_remove_group_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t group_id
+    uint16_t group_id
 
 ) {
   uic_mqtt_dotdot_groups_remove_group_callback_count++;
@@ -186,7 +186,7 @@ static sl_status_t uic_mqtt_dotdot_groups_remove_group_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t status,
 
-    int16_t group_id
+    uint16_t group_id
 
 ) {
   uic_mqtt_dotdot_groups_remove_group_response_callback_count++;
@@ -210,7 +210,7 @@ static sl_status_t uic_mqtt_dotdot_groups_add_group_if_identifying_callback_func
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t group_id,
+    uint16_t group_id,
 
     const char* group_name
 
@@ -225,18 +225,18 @@ static sl_status_t uic_mqtt_dotdot_scenes_add_scene_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * scene_name,
+    const char* scene_name,
 
     uint8_t extension_field_sets_count,
     const SExtensionFieldSetList *extension_field_sets,
 
-    int8_t transition_time100ms
+    uint8_t transition_time100ms
 
 ) {
   uic_mqtt_dotdot_scenes_add_scene_callback_count++;
@@ -251,9 +251,9 @@ static sl_status_t uic_mqtt_dotdot_scenes_add_scene_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 ) {
   uic_mqtt_dotdot_scenes_add_scene_response_callback_count++;
@@ -266,9 +266,9 @@ static sl_status_t uic_mqtt_dotdot_scenes_view_scene_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 ) {
   uic_mqtt_dotdot_scenes_view_scene_callback_count++;
@@ -283,13 +283,13 @@ static sl_status_t uic_mqtt_dotdot_scenes_view_scene_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * scene_name,
+    const char* scene_name,
 
     uint8_t extension_field_sets_count,
     const SExtensionFieldSetList *extension_field_sets
@@ -305,9 +305,9 @@ static sl_status_t uic_mqtt_dotdot_scenes_remove_scene_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 ) {
   uic_mqtt_dotdot_scenes_remove_scene_callback_count++;
@@ -322,9 +322,9 @@ static sl_status_t uic_mqtt_dotdot_scenes_remove_scene_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 ) {
   uic_mqtt_dotdot_scenes_remove_scene_response_callback_count++;
@@ -337,7 +337,7 @@ static sl_status_t uic_mqtt_dotdot_scenes_remove_all_scenes_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * groupid
+    uint16_t groupid
 
 ) {
   uic_mqtt_dotdot_scenes_remove_all_scenes_callback_count++;
@@ -352,7 +352,7 @@ static sl_status_t uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_fu
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     zclStatus status,
 
-    uint8_t * groupid
+    uint16_t groupid
 
 ) {
   uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_count++;
@@ -365,9 +365,9 @@ static sl_status_t uic_mqtt_dotdot_scenes_store_scene_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 ) {
   uic_mqtt_dotdot_scenes_store_scene_callback_count++;
@@ -382,9 +382,9 @@ static sl_status_t uic_mqtt_dotdot_scenes_store_scene_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 ) {
   uic_mqtt_dotdot_scenes_store_scene_response_callback_count++;
@@ -397,11 +397,11 @@ static sl_status_t uic_mqtt_dotdot_scenes_recall_scene_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time
+    uint16_t transition_time
 
 ) {
   uic_mqtt_dotdot_scenes_recall_scene_callback_count++;
@@ -414,7 +414,7 @@ static sl_status_t uic_mqtt_dotdot_scenes_get_scene_membership_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * groupid
+    uint16_t groupid
 
 ) {
   uic_mqtt_dotdot_scenes_get_scene_membership_callback_count++;
@@ -429,12 +429,12 @@ static sl_status_t uic_mqtt_dotdot_scenes_get_scene_membership_response_callback
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     zclStatus status,
 
-    int8_t capacity,
+    uint8_t capacity,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
     uint8_t scene_list_count,
-    const int8_t *scene_list
+    const uint8_t *scene_list
 
 ) {
   uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_count++;
@@ -447,13 +447,13 @@ static sl_status_t uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * scene_name,
+    const char* scene_name,
 
     uint8_t extension_field_sets_count,
     const SExtensionFieldSetList *extension_field_sets
@@ -471,9 +471,9 @@ static sl_status_t uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_f
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 ) {
   uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_count++;
@@ -486,9 +486,9 @@ static sl_status_t uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid
+    uint8_t sceneid
 
 ) {
   uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_count++;
@@ -503,13 +503,13 @@ static sl_status_t uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     zclStatus status,
 
-    uint8_t * groupid,
+    uint16_t groupid,
 
-    int8_t sceneid,
+    uint8_t sceneid,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * scene_name,
+    const char* scene_name,
 
     uint8_t extension_field_sets_count,
     const SExtensionFieldSetList *extension_field_sets
@@ -527,13 +527,13 @@ static sl_status_t uic_mqtt_dotdot_scenes_copy_scene_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t mode,
 
-    uint8_t * group_identifier_from,
+    uint16_t group_identifier_from,
 
-    int8_t scene_identifier_from,
+    uint8_t scene_identifier_from,
 
-    uint8_t * group_identifier_to,
+    uint16_t group_identifier_to,
 
-    int8_t scene_identifier_to
+    uint8_t scene_identifier_to
 
 ) {
   uic_mqtt_dotdot_scenes_copy_scene_callback_count++;
@@ -548,9 +548,9 @@ static sl_status_t uic_mqtt_dotdot_scenes_copy_scene_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     zclStatus status,
 
-    uint8_t * group_identifier_from,
+    uint16_t group_identifier_from,
 
-    int8_t scene_identifier_from
+    uint8_t scene_identifier_from
 
 ) {
   uic_mqtt_dotdot_scenes_copy_scene_response_callback_count++;
@@ -598,7 +598,7 @@ static sl_status_t uic_mqtt_dotdot_on_off_off_with_effect_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     OffWithEffectEffectIdentifier effect_identifier,
 
-    int8_t effect_variant
+    uint8_t effect_variant
 
 ) {
   uic_mqtt_dotdot_on_off_off_with_effect_callback_count++;
@@ -624,9 +624,9 @@ static sl_status_t uic_mqtt_dotdot_on_off_on_with_timed_off_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t on_off_control,
 
-    int16_t on_time,
+    uint16_t on_time,
 
-    int16_t off_wait_time
+    uint16_t off_wait_time
 
 ) {
   uic_mqtt_dotdot_on_off_on_with_timed_off_callback_count++;
@@ -639,9 +639,9 @@ static sl_status_t uic_mqtt_dotdot_level_move_to_level_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t level,
+    uint8_t level,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -660,7 +660,7 @@ static sl_status_t uic_mqtt_dotdot_level_move_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     MoveStepMode move_mode,
 
-    int8_t rate,
+    uint8_t rate,
 
     uint8_t options_mask,
 
@@ -679,9 +679,9 @@ static sl_status_t uic_mqtt_dotdot_level_step_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     MoveStepMode step_mode,
 
-    int8_t step_size,
+    uint8_t step_size,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -713,9 +713,9 @@ static sl_status_t uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_func
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t level,
+    uint8_t level,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -734,7 +734,7 @@ static sl_status_t uic_mqtt_dotdot_level_move_with_on_off_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     MoveStepMode move_mode,
 
-    int8_t rate,
+    uint8_t rate,
 
     uint8_t options_mask,
 
@@ -753,9 +753,9 @@ static sl_status_t uic_mqtt_dotdot_level_step_with_on_off_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     MoveStepMode step_mode,
 
-    int8_t step_size,
+    uint8_t step_size,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -787,7 +787,7 @@ static sl_status_t uic_mqtt_dotdot_level_move_to_closest_frequency_callback_func
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t frequency
+    uint16_t frequency
 
 ) {
   uic_mqtt_dotdot_level_move_to_closest_frequency_callback_count++;
@@ -802,7 +802,7 @@ static sl_status_t uic_mqtt_dotdot_alarms_reset_alarm_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t alarm_code,
 
-    uint8_t cluster_identifier
+    uint16_t cluster_identifier
 
 ) {
   uic_mqtt_dotdot_alarms_reset_alarm_callback_count++;
@@ -817,7 +817,7 @@ static sl_status_t uic_mqtt_dotdot_alarms_alarm_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t alarm_code,
 
-    uint8_t cluster_identifier
+    uint16_t cluster_identifier
 
 ) {
   uic_mqtt_dotdot_alarms_alarm_callback_count++;
@@ -845,9 +845,9 @@ static sl_status_t uic_mqtt_dotdot_alarms_get_alarm_response_callback_func(
 
     uint8_t alarm_code,
 
-    uint8_t cluster_identifier,
+    uint16_t cluster_identifier,
 
-    int32_t time_stamp
+    uint32_t time_stamp
 
 ) {
   uic_mqtt_dotdot_alarms_get_alarm_response_callback_count++;
@@ -895,7 +895,7 @@ static sl_status_t uic_mqtt_dotdot_poll_control_check_in_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     bool start_fast_polling,
 
-    int16_t fast_poll_timeout
+    uint16_t fast_poll_timeout
 
 ) {
   uic_mqtt_dotdot_poll_control_check_in_response_callback_count++;
@@ -919,7 +919,7 @@ static sl_status_t uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int32_t new_long_poll_interval
+    uint32_t new_long_poll_interval
 
 ) {
   uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_count++;
@@ -932,7 +932,7 @@ static sl_status_t uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t new_short_poll_interval
+    uint16_t new_short_poll_interval
 
 ) {
   uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_count++;
@@ -945,7 +945,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_lock_door_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t pin_or_rfid_code
+    const char* pin_or_rfid_code
 
 ) {
   uic_mqtt_dotdot_door_lock_lock_door_callback_count++;
@@ -971,7 +971,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_unlock_door_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t pin_or_rfid_code
+    const char* pin_or_rfid_code
 
 ) {
   uic_mqtt_dotdot_door_lock_unlock_door_callback_count++;
@@ -997,7 +997,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_toggle_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t pin_or_rfid_code
+    const char* pin_or_rfid_code
 
 ) {
   uic_mqtt_dotdot_door_lock_toggle_callback_count++;
@@ -1023,9 +1023,9 @@ static sl_status_t uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t timeout_in_seconds,
+    uint16_t timeout_in_seconds,
 
-    uint8_t pin_or_rfid_code
+    const char* pin_or_rfid_code
 
 ) {
   uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_count++;
@@ -1051,7 +1051,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_log_record_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t log_index
+    uint16_t log_index
 
 ) {
   uic_mqtt_dotdot_door_lock_get_log_record_callback_count++;
@@ -1064,19 +1064,19 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_log_record_response_callback_fu
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t log_entryid,
+    uint16_t log_entryid,
 
-    int32_t timestamp,
+    uint32_t timestamp,
 
     GetLogRecordResponseEventType event_type,
 
     DrlkOperEventSource source_operation_event,
 
-    int8_t event_id_or_alarm_code,
+    uint8_t event_id_or_alarm_code,
 
-    int16_t userid,
+    uint16_t userid,
 
-    uint8_t pin
+    const char* pin
 
 ) {
   uic_mqtt_dotdot_door_lock_get_log_record_response_callback_count++;
@@ -1089,13 +1089,13 @@ static sl_status_t uic_mqtt_dotdot_door_lock_set_pin_code_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid,
+    uint16_t userid,
 
     DrlkSettableUserStatus user_status,
 
     DrlkUserType user_type,
 
-    uint8_t pin
+    const char* pin
 
 ) {
   uic_mqtt_dotdot_door_lock_set_pin_code_callback_count++;
@@ -1121,7 +1121,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_pin_code_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_get_pin_code_callback_count++;
@@ -1134,13 +1134,13 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_pin_code_response_callback_func
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t userid,
+    uint16_t userid,
 
     DrlkUserStatus user_status,
 
     DrlkUserType user_type,
 
-    uint8_t code
+    const char* code
 
 ) {
   uic_mqtt_dotdot_door_lock_get_pin_code_response_callback_count++;
@@ -1153,7 +1153,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_clear_pin_code_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_clear_pin_code_callback_count++;
@@ -1203,7 +1203,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_set_user_status_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid,
+    uint16_t userid,
 
     DrlkSettableUserStatus user_status
 
@@ -1231,7 +1231,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_user_status_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_get_user_status_callback_count++;
@@ -1244,7 +1244,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_user_status_response_callback_f
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t userid,
+    uint16_t userid,
 
     DrlkUserStatus user_status
 
@@ -1259,19 +1259,19 @@ static sl_status_t uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid,
+    uint16_t userid,
 
     uint8_t days_mask,
 
-    int8_t start_hour,
+    uint8_t start_hour,
 
-    int8_t start_minute,
+    uint8_t start_minute,
 
-    int8_t end_hour,
+    uint8_t end_hour,
 
-    int8_t end_minute
+    uint8_t end_minute
 
 ) {
   uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_count++;
@@ -1297,9 +1297,9 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_count++;
@@ -1312,21 +1312,21 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callb
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t scheduleid,
+    uint8_t scheduleid,
 
-    int16_t userid,
+    uint16_t userid,
 
     zclStatus status,
 
     uint8_t days_mask,
 
-    int8_t start_hour,
+    uint8_t start_hour,
 
-    int8_t start_minute,
+    uint8_t start_minute,
 
-    int8_t end_hour,
+    uint8_t end_hour,
 
-    int8_t end_minute
+    uint8_t end_minute
 
 ) {
   uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_count++;
@@ -1339,9 +1339,9 @@ static sl_status_t uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_fun
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_count++;
@@ -1367,13 +1367,13 @@ static sl_status_t uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_func
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid,
+    uint16_t userid,
 
-    int32_t local_start_time,
+    uint32_t local_start_time,
 
-    int32_t local_end_time
+    uint32_t local_end_time
 
 ) {
   uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_count++;
@@ -1399,9 +1399,9 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_func
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_count++;
@@ -1414,15 +1414,15 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_call
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t scheduleid,
+    uint8_t scheduleid,
 
-    int16_t userid,
+    uint16_t userid,
 
     zclStatus status,
 
-    int32_t local_start_time,
+    uint32_t local_start_time,
 
-    int32_t local_end_time
+    uint32_t local_end_time
 
 ) {
   uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_count++;
@@ -1435,9 +1435,9 @@ static sl_status_t uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_fu
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * scheduleid,
+    uint8_t scheduleid,
 
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_count++;
@@ -1463,11 +1463,11 @@ static sl_status_t uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * holiday_scheduleid,
+    uint8_t holiday_scheduleid,
 
-    int32_t local_start_time,
+    uint32_t local_start_time,
 
-    int32_t local_end_time,
+    uint32_t local_end_time,
 
     DrlkOperMode operating_mode_during_holiday
 
@@ -1495,7 +1495,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * holiday_scheduleid
+    uint8_t holiday_scheduleid
 
 ) {
   uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_count++;
@@ -1508,13 +1508,13 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callb
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t holiday_scheduleid,
+    uint8_t holiday_scheduleid,
 
     zclStatus status,
 
-    int32_t local_start_time,
+    uint32_t local_start_time,
 
-    int32_t local_end_time,
+    uint32_t local_end_time,
 
     DrlkOperMode operating_mode_during_holiday
 
@@ -1529,7 +1529,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_fun
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * holiday_scheduleid
+    uint8_t holiday_scheduleid
 
 ) {
   uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_count++;
@@ -1555,7 +1555,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_set_user_type_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid,
+    uint16_t userid,
 
     DrlkUserType user_type
 
@@ -1583,7 +1583,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_user_type_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_get_user_type_callback_count++;
@@ -1596,7 +1596,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_user_type_response_callback_fun
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t userid,
+    uint16_t userid,
 
     DrlkUserType user_type
 
@@ -1611,13 +1611,13 @@ static sl_status_t uic_mqtt_dotdot_door_lock_set_rfid_code_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid,
+    uint16_t userid,
 
     DrlkSettableUserStatus user_status,
 
     DrlkUserType user_type,
 
-    uint8_t rfid_code
+    const char* rfid_code
 
 ) {
   uic_mqtt_dotdot_door_lock_set_rfid_code_callback_count++;
@@ -1643,7 +1643,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_rfid_code_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_get_rfid_code_callback_count++;
@@ -1656,13 +1656,13 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_rfid_code_response_callback_fun
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t userid,
+    uint16_t userid,
 
     DrlkUserStatus user_status,
 
     DrlkUserType user_type,
 
-    uint8_t rfid_code
+    const char* rfid_code
 
 ) {
   uic_mqtt_dotdot_door_lock_get_rfid_code_response_callback_count++;
@@ -1675,7 +1675,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_clear_rfid_code_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t * userid
+    uint16_t userid
 
 ) {
   uic_mqtt_dotdot_door_lock_clear_rfid_code_callback_count++;
@@ -1727,11 +1727,11 @@ static sl_status_t uic_mqtt_dotdot_door_lock_set_user_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     DataOperationTypeEnum operation_type,
 
-    int16_t user_index,
+    uint16_t user_index,
 
     const char* user_name,
 
-    int32_t user_uniqueid,
+    uint32_t user_uniqueid,
 
     DrlkSettableUserStatus user_status,
 
@@ -1750,7 +1750,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_get_user_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_index
+    uint16_t user_index
 
 ) {
   uic_mqtt_dotdot_door_lock_get_user_callback_count++;
@@ -1774,7 +1774,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_clear_user_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_index
+    uint16_t user_index
 
 ) {
   uic_mqtt_dotdot_door_lock_clear_user_callback_count++;
@@ -1791,11 +1791,11 @@ static sl_status_t uic_mqtt_dotdot_door_lock_operating_event_notification_callba
 
     OperatingEventNotificationOperationEventCode operation_event_code,
 
-    int16_t userid,
+    uint16_t userid,
 
-    uint8_t pin,
+    const char* pin,
 
-    int32_t local_time,
+    uint32_t local_time,
 
     const char* data
 
@@ -1814,15 +1814,15 @@ static sl_status_t uic_mqtt_dotdot_door_lock_programming_event_notification_call
 
     ProgrammingEventNotificationProgramEventCode program_event_code,
 
-    int16_t userid,
+    uint16_t userid,
 
-    uint8_t pin,
+    const char* pin,
 
     DrlkUserType user_type,
 
     DrlkUserStatus user_status,
 
-    int32_t local_time,
+    uint32_t local_time,
 
     const char* data
 
@@ -1841,9 +1841,9 @@ static sl_status_t uic_mqtt_dotdot_door_lock_set_credential_callback_func(
 
     CredentialStruct credential,
 
-    uint8_t credential_data,
+    const char* credential_data,
 
-    int16_t user_index,
+    uint16_t user_index,
 
     DrlkSettableUserStatus user_status,
 
@@ -1908,7 +1908,7 @@ static sl_status_t uic_mqtt_dotdot_door_lock_unbolt_door_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t pin_code
+    const char* pin_code
 
 ) {
   uic_mqtt_dotdot_door_lock_unbolt_door_callback_count++;
@@ -1954,7 +1954,7 @@ static sl_status_t uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_fun
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t lift_value
+    uint16_t lift_value
 
 ) {
   uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_count++;
@@ -1967,7 +1967,7 @@ static sl_status_t uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callbac
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t percentage_lift_value
+    uint8_t percentage_lift_value
 
 ) {
   uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_count++;
@@ -1980,7 +1980,7 @@ static sl_status_t uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_fun
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t tilt_value
+    uint16_t tilt_value
 
 ) {
   uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_count++;
@@ -1993,7 +1993,7 @@ static sl_status_t uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callbac
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t percentage_tilt_value
+    uint8_t percentage_tilt_value
 
 ) {
   uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_count++;
@@ -2006,7 +2006,7 @@ static sl_status_t uic_mqtt_dotdot_barrier_control_go_to_percent_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t percent_open
+    uint8_t percent_open
 
 ) {
   uic_mqtt_dotdot_barrier_control_go_to_percent_callback_count++;
@@ -2085,17 +2085,17 @@ static sl_status_t uic_mqtt_dotdot_thermostat_get_relay_status_log_response_call
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t time_of_day,
+    uint16_t time_of_day,
 
     uint8_t relay_status,
 
     int16_t local_temperature,
 
-    int8_t humidity_percentage,
+    uint8_t humidity_percentage,
 
     int16_t set_point,
 
-    int16_t unread_entries
+    uint16_t unread_entries
 
 ) {
   uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_count++;
@@ -2145,11 +2145,11 @@ static sl_status_t uic_mqtt_dotdot_color_control_move_to_hue_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t hue,
+    uint8_t hue,
 
     CCDirection direction,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -2168,7 +2168,7 @@ static sl_status_t uic_mqtt_dotdot_color_control_move_hue_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     CCMoveMode move_mode,
 
-    int8_t rate,
+    uint8_t rate,
 
     uint8_t options_mask,
 
@@ -2187,9 +2187,9 @@ static sl_status_t uic_mqtt_dotdot_color_control_step_hue_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     CCStepMode step_mode,
 
-    int8_t step_size,
+    uint8_t step_size,
 
-    int8_t transition_time,
+    uint8_t transition_time,
 
     uint8_t options_mask,
 
@@ -2206,9 +2206,9 @@ static sl_status_t uic_mqtt_dotdot_color_control_move_to_saturation_callback_fun
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t saturation,
+    uint8_t saturation,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -2227,7 +2227,7 @@ static sl_status_t uic_mqtt_dotdot_color_control_move_saturation_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     CCMoveMode move_mode,
 
-    int8_t rate,
+    uint8_t rate,
 
     uint8_t options_mask,
 
@@ -2246,9 +2246,9 @@ static sl_status_t uic_mqtt_dotdot_color_control_step_saturation_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     CCStepMode step_mode,
 
-    int8_t step_size,
+    uint8_t step_size,
 
-    int8_t transition_time,
+    uint8_t transition_time,
 
     uint8_t options_mask,
 
@@ -2265,11 +2265,11 @@ static sl_status_t uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_call
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t hue,
+    uint8_t hue,
 
-    int8_t saturation,
+    uint8_t saturation,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -2286,11 +2286,11 @@ static sl_status_t uic_mqtt_dotdot_color_control_move_to_color_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t colorx,
+    uint16_t colorx,
 
-    int16_t colory,
+    uint16_t colory,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -2330,7 +2330,7 @@ static sl_status_t uic_mqtt_dotdot_color_control_step_color_callback_func(
 
     int16_t stepy,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -2347,9 +2347,9 @@ static sl_status_t uic_mqtt_dotdot_color_control_move_to_color_temperature_callb
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t color_temperature_mireds,
+    uint16_t color_temperature_mireds,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -2366,11 +2366,11 @@ static sl_status_t uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_f
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t enhanced_hue,
+    uint16_t enhanced_hue,
 
     CCDirection direction,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -2389,7 +2389,7 @@ static sl_status_t uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_func
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     CCMoveMode move_mode,
 
-    int16_t rate,
+    uint16_t rate,
 
     uint8_t options_mask,
 
@@ -2408,9 +2408,9 @@ static sl_status_t uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_func
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     CCStepMode step_mode,
 
-    int16_t step_size,
+    uint16_t step_size,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -2427,11 +2427,11 @@ static sl_status_t uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_satura
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t enhanced_hue,
+    uint16_t enhanced_hue,
 
-    int8_t saturation,
+    uint8_t saturation,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
     uint8_t options_mask,
 
@@ -2454,9 +2454,9 @@ static sl_status_t uic_mqtt_dotdot_color_control_color_loop_set_callback_func(
 
     CCColorLoopDirection direction,
 
-    int16_t time,
+    uint16_t time,
 
-    int16_t start_hue,
+    uint16_t start_hue,
 
     uint8_t options_mask,
 
@@ -2490,11 +2490,11 @@ static sl_status_t uic_mqtt_dotdot_color_control_move_color_temperature_callback
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     CCMoveMode move_mode,
 
-    int16_t rate,
+    uint16_t rate,
 
-    uint8_t * color_temperature_minimum_mireds,
+    uint16_t color_temperature_minimum_mireds,
 
-    uint8_t * color_temperature_maximum_mireds,
+    uint16_t color_temperature_maximum_mireds,
 
     uint8_t options_mask,
 
@@ -2513,13 +2513,13 @@ static sl_status_t uic_mqtt_dotdot_color_control_step_color_temperature_callback
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     CCStepMode step_mode,
 
-    int16_t step_size,
+    uint16_t step_size,
 
-    int16_t transition_time,
+    uint16_t transition_time,
 
-    uint8_t * color_temperature_minimum_mireds,
+    uint16_t color_temperature_minimum_mireds,
 
-    uint8_t * color_temperature_maximum_mireds,
+    uint16_t color_temperature_maximum_mireds,
 
     uint8_t options_mask,
 
@@ -2538,7 +2538,7 @@ static sl_status_t uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     ZoneEnrollResponseEnrollResponseCode enroll_response_code,
 
-    int8_t zoneid
+    uint8_t zoneid
 
 ) {
   uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_count++;
@@ -2555,9 +2555,9 @@ static sl_status_t uic_mqtt_dotdot_ias_zone_zone_status_change_notification_call
 
     uint8_t extended_status,
 
-    int8_t zoneid,
+    uint8_t zoneid,
 
-    int16_t delay
+    uint16_t delay
 
 ) {
   uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_count++;
@@ -2583,7 +2583,7 @@ static sl_status_t uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     IasZoneType zone_type,
 
-    int16_t manufacturer_code
+    uint16_t manufacturer_code
 
 ) {
   uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_count++;
@@ -2596,9 +2596,9 @@ static sl_status_t uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t test_mode_duration,
+    uint8_t test_mode_duration,
 
-    int8_t current_zone_sensitivity_level
+    uint8_t current_zone_sensitivity_level
 
 ) {
   uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_count++;
@@ -2613,9 +2613,9 @@ static sl_status_t uic_mqtt_dotdot_iaswd_start_warning_callback_func(
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     uint8_t siren_configuration,
 
-    int16_t warning_duration,
+    uint16_t warning_duration,
 
-    int8_t strobe_duty_cycle,
+    uint8_t strobe_duty_cycle,
 
     IaswdLevel strobe_level
 
@@ -2643,14 +2643,14 @@ static sl_status_t uic_mqtt_dotdot_electrical_measurement_get_profile_info_respo
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int8_t profile_count,
+    uint8_t profile_count,
 
     ProfileIntervalPeriod profile_interval_period,
 
-    int8_t max_number_of_intervals,
+    uint8_t max_number_of_intervals,
 
     uint8_t list_of_attributes_count,
-    const uint8_t *list_of_attributes
+    const uint16_t *list_of_attributes
 
 ) {
   uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_count++;
@@ -2674,18 +2674,18 @@ static sl_status_t uic_mqtt_dotdot_electrical_measurement_get_measurement_profil
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t start_time,
+    uint32_t start_time,
 
     GetMeasurementProfileResponseStatus status,
 
     ProfileIntervalPeriod profile_interval_period,
 
-    int8_t number_of_intervals_delivered,
+    uint8_t number_of_intervals_delivered,
 
-    uint8_t attribute_id,
+    uint16_t attribute_id,
 
     uint8_t intervals_count,
-    const int8_t *intervals
+    const uint8_t *intervals
 
 ) {
   uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_count++;
@@ -2698,11 +2698,11 @@ static sl_status_t uic_mqtt_dotdot_electrical_measurement_get_measurement_profil
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    uint8_t attributeid,
+    uint16_t attributeid,
 
-    uint8_t start_time,
+    uint32_t start_time,
 
-    int8_t number_of_intervals
+    uint8_t number_of_intervals
 
 ) {
   uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_count++;
@@ -2721,13 +2721,13 @@ static sl_status_t uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_ca
 
     bool transmission_successful,
 
-    int16_t transmission_time_ms,
+    uint16_t transmission_time_ms,
 
     int8_t tx_powerd_bm,
 
-    int8_t tx_channel,
+    uint8_t tx_channel,
 
-    int8_t routing_attempts,
+    uint8_t routing_attempts,
 
     bool route_changed,
 
@@ -2743,7 +2743,7 @@ static sl_status_t uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_ca
 
     int8_t ackrssi,
 
-    int8_t ack_channel,
+    uint8_t ack_channel,
 
     const char* last_route_failed_link_functionalunid,
 
@@ -2836,7 +2836,7 @@ static sl_status_t uic_mqtt_dotdot_binding_bind_callback_func(
 
     const char* destination_unid,
 
-    int8_t destination_ep
+    uint8_t destination_ep
 
 ) {
   uic_mqtt_dotdot_binding_bind_callback_count++;
@@ -2853,7 +2853,7 @@ static sl_status_t uic_mqtt_dotdot_binding_unbind_callback_func(
 
     const char* destination_unid,
 
-    int8_t destination_ep
+    uint8_t destination_ep
 
 ) {
   uic_mqtt_dotdot_binding_unbind_callback_count++;
@@ -2911,7 +2911,7 @@ static sl_status_t uic_mqtt_dotdot_configuration_parameters_discover_parameter_c
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t parameter_id
+    uint16_t parameter_id
 
 ) {
   uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_count++;
@@ -2935,7 +2935,7 @@ static sl_status_t uic_mqtt_dotdot_configuration_parameters_set_parameter_callba
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t parameter_id,
+    uint16_t parameter_id,
 
     int64_t value
 
@@ -2950,9 +2950,9 @@ static sl_status_t uic_mqtt_dotdot_configuration_parameters_discover_parameter_r
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t first_parameter_id,
+    uint16_t first_parameter_id,
 
-    int16_t last_parameter_id
+    uint16_t last_parameter_id
 
 ) {
   uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_count++;
@@ -2965,7 +2965,7 @@ static sl_status_t uic_mqtt_dotdot_user_credential_add_user_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     UserTypeEnum user_type,
 
@@ -2975,7 +2975,7 @@ static sl_status_t uic_mqtt_dotdot_user_credential_add_user_callback_func(
 
     const char* user_name,
 
-    int16_t expiring_timeout_minutes,
+    uint16_t expiring_timeout_minutes,
 
     UserNameEncodingType user_name_encoding
 
@@ -2990,7 +2990,7 @@ static sl_status_t uic_mqtt_dotdot_user_credential_modify_user_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     UserTypeEnum user_type,
 
@@ -3000,7 +3000,7 @@ static sl_status_t uic_mqtt_dotdot_user_credential_modify_user_callback_func(
 
     const char* user_name,
 
-    int16_t expiring_timeout_minutes,
+    uint16_t expiring_timeout_minutes,
 
     UserNameEncodingType user_name_encoding
 
@@ -3015,7 +3015,7 @@ static sl_status_t uic_mqtt_dotdot_user_credential_delete_user_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid
+    uint16_t user_uniqueid
 
 ) {
   uic_mqtt_dotdot_user_credential_delete_user_callback_count++;
@@ -3028,11 +3028,11 @@ static sl_status_t uic_mqtt_dotdot_user_credential_add_credential_callback_func(
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot,
+    uint16_t credential_slot,
 
     const char* credential_data
 
@@ -3047,11 +3047,11 @@ static sl_status_t uic_mqtt_dotdot_user_credential_modify_credential_callback_fu
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot,
+    uint16_t credential_slot,
 
     const char* credential_data
 
@@ -3066,11 +3066,11 @@ static sl_status_t uic_mqtt_dotdot_user_credential_delete_credential_callback_fu
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot
+    uint16_t credential_slot
 
 ) {
   uic_mqtt_dotdot_user_credential_delete_credential_callback_count++;
@@ -3118,7 +3118,7 @@ static sl_status_t uic_mqtt_dotdot_user_credential_delete_all_credentials_for_us
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid
+    uint16_t user_uniqueid
 
 ) {
   uic_mqtt_dotdot_user_credential_delete_all_credentials_for_user_callback_count++;
@@ -3131,7 +3131,7 @@ static sl_status_t uic_mqtt_dotdot_user_credential_delete_all_credentials_for_us
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type
 
@@ -3146,13 +3146,13 @@ static sl_status_t uic_mqtt_dotdot_user_credential_credential_learn_start_add_ca
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot,
+    uint16_t credential_slot,
 
-    int8_t credential_learn_timeout
+    uint8_t credential_learn_timeout
 
 ) {
   uic_mqtt_dotdot_user_credential_credential_learn_start_add_callback_count++;
@@ -3165,13 +3165,13 @@ static sl_status_t uic_mqtt_dotdot_user_credential_credential_learn_start_modify
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid,
+    uint16_t user_uniqueid,
 
     CredType credential_type,
 
-    int16_t credential_slot,
+    uint16_t credential_slot,
 
-    int8_t credential_learn_timeout
+    uint8_t credential_learn_timeout
 
 ) {
   uic_mqtt_dotdot_user_credential_credential_learn_start_modify_callback_count++;
@@ -3197,13 +3197,13 @@ static sl_status_t uic_mqtt_dotdot_user_credential_credential_association_callba
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     CredType credential_type,
 
-    int16_t source_user_uniqueid,
+    uint16_t source_user_uniqueid,
 
-    int16_t source_credential_slot,
+    uint16_t source_credential_slot,
 
-    int16_t destination_user_uniqueid,
+    uint16_t destination_user_uniqueid,
 
-    int16_t destination_credential_slot
+    uint16_t destination_credential_slot
 
 ) {
   uic_mqtt_dotdot_user_credential_credential_association_callback_count++;
@@ -3216,7 +3216,7 @@ static sl_status_t uic_mqtt_dotdot_user_credential_get_user_checksum_callback_fu
     dotdot_unid_t unid,
     dotdot_endpoint_id_t endpoint,
     uic_mqtt_dotdot_callback_call_type_t callback_type,
-    int16_t user_uniqueid
+    uint16_t user_uniqueid
 
 ) {
   uic_mqtt_dotdot_user_credential_get_user_checksum_callback_count++;
@@ -3327,9 +3327,9 @@ static sl_status_t uic_mqtt_dotdot_unify_humidity_control_setpoint_set_callback_
     uic_mqtt_dotdot_callback_call_type_t callback_type,
     SetpointType type,
 
-    int8_t precision,
+    uint8_t precision,
 
-    int8_t scale,
+    uint8_t scale,
 
     int32_t value
 
diff --git a/components/unify_dotdot_attribute_store/zap-generated/include/unify_dotdot_attribute_store_helpers.h b/components/unify_dotdot_attribute_store/zap-generated/include/unify_dotdot_attribute_store_helpers.h
index 3693cf08fb..8027848315 100644
--- a/components/unify_dotdot_attribute_store/zap-generated/include/unify_dotdot_attribute_store_helpers.h
+++ b/components/unify_dotdot_attribute_store/zap-generated/include/unify_dotdot_attribute_store_helpers.h
@@ -63,7 +63,7 @@ bool dotdot_is_supported_basic_zcl_version (
  *
  * @returns ZCLVersion attribute
  */
-int8_t dotdot_get_basic_zcl_version(
+uint8_t dotdot_get_basic_zcl_version(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -83,7 +83,7 @@ sl_status_t dotdot_set_basic_zcl_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_zcl_version
+  uint8_t new_zcl_version
   );
 
 /**
@@ -169,7 +169,7 @@ bool dotdot_is_supported_basic_application_version (
  *
  * @returns ApplicationVersion attribute
  */
-int8_t dotdot_get_basic_application_version(
+uint8_t dotdot_get_basic_application_version(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -189,7 +189,7 @@ sl_status_t dotdot_set_basic_application_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_application_version
+  uint8_t new_application_version
   );
 
 /**
@@ -275,7 +275,7 @@ bool dotdot_is_supported_basic_stack_version (
  *
  * @returns StackVersion attribute
  */
-int8_t dotdot_get_basic_stack_version(
+uint8_t dotdot_get_basic_stack_version(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -295,7 +295,7 @@ sl_status_t dotdot_set_basic_stack_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_stack_version
+  uint8_t new_stack_version
   );
 
 /**
@@ -381,7 +381,7 @@ bool dotdot_is_supported_basic_hw_version (
  *
  * @returns HWVersion attribute
  */
-int8_t dotdot_get_basic_hw_version(
+uint8_t dotdot_get_basic_hw_version(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -401,7 +401,7 @@ sl_status_t dotdot_set_basic_hw_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_hw_version
+  uint8_t new_hw_version
   );
 
 /**
@@ -1135,7 +1135,7 @@ bool dotdot_is_supported_basic_product_code (
  *
  * @returns ProductCode attribute
  */
-uint8_t dotdot_get_basic_product_code(
+const char* dotdot_get_basic_product_code(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -1155,7 +1155,7 @@ sl_status_t dotdot_set_basic_product_code(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_product_code
+  const char* new_product_code
   );
 
 /**
@@ -2347,7 +2347,7 @@ bool dotdot_is_supported_power_configuration_mains_voltage (
  *
  * @returns MainsVoltage attribute
  */
-int16_t dotdot_get_power_configuration_mains_voltage(
+uint16_t dotdot_get_power_configuration_mains_voltage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -2367,7 +2367,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mains_voltage
+  uint16_t new_mains_voltage
   );
 
 /**
@@ -2453,7 +2453,7 @@ bool dotdot_is_supported_power_configuration_mains_frequency (
  *
  * @returns MainsFrequency attribute
  */
-int8_t dotdot_get_power_configuration_mains_frequency(
+uint8_t dotdot_get_power_configuration_mains_frequency(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -2473,7 +2473,7 @@ sl_status_t dotdot_set_power_configuration_mains_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_mains_frequency
+  uint8_t new_mains_frequency
   );
 
 /**
@@ -2665,7 +2665,7 @@ bool dotdot_is_supported_power_configuration_mains_voltage_min_threshold (
  *
  * @returns MainsVoltageMinThreshold attribute
  */
-int16_t dotdot_get_power_configuration_mains_voltage_min_threshold(
+uint16_t dotdot_get_power_configuration_mains_voltage_min_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -2685,7 +2685,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mains_voltage_min_threshold
+  uint16_t new_mains_voltage_min_threshold
   );
 
 /**
@@ -2771,7 +2771,7 @@ bool dotdot_is_supported_power_configuration_mains_voltage_max_threshold (
  *
  * @returns MainsVoltageMaxThreshold attribute
  */
-int16_t dotdot_get_power_configuration_mains_voltage_max_threshold(
+uint16_t dotdot_get_power_configuration_mains_voltage_max_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -2791,7 +2791,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage_max_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mains_voltage_max_threshold
+  uint16_t new_mains_voltage_max_threshold
   );
 
 /**
@@ -2877,7 +2877,7 @@ bool dotdot_is_supported_power_configuration_mains_voltage_dwell_trip_point (
  *
  * @returns MainsVoltageDwellTripPoint attribute
  */
-int16_t dotdot_get_power_configuration_mains_voltage_dwell_trip_point(
+uint16_t dotdot_get_power_configuration_mains_voltage_dwell_trip_point(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -2897,7 +2897,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage_dwell_trip_point(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mains_voltage_dwell_trip_point
+  uint16_t new_mains_voltage_dwell_trip_point
   );
 
 /**
@@ -2983,7 +2983,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage (
  *
  * @returns BatteryVoltage attribute
  */
-int8_t dotdot_get_power_configuration_battery_voltage(
+uint8_t dotdot_get_power_configuration_battery_voltage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -3003,7 +3003,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage
+  uint8_t new_battery_voltage
   );
 
 /**
@@ -3089,7 +3089,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_remaining (
  *
  * @returns BatteryPercentageRemaining attribute
  */
-int8_t dotdot_get_power_configuration_battery_percentage_remaining(
+uint8_t dotdot_get_power_configuration_battery_percentage_remaining(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -3109,7 +3109,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_remaining(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_remaining
+  uint8_t new_battery_percentage_remaining
   );
 
 /**
@@ -3410,7 +3410,7 @@ bool dotdot_is_supported_power_configuration_batterya_hr_rating (
  *
  * @returns BatteryAHrRating attribute
  */
-int16_t dotdot_get_power_configuration_batterya_hr_rating(
+uint16_t dotdot_get_power_configuration_batterya_hr_rating(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -3430,7 +3430,7 @@ sl_status_t dotdot_set_power_configuration_batterya_hr_rating(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_batterya_hr_rating
+  uint16_t new_batterya_hr_rating
   );
 
 /**
@@ -3516,7 +3516,7 @@ bool dotdot_is_supported_power_configuration_battery_quantity (
  *
  * @returns BatteryQuantity attribute
  */
-int8_t dotdot_get_power_configuration_battery_quantity(
+uint8_t dotdot_get_power_configuration_battery_quantity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -3536,7 +3536,7 @@ sl_status_t dotdot_set_power_configuration_battery_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_quantity
+  uint8_t new_battery_quantity
   );
 
 /**
@@ -3622,7 +3622,7 @@ bool dotdot_is_supported_power_configuration_battery_rated_voltage (
  *
  * @returns BatteryRatedVoltage attribute
  */
-int8_t dotdot_get_power_configuration_battery_rated_voltage(
+uint8_t dotdot_get_power_configuration_battery_rated_voltage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -3642,7 +3642,7 @@ sl_status_t dotdot_set_power_configuration_battery_rated_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_rated_voltage
+  uint8_t new_battery_rated_voltage
   );
 
 /**
@@ -3834,7 +3834,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage_min_threshold (
  *
  * @returns BatteryVoltageMinThreshold attribute
  */
-int8_t dotdot_get_power_configuration_battery_voltage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery_voltage_min_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -3854,7 +3854,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage_min_threshold
+  uint8_t new_battery_voltage_min_threshold
   );
 
 /**
@@ -3940,7 +3940,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage_threshold1 (
  *
  * @returns BatteryVoltageThreshold1 attribute
  */
-int8_t dotdot_get_power_configuration_battery_voltage_threshold1(
+uint8_t dotdot_get_power_configuration_battery_voltage_threshold1(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -3960,7 +3960,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage_threshold1
+  uint8_t new_battery_voltage_threshold1
   );
 
 /**
@@ -4046,7 +4046,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage_threshold2 (
  *
  * @returns BatteryVoltageThreshold2 attribute
  */
-int8_t dotdot_get_power_configuration_battery_voltage_threshold2(
+uint8_t dotdot_get_power_configuration_battery_voltage_threshold2(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -4066,7 +4066,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage_threshold2
+  uint8_t new_battery_voltage_threshold2
   );
 
 /**
@@ -4152,7 +4152,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage_threshold3 (
  *
  * @returns BatteryVoltageThreshold3 attribute
  */
-int8_t dotdot_get_power_configuration_battery_voltage_threshold3(
+uint8_t dotdot_get_power_configuration_battery_voltage_threshold3(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -4172,7 +4172,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage_threshold3
+  uint8_t new_battery_voltage_threshold3
   );
 
 /**
@@ -4258,7 +4258,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_min_threshold (
  *
  * @returns BatteryPercentageMinThreshold attribute
  */
-int8_t dotdot_get_power_configuration_battery_percentage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery_percentage_min_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -4278,7 +4278,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_min_threshold
+  uint8_t new_battery_percentage_min_threshold
   );
 
 /**
@@ -4364,7 +4364,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_threshold1 (
  *
  * @returns BatteryPercentageThreshold1 attribute
  */
-int8_t dotdot_get_power_configuration_battery_percentage_threshold1(
+uint8_t dotdot_get_power_configuration_battery_percentage_threshold1(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -4384,7 +4384,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_threshold1
+  uint8_t new_battery_percentage_threshold1
   );
 
 /**
@@ -4470,7 +4470,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_threshold2 (
  *
  * @returns BatteryPercentageThreshold2 attribute
  */
-int8_t dotdot_get_power_configuration_battery_percentage_threshold2(
+uint8_t dotdot_get_power_configuration_battery_percentage_threshold2(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -4490,7 +4490,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_threshold2
+  uint8_t new_battery_percentage_threshold2
   );
 
 /**
@@ -4576,7 +4576,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_threshold3 (
  *
  * @returns BatteryPercentageThreshold3 attribute
  */
-int8_t dotdot_get_power_configuration_battery_percentage_threshold3(
+uint8_t dotdot_get_power_configuration_battery_percentage_threshold3(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -4596,7 +4596,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_threshold3
+  uint8_t new_battery_percentage_threshold3
   );
 
 /**
@@ -4788,7 +4788,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage (
  *
  * @returns Battery2Voltage attribute
  */
-int8_t dotdot_get_power_configuration_battery2_voltage(
+uint8_t dotdot_get_power_configuration_battery2_voltage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -4808,7 +4808,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage
+  uint8_t new_battery2_voltage
   );
 
 /**
@@ -4894,7 +4894,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_remaining (
  *
  * @returns Battery2PercentageRemaining attribute
  */
-int8_t dotdot_get_power_configuration_battery2_percentage_remaining(
+uint8_t dotdot_get_power_configuration_battery2_percentage_remaining(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -4914,7 +4914,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_remaining(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_remaining
+  uint8_t new_battery2_percentage_remaining
   );
 
 /**
@@ -5215,7 +5215,7 @@ bool dotdot_is_supported_power_configuration_battery2a_hr_rating (
  *
  * @returns Battery2AHrRating attribute
  */
-int16_t dotdot_get_power_configuration_battery2a_hr_rating(
+uint16_t dotdot_get_power_configuration_battery2a_hr_rating(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -5235,7 +5235,7 @@ sl_status_t dotdot_set_power_configuration_battery2a_hr_rating(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_battery2a_hr_rating
+  uint16_t new_battery2a_hr_rating
   );
 
 /**
@@ -5321,7 +5321,7 @@ bool dotdot_is_supported_power_configuration_battery2_quantity (
  *
  * @returns Battery2Quantity attribute
  */
-int8_t dotdot_get_power_configuration_battery2_quantity(
+uint8_t dotdot_get_power_configuration_battery2_quantity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -5341,7 +5341,7 @@ sl_status_t dotdot_set_power_configuration_battery2_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_quantity
+  uint8_t new_battery2_quantity
   );
 
 /**
@@ -5427,7 +5427,7 @@ bool dotdot_is_supported_power_configuration_battery2_rated_voltage (
  *
  * @returns Battery2RatedVoltage attribute
  */
-int8_t dotdot_get_power_configuration_battery2_rated_voltage(
+uint8_t dotdot_get_power_configuration_battery2_rated_voltage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -5447,7 +5447,7 @@ sl_status_t dotdot_set_power_configuration_battery2_rated_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_rated_voltage
+  uint8_t new_battery2_rated_voltage
   );
 
 /**
@@ -5639,7 +5639,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage_min_threshold (
  *
  * @returns Battery2VoltageMinThreshold attribute
  */
-int8_t dotdot_get_power_configuration_battery2_voltage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery2_voltage_min_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -5659,7 +5659,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage_min_threshold
+  uint8_t new_battery2_voltage_min_threshold
   );
 
 /**
@@ -5745,7 +5745,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage_threshold1 (
  *
  * @returns Battery2VoltageThreshold1 attribute
  */
-int8_t dotdot_get_power_configuration_battery2_voltage_threshold1(
+uint8_t dotdot_get_power_configuration_battery2_voltage_threshold1(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -5765,7 +5765,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage_threshold1
+  uint8_t new_battery2_voltage_threshold1
   );
 
 /**
@@ -5851,7 +5851,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage_threshold2 (
  *
  * @returns Battery2VoltageThreshold2 attribute
  */
-int8_t dotdot_get_power_configuration_battery2_voltage_threshold2(
+uint8_t dotdot_get_power_configuration_battery2_voltage_threshold2(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -5871,7 +5871,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage_threshold2
+  uint8_t new_battery2_voltage_threshold2
   );
 
 /**
@@ -5957,7 +5957,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage_threshold3 (
  *
  * @returns Battery2VoltageThreshold3 attribute
  */
-int8_t dotdot_get_power_configuration_battery2_voltage_threshold3(
+uint8_t dotdot_get_power_configuration_battery2_voltage_threshold3(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -5977,7 +5977,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage_threshold3
+  uint8_t new_battery2_voltage_threshold3
   );
 
 /**
@@ -6063,7 +6063,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_min_threshold (
  *
  * @returns Battery2PercentageMinThreshold attribute
  */
-int8_t dotdot_get_power_configuration_battery2_percentage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery2_percentage_min_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -6083,7 +6083,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_min_threshold
+  uint8_t new_battery2_percentage_min_threshold
   );
 
 /**
@@ -6169,7 +6169,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_threshold1 (
  *
  * @returns Battery2PercentageThreshold1 attribute
  */
-int8_t dotdot_get_power_configuration_battery2_percentage_threshold1(
+uint8_t dotdot_get_power_configuration_battery2_percentage_threshold1(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -6189,7 +6189,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_threshold1
+  uint8_t new_battery2_percentage_threshold1
   );
 
 /**
@@ -6275,7 +6275,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_threshold2 (
  *
  * @returns Battery2PercentageThreshold2 attribute
  */
-int8_t dotdot_get_power_configuration_battery2_percentage_threshold2(
+uint8_t dotdot_get_power_configuration_battery2_percentage_threshold2(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -6295,7 +6295,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_threshold2
+  uint8_t new_battery2_percentage_threshold2
   );
 
 /**
@@ -6381,7 +6381,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_threshold3 (
  *
  * @returns Battery2PercentageThreshold3 attribute
  */
-int8_t dotdot_get_power_configuration_battery2_percentage_threshold3(
+uint8_t dotdot_get_power_configuration_battery2_percentage_threshold3(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -6401,7 +6401,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_threshold3
+  uint8_t new_battery2_percentage_threshold3
   );
 
 /**
@@ -6593,7 +6593,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage (
  *
  * @returns Battery3Voltage attribute
  */
-int8_t dotdot_get_power_configuration_battery3_voltage(
+uint8_t dotdot_get_power_configuration_battery3_voltage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -6613,7 +6613,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage
+  uint8_t new_battery3_voltage
   );
 
 /**
@@ -6699,7 +6699,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_remaining (
  *
  * @returns Battery3PercentageRemaining attribute
  */
-int8_t dotdot_get_power_configuration_battery3_percentage_remaining(
+uint8_t dotdot_get_power_configuration_battery3_percentage_remaining(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -6719,7 +6719,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_remaining(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_remaining
+  uint8_t new_battery3_percentage_remaining
   );
 
 /**
@@ -7020,7 +7020,7 @@ bool dotdot_is_supported_power_configuration_battery3a_hr_rating (
  *
  * @returns Battery3AHrRating attribute
  */
-int16_t dotdot_get_power_configuration_battery3a_hr_rating(
+uint16_t dotdot_get_power_configuration_battery3a_hr_rating(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -7040,7 +7040,7 @@ sl_status_t dotdot_set_power_configuration_battery3a_hr_rating(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_battery3a_hr_rating
+  uint16_t new_battery3a_hr_rating
   );
 
 /**
@@ -7126,7 +7126,7 @@ bool dotdot_is_supported_power_configuration_battery3_quantity (
  *
  * @returns Battery3Quantity attribute
  */
-int8_t dotdot_get_power_configuration_battery3_quantity(
+uint8_t dotdot_get_power_configuration_battery3_quantity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -7146,7 +7146,7 @@ sl_status_t dotdot_set_power_configuration_battery3_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_quantity
+  uint8_t new_battery3_quantity
   );
 
 /**
@@ -7232,7 +7232,7 @@ bool dotdot_is_supported_power_configuration_battery3_rated_voltage (
  *
  * @returns Battery3RatedVoltage attribute
  */
-int8_t dotdot_get_power_configuration_battery3_rated_voltage(
+uint8_t dotdot_get_power_configuration_battery3_rated_voltage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -7252,7 +7252,7 @@ sl_status_t dotdot_set_power_configuration_battery3_rated_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_rated_voltage
+  uint8_t new_battery3_rated_voltage
   );
 
 /**
@@ -7444,7 +7444,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage_min_threshold (
  *
  * @returns Battery3VoltageMinThreshold attribute
  */
-int8_t dotdot_get_power_configuration_battery3_voltage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery3_voltage_min_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -7464,7 +7464,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage_min_threshold
+  uint8_t new_battery3_voltage_min_threshold
   );
 
 /**
@@ -7550,7 +7550,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage_threshold1 (
  *
  * @returns Battery3VoltageThreshold1 attribute
  */
-int8_t dotdot_get_power_configuration_battery3_voltage_threshold1(
+uint8_t dotdot_get_power_configuration_battery3_voltage_threshold1(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -7570,7 +7570,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage_threshold1
+  uint8_t new_battery3_voltage_threshold1
   );
 
 /**
@@ -7656,7 +7656,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage_threshold2 (
  *
  * @returns Battery3VoltageThreshold2 attribute
  */
-int8_t dotdot_get_power_configuration_battery3_voltage_threshold2(
+uint8_t dotdot_get_power_configuration_battery3_voltage_threshold2(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -7676,7 +7676,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage_threshold2
+  uint8_t new_battery3_voltage_threshold2
   );
 
 /**
@@ -7762,7 +7762,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage_threshold3 (
  *
  * @returns Battery3VoltageThreshold3 attribute
  */
-int8_t dotdot_get_power_configuration_battery3_voltage_threshold3(
+uint8_t dotdot_get_power_configuration_battery3_voltage_threshold3(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -7782,7 +7782,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage_threshold3
+  uint8_t new_battery3_voltage_threshold3
   );
 
 /**
@@ -7868,7 +7868,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_min_threshold (
  *
  * @returns Battery3PercentageMinThreshold attribute
  */
-int8_t dotdot_get_power_configuration_battery3_percentage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery3_percentage_min_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -7888,7 +7888,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_min_threshold
+  uint8_t new_battery3_percentage_min_threshold
   );
 
 /**
@@ -7974,7 +7974,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_threshold1 (
  *
  * @returns Battery3PercentageThreshold1 attribute
  */
-int8_t dotdot_get_power_configuration_battery3_percentage_threshold1(
+uint8_t dotdot_get_power_configuration_battery3_percentage_threshold1(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -7994,7 +7994,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_threshold1
+  uint8_t new_battery3_percentage_threshold1
   );
 
 /**
@@ -8080,7 +8080,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_threshold2 (
  *
  * @returns Battery3PercentageThreshold2 attribute
  */
-int8_t dotdot_get_power_configuration_battery3_percentage_threshold2(
+uint8_t dotdot_get_power_configuration_battery3_percentage_threshold2(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -8100,7 +8100,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_threshold2
+  uint8_t new_battery3_percentage_threshold2
   );
 
 /**
@@ -8186,7 +8186,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_threshold3 (
  *
  * @returns Battery3PercentageThreshold3 attribute
  */
-int8_t dotdot_get_power_configuration_battery3_percentage_threshold3(
+uint8_t dotdot_get_power_configuration_battery3_percentage_threshold3(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -8206,7 +8206,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_threshold3
+  uint8_t new_battery3_percentage_threshold3
   );
 
 /**
@@ -8744,7 +8744,7 @@ bool dotdot_is_supported_device_temperature_configuration_over_temp_total_dwell
  *
  * @returns OverTempTotalDwell attribute
  */
-int16_t dotdot_get_device_temperature_configuration_over_temp_total_dwell(
+uint16_t dotdot_get_device_temperature_configuration_over_temp_total_dwell(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -8764,7 +8764,7 @@ sl_status_t dotdot_set_device_temperature_configuration_over_temp_total_dwell(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_over_temp_total_dwell
+  uint16_t new_over_temp_total_dwell
   );
 
 /**
@@ -9168,7 +9168,7 @@ bool dotdot_is_supported_device_temperature_configuration_low_temp_dwell_trip_po
  *
  * @returns LowTempDwellTripPoint attribute
  */
-int32_t dotdot_get_device_temperature_configuration_low_temp_dwell_trip_point(
+uint32_t dotdot_get_device_temperature_configuration_low_temp_dwell_trip_point(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -9188,7 +9188,7 @@ sl_status_t dotdot_set_device_temperature_configuration_low_temp_dwell_trip_poin
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_low_temp_dwell_trip_point
+  uint32_t new_low_temp_dwell_trip_point
   );
 
 /**
@@ -9274,7 +9274,7 @@ bool dotdot_is_supported_device_temperature_configuration_high_temp_dwell_trip_p
  *
  * @returns HighTempDwellTripPoint attribute
  */
-int32_t dotdot_get_device_temperature_configuration_high_temp_dwell_trip_point(
+uint32_t dotdot_get_device_temperature_configuration_high_temp_dwell_trip_point(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -9294,7 +9294,7 @@ sl_status_t dotdot_set_device_temperature_configuration_high_temp_dwell_trip_poi
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_high_temp_dwell_trip_point
+  uint32_t new_high_temp_dwell_trip_point
   );
 
 /**
@@ -9408,7 +9408,7 @@ bool dotdot_is_supported_identify_identify_time (
  *
  * @returns IdentifyTime attribute
  */
-int16_t dotdot_get_identify_identify_time(
+uint16_t dotdot_get_identify_identify_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -9428,7 +9428,7 @@ sl_status_t dotdot_set_identify_identify_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_identify_time
+  uint16_t new_identify_time
   );
 
 /**
@@ -9676,7 +9676,7 @@ bool dotdot_is_supported_scenes_scene_count (
  *
  * @returns SceneCount attribute
  */
-int8_t dotdot_get_scenes_scene_count(
+uint8_t dotdot_get_scenes_scene_count(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -9696,7 +9696,7 @@ sl_status_t dotdot_set_scenes_scene_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_scene_count
+  uint8_t new_scene_count
   );
 
 /**
@@ -9782,7 +9782,7 @@ bool dotdot_is_supported_scenes_current_scene (
  *
  * @returns CurrentScene attribute
  */
-int8_t dotdot_get_scenes_current_scene(
+uint8_t dotdot_get_scenes_current_scene(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -9802,7 +9802,7 @@ sl_status_t dotdot_set_scenes_current_scene(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_scene
+  uint8_t new_current_scene
   );
 
 /**
@@ -9888,7 +9888,7 @@ bool dotdot_is_supported_scenes_current_group (
  *
  * @returns CurrentGroup attribute
  */
-uint8_t * dotdot_get_scenes_current_group(
+uint16_t dotdot_get_scenes_current_group(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -9908,7 +9908,7 @@ sl_status_t dotdot_set_scenes_current_group(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t * new_current_group
+  uint16_t new_current_group
   );
 
 /**
@@ -10661,7 +10661,7 @@ bool dotdot_is_supported_on_off_on_time (
  *
  * @returns OnTime attribute
  */
-int16_t dotdot_get_on_off_on_time(
+uint16_t dotdot_get_on_off_on_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -10681,7 +10681,7 @@ sl_status_t dotdot_set_on_off_on_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_on_time
+  uint16_t new_on_time
   );
 
 /**
@@ -10767,7 +10767,7 @@ bool dotdot_is_supported_on_off_off_wait_time (
  *
  * @returns OffWaitTime attribute
  */
-int16_t dotdot_get_on_off_off_wait_time(
+uint16_t dotdot_get_on_off_off_wait_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -10787,7 +10787,7 @@ sl_status_t dotdot_set_on_off_off_wait_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_off_wait_time
+  uint16_t new_off_wait_time
   );
 
 /**
@@ -11007,7 +11007,7 @@ bool dotdot_is_supported_level_current_level (
  *
  * @returns CurrentLevel attribute
  */
-int8_t dotdot_get_level_current_level(
+uint8_t dotdot_get_level_current_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -11027,7 +11027,7 @@ sl_status_t dotdot_set_level_current_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_level
+  uint8_t new_current_level
   );
 
 /**
@@ -11113,7 +11113,7 @@ bool dotdot_is_supported_level_remaining_time (
  *
  * @returns RemainingTime attribute
  */
-int16_t dotdot_get_level_remaining_time(
+uint16_t dotdot_get_level_remaining_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -11133,7 +11133,7 @@ sl_status_t dotdot_set_level_remaining_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_remaining_time
+  uint16_t new_remaining_time
   );
 
 /**
@@ -11219,7 +11219,7 @@ bool dotdot_is_supported_level_min_level (
  *
  * @returns MinLevel attribute
  */
-int8_t dotdot_get_level_min_level(
+uint8_t dotdot_get_level_min_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -11239,7 +11239,7 @@ sl_status_t dotdot_set_level_min_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_min_level
+  uint8_t new_min_level
   );
 
 /**
@@ -11325,7 +11325,7 @@ bool dotdot_is_supported_level_max_level (
  *
  * @returns MaxLevel attribute
  */
-int8_t dotdot_get_level_max_level(
+uint8_t dotdot_get_level_max_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -11345,7 +11345,7 @@ sl_status_t dotdot_set_level_max_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_max_level
+  uint8_t new_max_level
   );
 
 /**
@@ -11431,7 +11431,7 @@ bool dotdot_is_supported_level_current_frequency (
  *
  * @returns CurrentFrequency attribute
  */
-int16_t dotdot_get_level_current_frequency(
+uint16_t dotdot_get_level_current_frequency(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -11451,7 +11451,7 @@ sl_status_t dotdot_set_level_current_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_current_frequency
+  uint16_t new_current_frequency
   );
 
 /**
@@ -11537,7 +11537,7 @@ bool dotdot_is_supported_level_min_frequency (
  *
  * @returns MinFrequency attribute
  */
-int16_t dotdot_get_level_min_frequency(
+uint16_t dotdot_get_level_min_frequency(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -11557,7 +11557,7 @@ sl_status_t dotdot_set_level_min_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_frequency
+  uint16_t new_min_frequency
   );
 
 /**
@@ -11643,7 +11643,7 @@ bool dotdot_is_supported_level_max_frequency (
  *
  * @returns MaxFrequency attribute
  */
-int16_t dotdot_get_level_max_frequency(
+uint16_t dotdot_get_level_max_frequency(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -11663,7 +11663,7 @@ sl_status_t dotdot_set_level_max_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_frequency
+  uint16_t new_max_frequency
   );
 
 /**
@@ -11855,7 +11855,7 @@ bool dotdot_is_supported_level_on_off_transition_time (
  *
  * @returns OnOffTransitionTime attribute
  */
-int16_t dotdot_get_level_on_off_transition_time(
+uint16_t dotdot_get_level_on_off_transition_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -11875,7 +11875,7 @@ sl_status_t dotdot_set_level_on_off_transition_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_on_off_transition_time
+  uint16_t new_on_off_transition_time
   );
 
 /**
@@ -11961,7 +11961,7 @@ bool dotdot_is_supported_level_on_level (
  *
  * @returns OnLevel attribute
  */
-int8_t dotdot_get_level_on_level(
+uint8_t dotdot_get_level_on_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -11981,7 +11981,7 @@ sl_status_t dotdot_set_level_on_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_on_level
+  uint8_t new_on_level
   );
 
 /**
@@ -12067,7 +12067,7 @@ bool dotdot_is_supported_level_on_transition_time (
  *
  * @returns OnTransitionTime attribute
  */
-int16_t dotdot_get_level_on_transition_time(
+uint16_t dotdot_get_level_on_transition_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -12087,7 +12087,7 @@ sl_status_t dotdot_set_level_on_transition_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_on_transition_time
+  uint16_t new_on_transition_time
   );
 
 /**
@@ -12173,7 +12173,7 @@ bool dotdot_is_supported_level_off_transition_time (
  *
  * @returns OffTransitionTime attribute
  */
-int16_t dotdot_get_level_off_transition_time(
+uint16_t dotdot_get_level_off_transition_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -12193,7 +12193,7 @@ sl_status_t dotdot_set_level_off_transition_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_off_transition_time
+  uint16_t new_off_transition_time
   );
 
 /**
@@ -12279,7 +12279,7 @@ bool dotdot_is_supported_level_default_move_rate (
  *
  * @returns DefaultMoveRate attribute
  */
-int16_t dotdot_get_level_default_move_rate(
+uint16_t dotdot_get_level_default_move_rate(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -12299,7 +12299,7 @@ sl_status_t dotdot_set_level_default_move_rate(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_default_move_rate
+  uint16_t new_default_move_rate
   );
 
 /**
@@ -12385,7 +12385,7 @@ bool dotdot_is_supported_level_start_up_current_level (
  *
  * @returns StartUpCurrentLevel attribute
  */
-int8_t dotdot_get_level_start_up_current_level(
+uint8_t dotdot_get_level_start_up_current_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -12405,7 +12405,7 @@ sl_status_t dotdot_set_level_start_up_current_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_start_up_current_level
+  uint8_t new_start_up_current_level
   );
 
 /**
@@ -12519,7 +12519,7 @@ bool dotdot_is_supported_alarms_alarm_count (
  *
  * @returns AlarmCount attribute
  */
-int16_t dotdot_get_alarms_alarm_count(
+uint16_t dotdot_get_alarms_alarm_count(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -12539,7 +12539,7 @@ sl_status_t dotdot_set_alarms_alarm_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_alarm_count
+  uint16_t new_alarm_count
   );
 
 /**
@@ -12653,7 +12653,7 @@ bool dotdot_is_supported_time_time (
  *
  * @returns Time attribute
  */
-uint8_t dotdot_get_time_time(
+uint32_t dotdot_get_time_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -12673,7 +12673,7 @@ sl_status_t dotdot_set_time_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_time
+  uint32_t new_time
   );
 
 /**
@@ -12971,7 +12971,7 @@ bool dotdot_is_supported_time_dst_start (
  *
  * @returns DstStart attribute
  */
-int32_t dotdot_get_time_dst_start(
+uint32_t dotdot_get_time_dst_start(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -12991,7 +12991,7 @@ sl_status_t dotdot_set_time_dst_start(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_dst_start
+  uint32_t new_dst_start
   );
 
 /**
@@ -13077,7 +13077,7 @@ bool dotdot_is_supported_time_dst_end (
  *
  * @returns DstEnd attribute
  */
-int32_t dotdot_get_time_dst_end(
+uint32_t dotdot_get_time_dst_end(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -13097,7 +13097,7 @@ sl_status_t dotdot_set_time_dst_end(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_dst_end
+  uint32_t new_dst_end
   );
 
 /**
@@ -13289,7 +13289,7 @@ bool dotdot_is_supported_time_standard_time (
  *
  * @returns StandardTime attribute
  */
-int32_t dotdot_get_time_standard_time(
+uint32_t dotdot_get_time_standard_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -13309,7 +13309,7 @@ sl_status_t dotdot_set_time_standard_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_standard_time
+  uint32_t new_standard_time
   );
 
 /**
@@ -13395,7 +13395,7 @@ bool dotdot_is_supported_time_local_time (
  *
  * @returns LocalTime attribute
  */
-int32_t dotdot_get_time_local_time(
+uint32_t dotdot_get_time_local_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -13415,7 +13415,7 @@ sl_status_t dotdot_set_time_local_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_local_time
+  uint32_t new_local_time
   );
 
 /**
@@ -13501,7 +13501,7 @@ bool dotdot_is_supported_time_last_set_time (
  *
  * @returns LastSetTime attribute
  */
-uint8_t dotdot_get_time_last_set_time(
+uint32_t dotdot_get_time_last_set_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -13521,7 +13521,7 @@ sl_status_t dotdot_set_time_last_set_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_last_set_time
+  uint32_t new_last_set_time
   );
 
 /**
@@ -13607,7 +13607,7 @@ bool dotdot_is_supported_time_valid_until_time (
  *
  * @returns ValidUntilTime attribute
  */
-uint8_t dotdot_get_time_valid_until_time(
+uint32_t dotdot_get_time_valid_until_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -13627,7 +13627,7 @@ sl_status_t dotdot_set_time_valid_until_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_valid_until_time
+  uint32_t new_valid_until_time
   );
 
 /**
@@ -13741,7 +13741,7 @@ bool dotdot_is_supported_poll_control_check_in_interval (
  *
  * @returns CheckInInterval attribute
  */
-int32_t dotdot_get_poll_control_check_in_interval(
+uint32_t dotdot_get_poll_control_check_in_interval(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -13761,7 +13761,7 @@ sl_status_t dotdot_set_poll_control_check_in_interval(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_check_in_interval
+  uint32_t new_check_in_interval
   );
 
 /**
@@ -13847,7 +13847,7 @@ bool dotdot_is_supported_poll_control_long_poll_interval (
  *
  * @returns LongPollInterval attribute
  */
-int32_t dotdot_get_poll_control_long_poll_interval(
+uint32_t dotdot_get_poll_control_long_poll_interval(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -13867,7 +13867,7 @@ sl_status_t dotdot_set_poll_control_long_poll_interval(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_long_poll_interval
+  uint32_t new_long_poll_interval
   );
 
 /**
@@ -13953,7 +13953,7 @@ bool dotdot_is_supported_poll_control_short_poll_interval (
  *
  * @returns ShortPollInterval attribute
  */
-int16_t dotdot_get_poll_control_short_poll_interval(
+uint16_t dotdot_get_poll_control_short_poll_interval(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -13973,7 +13973,7 @@ sl_status_t dotdot_set_poll_control_short_poll_interval(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_short_poll_interval
+  uint16_t new_short_poll_interval
   );
 
 /**
@@ -14059,7 +14059,7 @@ bool dotdot_is_supported_poll_control_fast_poll_timeout (
  *
  * @returns FastPollTimeout attribute
  */
-int16_t dotdot_get_poll_control_fast_poll_timeout(
+uint16_t dotdot_get_poll_control_fast_poll_timeout(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -14079,7 +14079,7 @@ sl_status_t dotdot_set_poll_control_fast_poll_timeout(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_fast_poll_timeout
+  uint16_t new_fast_poll_timeout
   );
 
 /**
@@ -14165,7 +14165,7 @@ bool dotdot_is_supported_poll_control_check_in_interval_min (
  *
  * @returns CheckInIntervalMin attribute
  */
-int32_t dotdot_get_poll_control_check_in_interval_min(
+uint32_t dotdot_get_poll_control_check_in_interval_min(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -14185,7 +14185,7 @@ sl_status_t dotdot_set_poll_control_check_in_interval_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_check_in_interval_min
+  uint32_t new_check_in_interval_min
   );
 
 /**
@@ -14271,7 +14271,7 @@ bool dotdot_is_supported_poll_control_long_poll_interval_min (
  *
  * @returns LongPollIntervalMin attribute
  */
-int32_t dotdot_get_poll_control_long_poll_interval_min(
+uint32_t dotdot_get_poll_control_long_poll_interval_min(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -14291,7 +14291,7 @@ sl_status_t dotdot_set_poll_control_long_poll_interval_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_long_poll_interval_min
+  uint32_t new_long_poll_interval_min
   );
 
 /**
@@ -14377,7 +14377,7 @@ bool dotdot_is_supported_poll_control_fast_poll_timeout_max (
  *
  * @returns FastPollTimeoutMax attribute
  */
-int16_t dotdot_get_poll_control_fast_poll_timeout_max(
+uint16_t dotdot_get_poll_control_fast_poll_timeout_max(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -14397,7 +14397,7 @@ sl_status_t dotdot_set_poll_control_fast_poll_timeout_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_fast_poll_timeout_max
+  uint16_t new_fast_poll_timeout_max
   );
 
 /**
@@ -14511,7 +14511,7 @@ bool dotdot_is_supported_shade_configuration_physical_closed_limit (
  *
  * @returns PhysicalClosedLimit attribute
  */
-int16_t dotdot_get_shade_configuration_physical_closed_limit(
+uint16_t dotdot_get_shade_configuration_physical_closed_limit(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -14531,7 +14531,7 @@ sl_status_t dotdot_set_shade_configuration_physical_closed_limit(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_closed_limit
+  uint16_t new_physical_closed_limit
   );
 
 /**
@@ -14617,7 +14617,7 @@ bool dotdot_is_supported_shade_configuration_motor_step_size (
  *
  * @returns MotorStepSize attribute
  */
-int8_t dotdot_get_shade_configuration_motor_step_size(
+uint8_t dotdot_get_shade_configuration_motor_step_size(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -14637,7 +14637,7 @@ sl_status_t dotdot_set_shade_configuration_motor_step_size(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_motor_step_size
+  uint8_t new_motor_step_size
   );
 
 /**
@@ -14829,7 +14829,7 @@ bool dotdot_is_supported_shade_configuration_closed_limit (
  *
  * @returns ClosedLimit attribute
  */
-int16_t dotdot_get_shade_configuration_closed_limit(
+uint16_t dotdot_get_shade_configuration_closed_limit(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -14849,7 +14849,7 @@ sl_status_t dotdot_set_shade_configuration_closed_limit(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_closed_limit
+  uint16_t new_closed_limit
   );
 
 /**
@@ -15493,7 +15493,7 @@ bool dotdot_is_supported_door_lock_door_open_events (
  *
  * @returns DoorOpenEvents attribute
  */
-int32_t dotdot_get_door_lock_door_open_events(
+uint32_t dotdot_get_door_lock_door_open_events(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -15513,7 +15513,7 @@ sl_status_t dotdot_set_door_lock_door_open_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_door_open_events
+  uint32_t new_door_open_events
   );
 
 /**
@@ -15599,7 +15599,7 @@ bool dotdot_is_supported_door_lock_door_closed_events (
  *
  * @returns DoorClosedEvents attribute
  */
-int32_t dotdot_get_door_lock_door_closed_events(
+uint32_t dotdot_get_door_lock_door_closed_events(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -15619,7 +15619,7 @@ sl_status_t dotdot_set_door_lock_door_closed_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_door_closed_events
+  uint32_t new_door_closed_events
   );
 
 /**
@@ -15705,7 +15705,7 @@ bool dotdot_is_supported_door_lock_open_period (
  *
  * @returns OpenPeriod attribute
  */
-int16_t dotdot_get_door_lock_open_period(
+uint16_t dotdot_get_door_lock_open_period(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -15725,7 +15725,7 @@ sl_status_t dotdot_set_door_lock_open_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_open_period
+  uint16_t new_open_period
   );
 
 /**
@@ -15811,7 +15811,7 @@ bool dotdot_is_supported_door_lock_number_of_log_records_supported (
  *
  * @returns NumberOfLogRecordsSupported attribute
  */
-int16_t dotdot_get_door_lock_number_of_log_records_supported(
+uint16_t dotdot_get_door_lock_number_of_log_records_supported(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -15831,7 +15831,7 @@ sl_status_t dotdot_set_door_lock_number_of_log_records_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_log_records_supported
+  uint16_t new_number_of_log_records_supported
   );
 
 /**
@@ -15917,7 +15917,7 @@ bool dotdot_is_supported_door_lock_number_of_total_users_supported (
  *
  * @returns NumberOfTotalUsersSupported attribute
  */
-int16_t dotdot_get_door_lock_number_of_total_users_supported(
+uint16_t dotdot_get_door_lock_number_of_total_users_supported(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -15937,7 +15937,7 @@ sl_status_t dotdot_set_door_lock_number_of_total_users_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_total_users_supported
+  uint16_t new_number_of_total_users_supported
   );
 
 /**
@@ -16023,7 +16023,7 @@ bool dotdot_is_supported_door_lock_number_of_pin_users_supported (
  *
  * @returns NumberOfPINUsersSupported attribute
  */
-int16_t dotdot_get_door_lock_number_of_pin_users_supported(
+uint16_t dotdot_get_door_lock_number_of_pin_users_supported(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -16043,7 +16043,7 @@ sl_status_t dotdot_set_door_lock_number_of_pin_users_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_pin_users_supported
+  uint16_t new_number_of_pin_users_supported
   );
 
 /**
@@ -16129,7 +16129,7 @@ bool dotdot_is_supported_door_lock_number_of_rfid_users_supported (
  *
  * @returns NumberOfRFIDUsersSupported attribute
  */
-int16_t dotdot_get_door_lock_number_of_rfid_users_supported(
+uint16_t dotdot_get_door_lock_number_of_rfid_users_supported(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -16149,7 +16149,7 @@ sl_status_t dotdot_set_door_lock_number_of_rfid_users_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_rfid_users_supported
+  uint16_t new_number_of_rfid_users_supported
   );
 
 /**
@@ -16235,7 +16235,7 @@ bool dotdot_is_supported_door_lock_number_of_week_day_schedules_supported_per_us
  *
  * @returns NumberOfWeekDaySchedulesSupportedPerUser attribute
  */
-int8_t dotdot_get_door_lock_number_of_week_day_schedules_supported_per_user(
+uint8_t dotdot_get_door_lock_number_of_week_day_schedules_supported_per_user(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -16255,7 +16255,7 @@ sl_status_t dotdot_set_door_lock_number_of_week_day_schedules_supported_per_user
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_week_day_schedules_supported_per_user
+  uint8_t new_number_of_week_day_schedules_supported_per_user
   );
 
 /**
@@ -16341,7 +16341,7 @@ bool dotdot_is_supported_door_lock_number_of_year_day_schedules_supported_per_us
  *
  * @returns NumberOfYearDaySchedulesSupportedPerUser attribute
  */
-int8_t dotdot_get_door_lock_number_of_year_day_schedules_supported_per_user(
+uint8_t dotdot_get_door_lock_number_of_year_day_schedules_supported_per_user(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -16361,7 +16361,7 @@ sl_status_t dotdot_set_door_lock_number_of_year_day_schedules_supported_per_user
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_year_day_schedules_supported_per_user
+  uint8_t new_number_of_year_day_schedules_supported_per_user
   );
 
 /**
@@ -16447,7 +16447,7 @@ bool dotdot_is_supported_door_lock_number_of_holiday_schedules_supported (
  *
  * @returns NumberOfHolidaySchedulesSupported attribute
  */
-int8_t dotdot_get_door_lock_number_of_holiday_schedules_supported(
+uint8_t dotdot_get_door_lock_number_of_holiday_schedules_supported(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -16467,7 +16467,7 @@ sl_status_t dotdot_set_door_lock_number_of_holiday_schedules_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_holiday_schedules_supported
+  uint8_t new_number_of_holiday_schedules_supported
   );
 
 /**
@@ -16553,7 +16553,7 @@ bool dotdot_is_supported_door_lock_max_pin_code_length (
  *
  * @returns MaxPINCodeLength attribute
  */
-int8_t dotdot_get_door_lock_max_pin_code_length(
+uint8_t dotdot_get_door_lock_max_pin_code_length(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -16573,7 +16573,7 @@ sl_status_t dotdot_set_door_lock_max_pin_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_max_pin_code_length
+  uint8_t new_max_pin_code_length
   );
 
 /**
@@ -16659,7 +16659,7 @@ bool dotdot_is_supported_door_lock_min_pin_code_length (
  *
  * @returns MinPINCodeLength attribute
  */
-int8_t dotdot_get_door_lock_min_pin_code_length(
+uint8_t dotdot_get_door_lock_min_pin_code_length(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -16679,7 +16679,7 @@ sl_status_t dotdot_set_door_lock_min_pin_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_min_pin_code_length
+  uint8_t new_min_pin_code_length
   );
 
 /**
@@ -16765,7 +16765,7 @@ bool dotdot_is_supported_door_lock_max_rfid_code_length (
  *
  * @returns MaxRFIDCodeLength attribute
  */
-int8_t dotdot_get_door_lock_max_rfid_code_length(
+uint8_t dotdot_get_door_lock_max_rfid_code_length(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -16785,7 +16785,7 @@ sl_status_t dotdot_set_door_lock_max_rfid_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_max_rfid_code_length
+  uint8_t new_max_rfid_code_length
   );
 
 /**
@@ -16871,7 +16871,7 @@ bool dotdot_is_supported_door_lock_min_rfid_code_length (
  *
  * @returns MinRFIDCodeLength attribute
  */
-int8_t dotdot_get_door_lock_min_rfid_code_length(
+uint8_t dotdot_get_door_lock_min_rfid_code_length(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -16891,7 +16891,7 @@ sl_status_t dotdot_set_door_lock_min_rfid_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_min_rfid_code_length
+  uint8_t new_min_rfid_code_length
   );
 
 /**
@@ -17083,7 +17083,7 @@ bool dotdot_is_supported_door_lock_number_of_credentials_supported_per_user (
  *
  * @returns NumberOfCredentialsSupportedPerUser attribute
  */
-int8_t dotdot_get_door_lock_number_of_credentials_supported_per_user(
+uint8_t dotdot_get_door_lock_number_of_credentials_supported_per_user(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -17103,7 +17103,7 @@ sl_status_t dotdot_set_door_lock_number_of_credentials_supported_per_user(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_credentials_supported_per_user
+  uint8_t new_number_of_credentials_supported_per_user
   );
 
 /**
@@ -17404,7 +17404,7 @@ bool dotdot_is_supported_door_lock_led_settings (
  *
  * @returns LEDSettings attribute
  */
-int8_t dotdot_get_door_lock_led_settings(
+uint8_t dotdot_get_door_lock_led_settings(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -17424,7 +17424,7 @@ sl_status_t dotdot_set_door_lock_led_settings(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_led_settings
+  uint8_t new_led_settings
   );
 
 /**
@@ -17510,7 +17510,7 @@ bool dotdot_is_supported_door_lock_auto_relock_time (
  *
  * @returns AutoRelockTime attribute
  */
-int32_t dotdot_get_door_lock_auto_relock_time(
+uint32_t dotdot_get_door_lock_auto_relock_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -17530,7 +17530,7 @@ sl_status_t dotdot_set_door_lock_auto_relock_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_auto_relock_time
+  uint32_t new_auto_relock_time
   );
 
 /**
@@ -17616,7 +17616,7 @@ bool dotdot_is_supported_door_lock_sound_volume (
  *
  * @returns SoundVolume attribute
  */
-int8_t dotdot_get_door_lock_sound_volume(
+uint8_t dotdot_get_door_lock_sound_volume(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -17636,7 +17636,7 @@ sl_status_t dotdot_set_door_lock_sound_volume(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_sound_volume
+  uint8_t new_sound_volume
   );
 
 /**
@@ -18570,7 +18570,7 @@ bool dotdot_is_supported_door_lock_wrong_code_entry_limit (
  *
  * @returns WrongCodeEntryLimit attribute
  */
-int8_t dotdot_get_door_lock_wrong_code_entry_limit(
+uint8_t dotdot_get_door_lock_wrong_code_entry_limit(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -18590,7 +18590,7 @@ sl_status_t dotdot_set_door_lock_wrong_code_entry_limit(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_wrong_code_entry_limit
+  uint8_t new_wrong_code_entry_limit
   );
 
 /**
@@ -18676,7 +18676,7 @@ bool dotdot_is_supported_door_lock_user_code_temporary_disable_time (
  *
  * @returns UserCodeTemporaryDisableTime attribute
  */
-int8_t dotdot_get_door_lock_user_code_temporary_disable_time(
+uint8_t dotdot_get_door_lock_user_code_temporary_disable_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -18696,7 +18696,7 @@ sl_status_t dotdot_set_door_lock_user_code_temporary_disable_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_user_code_temporary_disable_time
+  uint8_t new_user_code_temporary_disable_time
   );
 
 /**
@@ -19100,7 +19100,7 @@ bool dotdot_is_supported_door_lock_expiring_user_timeout (
  *
  * @returns ExpiringUserTimeout attribute
  */
-int16_t dotdot_get_door_lock_expiring_user_timeout(
+uint16_t dotdot_get_door_lock_expiring_user_timeout(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -19120,7 +19120,7 @@ sl_status_t dotdot_set_door_lock_expiring_user_timeout(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_expiring_user_timeout
+  uint16_t new_expiring_user_timeout
   );
 
 /**
@@ -20294,7 +20294,7 @@ bool dotdot_is_supported_window_covering_physical_closed_limit_lift (
  *
  * @returns PhysicalClosedLimitLift attribute
  */
-int16_t dotdot_get_window_covering_physical_closed_limit_lift(
+uint16_t dotdot_get_window_covering_physical_closed_limit_lift(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -20314,7 +20314,7 @@ sl_status_t dotdot_set_window_covering_physical_closed_limit_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_closed_limit_lift
+  uint16_t new_physical_closed_limit_lift
   );
 
 /**
@@ -20400,7 +20400,7 @@ bool dotdot_is_supported_window_covering_physical_closed_limit_tilt (
  *
  * @returns PhysicalClosedLimitTilt attribute
  */
-int16_t dotdot_get_window_covering_physical_closed_limit_tilt(
+uint16_t dotdot_get_window_covering_physical_closed_limit_tilt(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -20420,7 +20420,7 @@ sl_status_t dotdot_set_window_covering_physical_closed_limit_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_closed_limit_tilt
+  uint16_t new_physical_closed_limit_tilt
   );
 
 /**
@@ -20506,7 +20506,7 @@ bool dotdot_is_supported_window_covering_current_position_lift (
  *
  * @returns CurrentPositionLift attribute
  */
-int16_t dotdot_get_window_covering_current_position_lift(
+uint16_t dotdot_get_window_covering_current_position_lift(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -20526,7 +20526,7 @@ sl_status_t dotdot_set_window_covering_current_position_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_current_position_lift
+  uint16_t new_current_position_lift
   );
 
 /**
@@ -20612,7 +20612,7 @@ bool dotdot_is_supported_window_covering_current_position_tilt (
  *
  * @returns CurrentPositionTilt attribute
  */
-int16_t dotdot_get_window_covering_current_position_tilt(
+uint16_t dotdot_get_window_covering_current_position_tilt(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -20632,7 +20632,7 @@ sl_status_t dotdot_set_window_covering_current_position_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_current_position_tilt
+  uint16_t new_current_position_tilt
   );
 
 /**
@@ -20718,7 +20718,7 @@ bool dotdot_is_supported_window_covering_number_of_actuations_lift (
  *
  * @returns NumberOfActuationsLift attribute
  */
-int16_t dotdot_get_window_covering_number_of_actuations_lift(
+uint16_t dotdot_get_window_covering_number_of_actuations_lift(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -20738,7 +20738,7 @@ sl_status_t dotdot_set_window_covering_number_of_actuations_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_actuations_lift
+  uint16_t new_number_of_actuations_lift
   );
 
 /**
@@ -20824,7 +20824,7 @@ bool dotdot_is_supported_window_covering_number_of_actuations_tilt (
  *
  * @returns NumberOfActuationsTilt attribute
  */
-int16_t dotdot_get_window_covering_number_of_actuations_tilt(
+uint16_t dotdot_get_window_covering_number_of_actuations_tilt(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -20844,7 +20844,7 @@ sl_status_t dotdot_set_window_covering_number_of_actuations_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_actuations_tilt
+  uint16_t new_number_of_actuations_tilt
   );
 
 /**
@@ -21036,7 +21036,7 @@ bool dotdot_is_supported_window_covering_current_position_lift_percentage (
  *
  * @returns CurrentPositionLiftPercentage attribute
  */
-int8_t dotdot_get_window_covering_current_position_lift_percentage(
+uint8_t dotdot_get_window_covering_current_position_lift_percentage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -21056,7 +21056,7 @@ sl_status_t dotdot_set_window_covering_current_position_lift_percentage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_position_lift_percentage
+  uint8_t new_current_position_lift_percentage
   );
 
 /**
@@ -21142,7 +21142,7 @@ bool dotdot_is_supported_window_covering_current_position_tilt_percentage (
  *
  * @returns CurrentPositionTiltPercentage attribute
  */
-int8_t dotdot_get_window_covering_current_position_tilt_percentage(
+uint8_t dotdot_get_window_covering_current_position_tilt_percentage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -21162,7 +21162,7 @@ sl_status_t dotdot_set_window_covering_current_position_tilt_percentage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_position_tilt_percentage
+  uint8_t new_current_position_tilt_percentage
   );
 
 /**
@@ -21248,7 +21248,7 @@ bool dotdot_is_supported_window_covering_installed_open_limit_lift (
  *
  * @returns InstalledOpenLimitLift attribute
  */
-int16_t dotdot_get_window_covering_installed_open_limit_lift(
+uint16_t dotdot_get_window_covering_installed_open_limit_lift(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -21268,7 +21268,7 @@ sl_status_t dotdot_set_window_covering_installed_open_limit_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_installed_open_limit_lift
+  uint16_t new_installed_open_limit_lift
   );
 
 /**
@@ -21354,7 +21354,7 @@ bool dotdot_is_supported_window_covering_installed_closed_limit_lift (
  *
  * @returns InstalledClosedLimitLift attribute
  */
-int16_t dotdot_get_window_covering_installed_closed_limit_lift(
+uint16_t dotdot_get_window_covering_installed_closed_limit_lift(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -21374,7 +21374,7 @@ sl_status_t dotdot_set_window_covering_installed_closed_limit_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_installed_closed_limit_lift
+  uint16_t new_installed_closed_limit_lift
   );
 
 /**
@@ -21460,7 +21460,7 @@ bool dotdot_is_supported_window_covering_installed_open_limit_tilt (
  *
  * @returns InstalledOpenLimitTilt attribute
  */
-int16_t dotdot_get_window_covering_installed_open_limit_tilt(
+uint16_t dotdot_get_window_covering_installed_open_limit_tilt(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -21480,7 +21480,7 @@ sl_status_t dotdot_set_window_covering_installed_open_limit_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_installed_open_limit_tilt
+  uint16_t new_installed_open_limit_tilt
   );
 
 /**
@@ -21566,7 +21566,7 @@ bool dotdot_is_supported_window_covering_installed_closed_limit_tilt (
  *
  * @returns InstalledClosedLimitTilt attribute
  */
-int16_t dotdot_get_window_covering_installed_closed_limit_tilt(
+uint16_t dotdot_get_window_covering_installed_closed_limit_tilt(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -21586,7 +21586,7 @@ sl_status_t dotdot_set_window_covering_installed_closed_limit_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_installed_closed_limit_tilt
+  uint16_t new_installed_closed_limit_tilt
   );
 
 /**
@@ -21672,7 +21672,7 @@ bool dotdot_is_supported_window_covering_velocity_lift (
  *
  * @returns VelocityLift attribute
  */
-int16_t dotdot_get_window_covering_velocity_lift(
+uint16_t dotdot_get_window_covering_velocity_lift(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -21692,7 +21692,7 @@ sl_status_t dotdot_set_window_covering_velocity_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_velocity_lift
+  uint16_t new_velocity_lift
   );
 
 /**
@@ -21778,7 +21778,7 @@ bool dotdot_is_supported_window_covering_acceleration_time_lift (
  *
  * @returns AccelerationTimeLift attribute
  */
-int16_t dotdot_get_window_covering_acceleration_time_lift(
+uint16_t dotdot_get_window_covering_acceleration_time_lift(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -21798,7 +21798,7 @@ sl_status_t dotdot_set_window_covering_acceleration_time_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_acceleration_time_lift
+  uint16_t new_acceleration_time_lift
   );
 
 /**
@@ -21884,7 +21884,7 @@ bool dotdot_is_supported_window_covering_deceleration_time_lift (
  *
  * @returns DecelerationTimeLift attribute
  */
-int16_t dotdot_get_window_covering_deceleration_time_lift(
+uint16_t dotdot_get_window_covering_deceleration_time_lift(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -21904,7 +21904,7 @@ sl_status_t dotdot_set_window_covering_deceleration_time_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_deceleration_time_lift
+  uint16_t new_deceleration_time_lift
   );
 
 /**
@@ -22099,7 +22099,7 @@ bool dotdot_is_supported_window_covering_intermediate_setpoints_lift (
  *
  * @returns IntermediateSetpointsLift attribute
  */
-uint8_t dotdot_get_window_covering_intermediate_setpoints_lift(
+const char* dotdot_get_window_covering_intermediate_setpoints_lift(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -22119,7 +22119,7 @@ sl_status_t dotdot_set_window_covering_intermediate_setpoints_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_intermediate_setpoints_lift
+  const char* new_intermediate_setpoints_lift
   );
 
 /**
@@ -22208,7 +22208,7 @@ bool dotdot_is_supported_window_covering_intermediate_setpoints_tilt (
  *
  * @returns IntermediateSetpointsTilt attribute
  */
-uint8_t dotdot_get_window_covering_intermediate_setpoints_tilt(
+const char* dotdot_get_window_covering_intermediate_setpoints_tilt(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -22228,7 +22228,7 @@ sl_status_t dotdot_set_window_covering_intermediate_setpoints_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_intermediate_setpoints_tilt
+  const char* new_intermediate_setpoints_tilt
   );
 
 /**
@@ -22660,7 +22660,7 @@ bool dotdot_is_supported_barrier_control_open_events (
  *
  * @returns OpenEvents attribute
  */
-int16_t dotdot_get_barrier_control_open_events(
+uint16_t dotdot_get_barrier_control_open_events(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -22680,7 +22680,7 @@ sl_status_t dotdot_set_barrier_control_open_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_open_events
+  uint16_t new_open_events
   );
 
 /**
@@ -22766,7 +22766,7 @@ bool dotdot_is_supported_barrier_control_close_events (
  *
  * @returns CloseEvents attribute
  */
-int16_t dotdot_get_barrier_control_close_events(
+uint16_t dotdot_get_barrier_control_close_events(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -22786,7 +22786,7 @@ sl_status_t dotdot_set_barrier_control_close_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_close_events
+  uint16_t new_close_events
   );
 
 /**
@@ -22872,7 +22872,7 @@ bool dotdot_is_supported_barrier_control_command_open_events (
  *
  * @returns CommandOpenEvents attribute
  */
-int16_t dotdot_get_barrier_control_command_open_events(
+uint16_t dotdot_get_barrier_control_command_open_events(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -22892,7 +22892,7 @@ sl_status_t dotdot_set_barrier_control_command_open_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_command_open_events
+  uint16_t new_command_open_events
   );
 
 /**
@@ -22978,7 +22978,7 @@ bool dotdot_is_supported_barrier_control_command_close_events (
  *
  * @returns CommandCloseEvents attribute
  */
-int16_t dotdot_get_barrier_control_command_close_events(
+uint16_t dotdot_get_barrier_control_command_close_events(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -22998,7 +22998,7 @@ sl_status_t dotdot_set_barrier_control_command_close_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_command_close_events
+  uint16_t new_command_close_events
   );
 
 /**
@@ -23084,7 +23084,7 @@ bool dotdot_is_supported_barrier_control_open_period (
  *
  * @returns OpenPeriod attribute
  */
-int16_t dotdot_get_barrier_control_open_period(
+uint16_t dotdot_get_barrier_control_open_period(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -23104,7 +23104,7 @@ sl_status_t dotdot_set_barrier_control_open_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_open_period
+  uint16_t new_open_period
   );
 
 /**
@@ -23190,7 +23190,7 @@ bool dotdot_is_supported_barrier_control_close_period (
  *
  * @returns ClosePeriod attribute
  */
-int16_t dotdot_get_barrier_control_close_period(
+uint16_t dotdot_get_barrier_control_close_period(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -23210,7 +23210,7 @@ sl_status_t dotdot_set_barrier_control_close_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_close_period
+  uint16_t new_close_period
   );
 
 /**
@@ -23296,7 +23296,7 @@ bool dotdot_is_supported_barrier_control_barrier_position (
  *
  * @returns BarrierPosition attribute
  */
-int8_t dotdot_get_barrier_control_barrier_position(
+uint8_t dotdot_get_barrier_control_barrier_position(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -23316,7 +23316,7 @@ sl_status_t dotdot_set_barrier_control_barrier_position(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_barrier_position
+  uint8_t new_barrier_position
   );
 
 /**
@@ -23536,7 +23536,7 @@ bool dotdot_is_supported_pump_configuration_and_control_max_speed (
  *
  * @returns MaxSpeed attribute
  */
-int16_t dotdot_get_pump_configuration_and_control_max_speed(
+uint16_t dotdot_get_pump_configuration_and_control_max_speed(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -23556,7 +23556,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_speed
+  uint16_t new_max_speed
   );
 
 /**
@@ -23642,7 +23642,7 @@ bool dotdot_is_supported_pump_configuration_and_control_max_flow (
  *
  * @returns MaxFlow attribute
  */
-int16_t dotdot_get_pump_configuration_and_control_max_flow(
+uint16_t dotdot_get_pump_configuration_and_control_max_flow(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -23662,7 +23662,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_flow(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_flow
+  uint16_t new_max_flow
   );
 
 /**
@@ -24172,7 +24172,7 @@ bool dotdot_is_supported_pump_configuration_and_control_min_const_speed (
  *
  * @returns MinConstSpeed attribute
  */
-int16_t dotdot_get_pump_configuration_and_control_min_const_speed(
+uint16_t dotdot_get_pump_configuration_and_control_min_const_speed(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -24192,7 +24192,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_min_const_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_const_speed
+  uint16_t new_min_const_speed
   );
 
 /**
@@ -24278,7 +24278,7 @@ bool dotdot_is_supported_pump_configuration_and_control_max_const_speed (
  *
  * @returns MaxConstSpeed attribute
  */
-int16_t dotdot_get_pump_configuration_and_control_max_const_speed(
+uint16_t dotdot_get_pump_configuration_and_control_max_const_speed(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -24298,7 +24298,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_const_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_const_speed
+  uint16_t new_max_const_speed
   );
 
 /**
@@ -24384,7 +24384,7 @@ bool dotdot_is_supported_pump_configuration_and_control_min_const_flow (
  *
  * @returns MinConstFlow attribute
  */
-int16_t dotdot_get_pump_configuration_and_control_min_const_flow(
+uint16_t dotdot_get_pump_configuration_and_control_min_const_flow(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -24404,7 +24404,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_min_const_flow(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_const_flow
+  uint16_t new_min_const_flow
   );
 
 /**
@@ -24490,7 +24490,7 @@ bool dotdot_is_supported_pump_configuration_and_control_max_const_flow (
  *
  * @returns MaxConstFlow attribute
  */
-int16_t dotdot_get_pump_configuration_and_control_max_const_flow(
+uint16_t dotdot_get_pump_configuration_and_control_max_const_flow(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -24510,7 +24510,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_const_flow(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_const_flow
+  uint16_t new_max_const_flow
   );
 
 /**
@@ -25232,7 +25232,7 @@ bool dotdot_is_supported_pump_configuration_and_control_speed (
  *
  * @returns Speed attribute
  */
-int16_t dotdot_get_pump_configuration_and_control_speed(
+uint16_t dotdot_get_pump_configuration_and_control_speed(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -25252,7 +25252,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_speed
+  uint16_t new_speed
   );
 
 /**
@@ -25338,7 +25338,7 @@ bool dotdot_is_supported_pump_configuration_and_control_lifetime_running_hours (
  *
  * @returns LifetimeRunningHours attribute
  */
-int32_t dotdot_get_pump_configuration_and_control_lifetime_running_hours(
+uint32_t dotdot_get_pump_configuration_and_control_lifetime_running_hours(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -25358,7 +25358,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_lifetime_running_hours(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lifetime_running_hours
+  uint32_t new_lifetime_running_hours
   );
 
 /**
@@ -25444,7 +25444,7 @@ bool dotdot_is_supported_pump_configuration_and_control_power (
  *
  * @returns Power attribute
  */
-int32_t dotdot_get_pump_configuration_and_control_power(
+uint32_t dotdot_get_pump_configuration_and_control_power(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -25464,7 +25464,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_power(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_power
+  uint32_t new_power
   );
 
 /**
@@ -25550,7 +25550,7 @@ bool dotdot_is_supported_pump_configuration_and_control_lifetime_energy_consumed
  *
  * @returns LifetimeEnergyConsumed attribute
  */
-int32_t dotdot_get_pump_configuration_and_control_lifetime_energy_consumed(
+uint32_t dotdot_get_pump_configuration_and_control_lifetime_energy_consumed(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -25570,7 +25570,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_lifetime_energy_consumed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lifetime_energy_consumed
+  uint32_t new_lifetime_energy_consumed
   );
 
 /**
@@ -26744,7 +26744,7 @@ bool dotdot_is_supported_thermostat_pi_cooling_demand (
  *
  * @returns PICoolingDemand attribute
  */
-int8_t dotdot_get_thermostat_pi_cooling_demand(
+uint8_t dotdot_get_thermostat_pi_cooling_demand(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -26764,7 +26764,7 @@ sl_status_t dotdot_set_thermostat_pi_cooling_demand(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_pi_cooling_demand
+  uint8_t new_pi_cooling_demand
   );
 
 /**
@@ -26850,7 +26850,7 @@ bool dotdot_is_supported_thermostat_pi_heating_demand (
  *
  * @returns PIHeatingDemand attribute
  */
-int8_t dotdot_get_thermostat_pi_heating_demand(
+uint8_t dotdot_get_thermostat_pi_heating_demand(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -26870,7 +26870,7 @@ sl_status_t dotdot_set_thermostat_pi_heating_demand(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_pi_heating_demand
+  uint8_t new_pi_heating_demand
   );
 
 /**
@@ -28758,7 +28758,7 @@ bool dotdot_is_supported_thermostat_number_of_weekly_transitions (
  *
  * @returns NumberOfWeeklyTransitions attribute
  */
-int8_t dotdot_get_thermostat_number_of_weekly_transitions(
+uint8_t dotdot_get_thermostat_number_of_weekly_transitions(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -28778,7 +28778,7 @@ sl_status_t dotdot_set_thermostat_number_of_weekly_transitions(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_weekly_transitions
+  uint8_t new_number_of_weekly_transitions
   );
 
 /**
@@ -28864,7 +28864,7 @@ bool dotdot_is_supported_thermostat_number_of_daily_transitions (
  *
  * @returns NumberOfDailyTransitions attribute
  */
-int8_t dotdot_get_thermostat_number_of_daily_transitions(
+uint8_t dotdot_get_thermostat_number_of_daily_transitions(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -28884,7 +28884,7 @@ sl_status_t dotdot_set_thermostat_number_of_daily_transitions(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_daily_transitions
+  uint8_t new_number_of_daily_transitions
   );
 
 /**
@@ -29076,7 +29076,7 @@ bool dotdot_is_supported_thermostat_temperature_setpoint_hold_duration (
  *
  * @returns TemperatureSetpointHoldDuration attribute
  */
-int16_t dotdot_get_thermostat_temperature_setpoint_hold_duration(
+uint16_t dotdot_get_thermostat_temperature_setpoint_hold_duration(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -29096,7 +29096,7 @@ sl_status_t dotdot_set_thermostat_temperature_setpoint_hold_duration(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_temperature_setpoint_hold_duration
+  uint16_t new_temperature_setpoint_hold_duration
   );
 
 /**
@@ -29606,7 +29606,7 @@ bool dotdot_is_supported_thermostat_setpoint_change_source_timestamp (
  *
  * @returns SetpointChangeSourceTimestamp attribute
  */
-uint8_t dotdot_get_thermostat_setpoint_change_source_timestamp(
+uint32_t dotdot_get_thermostat_setpoint_change_source_timestamp(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -29626,7 +29626,7 @@ sl_status_t dotdot_set_thermostat_setpoint_change_source_timestamp(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_setpoint_change_source_timestamp
+  uint32_t new_setpoint_change_source_timestamp
   );
 
 /**
@@ -29712,7 +29712,7 @@ bool dotdot_is_supported_thermostat_occupied_setback (
  *
  * @returns OccupiedSetback attribute
  */
-int8_t dotdot_get_thermostat_occupied_setback(
+uint8_t dotdot_get_thermostat_occupied_setback(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -29732,7 +29732,7 @@ sl_status_t dotdot_set_thermostat_occupied_setback(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_occupied_setback
+  uint8_t new_occupied_setback
   );
 
 /**
@@ -29818,7 +29818,7 @@ bool dotdot_is_supported_thermostat_occupied_setback_min (
  *
  * @returns OccupiedSetbackMin attribute
  */
-int8_t dotdot_get_thermostat_occupied_setback_min(
+uint8_t dotdot_get_thermostat_occupied_setback_min(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -29838,7 +29838,7 @@ sl_status_t dotdot_set_thermostat_occupied_setback_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_occupied_setback_min
+  uint8_t new_occupied_setback_min
   );
 
 /**
@@ -29924,7 +29924,7 @@ bool dotdot_is_supported_thermostat_occupied_setback_max (
  *
  * @returns OccupiedSetbackMax attribute
  */
-int8_t dotdot_get_thermostat_occupied_setback_max(
+uint8_t dotdot_get_thermostat_occupied_setback_max(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -29944,7 +29944,7 @@ sl_status_t dotdot_set_thermostat_occupied_setback_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_occupied_setback_max
+  uint8_t new_occupied_setback_max
   );
 
 /**
@@ -30030,7 +30030,7 @@ bool dotdot_is_supported_thermostat_unoccupied_setback (
  *
  * @returns UnoccupiedSetback attribute
  */
-int8_t dotdot_get_thermostat_unoccupied_setback(
+uint8_t dotdot_get_thermostat_unoccupied_setback(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -30050,7 +30050,7 @@ sl_status_t dotdot_set_thermostat_unoccupied_setback(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_unoccupied_setback
+  uint8_t new_unoccupied_setback
   );
 
 /**
@@ -30136,7 +30136,7 @@ bool dotdot_is_supported_thermostat_unoccupied_setback_min (
  *
  * @returns UnoccupiedSetbackMin attribute
  */
-int8_t dotdot_get_thermostat_unoccupied_setback_min(
+uint8_t dotdot_get_thermostat_unoccupied_setback_min(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -30156,7 +30156,7 @@ sl_status_t dotdot_set_thermostat_unoccupied_setback_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_unoccupied_setback_min
+  uint8_t new_unoccupied_setback_min
   );
 
 /**
@@ -30242,7 +30242,7 @@ bool dotdot_is_supported_thermostat_unoccupied_setback_max (
  *
  * @returns UnoccupiedSetbackMax attribute
  */
-int8_t dotdot_get_thermostat_unoccupied_setback_max(
+uint8_t dotdot_get_thermostat_unoccupied_setback_max(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -30262,7 +30262,7 @@ sl_status_t dotdot_set_thermostat_unoccupied_setback_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_unoccupied_setback_max
+  uint8_t new_unoccupied_setback_max
   );
 
 /**
@@ -30348,7 +30348,7 @@ bool dotdot_is_supported_thermostat_emergency_heat_delta (
  *
  * @returns EmergencyHeatDelta attribute
  */
-int8_t dotdot_get_thermostat_emergency_heat_delta(
+uint8_t dotdot_get_thermostat_emergency_heat_delta(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -30368,7 +30368,7 @@ sl_status_t dotdot_set_thermostat_emergency_heat_delta(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_emergency_heat_delta
+  uint8_t new_emergency_heat_delta
   );
 
 /**
@@ -30560,7 +30560,7 @@ bool dotdot_is_supported_thermostat_ac_capacity (
  *
  * @returns ACCapacity attribute
  */
-int16_t dotdot_get_thermostat_ac_capacity(
+uint16_t dotdot_get_thermostat_ac_capacity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -30580,7 +30580,7 @@ sl_status_t dotdot_set_thermostat_ac_capacity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_capacity
+  uint16_t new_ac_capacity
   );
 
 /**
@@ -31570,7 +31570,7 @@ bool dotdot_is_supported_dehumidification_control_relative_humidity (
  *
  * @returns RelativeHumidity attribute
  */
-int8_t dotdot_get_dehumidification_control_relative_humidity(
+uint8_t dotdot_get_dehumidification_control_relative_humidity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -31590,7 +31590,7 @@ sl_status_t dotdot_set_dehumidification_control_relative_humidity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_relative_humidity
+  uint8_t new_relative_humidity
   );
 
 /**
@@ -31676,7 +31676,7 @@ bool dotdot_is_supported_dehumidification_control_dehumidification_cooling (
  *
  * @returns DehumidificationCooling attribute
  */
-int8_t dotdot_get_dehumidification_control_dehumidification_cooling(
+uint8_t dotdot_get_dehumidification_control_dehumidification_cooling(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -31696,7 +31696,7 @@ sl_status_t dotdot_set_dehumidification_control_dehumidification_cooling(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_dehumidification_cooling
+  uint8_t new_dehumidification_cooling
   );
 
 /**
@@ -31782,7 +31782,7 @@ bool dotdot_is_supported_dehumidification_control_rh_dehumidification_setpoint (
  *
  * @returns RHDehumidificationSetpoint attribute
  */
-int8_t dotdot_get_dehumidification_control_rh_dehumidification_setpoint(
+uint8_t dotdot_get_dehumidification_control_rh_dehumidification_setpoint(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -31802,7 +31802,7 @@ sl_status_t dotdot_set_dehumidification_control_rh_dehumidification_setpoint(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_rh_dehumidification_setpoint
+  uint8_t new_rh_dehumidification_setpoint
   );
 
 /**
@@ -32100,7 +32100,7 @@ bool dotdot_is_supported_dehumidification_control_dehumidification_hysteresis (
  *
  * @returns DehumidificationHysteresis attribute
  */
-int8_t dotdot_get_dehumidification_control_dehumidification_hysteresis(
+uint8_t dotdot_get_dehumidification_control_dehumidification_hysteresis(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -32120,7 +32120,7 @@ sl_status_t dotdot_set_dehumidification_control_dehumidification_hysteresis(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_dehumidification_hysteresis
+  uint8_t new_dehumidification_hysteresis
   );
 
 /**
@@ -32206,7 +32206,7 @@ bool dotdot_is_supported_dehumidification_control_dehumidification_max_cool (
  *
  * @returns DehumidificationMaxCool attribute
  */
-int8_t dotdot_get_dehumidification_control_dehumidification_max_cool(
+uint8_t dotdot_get_dehumidification_control_dehumidification_max_cool(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -32226,7 +32226,7 @@ sl_status_t dotdot_set_dehumidification_control_dehumidification_max_cool(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_dehumidification_max_cool
+  uint8_t new_dehumidification_max_cool
   );
 
 /**
@@ -32792,7 +32792,7 @@ bool dotdot_is_supported_color_control_current_hue (
  *
  * @returns CurrentHue attribute
  */
-int8_t dotdot_get_color_control_current_hue(
+uint8_t dotdot_get_color_control_current_hue(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -32812,7 +32812,7 @@ sl_status_t dotdot_set_color_control_current_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_hue
+  uint8_t new_current_hue
   );
 
 /**
@@ -32898,7 +32898,7 @@ bool dotdot_is_supported_color_control_current_saturation (
  *
  * @returns CurrentSaturation attribute
  */
-int8_t dotdot_get_color_control_current_saturation(
+uint8_t dotdot_get_color_control_current_saturation(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -32918,7 +32918,7 @@ sl_status_t dotdot_set_color_control_current_saturation(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_saturation
+  uint8_t new_current_saturation
   );
 
 /**
@@ -33004,7 +33004,7 @@ bool dotdot_is_supported_color_control_remaining_time (
  *
  * @returns RemainingTime attribute
  */
-int16_t dotdot_get_color_control_remaining_time(
+uint16_t dotdot_get_color_control_remaining_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -33024,7 +33024,7 @@ sl_status_t dotdot_set_color_control_remaining_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_remaining_time
+  uint16_t new_remaining_time
   );
 
 /**
@@ -33110,7 +33110,7 @@ bool dotdot_is_supported_color_control_currentx (
  *
  * @returns CurrentX attribute
  */
-int16_t dotdot_get_color_control_currentx(
+uint16_t dotdot_get_color_control_currentx(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -33130,7 +33130,7 @@ sl_status_t dotdot_set_color_control_currentx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_currentx
+  uint16_t new_currentx
   );
 
 /**
@@ -33216,7 +33216,7 @@ bool dotdot_is_supported_color_control_currenty (
  *
  * @returns CurrentY attribute
  */
-int16_t dotdot_get_color_control_currenty(
+uint16_t dotdot_get_color_control_currenty(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -33236,7 +33236,7 @@ sl_status_t dotdot_set_color_control_currenty(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_currenty
+  uint16_t new_currenty
   );
 
 /**
@@ -33537,7 +33537,7 @@ bool dotdot_is_supported_color_control_color_temperature_mireds (
  *
  * @returns ColorTemperatureMireds attribute
  */
-int16_t dotdot_get_color_control_color_temperature_mireds(
+uint16_t dotdot_get_color_control_color_temperature_mireds(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -33557,7 +33557,7 @@ sl_status_t dotdot_set_color_control_color_temperature_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_temperature_mireds
+  uint16_t new_color_temperature_mireds
   );
 
 /**
@@ -33855,7 +33855,7 @@ bool dotdot_is_supported_color_control_number_of_primaries (
  *
  * @returns NumberOfPrimaries attribute
  */
-int8_t dotdot_get_color_control_number_of_primaries(
+uint8_t dotdot_get_color_control_number_of_primaries(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -33875,7 +33875,7 @@ sl_status_t dotdot_set_color_control_number_of_primaries(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_primaries
+  uint8_t new_number_of_primaries
   );
 
 /**
@@ -33961,7 +33961,7 @@ bool dotdot_is_supported_color_control_primary1x (
  *
  * @returns Primary1X attribute
  */
-int16_t dotdot_get_color_control_primary1x(
+uint16_t dotdot_get_color_control_primary1x(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -33981,7 +33981,7 @@ sl_status_t dotdot_set_color_control_primary1x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary1x
+  uint16_t new_primary1x
   );
 
 /**
@@ -34067,7 +34067,7 @@ bool dotdot_is_supported_color_control_primary1y (
  *
  * @returns Primary1Y attribute
  */
-int16_t dotdot_get_color_control_primary1y(
+uint16_t dotdot_get_color_control_primary1y(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -34087,7 +34087,7 @@ sl_status_t dotdot_set_color_control_primary1y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary1y
+  uint16_t new_primary1y
   );
 
 /**
@@ -34173,7 +34173,7 @@ bool dotdot_is_supported_color_control_primary1_intensity (
  *
  * @returns Primary1Intensity attribute
  */
-int8_t dotdot_get_color_control_primary1_intensity(
+uint8_t dotdot_get_color_control_primary1_intensity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -34193,7 +34193,7 @@ sl_status_t dotdot_set_color_control_primary1_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary1_intensity
+  uint8_t new_primary1_intensity
   );
 
 /**
@@ -34279,7 +34279,7 @@ bool dotdot_is_supported_color_control_primary2x (
  *
  * @returns Primary2X attribute
  */
-int16_t dotdot_get_color_control_primary2x(
+uint16_t dotdot_get_color_control_primary2x(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -34299,7 +34299,7 @@ sl_status_t dotdot_set_color_control_primary2x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary2x
+  uint16_t new_primary2x
   );
 
 /**
@@ -34385,7 +34385,7 @@ bool dotdot_is_supported_color_control_primary2y (
  *
  * @returns Primary2Y attribute
  */
-int16_t dotdot_get_color_control_primary2y(
+uint16_t dotdot_get_color_control_primary2y(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -34405,7 +34405,7 @@ sl_status_t dotdot_set_color_control_primary2y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary2y
+  uint16_t new_primary2y
   );
 
 /**
@@ -34491,7 +34491,7 @@ bool dotdot_is_supported_color_control_primary2_intensity (
  *
  * @returns Primary2Intensity attribute
  */
-int8_t dotdot_get_color_control_primary2_intensity(
+uint8_t dotdot_get_color_control_primary2_intensity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -34511,7 +34511,7 @@ sl_status_t dotdot_set_color_control_primary2_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary2_intensity
+  uint8_t new_primary2_intensity
   );
 
 /**
@@ -34597,7 +34597,7 @@ bool dotdot_is_supported_color_control_primary3x (
  *
  * @returns Primary3X attribute
  */
-int16_t dotdot_get_color_control_primary3x(
+uint16_t dotdot_get_color_control_primary3x(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -34617,7 +34617,7 @@ sl_status_t dotdot_set_color_control_primary3x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary3x
+  uint16_t new_primary3x
   );
 
 /**
@@ -34703,7 +34703,7 @@ bool dotdot_is_supported_color_control_primary3y (
  *
  * @returns Primary3Y attribute
  */
-int16_t dotdot_get_color_control_primary3y(
+uint16_t dotdot_get_color_control_primary3y(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -34723,7 +34723,7 @@ sl_status_t dotdot_set_color_control_primary3y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary3y
+  uint16_t new_primary3y
   );
 
 /**
@@ -34809,7 +34809,7 @@ bool dotdot_is_supported_color_control_primary3_intensity (
  *
  * @returns Primary3Intensity attribute
  */
-int8_t dotdot_get_color_control_primary3_intensity(
+uint8_t dotdot_get_color_control_primary3_intensity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -34829,7 +34829,7 @@ sl_status_t dotdot_set_color_control_primary3_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary3_intensity
+  uint8_t new_primary3_intensity
   );
 
 /**
@@ -34915,7 +34915,7 @@ bool dotdot_is_supported_color_control_primary4x (
  *
  * @returns Primary4X attribute
  */
-int16_t dotdot_get_color_control_primary4x(
+uint16_t dotdot_get_color_control_primary4x(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -34935,7 +34935,7 @@ sl_status_t dotdot_set_color_control_primary4x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary4x
+  uint16_t new_primary4x
   );
 
 /**
@@ -35021,7 +35021,7 @@ bool dotdot_is_supported_color_control_primary4y (
  *
  * @returns Primary4Y attribute
  */
-int16_t dotdot_get_color_control_primary4y(
+uint16_t dotdot_get_color_control_primary4y(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35041,7 +35041,7 @@ sl_status_t dotdot_set_color_control_primary4y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary4y
+  uint16_t new_primary4y
   );
 
 /**
@@ -35127,7 +35127,7 @@ bool dotdot_is_supported_color_control_primary4_intensity (
  *
  * @returns Primary4Intensity attribute
  */
-int8_t dotdot_get_color_control_primary4_intensity(
+uint8_t dotdot_get_color_control_primary4_intensity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35147,7 +35147,7 @@ sl_status_t dotdot_set_color_control_primary4_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary4_intensity
+  uint8_t new_primary4_intensity
   );
 
 /**
@@ -35233,7 +35233,7 @@ bool dotdot_is_supported_color_control_primary5x (
  *
  * @returns Primary5X attribute
  */
-int16_t dotdot_get_color_control_primary5x(
+uint16_t dotdot_get_color_control_primary5x(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35253,7 +35253,7 @@ sl_status_t dotdot_set_color_control_primary5x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary5x
+  uint16_t new_primary5x
   );
 
 /**
@@ -35339,7 +35339,7 @@ bool dotdot_is_supported_color_control_primary5y (
  *
  * @returns Primary5Y attribute
  */
-int16_t dotdot_get_color_control_primary5y(
+uint16_t dotdot_get_color_control_primary5y(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35359,7 +35359,7 @@ sl_status_t dotdot_set_color_control_primary5y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary5y
+  uint16_t new_primary5y
   );
 
 /**
@@ -35445,7 +35445,7 @@ bool dotdot_is_supported_color_control_primary5_intensity (
  *
  * @returns Primary5Intensity attribute
  */
-int8_t dotdot_get_color_control_primary5_intensity(
+uint8_t dotdot_get_color_control_primary5_intensity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35465,7 +35465,7 @@ sl_status_t dotdot_set_color_control_primary5_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary5_intensity
+  uint8_t new_primary5_intensity
   );
 
 /**
@@ -35551,7 +35551,7 @@ bool dotdot_is_supported_color_control_primary6x (
  *
  * @returns Primary6X attribute
  */
-int16_t dotdot_get_color_control_primary6x(
+uint16_t dotdot_get_color_control_primary6x(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35571,7 +35571,7 @@ sl_status_t dotdot_set_color_control_primary6x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary6x
+  uint16_t new_primary6x
   );
 
 /**
@@ -35657,7 +35657,7 @@ bool dotdot_is_supported_color_control_primary6y (
  *
  * @returns Primary6Y attribute
  */
-int16_t dotdot_get_color_control_primary6y(
+uint16_t dotdot_get_color_control_primary6y(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35677,7 +35677,7 @@ sl_status_t dotdot_set_color_control_primary6y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary6y
+  uint16_t new_primary6y
   );
 
 /**
@@ -35763,7 +35763,7 @@ bool dotdot_is_supported_color_control_primary6_intensity (
  *
  * @returns Primary6Intensity attribute
  */
-int8_t dotdot_get_color_control_primary6_intensity(
+uint8_t dotdot_get_color_control_primary6_intensity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35783,7 +35783,7 @@ sl_status_t dotdot_set_color_control_primary6_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary6_intensity
+  uint8_t new_primary6_intensity
   );
 
 /**
@@ -35869,7 +35869,7 @@ bool dotdot_is_supported_color_control_white_pointx (
  *
  * @returns WhitePointX attribute
  */
-int16_t dotdot_get_color_control_white_pointx(
+uint16_t dotdot_get_color_control_white_pointx(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35889,7 +35889,7 @@ sl_status_t dotdot_set_color_control_white_pointx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_white_pointx
+  uint16_t new_white_pointx
   );
 
 /**
@@ -35975,7 +35975,7 @@ bool dotdot_is_supported_color_control_white_pointy (
  *
  * @returns WhitePointY attribute
  */
-int16_t dotdot_get_color_control_white_pointy(
+uint16_t dotdot_get_color_control_white_pointy(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -35995,7 +35995,7 @@ sl_status_t dotdot_set_color_control_white_pointy(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_white_pointy
+  uint16_t new_white_pointy
   );
 
 /**
@@ -36081,7 +36081,7 @@ bool dotdot_is_supported_color_control_color_pointrx (
  *
  * @returns ColorPointRX attribute
  */
-int16_t dotdot_get_color_control_color_pointrx(
+uint16_t dotdot_get_color_control_color_pointrx(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -36101,7 +36101,7 @@ sl_status_t dotdot_set_color_control_color_pointrx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointrx
+  uint16_t new_color_pointrx
   );
 
 /**
@@ -36187,7 +36187,7 @@ bool dotdot_is_supported_color_control_color_pointry (
  *
  * @returns ColorPointRY attribute
  */
-int16_t dotdot_get_color_control_color_pointry(
+uint16_t dotdot_get_color_control_color_pointry(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -36207,7 +36207,7 @@ sl_status_t dotdot_set_color_control_color_pointry(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointry
+  uint16_t new_color_pointry
   );
 
 /**
@@ -36293,7 +36293,7 @@ bool dotdot_is_supported_color_control_color_pointr_intensity (
  *
  * @returns ColorPointRIntensity attribute
  */
-int8_t dotdot_get_color_control_color_pointr_intensity(
+uint8_t dotdot_get_color_control_color_pointr_intensity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -36313,7 +36313,7 @@ sl_status_t dotdot_set_color_control_color_pointr_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_pointr_intensity
+  uint8_t new_color_pointr_intensity
   );
 
 /**
@@ -36399,7 +36399,7 @@ bool dotdot_is_supported_color_control_color_pointgx (
  *
  * @returns ColorPointGX attribute
  */
-int16_t dotdot_get_color_control_color_pointgx(
+uint16_t dotdot_get_color_control_color_pointgx(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -36419,7 +36419,7 @@ sl_status_t dotdot_set_color_control_color_pointgx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointgx
+  uint16_t new_color_pointgx
   );
 
 /**
@@ -36505,7 +36505,7 @@ bool dotdot_is_supported_color_control_color_pointgy (
  *
  * @returns ColorPointGY attribute
  */
-int16_t dotdot_get_color_control_color_pointgy(
+uint16_t dotdot_get_color_control_color_pointgy(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -36525,7 +36525,7 @@ sl_status_t dotdot_set_color_control_color_pointgy(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointgy
+  uint16_t new_color_pointgy
   );
 
 /**
@@ -36611,7 +36611,7 @@ bool dotdot_is_supported_color_control_color_pointg_intensity (
  *
  * @returns ColorPointGIntensity attribute
  */
-int8_t dotdot_get_color_control_color_pointg_intensity(
+uint8_t dotdot_get_color_control_color_pointg_intensity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -36631,7 +36631,7 @@ sl_status_t dotdot_set_color_control_color_pointg_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_pointg_intensity
+  uint8_t new_color_pointg_intensity
   );
 
 /**
@@ -36717,7 +36717,7 @@ bool dotdot_is_supported_color_control_color_pointbx (
  *
  * @returns ColorPointBX attribute
  */
-int16_t dotdot_get_color_control_color_pointbx(
+uint16_t dotdot_get_color_control_color_pointbx(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -36737,7 +36737,7 @@ sl_status_t dotdot_set_color_control_color_pointbx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointbx
+  uint16_t new_color_pointbx
   );
 
 /**
@@ -36823,7 +36823,7 @@ bool dotdot_is_supported_color_control_color_pointby (
  *
  * @returns ColorPointBY attribute
  */
-int16_t dotdot_get_color_control_color_pointby(
+uint16_t dotdot_get_color_control_color_pointby(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -36843,7 +36843,7 @@ sl_status_t dotdot_set_color_control_color_pointby(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointby
+  uint16_t new_color_pointby
   );
 
 /**
@@ -36929,7 +36929,7 @@ bool dotdot_is_supported_color_control_color_pointb_intensity (
  *
  * @returns ColorPointBIntensity attribute
  */
-int8_t dotdot_get_color_control_color_pointb_intensity(
+uint8_t dotdot_get_color_control_color_pointb_intensity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -36949,7 +36949,7 @@ sl_status_t dotdot_set_color_control_color_pointb_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_pointb_intensity
+  uint8_t new_color_pointb_intensity
   );
 
 /**
@@ -37035,7 +37035,7 @@ bool dotdot_is_supported_color_control_enhanced_current_hue (
  *
  * @returns EnhancedCurrentHue attribute
  */
-int16_t dotdot_get_color_control_enhanced_current_hue(
+uint16_t dotdot_get_color_control_enhanced_current_hue(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -37055,7 +37055,7 @@ sl_status_t dotdot_set_color_control_enhanced_current_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_enhanced_current_hue
+  uint16_t new_enhanced_current_hue
   );
 
 /**
@@ -37247,7 +37247,7 @@ bool dotdot_is_supported_color_control_color_loop_active (
  *
  * @returns ColorLoopActive attribute
  */
-int8_t dotdot_get_color_control_color_loop_active(
+uint8_t dotdot_get_color_control_color_loop_active(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -37267,7 +37267,7 @@ sl_status_t dotdot_set_color_control_color_loop_active(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_loop_active
+  uint8_t new_color_loop_active
   );
 
 /**
@@ -37353,7 +37353,7 @@ bool dotdot_is_supported_color_control_color_loop_direction (
  *
  * @returns ColorLoopDirection attribute
  */
-int8_t dotdot_get_color_control_color_loop_direction(
+uint8_t dotdot_get_color_control_color_loop_direction(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -37373,7 +37373,7 @@ sl_status_t dotdot_set_color_control_color_loop_direction(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_loop_direction
+  uint8_t new_color_loop_direction
   );
 
 /**
@@ -37459,7 +37459,7 @@ bool dotdot_is_supported_color_control_color_loop_time (
  *
  * @returns ColorLoopTime attribute
  */
-int16_t dotdot_get_color_control_color_loop_time(
+uint16_t dotdot_get_color_control_color_loop_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -37479,7 +37479,7 @@ sl_status_t dotdot_set_color_control_color_loop_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_loop_time
+  uint16_t new_color_loop_time
   );
 
 /**
@@ -37565,7 +37565,7 @@ bool dotdot_is_supported_color_control_color_loop_start_enhanced_hue (
  *
  * @returns ColorLoopStartEnhancedHue attribute
  */
-int16_t dotdot_get_color_control_color_loop_start_enhanced_hue(
+uint16_t dotdot_get_color_control_color_loop_start_enhanced_hue(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -37585,7 +37585,7 @@ sl_status_t dotdot_set_color_control_color_loop_start_enhanced_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_loop_start_enhanced_hue
+  uint16_t new_color_loop_start_enhanced_hue
   );
 
 /**
@@ -37671,7 +37671,7 @@ bool dotdot_is_supported_color_control_color_loop_stored_enhanced_hue (
  *
  * @returns ColorLoopStoredEnhancedHue attribute
  */
-int16_t dotdot_get_color_control_color_loop_stored_enhanced_hue(
+uint16_t dotdot_get_color_control_color_loop_stored_enhanced_hue(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -37691,7 +37691,7 @@ sl_status_t dotdot_set_color_control_color_loop_stored_enhanced_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_loop_stored_enhanced_hue
+  uint16_t new_color_loop_stored_enhanced_hue
   );
 
 /**
@@ -37883,7 +37883,7 @@ bool dotdot_is_supported_color_control_color_temp_physical_min_mireds (
  *
  * @returns ColorTempPhysicalMinMireds attribute
  */
-int16_t dotdot_get_color_control_color_temp_physical_min_mireds(
+uint16_t dotdot_get_color_control_color_temp_physical_min_mireds(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -37903,7 +37903,7 @@ sl_status_t dotdot_set_color_control_color_temp_physical_min_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_temp_physical_min_mireds
+  uint16_t new_color_temp_physical_min_mireds
   );
 
 /**
@@ -37989,7 +37989,7 @@ bool dotdot_is_supported_color_control_color_temp_physical_max_mireds (
  *
  * @returns ColorTempPhysicalMaxMireds attribute
  */
-int16_t dotdot_get_color_control_color_temp_physical_max_mireds(
+uint16_t dotdot_get_color_control_color_temp_physical_max_mireds(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -38009,7 +38009,7 @@ sl_status_t dotdot_set_color_control_color_temp_physical_max_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_temp_physical_max_mireds
+  uint16_t new_color_temp_physical_max_mireds
   );
 
 /**
@@ -38095,7 +38095,7 @@ bool dotdot_is_supported_color_control_couple_color_temp_to_level_min_mireds (
  *
  * @returns CoupleColorTempToLevelMinMireds attribute
  */
-int16_t dotdot_get_color_control_couple_color_temp_to_level_min_mireds(
+uint16_t dotdot_get_color_control_couple_color_temp_to_level_min_mireds(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -38115,7 +38115,7 @@ sl_status_t dotdot_set_color_control_couple_color_temp_to_level_min_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_couple_color_temp_to_level_min_mireds
+  uint16_t new_couple_color_temp_to_level_min_mireds
   );
 
 /**
@@ -38201,7 +38201,7 @@ bool dotdot_is_supported_color_control_start_up_color_temperature_mireds (
  *
  * @returns StartUpColorTemperatureMireds attribute
  */
-int16_t dotdot_get_color_control_start_up_color_temperature_mireds(
+uint16_t dotdot_get_color_control_start_up_color_temperature_mireds(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -38221,7 +38221,7 @@ sl_status_t dotdot_set_color_control_start_up_color_temperature_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_start_up_color_temperature_mireds
+  uint16_t new_start_up_color_temperature_mireds
   );
 
 /**
@@ -38335,7 +38335,7 @@ bool dotdot_is_supported_ballast_configuration_physical_min_level (
  *
  * @returns PhysicalMinLevel attribute
  */
-int8_t dotdot_get_ballast_configuration_physical_min_level(
+uint8_t dotdot_get_ballast_configuration_physical_min_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -38355,7 +38355,7 @@ sl_status_t dotdot_set_ballast_configuration_physical_min_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_physical_min_level
+  uint8_t new_physical_min_level
   );
 
 /**
@@ -38441,7 +38441,7 @@ bool dotdot_is_supported_ballast_configuration_physical_max_level (
  *
  * @returns PhysicalMaxLevel attribute
  */
-int8_t dotdot_get_ballast_configuration_physical_max_level(
+uint8_t dotdot_get_ballast_configuration_physical_max_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -38461,7 +38461,7 @@ sl_status_t dotdot_set_ballast_configuration_physical_max_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_physical_max_level
+  uint8_t new_physical_max_level
   );
 
 /**
@@ -38653,7 +38653,7 @@ bool dotdot_is_supported_ballast_configuration_min_level (
  *
  * @returns MinLevel attribute
  */
-int8_t dotdot_get_ballast_configuration_min_level(
+uint8_t dotdot_get_ballast_configuration_min_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -38673,7 +38673,7 @@ sl_status_t dotdot_set_ballast_configuration_min_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_min_level
+  uint8_t new_min_level
   );
 
 /**
@@ -38759,7 +38759,7 @@ bool dotdot_is_supported_ballast_configuration_max_level (
  *
  * @returns MaxLevel attribute
  */
-int8_t dotdot_get_ballast_configuration_max_level(
+uint8_t dotdot_get_ballast_configuration_max_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -38779,7 +38779,7 @@ sl_status_t dotdot_set_ballast_configuration_max_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_max_level
+  uint8_t new_max_level
   );
 
 /**
@@ -38865,7 +38865,7 @@ bool dotdot_is_supported_ballast_configuration_power_on_level (
  *
  * @returns PowerOnLevel attribute
  */
-int8_t dotdot_get_ballast_configuration_power_on_level(
+uint8_t dotdot_get_ballast_configuration_power_on_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -38885,7 +38885,7 @@ sl_status_t dotdot_set_ballast_configuration_power_on_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_power_on_level
+  uint8_t new_power_on_level
   );
 
 /**
@@ -38971,7 +38971,7 @@ bool dotdot_is_supported_ballast_configuration_power_on_fade_time (
  *
  * @returns PowerOnFadeTime attribute
  */
-int16_t dotdot_get_ballast_configuration_power_on_fade_time(
+uint16_t dotdot_get_ballast_configuration_power_on_fade_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -38991,7 +38991,7 @@ sl_status_t dotdot_set_ballast_configuration_power_on_fade_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_power_on_fade_time
+  uint16_t new_power_on_fade_time
   );
 
 /**
@@ -39077,7 +39077,7 @@ bool dotdot_is_supported_ballast_configuration_intrinsic_ballast_factor (
  *
  * @returns IntrinsicBallastFactor attribute
  */
-int8_t dotdot_get_ballast_configuration_intrinsic_ballast_factor(
+uint8_t dotdot_get_ballast_configuration_intrinsic_ballast_factor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -39097,7 +39097,7 @@ sl_status_t dotdot_set_ballast_configuration_intrinsic_ballast_factor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_intrinsic_ballast_factor
+  uint8_t new_intrinsic_ballast_factor
   );
 
 /**
@@ -39183,7 +39183,7 @@ bool dotdot_is_supported_ballast_configuration_ballast_factor_adjustment (
  *
  * @returns BallastFactorAdjustment attribute
  */
-int8_t dotdot_get_ballast_configuration_ballast_factor_adjustment(
+uint8_t dotdot_get_ballast_configuration_ballast_factor_adjustment(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -39203,7 +39203,7 @@ sl_status_t dotdot_set_ballast_configuration_ballast_factor_adjustment(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_ballast_factor_adjustment
+  uint8_t new_ballast_factor_adjustment
   );
 
 /**
@@ -39289,7 +39289,7 @@ bool dotdot_is_supported_ballast_configuration_lamp_quantity (
  *
  * @returns LampQuantity attribute
  */
-int8_t dotdot_get_ballast_configuration_lamp_quantity(
+uint8_t dotdot_get_ballast_configuration_lamp_quantity(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -39309,7 +39309,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_lamp_quantity
+  uint8_t new_lamp_quantity
   );
 
 /**
@@ -39613,7 +39613,7 @@ bool dotdot_is_supported_ballast_configuration_lamp_rated_hours (
  *
  * @returns LampRatedHours attribute
  */
-int32_t dotdot_get_ballast_configuration_lamp_rated_hours(
+uint32_t dotdot_get_ballast_configuration_lamp_rated_hours(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -39633,7 +39633,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_rated_hours(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lamp_rated_hours
+  uint32_t new_lamp_rated_hours
   );
 
 /**
@@ -39719,7 +39719,7 @@ bool dotdot_is_supported_ballast_configuration_lamp_burn_hours (
  *
  * @returns LampBurnHours attribute
  */
-int32_t dotdot_get_ballast_configuration_lamp_burn_hours(
+uint32_t dotdot_get_ballast_configuration_lamp_burn_hours(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -39739,7 +39739,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lamp_burn_hours
+  uint32_t new_lamp_burn_hours
   );
 
 /**
@@ -39931,7 +39931,7 @@ bool dotdot_is_supported_ballast_configuration_lamp_burn_hours_trip_point (
  *
  * @returns LampBurnHoursTripPoint attribute
  */
-int32_t dotdot_get_ballast_configuration_lamp_burn_hours_trip_point(
+uint32_t dotdot_get_ballast_configuration_lamp_burn_hours_trip_point(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -39951,7 +39951,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours_trip_point(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lamp_burn_hours_trip_point
+  uint32_t new_lamp_burn_hours_trip_point
   );
 
 /**
@@ -40065,7 +40065,7 @@ bool dotdot_is_supported_illuminance_measurement_measured_value (
  *
  * @returns MeasuredValue attribute
  */
-int16_t dotdot_get_illuminance_measurement_measured_value(
+uint16_t dotdot_get_illuminance_measurement_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -40085,7 +40085,7 @@ sl_status_t dotdot_set_illuminance_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   );
 
 /**
@@ -40171,7 +40171,7 @@ bool dotdot_is_supported_illuminance_measurement_min_measured_value (
  *
  * @returns MinMeasuredValue attribute
  */
-int16_t dotdot_get_illuminance_measurement_min_measured_value(
+uint16_t dotdot_get_illuminance_measurement_min_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -40191,7 +40191,7 @@ sl_status_t dotdot_set_illuminance_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   );
 
 /**
@@ -40277,7 +40277,7 @@ bool dotdot_is_supported_illuminance_measurement_max_measured_value (
  *
  * @returns MaxMeasuredValue attribute
  */
-int16_t dotdot_get_illuminance_measurement_max_measured_value(
+uint16_t dotdot_get_illuminance_measurement_max_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -40297,7 +40297,7 @@ sl_status_t dotdot_set_illuminance_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   );
 
 /**
@@ -40383,7 +40383,7 @@ bool dotdot_is_supported_illuminance_measurement_tolerance (
  *
  * @returns Tolerance attribute
  */
-int16_t dotdot_get_illuminance_measurement_tolerance(
+uint16_t dotdot_get_illuminance_measurement_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -40403,7 +40403,7 @@ sl_status_t dotdot_set_illuminance_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   );
 
 /**
@@ -40835,7 +40835,7 @@ bool dotdot_is_supported_illuminance_level_sensing_illuminance_target_level (
  *
  * @returns IlluminanceTargetLevel attribute
  */
-int16_t dotdot_get_illuminance_level_sensing_illuminance_target_level(
+uint16_t dotdot_get_illuminance_level_sensing_illuminance_target_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -40855,7 +40855,7 @@ sl_status_t dotdot_set_illuminance_level_sensing_illuminance_target_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_illuminance_target_level
+  uint16_t new_illuminance_target_level
   );
 
 /**
@@ -41287,7 +41287,7 @@ bool dotdot_is_supported_temperature_measurement_tolerance (
  *
  * @returns Tolerance attribute
  */
-int16_t dotdot_get_temperature_measurement_tolerance(
+uint16_t dotdot_get_temperature_measurement_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -41307,7 +41307,7 @@ sl_status_t dotdot_set_temperature_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   );
 
 /**
@@ -41739,7 +41739,7 @@ bool dotdot_is_supported_pressure_measurement_tolerance (
  *
  * @returns Tolerance attribute
  */
-int16_t dotdot_get_pressure_measurement_tolerance(
+uint16_t dotdot_get_pressure_measurement_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -41759,7 +41759,7 @@ sl_status_t dotdot_set_pressure_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   );
 
 /**
@@ -42163,7 +42163,7 @@ bool dotdot_is_supported_pressure_measurement_scaled_tolerance (
  *
  * @returns ScaledTolerance attribute
  */
-int16_t dotdot_get_pressure_measurement_scaled_tolerance(
+uint16_t dotdot_get_pressure_measurement_scaled_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -42183,7 +42183,7 @@ sl_status_t dotdot_set_pressure_measurement_scaled_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_scaled_tolerance
+  uint16_t new_scaled_tolerance
   );
 
 /**
@@ -42403,7 +42403,7 @@ bool dotdot_is_supported_flow_measurement_measured_value (
  *
  * @returns MeasuredValue attribute
  */
-int16_t dotdot_get_flow_measurement_measured_value(
+uint16_t dotdot_get_flow_measurement_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -42423,7 +42423,7 @@ sl_status_t dotdot_set_flow_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   );
 
 /**
@@ -42509,7 +42509,7 @@ bool dotdot_is_supported_flow_measurement_min_measured_value (
  *
  * @returns MinMeasuredValue attribute
  */
-int16_t dotdot_get_flow_measurement_min_measured_value(
+uint16_t dotdot_get_flow_measurement_min_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -42529,7 +42529,7 @@ sl_status_t dotdot_set_flow_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   );
 
 /**
@@ -42615,7 +42615,7 @@ bool dotdot_is_supported_flow_measurement_max_measured_value (
  *
  * @returns MaxMeasuredValue attribute
  */
-int16_t dotdot_get_flow_measurement_max_measured_value(
+uint16_t dotdot_get_flow_measurement_max_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -42635,7 +42635,7 @@ sl_status_t dotdot_set_flow_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   );
 
 /**
@@ -42721,7 +42721,7 @@ bool dotdot_is_supported_flow_measurement_tolerance (
  *
  * @returns Tolerance attribute
  */
-int16_t dotdot_get_flow_measurement_tolerance(
+uint16_t dotdot_get_flow_measurement_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -42741,7 +42741,7 @@ sl_status_t dotdot_set_flow_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   );
 
 /**
@@ -42855,7 +42855,7 @@ bool dotdot_is_supported_relativity_humidity_measured_value (
  *
  * @returns MeasuredValue attribute
  */
-int16_t dotdot_get_relativity_humidity_measured_value(
+uint16_t dotdot_get_relativity_humidity_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -42875,7 +42875,7 @@ sl_status_t dotdot_set_relativity_humidity_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   );
 
 /**
@@ -42961,7 +42961,7 @@ bool dotdot_is_supported_relativity_humidity_min_measured_value (
  *
  * @returns MinMeasuredValue attribute
  */
-int16_t dotdot_get_relativity_humidity_min_measured_value(
+uint16_t dotdot_get_relativity_humidity_min_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -42981,7 +42981,7 @@ sl_status_t dotdot_set_relativity_humidity_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   );
 
 /**
@@ -43067,7 +43067,7 @@ bool dotdot_is_supported_relativity_humidity_max_measured_value (
  *
  * @returns MaxMeasuredValue attribute
  */
-int16_t dotdot_get_relativity_humidity_max_measured_value(
+uint16_t dotdot_get_relativity_humidity_max_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -43087,7 +43087,7 @@ sl_status_t dotdot_set_relativity_humidity_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   );
 
 /**
@@ -43173,7 +43173,7 @@ bool dotdot_is_supported_relativity_humidity_tolerance (
  *
  * @returns Tolerance attribute
  */
-int16_t dotdot_get_relativity_humidity_tolerance(
+uint16_t dotdot_get_relativity_humidity_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -43193,7 +43193,7 @@ sl_status_t dotdot_set_relativity_humidity_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   );
 
 /**
@@ -43625,7 +43625,7 @@ bool dotdot_is_supported_occupancy_sensing_pir_occupied_to_unoccupied_delay (
  *
  * @returns PIROccupiedToUnoccupiedDelay attribute
  */
-int16_t dotdot_get_occupancy_sensing_pir_occupied_to_unoccupied_delay(
+uint16_t dotdot_get_occupancy_sensing_pir_occupied_to_unoccupied_delay(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -43645,7 +43645,7 @@ sl_status_t dotdot_set_occupancy_sensing_pir_occupied_to_unoccupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_pir_occupied_to_unoccupied_delay
+  uint16_t new_pir_occupied_to_unoccupied_delay
   );
 
 /**
@@ -43731,7 +43731,7 @@ bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_delay (
  *
  * @returns PIRUnoccupiedToOccupiedDelay attribute
  */
-int16_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_delay(
+uint16_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_delay(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -43751,7 +43751,7 @@ sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_pir_unoccupied_to_occupied_delay
+  uint16_t new_pir_unoccupied_to_occupied_delay
   );
 
 /**
@@ -43837,7 +43837,7 @@ bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_threshold
  *
  * @returns PIRUnoccupiedToOccupiedThreshold attribute
  */
-int8_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
+uint8_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -43857,7 +43857,7 @@ sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_pir_unoccupied_to_occupied_threshold
+  uint8_t new_pir_unoccupied_to_occupied_threshold
   );
 
 /**
@@ -43943,7 +43943,7 @@ bool dotdot_is_supported_occupancy_sensing_ultrasonic_occupied_to_unoccupied_del
  *
  * @returns UltrasonicOccupiedToUnoccupiedDelay attribute
  */
-int16_t dotdot_get_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
+uint16_t dotdot_get_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -43963,7 +43963,7 @@ sl_status_t dotdot_set_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ultrasonic_occupied_to_unoccupied_delay
+  uint16_t new_ultrasonic_occupied_to_unoccupied_delay
   );
 
 /**
@@ -44049,7 +44049,7 @@ bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_del
  *
  * @returns UltrasonicUnoccupiedToOccupiedDelay attribute
  */
-int16_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
+uint16_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -44069,7 +44069,7 @@ sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ultrasonic_unoccupied_to_occupied_delay
+  uint16_t new_ultrasonic_unoccupied_to_occupied_delay
   );
 
 /**
@@ -44155,7 +44155,7 @@ bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_thr
  *
  * @returns UltrasonicUnoccupiedToOccupiedThreshold attribute
  */
-int8_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
+uint8_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -44175,7 +44175,7 @@ sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_thres
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_ultrasonic_unoccupied_to_occupied_threshold
+  uint8_t new_ultrasonic_unoccupied_to_occupied_threshold
   );
 
 /**
@@ -44261,7 +44261,7 @@ bool dotdot_is_supported_occupancy_sensing_physical_contact_occupied_to_unoccupi
  *
  * @returns PhysicalContactOccupiedToUnoccupiedDelay attribute
  */
-int16_t dotdot_get_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
+uint16_t dotdot_get_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -44281,7 +44281,7 @@ sl_status_t dotdot_set_occupancy_sensing_physical_contact_occupied_to_unoccupied
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_contact_occupied_to_unoccupied_delay
+  uint16_t new_physical_contact_occupied_to_unoccupied_delay
   );
 
 /**
@@ -44367,7 +44367,7 @@ bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupi
  *
  * @returns PhysicalContactUnoccupiedToOccupiedDelay attribute
  */
-int16_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
+uint16_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -44387,7 +44387,7 @@ sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_contact_unoccupied_to_occupied_delay
+  uint16_t new_physical_contact_unoccupied_to_occupied_delay
   );
 
 /**
@@ -44473,7 +44473,7 @@ bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupi
  *
  * @returns PhysicalContactUnoccupiedToOccupiedThreshold attribute
  */
-int8_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
+uint8_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -44493,7 +44493,7 @@ sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_physical_contact_unoccupied_to_occupied_threshold
+  uint8_t new_physical_contact_unoccupied_to_occupied_threshold
   );
 
 /**
@@ -44607,7 +44607,7 @@ bool dotdot_is_supported_soil_moisture_measured_value (
  *
  * @returns MeasuredValue attribute
  */
-int16_t dotdot_get_soil_moisture_measured_value(
+uint16_t dotdot_get_soil_moisture_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -44627,7 +44627,7 @@ sl_status_t dotdot_set_soil_moisture_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   );
 
 /**
@@ -44713,7 +44713,7 @@ bool dotdot_is_supported_soil_moisture_min_measured_value (
  *
  * @returns MinMeasuredValue attribute
  */
-int16_t dotdot_get_soil_moisture_min_measured_value(
+uint16_t dotdot_get_soil_moisture_min_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -44733,7 +44733,7 @@ sl_status_t dotdot_set_soil_moisture_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   );
 
 /**
@@ -44819,7 +44819,7 @@ bool dotdot_is_supported_soil_moisture_max_measured_value (
  *
  * @returns MaxMeasuredValue attribute
  */
-int16_t dotdot_get_soil_moisture_max_measured_value(
+uint16_t dotdot_get_soil_moisture_max_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -44839,7 +44839,7 @@ sl_status_t dotdot_set_soil_moisture_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   );
 
 /**
@@ -44925,7 +44925,7 @@ bool dotdot_is_supported_soil_moisture_tolerance (
  *
  * @returns Tolerance attribute
  */
-int16_t dotdot_get_soil_moisture_tolerance(
+uint16_t dotdot_get_soil_moisture_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -44945,7 +44945,7 @@ sl_status_t dotdot_set_soil_moisture_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   );
 
 /**
@@ -45059,7 +45059,7 @@ bool dotdot_is_supported_ph_measurement_measured_value (
  *
  * @returns MeasuredValue attribute
  */
-int16_t dotdot_get_ph_measurement_measured_value(
+uint16_t dotdot_get_ph_measurement_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -45079,7 +45079,7 @@ sl_status_t dotdot_set_ph_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   );
 
 /**
@@ -45165,7 +45165,7 @@ bool dotdot_is_supported_ph_measurement_min_measured_value (
  *
  * @returns MinMeasuredValue attribute
  */
-int16_t dotdot_get_ph_measurement_min_measured_value(
+uint16_t dotdot_get_ph_measurement_min_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -45185,7 +45185,7 @@ sl_status_t dotdot_set_ph_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   );
 
 /**
@@ -45271,7 +45271,7 @@ bool dotdot_is_supported_ph_measurement_max_measured_value (
  *
  * @returns MaxMeasuredValue attribute
  */
-int16_t dotdot_get_ph_measurement_max_measured_value(
+uint16_t dotdot_get_ph_measurement_max_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -45291,7 +45291,7 @@ sl_status_t dotdot_set_ph_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   );
 
 /**
@@ -45377,7 +45377,7 @@ bool dotdot_is_supported_ph_measurement_tolerance (
  *
  * @returns Tolerance attribute
  */
-int16_t dotdot_get_ph_measurement_tolerance(
+uint16_t dotdot_get_ph_measurement_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -45397,7 +45397,7 @@ sl_status_t dotdot_set_ph_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   );
 
 /**
@@ -45511,7 +45511,7 @@ bool dotdot_is_supported_electrical_conductivity_measurement_measured_value (
  *
  * @returns MeasuredValue attribute
  */
-int16_t dotdot_get_electrical_conductivity_measurement_measured_value(
+uint16_t dotdot_get_electrical_conductivity_measurement_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -45531,7 +45531,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   );
 
 /**
@@ -45617,7 +45617,7 @@ bool dotdot_is_supported_electrical_conductivity_measurement_min_measured_value
  *
  * @returns MinMeasuredValue attribute
  */
-int16_t dotdot_get_electrical_conductivity_measurement_min_measured_value(
+uint16_t dotdot_get_electrical_conductivity_measurement_min_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -45637,7 +45637,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   );
 
 /**
@@ -45723,7 +45723,7 @@ bool dotdot_is_supported_electrical_conductivity_measurement_max_measured_value
  *
  * @returns MaxMeasuredValue attribute
  */
-int16_t dotdot_get_electrical_conductivity_measurement_max_measured_value(
+uint16_t dotdot_get_electrical_conductivity_measurement_max_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -45743,7 +45743,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   );
 
 /**
@@ -45829,7 +45829,7 @@ bool dotdot_is_supported_electrical_conductivity_measurement_tolerance (
  *
  * @returns Tolerance attribute
  */
-int16_t dotdot_get_electrical_conductivity_measurement_tolerance(
+uint16_t dotdot_get_electrical_conductivity_measurement_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -45849,7 +45849,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   );
 
 /**
@@ -45963,7 +45963,7 @@ bool dotdot_is_supported_wind_speed_measurement_measured_value (
  *
  * @returns MeasuredValue attribute
  */
-int16_t dotdot_get_wind_speed_measurement_measured_value(
+uint16_t dotdot_get_wind_speed_measurement_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -45983,7 +45983,7 @@ sl_status_t dotdot_set_wind_speed_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   );
 
 /**
@@ -46069,7 +46069,7 @@ bool dotdot_is_supported_wind_speed_measurement_min_measured_value (
  *
  * @returns MinMeasuredValue attribute
  */
-int16_t dotdot_get_wind_speed_measurement_min_measured_value(
+uint16_t dotdot_get_wind_speed_measurement_min_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -46089,7 +46089,7 @@ sl_status_t dotdot_set_wind_speed_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   );
 
 /**
@@ -46175,7 +46175,7 @@ bool dotdot_is_supported_wind_speed_measurement_max_measured_value (
  *
  * @returns MaxMeasuredValue attribute
  */
-int16_t dotdot_get_wind_speed_measurement_max_measured_value(
+uint16_t dotdot_get_wind_speed_measurement_max_measured_value(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -46195,7 +46195,7 @@ sl_status_t dotdot_set_wind_speed_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   );
 
 /**
@@ -46281,7 +46281,7 @@ bool dotdot_is_supported_wind_speed_measurement_tolerance (
  *
  * @returns Tolerance attribute
  */
-int16_t dotdot_get_wind_speed_measurement_tolerance(
+uint16_t dotdot_get_wind_speed_measurement_tolerance(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -46301,7 +46301,7 @@ sl_status_t dotdot_set_wind_speed_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   );
 
 /**
@@ -48195,7 +48195,7 @@ bool dotdot_is_supported_ias_zone_zoneid (
  *
  * @returns ZoneID attribute
  */
-int8_t dotdot_get_ias_zone_zoneid(
+uint8_t dotdot_get_ias_zone_zoneid(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -48215,7 +48215,7 @@ sl_status_t dotdot_set_ias_zone_zoneid(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_zoneid
+  uint8_t new_zoneid
   );
 
 /**
@@ -48301,7 +48301,7 @@ bool dotdot_is_supported_ias_zone_number_of_zone_sensitivity_levels_supported (
  *
  * @returns NumberOfZoneSensitivityLevelsSupported attribute
  */
-int8_t dotdot_get_ias_zone_number_of_zone_sensitivity_levels_supported(
+uint8_t dotdot_get_ias_zone_number_of_zone_sensitivity_levels_supported(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -48321,7 +48321,7 @@ sl_status_t dotdot_set_ias_zone_number_of_zone_sensitivity_levels_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_zone_sensitivity_levels_supported
+  uint8_t new_number_of_zone_sensitivity_levels_supported
   );
 
 /**
@@ -48407,7 +48407,7 @@ bool dotdot_is_supported_ias_zone_current_zone_sensitivity_level (
  *
  * @returns CurrentZoneSensitivityLevel attribute
  */
-int8_t dotdot_get_ias_zone_current_zone_sensitivity_level(
+uint8_t dotdot_get_ias_zone_current_zone_sensitivity_level(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -48427,7 +48427,7 @@ sl_status_t dotdot_set_ias_zone_current_zone_sensitivity_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_zone_sensitivity_level
+  uint8_t new_current_zone_sensitivity_level
   );
 
 /**
@@ -48541,7 +48541,7 @@ bool dotdot_is_supported_iaswd_max_duration (
  *
  * @returns MaxDuration attribute
  */
-int16_t dotdot_get_iaswd_max_duration(
+uint16_t dotdot_get_iaswd_max_duration(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -48561,7 +48561,7 @@ sl_status_t dotdot_set_iaswd_max_duration(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_duration
+  uint16_t new_max_duration
   );
 
 /**
@@ -48675,7 +48675,7 @@ bool dotdot_is_supported_metering_current_summation_delivered (
  *
  * @returns CurrentSummationDelivered attribute
  */
-int64_t dotdot_get_metering_current_summation_delivered(
+uint64_t dotdot_get_metering_current_summation_delivered(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -48695,7 +48695,7 @@ sl_status_t dotdot_set_metering_current_summation_delivered(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_summation_delivered
+  uint64_t new_current_summation_delivered
   );
 
 /**
@@ -48781,7 +48781,7 @@ bool dotdot_is_supported_metering_current_summation_received (
  *
  * @returns CurrentSummationReceived attribute
  */
-int64_t dotdot_get_metering_current_summation_received(
+uint64_t dotdot_get_metering_current_summation_received(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -48801,7 +48801,7 @@ sl_status_t dotdot_set_metering_current_summation_received(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_summation_received
+  uint64_t new_current_summation_received
   );
 
 /**
@@ -48887,7 +48887,7 @@ bool dotdot_is_supported_metering_current_max_demand_delivered (
  *
  * @returns CurrentMaxDemandDelivered attribute
  */
-int64_t dotdot_get_metering_current_max_demand_delivered(
+uint64_t dotdot_get_metering_current_max_demand_delivered(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -48907,7 +48907,7 @@ sl_status_t dotdot_set_metering_current_max_demand_delivered(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_max_demand_delivered
+  uint64_t new_current_max_demand_delivered
   );
 
 /**
@@ -49205,7 +49205,7 @@ bool dotdot_is_supported_metering_reading_snap_shot_time (
  *
  * @returns ReadingSnapShotTime attribute
  */
-uint8_t dotdot_get_metering_reading_snap_shot_time(
+uint32_t dotdot_get_metering_reading_snap_shot_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -49225,7 +49225,7 @@ sl_status_t dotdot_set_metering_reading_snap_shot_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_reading_snap_shot_time
+  uint32_t new_reading_snap_shot_time
   );
 
 /**
@@ -49311,7 +49311,7 @@ bool dotdot_is_supported_metering_current_max_demand_delivered_time (
  *
  * @returns CurrentMaxDemandDeliveredTime attribute
  */
-uint8_t dotdot_get_metering_current_max_demand_delivered_time(
+uint32_t dotdot_get_metering_current_max_demand_delivered_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -49331,7 +49331,7 @@ sl_status_t dotdot_set_metering_current_max_demand_delivered_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_current_max_demand_delivered_time
+  uint32_t new_current_max_demand_delivered_time
   );
 
 /**
@@ -49417,7 +49417,7 @@ bool dotdot_is_supported_metering_current_max_demand_received_time (
  *
  * @returns CurrentMaxDemandReceivedTime attribute
  */
-uint8_t dotdot_get_metering_current_max_demand_received_time(
+uint32_t dotdot_get_metering_current_max_demand_received_time(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -49437,7 +49437,7 @@ sl_status_t dotdot_set_metering_current_max_demand_received_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_current_max_demand_received_time
+  uint32_t new_current_max_demand_received_time
   );
 
 /**
@@ -49523,7 +49523,7 @@ bool dotdot_is_supported_metering_default_update_period (
  *
  * @returns DefaultUpdatePeriod attribute
  */
-int8_t dotdot_get_metering_default_update_period(
+uint8_t dotdot_get_metering_default_update_period(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -49543,7 +49543,7 @@ sl_status_t dotdot_set_metering_default_update_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_default_update_period
+  uint8_t new_default_update_period
   );
 
 /**
@@ -49735,7 +49735,7 @@ bool dotdot_is_supported_metering_current_inlet_energy_carrier_summation (
  *
  * @returns CurrentInletEnergyCarrierSummation attribute
  */
-int64_t dotdot_get_metering_current_inlet_energy_carrier_summation(
+uint64_t dotdot_get_metering_current_inlet_energy_carrier_summation(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -49755,7 +49755,7 @@ sl_status_t dotdot_set_metering_current_inlet_energy_carrier_summation(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_inlet_energy_carrier_summation
+  uint64_t new_current_inlet_energy_carrier_summation
   );
 
 /**
@@ -49841,7 +49841,7 @@ bool dotdot_is_supported_metering_current_outlet_energy_carrier_summation (
  *
  * @returns CurrentOutletEnergyCarrierSummation attribute
  */
-int64_t dotdot_get_metering_current_outlet_energy_carrier_summation(
+uint64_t dotdot_get_metering_current_outlet_energy_carrier_summation(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -49861,7 +49861,7 @@ sl_status_t dotdot_set_metering_current_outlet_energy_carrier_summation(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_outlet_energy_carrier_summation
+  uint64_t new_current_outlet_energy_carrier_summation
   );
 
 /**
@@ -50265,7 +50265,7 @@ bool dotdot_is_supported_metering_multiplier (
  *
  * @returns Multiplier attribute
  */
-int32_t dotdot_get_metering_multiplier(
+uint32_t dotdot_get_metering_multiplier(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -50285,7 +50285,7 @@ sl_status_t dotdot_set_metering_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_multiplier
+  uint32_t new_multiplier
   );
 
 /**
@@ -50371,7 +50371,7 @@ bool dotdot_is_supported_metering_divisor (
  *
  * @returns Divisor attribute
  */
-int32_t dotdot_get_metering_divisor(
+uint32_t dotdot_get_metering_divisor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -50391,7 +50391,7 @@ sl_status_t dotdot_set_metering_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_divisor
+  uint32_t new_divisor
   );
 
 /**
@@ -52519,7 +52519,7 @@ bool dotdot_is_supported_electrical_measurement_dc_voltage_multiplier (
  *
  * @returns DCVoltageMultiplier attribute
  */
-int16_t dotdot_get_electrical_measurement_dc_voltage_multiplier(
+uint16_t dotdot_get_electrical_measurement_dc_voltage_multiplier(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -52539,7 +52539,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_voltage_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_voltage_multiplier
+  uint16_t new_dc_voltage_multiplier
   );
 
 /**
@@ -52625,7 +52625,7 @@ bool dotdot_is_supported_electrical_measurement_dc_voltage_divisor (
  *
  * @returns DCVoltageDivisor attribute
  */
-int16_t dotdot_get_electrical_measurement_dc_voltage_divisor(
+uint16_t dotdot_get_electrical_measurement_dc_voltage_divisor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -52645,7 +52645,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_voltage_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_voltage_divisor
+  uint16_t new_dc_voltage_divisor
   );
 
 /**
@@ -52731,7 +52731,7 @@ bool dotdot_is_supported_electrical_measurement_dc_current_multiplier (
  *
  * @returns DCCurrentMultiplier attribute
  */
-int16_t dotdot_get_electrical_measurement_dc_current_multiplier(
+uint16_t dotdot_get_electrical_measurement_dc_current_multiplier(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -52751,7 +52751,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_current_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_current_multiplier
+  uint16_t new_dc_current_multiplier
   );
 
 /**
@@ -52837,7 +52837,7 @@ bool dotdot_is_supported_electrical_measurement_dc_current_divisor (
  *
  * @returns DCCurrentDivisor attribute
  */
-int16_t dotdot_get_electrical_measurement_dc_current_divisor(
+uint16_t dotdot_get_electrical_measurement_dc_current_divisor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -52857,7 +52857,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_current_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_current_divisor
+  uint16_t new_dc_current_divisor
   );
 
 /**
@@ -52943,7 +52943,7 @@ bool dotdot_is_supported_electrical_measurement_dc_power_multiplier (
  *
  * @returns DCPowerMultiplier attribute
  */
-int16_t dotdot_get_electrical_measurement_dc_power_multiplier(
+uint16_t dotdot_get_electrical_measurement_dc_power_multiplier(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -52963,7 +52963,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_power_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_power_multiplier
+  uint16_t new_dc_power_multiplier
   );
 
 /**
@@ -53049,7 +53049,7 @@ bool dotdot_is_supported_electrical_measurement_dc_power_divisor (
  *
  * @returns DCPowerDivisor attribute
  */
-int16_t dotdot_get_electrical_measurement_dc_power_divisor(
+uint16_t dotdot_get_electrical_measurement_dc_power_divisor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -53069,7 +53069,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_power_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_power_divisor
+  uint16_t new_dc_power_divisor
   );
 
 /**
@@ -53155,7 +53155,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency (
  *
  * @returns ACFrequency attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_frequency(
+uint16_t dotdot_get_electrical_measurement_ac_frequency(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -53175,7 +53175,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency
+  uint16_t new_ac_frequency
   );
 
 /**
@@ -53261,7 +53261,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency_min (
  *
  * @returns ACFrequencyMin attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_frequency_min(
+uint16_t dotdot_get_electrical_measurement_ac_frequency_min(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -53281,7 +53281,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency_min
+  uint16_t new_ac_frequency_min
   );
 
 /**
@@ -53367,7 +53367,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency_max (
  *
  * @returns ACFrequencyMax attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_frequency_max(
+uint16_t dotdot_get_electrical_measurement_ac_frequency_max(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -53387,7 +53387,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency_max
+  uint16_t new_ac_frequency_max
   );
 
 /**
@@ -53473,7 +53473,7 @@ bool dotdot_is_supported_electrical_measurement_neutral_current (
  *
  * @returns NeutralCurrent attribute
  */
-int16_t dotdot_get_electrical_measurement_neutral_current(
+uint16_t dotdot_get_electrical_measurement_neutral_current(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -53493,7 +53493,7 @@ sl_status_t dotdot_set_electrical_measurement_neutral_current(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_neutral_current
+  uint16_t new_neutral_current
   );
 
 /**
@@ -53791,7 +53791,7 @@ bool dotdot_is_supported_electrical_measurement_total_apparent_power (
  *
  * @returns TotalApparentPower attribute
  */
-int32_t dotdot_get_electrical_measurement_total_apparent_power(
+uint32_t dotdot_get_electrical_measurement_total_apparent_power(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -53811,7 +53811,7 @@ sl_status_t dotdot_set_electrical_measurement_total_apparent_power(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_total_apparent_power
+  uint32_t new_total_apparent_power
   );
 
 /**
@@ -55169,7 +55169,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency_multiplier (
  *
  * @returns ACFrequencyMultiplier attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_frequency_multiplier(
+uint16_t dotdot_get_electrical_measurement_ac_frequency_multiplier(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -55189,7 +55189,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency_multiplier
+  uint16_t new_ac_frequency_multiplier
   );
 
 /**
@@ -55275,7 +55275,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency_divisor (
  *
  * @returns ACFrequencyDivisor attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_frequency_divisor(
+uint16_t dotdot_get_electrical_measurement_ac_frequency_divisor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -55295,7 +55295,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency_divisor
+  uint16_t new_ac_frequency_divisor
   );
 
 /**
@@ -55381,7 +55381,7 @@ bool dotdot_is_supported_electrical_measurement_power_multiplier (
  *
  * @returns PowerMultiplier attribute
  */
-int32_t dotdot_get_electrical_measurement_power_multiplier(
+uint32_t dotdot_get_electrical_measurement_power_multiplier(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -55401,7 +55401,7 @@ sl_status_t dotdot_set_electrical_measurement_power_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_power_multiplier
+  uint32_t new_power_multiplier
   );
 
 /**
@@ -55487,7 +55487,7 @@ bool dotdot_is_supported_electrical_measurement_power_divisor (
  *
  * @returns PowerDivisor attribute
  */
-int32_t dotdot_get_electrical_measurement_power_divisor(
+uint32_t dotdot_get_electrical_measurement_power_divisor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -55507,7 +55507,7 @@ sl_status_t dotdot_set_electrical_measurement_power_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_power_divisor
+  uint32_t new_power_divisor
   );
 
 /**
@@ -55805,7 +55805,7 @@ bool dotdot_is_supported_electrical_measurement_line_current (
  *
  * @returns LineCurrent attribute
  */
-int16_t dotdot_get_electrical_measurement_line_current(
+uint16_t dotdot_get_electrical_measurement_line_current(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -55825,7 +55825,7 @@ sl_status_t dotdot_set_electrical_measurement_line_current(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_line_current
+  uint16_t new_line_current
   );
 
 /**
@@ -56123,7 +56123,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage (
  *
  * @returns RMSVoltage attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage(
+uint16_t dotdot_get_electrical_measurement_rms_voltage(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -56143,7 +56143,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage
+  uint16_t new_rms_voltage
   );
 
 /**
@@ -56229,7 +56229,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_min (
  *
  * @returns RMSVoltageMin attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_min(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_min(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -56249,7 +56249,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_min
+  uint16_t new_rms_voltage_min
   );
 
 /**
@@ -56335,7 +56335,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_max (
  *
  * @returns RMSVoltageMax attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_max(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_max(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -56355,7 +56355,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_max
+  uint16_t new_rms_voltage_max
   );
 
 /**
@@ -56441,7 +56441,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current (
  *
  * @returns RMSCurrent attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_current(
+uint16_t dotdot_get_electrical_measurement_rms_current(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -56461,7 +56461,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current
+  uint16_t new_rms_current
   );
 
 /**
@@ -56547,7 +56547,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_min (
  *
  * @returns RMSCurrentMin attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_current_min(
+uint16_t dotdot_get_electrical_measurement_rms_current_min(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -56567,7 +56567,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_min
+  uint16_t new_rms_current_min
   );
 
 /**
@@ -56653,7 +56653,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_max (
  *
  * @returns RMSCurrentMax attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_current_max(
+uint16_t dotdot_get_electrical_measurement_rms_current_max(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -56673,7 +56673,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_max
+  uint16_t new_rms_current_max
   );
 
 /**
@@ -57183,7 +57183,7 @@ bool dotdot_is_supported_electrical_measurement_apparent_power (
  *
  * @returns ApparentPower attribute
  */
-int16_t dotdot_get_electrical_measurement_apparent_power(
+uint16_t dotdot_get_electrical_measurement_apparent_power(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -57203,7 +57203,7 @@ sl_status_t dotdot_set_electrical_measurement_apparent_power(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_apparent_power
+  uint16_t new_apparent_power
   );
 
 /**
@@ -57395,7 +57395,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_
  *
  * @returns AverageRMSVoltageMeasurementPeriod attribute
  */
-int16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period(
+uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -57415,7 +57415,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_pe
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_voltage_measurement_period
+  uint16_t new_average_rms_voltage_measurement_period
   );
 
 /**
@@ -57501,7 +57501,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter
  *
  * @returns AverageRMSOverVoltageCounter attribute
  */
-int16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter(
+uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -57521,7 +57521,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_over_voltage_counter
+  uint16_t new_average_rms_over_voltage_counter
   );
 
 /**
@@ -57607,7 +57607,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counte
  *
  * @returns AverageRMSUnderVoltageCounter attribute
  */
-int16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter(
+uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -57627,7 +57627,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_under_voltage_counter
+  uint16_t new_average_rms_under_voltage_counter
   );
 
 /**
@@ -57713,7 +57713,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period
  *
  * @returns RMSExtremeOverVoltagePeriod attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -57733,7 +57733,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_over_voltage_period
+  uint16_t new_rms_extreme_over_voltage_period
   );
 
 /**
@@ -57819,7 +57819,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period
  *
  * @returns RMSExtremeUnderVoltagePeriod attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -57839,7 +57839,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_under_voltage_period
+  uint16_t new_rms_extreme_under_voltage_period
   );
 
 /**
@@ -57925,7 +57925,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period (
  *
  * @returns RMSVoltageSagPeriod attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_sag_period(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -57945,7 +57945,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_sag_period
+  uint16_t new_rms_voltage_sag_period
   );
 
 /**
@@ -58031,7 +58031,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period (
  *
  * @returns RMSVoltageSwellPeriod attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_swell_period(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -58051,7 +58051,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_swell_period
+  uint16_t new_rms_voltage_swell_period
   );
 
 /**
@@ -58137,7 +58137,7 @@ bool dotdot_is_supported_electrical_measurement_ac_voltage_multiplier (
  *
  * @returns ACVoltageMultiplier attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_voltage_multiplier(
+uint16_t dotdot_get_electrical_measurement_ac_voltage_multiplier(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -58157,7 +58157,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_voltage_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_voltage_multiplier
+  uint16_t new_ac_voltage_multiplier
   );
 
 /**
@@ -58243,7 +58243,7 @@ bool dotdot_is_supported_electrical_measurement_ac_voltage_divisor (
  *
  * @returns ACVoltageDivisor attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_voltage_divisor(
+uint16_t dotdot_get_electrical_measurement_ac_voltage_divisor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -58263,7 +58263,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_voltage_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_voltage_divisor
+  uint16_t new_ac_voltage_divisor
   );
 
 /**
@@ -58349,7 +58349,7 @@ bool dotdot_is_supported_electrical_measurement_ac_current_multiplier (
  *
  * @returns ACCurrentMultiplier attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_current_multiplier(
+uint16_t dotdot_get_electrical_measurement_ac_current_multiplier(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -58369,7 +58369,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_current_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_current_multiplier
+  uint16_t new_ac_current_multiplier
   );
 
 /**
@@ -58455,7 +58455,7 @@ bool dotdot_is_supported_electrical_measurement_ac_current_divisor (
  *
  * @returns ACCurrentDivisor attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_current_divisor(
+uint16_t dotdot_get_electrical_measurement_ac_current_divisor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -58475,7 +58475,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_current_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_current_divisor
+  uint16_t new_ac_current_divisor
   );
 
 /**
@@ -58561,7 +58561,7 @@ bool dotdot_is_supported_electrical_measurement_ac_power_multiplier (
  *
  * @returns ACPowerMultiplier attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_power_multiplier(
+uint16_t dotdot_get_electrical_measurement_ac_power_multiplier(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -58581,7 +58581,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_power_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_power_multiplier
+  uint16_t new_ac_power_multiplier
   );
 
 /**
@@ -58667,7 +58667,7 @@ bool dotdot_is_supported_electrical_measurement_ac_power_divisor (
  *
  * @returns ACPowerDivisor attribute
  */
-int16_t dotdot_get_electrical_measurement_ac_power_divisor(
+uint16_t dotdot_get_electrical_measurement_ac_power_divisor(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -58687,7 +58687,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_power_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_power_divisor
+  uint16_t new_ac_power_divisor
   );
 
 /**
@@ -60257,7 +60257,7 @@ bool dotdot_is_supported_electrical_measurement_line_current_phb (
  *
  * @returns LineCurrentPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_line_current_phb(
+uint16_t dotdot_get_electrical_measurement_line_current_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -60277,7 +60277,7 @@ sl_status_t dotdot_set_electrical_measurement_line_current_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_line_current_phb
+  uint16_t new_line_current_phb
   );
 
 /**
@@ -60575,7 +60575,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_phb (
  *
  * @returns RMSVoltagePhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -60595,7 +60595,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_phb
+  uint16_t new_rms_voltage_phb
   );
 
 /**
@@ -60681,7 +60681,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phb (
  *
  * @returns RMSVoltageMinPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_min_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -60701,7 +60701,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_min_phb
+  uint16_t new_rms_voltage_min_phb
   );
 
 /**
@@ -60787,7 +60787,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phb (
  *
  * @returns RMSVoltageMaxPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_max_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -60807,7 +60807,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_max_phb
+  uint16_t new_rms_voltage_max_phb
   );
 
 /**
@@ -60893,7 +60893,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_phb (
  *
  * @returns RMSCurrentPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_current_phb(
+uint16_t dotdot_get_electrical_measurement_rms_current_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -60913,7 +60913,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_phb
+  uint16_t new_rms_current_phb
   );
 
 /**
@@ -60999,7 +60999,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_min_phb (
  *
  * @returns RMSCurrentMinPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_current_min_phb(
+uint16_t dotdot_get_electrical_measurement_rms_current_min_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -61019,7 +61019,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_min_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_min_phb
+  uint16_t new_rms_current_min_phb
   );
 
 /**
@@ -61105,7 +61105,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_max_phb (
  *
  * @returns RMSCurrentMaxPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_current_max_phb(
+uint16_t dotdot_get_electrical_measurement_rms_current_max_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -61125,7 +61125,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_max_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_max_phb
+  uint16_t new_rms_current_max_phb
   );
 
 /**
@@ -61635,7 +61635,7 @@ bool dotdot_is_supported_electrical_measurement_apparent_power_phb (
  *
  * @returns ApparentPowerPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_apparent_power_phb(
+uint16_t dotdot_get_electrical_measurement_apparent_power_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -61655,7 +61655,7 @@ sl_status_t dotdot_set_electrical_measurement_apparent_power_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_apparent_power_phb
+  uint16_t new_apparent_power_phb
   );
 
 /**
@@ -61847,7 +61847,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_
  *
  * @returns AverageRMSVoltageMeasurementPeriodPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phb(
+uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -61867,7 +61867,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_pe
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_voltage_measurement_period_phb
+  uint16_t new_average_rms_voltage_measurement_period_phb
   );
 
 /**
@@ -61953,7 +61953,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter
  *
  * @returns AverageRMSOverVoltageCounterPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phb(
+uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -61973,7 +61973,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_p
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_over_voltage_counter_phb
+  uint16_t new_average_rms_over_voltage_counter_phb
   );
 
 /**
@@ -62059,7 +62059,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counte
  *
  * @returns AverageRMSUnderVoltageCounterPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phb(
+uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -62079,7 +62079,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_under_voltage_counter_phb
+  uint16_t new_average_rms_under_voltage_counter_phb
   );
 
 /**
@@ -62165,7 +62165,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_
  *
  * @returns RMSExtremeOverVoltagePeriodPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phb(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -62185,7 +62185,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_ph
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_over_voltage_period_phb
+  uint16_t new_rms_extreme_over_voltage_period_phb
   );
 
 /**
@@ -62271,7 +62271,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period
  *
  * @returns RMSExtremeUnderVoltagePeriodPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phb(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -62291,7 +62291,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_p
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_under_voltage_period_phb
+  uint16_t new_rms_extreme_under_voltage_period_phb
   );
 
 /**
@@ -62377,7 +62377,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phb (
  *
  * @returns RMSVoltageSagPeriodPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -62397,7 +62397,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_sag_period_phb
+  uint16_t new_rms_voltage_sag_period_phb
   );
 
 /**
@@ -62483,7 +62483,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phb (
  *
  * @returns RMSVoltageSwellPeriodPhB attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phb(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -62503,7 +62503,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_swell_period_phb
+  uint16_t new_rms_voltage_swell_period_phb
   );
 
 /**
@@ -62589,7 +62589,7 @@ bool dotdot_is_supported_electrical_measurement_line_current_phc (
  *
  * @returns LineCurrentPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_line_current_phc(
+uint16_t dotdot_get_electrical_measurement_line_current_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -62609,7 +62609,7 @@ sl_status_t dotdot_set_electrical_measurement_line_current_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_line_current_phc
+  uint16_t new_line_current_phc
   );
 
 /**
@@ -62907,7 +62907,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_phc (
  *
  * @returns RMSVoltagePhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -62927,7 +62927,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_phc
+  uint16_t new_rms_voltage_phc
   );
 
 /**
@@ -63013,7 +63013,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phc (
  *
  * @returns RMSVoltageMinPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_min_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -63033,7 +63033,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_min_phc
+  uint16_t new_rms_voltage_min_phc
   );
 
 /**
@@ -63119,7 +63119,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phc (
  *
  * @returns RMSVoltageMaxPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_max_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -63139,7 +63139,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_max_phc
+  uint16_t new_rms_voltage_max_phc
   );
 
 /**
@@ -63225,7 +63225,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_phc (
  *
  * @returns RMSCurrentPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_current_phc(
+uint16_t dotdot_get_electrical_measurement_rms_current_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -63245,7 +63245,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_phc
+  uint16_t new_rms_current_phc
   );
 
 /**
@@ -63331,7 +63331,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_min_phc (
  *
  * @returns RMSCurrentMinPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_current_min_phc(
+uint16_t dotdot_get_electrical_measurement_rms_current_min_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -63351,7 +63351,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_min_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_min_phc
+  uint16_t new_rms_current_min_phc
   );
 
 /**
@@ -63437,7 +63437,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_max_phc (
  *
  * @returns RMSCurrentMaxPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_current_max_phc(
+uint16_t dotdot_get_electrical_measurement_rms_current_max_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -63457,7 +63457,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_max_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_max_phc
+  uint16_t new_rms_current_max_phc
   );
 
 /**
@@ -63967,7 +63967,7 @@ bool dotdot_is_supported_electrical_measurement_apparent_power_phc (
  *
  * @returns ApparentPowerPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_apparent_power_phc(
+uint16_t dotdot_get_electrical_measurement_apparent_power_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -63987,7 +63987,7 @@ sl_status_t dotdot_set_electrical_measurement_apparent_power_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_apparent_power_phc
+  uint16_t new_apparent_power_phc
   );
 
 /**
@@ -64179,7 +64179,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_
  *
  * @returns AverageRMSVoltageMeasurementPeriodPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phc(
+uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -64199,7 +64199,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_pe
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_voltage_measurement_period_phc
+  uint16_t new_average_rms_voltage_measurement_period_phc
   );
 
 /**
@@ -64285,7 +64285,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter
  *
  * @returns AverageRMSOverVoltageCounterPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phc(
+uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -64305,7 +64305,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_p
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_over_voltage_counter_phc
+  uint16_t new_average_rms_over_voltage_counter_phc
   );
 
 /**
@@ -64391,7 +64391,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counte
  *
  * @returns AverageRMSUnderVoltageCounterPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phc(
+uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -64411,7 +64411,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_under_voltage_counter_phc
+  uint16_t new_average_rms_under_voltage_counter_phc
   );
 
 /**
@@ -64497,7 +64497,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_
  *
  * @returns RMSExtremeOverVoltagePeriodPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phc(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -64517,7 +64517,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_ph
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_over_voltage_period_phc
+  uint16_t new_rms_extreme_over_voltage_period_phc
   );
 
 /**
@@ -64603,7 +64603,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period
  *
  * @returns RMSExtremeUnderVoltagePeriodPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phc(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -64623,7 +64623,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_p
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_under_voltage_period_phc
+  uint16_t new_rms_extreme_under_voltage_period_phc
   );
 
 /**
@@ -64709,7 +64709,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phc (
  *
  * @returns RMSVoltageSagPeriodPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -64729,7 +64729,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_sag_period_phc
+  uint16_t new_rms_voltage_sag_period_phc
   );
 
 /**
@@ -64815,7 +64815,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phc (
  *
  * @returns RMSVoltageSwellPeriodPhC attribute
  */
-int16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phc(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -64835,7 +64835,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_swell_period_phc
+  uint16_t new_rms_voltage_swell_period_phc
   );
 
 /**
@@ -64949,7 +64949,7 @@ bool dotdot_is_supported_diagnostics_number_of_resets (
  *
  * @returns NumberOfResets attribute
  */
-int16_t dotdot_get_diagnostics_number_of_resets(
+uint16_t dotdot_get_diagnostics_number_of_resets(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -64969,7 +64969,7 @@ sl_status_t dotdot_set_diagnostics_number_of_resets(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_resets
+  uint16_t new_number_of_resets
   );
 
 /**
@@ -65055,7 +65055,7 @@ bool dotdot_is_supported_diagnostics_persistent_memory_writes (
  *
  * @returns PersistentMemoryWrites attribute
  */
-int16_t dotdot_get_diagnostics_persistent_memory_writes(
+uint16_t dotdot_get_diagnostics_persistent_memory_writes(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -65075,7 +65075,7 @@ sl_status_t dotdot_set_diagnostics_persistent_memory_writes(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_persistent_memory_writes
+  uint16_t new_persistent_memory_writes
   );
 
 /**
@@ -65161,7 +65161,7 @@ bool dotdot_is_supported_diagnostics_mac_rx_bcast (
  *
  * @returns MacRxBcast attribute
  */
-int32_t dotdot_get_diagnostics_mac_rx_bcast(
+uint32_t dotdot_get_diagnostics_mac_rx_bcast(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -65181,7 +65181,7 @@ sl_status_t dotdot_set_diagnostics_mac_rx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mac_rx_bcast
+  uint32_t new_mac_rx_bcast
   );
 
 /**
@@ -65267,7 +65267,7 @@ bool dotdot_is_supported_diagnostics_mac_tx_bcast (
  *
  * @returns MacTxBcast attribute
  */
-int32_t dotdot_get_diagnostics_mac_tx_bcast(
+uint32_t dotdot_get_diagnostics_mac_tx_bcast(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -65287,7 +65287,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mac_tx_bcast
+  uint32_t new_mac_tx_bcast
   );
 
 /**
@@ -65373,7 +65373,7 @@ bool dotdot_is_supported_diagnostics_mac_rx_ucast (
  *
  * @returns MacRxUcast attribute
  */
-int32_t dotdot_get_diagnostics_mac_rx_ucast(
+uint32_t dotdot_get_diagnostics_mac_rx_ucast(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -65393,7 +65393,7 @@ sl_status_t dotdot_set_diagnostics_mac_rx_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mac_rx_ucast
+  uint32_t new_mac_rx_ucast
   );
 
 /**
@@ -65479,7 +65479,7 @@ bool dotdot_is_supported_diagnostics_mac_tx_ucast (
  *
  * @returns MacTxUcast attribute
  */
-int32_t dotdot_get_diagnostics_mac_tx_ucast(
+uint32_t dotdot_get_diagnostics_mac_tx_ucast(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -65499,7 +65499,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mac_tx_ucast
+  uint32_t new_mac_tx_ucast
   );
 
 /**
@@ -65585,7 +65585,7 @@ bool dotdot_is_supported_diagnostics_mac_tx_ucast_retry (
  *
  * @returns MacTxUcastRetry attribute
  */
-int16_t dotdot_get_diagnostics_mac_tx_ucast_retry(
+uint16_t dotdot_get_diagnostics_mac_tx_ucast_retry(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -65605,7 +65605,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_ucast_retry(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mac_tx_ucast_retry
+  uint16_t new_mac_tx_ucast_retry
   );
 
 /**
@@ -65691,7 +65691,7 @@ bool dotdot_is_supported_diagnostics_mac_tx_ucast_fail (
  *
  * @returns MacTxUcastFail attribute
  */
-int16_t dotdot_get_diagnostics_mac_tx_ucast_fail(
+uint16_t dotdot_get_diagnostics_mac_tx_ucast_fail(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -65711,7 +65711,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_ucast_fail(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mac_tx_ucast_fail
+  uint16_t new_mac_tx_ucast_fail
   );
 
 /**
@@ -65797,7 +65797,7 @@ bool dotdot_is_supported_diagnostics_aps_rx_bcast (
  *
  * @returns APSRxBcast attribute
  */
-int16_t dotdot_get_diagnostics_aps_rx_bcast(
+uint16_t dotdot_get_diagnostics_aps_rx_bcast(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -65817,7 +65817,7 @@ sl_status_t dotdot_set_diagnostics_aps_rx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_rx_bcast
+  uint16_t new_aps_rx_bcast
   );
 
 /**
@@ -65903,7 +65903,7 @@ bool dotdot_is_supported_diagnostics_aps_tx_bcast (
  *
  * @returns APSTxBcast attribute
  */
-int16_t dotdot_get_diagnostics_aps_tx_bcast(
+uint16_t dotdot_get_diagnostics_aps_tx_bcast(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -65923,7 +65923,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_tx_bcast
+  uint16_t new_aps_tx_bcast
   );
 
 /**
@@ -66009,7 +66009,7 @@ bool dotdot_is_supported_diagnostics_aps_rx_ucast (
  *
  * @returns APSRxUcast attribute
  */
-int16_t dotdot_get_diagnostics_aps_rx_ucast(
+uint16_t dotdot_get_diagnostics_aps_rx_ucast(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66029,7 +66029,7 @@ sl_status_t dotdot_set_diagnostics_aps_rx_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_rx_ucast
+  uint16_t new_aps_rx_ucast
   );
 
 /**
@@ -66115,7 +66115,7 @@ bool dotdot_is_supported_diagnostics_aps_tx_ucast_success (
  *
  * @returns APSTxUcastSuccess attribute
  */
-int16_t dotdot_get_diagnostics_aps_tx_ucast_success(
+uint16_t dotdot_get_diagnostics_aps_tx_ucast_success(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66135,7 +66135,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_ucast_success(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_tx_ucast_success
+  uint16_t new_aps_tx_ucast_success
   );
 
 /**
@@ -66221,7 +66221,7 @@ bool dotdot_is_supported_diagnostics_aps_tx_ucast_retry (
  *
  * @returns APSTxUcastRetry attribute
  */
-int16_t dotdot_get_diagnostics_aps_tx_ucast_retry(
+uint16_t dotdot_get_diagnostics_aps_tx_ucast_retry(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66241,7 +66241,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_ucast_retry(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_tx_ucast_retry
+  uint16_t new_aps_tx_ucast_retry
   );
 
 /**
@@ -66327,7 +66327,7 @@ bool dotdot_is_supported_diagnostics_aps_tx_ucast_fail (
  *
  * @returns APSTxUcastFail attribute
  */
-int16_t dotdot_get_diagnostics_aps_tx_ucast_fail(
+uint16_t dotdot_get_diagnostics_aps_tx_ucast_fail(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66347,7 +66347,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_ucast_fail(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_tx_ucast_fail
+  uint16_t new_aps_tx_ucast_fail
   );
 
 /**
@@ -66433,7 +66433,7 @@ bool dotdot_is_supported_diagnostics_route_disc_initiated (
  *
  * @returns RouteDiscInitiated attribute
  */
-int16_t dotdot_get_diagnostics_route_disc_initiated(
+uint16_t dotdot_get_diagnostics_route_disc_initiated(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66453,7 +66453,7 @@ sl_status_t dotdot_set_diagnostics_route_disc_initiated(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_route_disc_initiated
+  uint16_t new_route_disc_initiated
   );
 
 /**
@@ -66539,7 +66539,7 @@ bool dotdot_is_supported_diagnostics_neighbor_added (
  *
  * @returns NeighborAdded attribute
  */
-int16_t dotdot_get_diagnostics_neighbor_added(
+uint16_t dotdot_get_diagnostics_neighbor_added(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66559,7 +66559,7 @@ sl_status_t dotdot_set_diagnostics_neighbor_added(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_neighbor_added
+  uint16_t new_neighbor_added
   );
 
 /**
@@ -66645,7 +66645,7 @@ bool dotdot_is_supported_diagnostics_neighbor_removed (
  *
  * @returns NeighborRemoved attribute
  */
-int16_t dotdot_get_diagnostics_neighbor_removed(
+uint16_t dotdot_get_diagnostics_neighbor_removed(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66665,7 +66665,7 @@ sl_status_t dotdot_set_diagnostics_neighbor_removed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_neighbor_removed
+  uint16_t new_neighbor_removed
   );
 
 /**
@@ -66751,7 +66751,7 @@ bool dotdot_is_supported_diagnostics_neighbor_stale (
  *
  * @returns NeighborStale attribute
  */
-int16_t dotdot_get_diagnostics_neighbor_stale(
+uint16_t dotdot_get_diagnostics_neighbor_stale(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66771,7 +66771,7 @@ sl_status_t dotdot_set_diagnostics_neighbor_stale(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_neighbor_stale
+  uint16_t new_neighbor_stale
   );
 
 /**
@@ -66857,7 +66857,7 @@ bool dotdot_is_supported_diagnostics_join_indication (
  *
  * @returns JoinIndication attribute
  */
-int16_t dotdot_get_diagnostics_join_indication(
+uint16_t dotdot_get_diagnostics_join_indication(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66877,7 +66877,7 @@ sl_status_t dotdot_set_diagnostics_join_indication(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_join_indication
+  uint16_t new_join_indication
   );
 
 /**
@@ -66963,7 +66963,7 @@ bool dotdot_is_supported_diagnostics_child_moved (
  *
  * @returns ChildMoved attribute
  */
-int16_t dotdot_get_diagnostics_child_moved(
+uint16_t dotdot_get_diagnostics_child_moved(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -66983,7 +66983,7 @@ sl_status_t dotdot_set_diagnostics_child_moved(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_child_moved
+  uint16_t new_child_moved
   );
 
 /**
@@ -67069,7 +67069,7 @@ bool dotdot_is_supported_diagnostics_nwkfc_failure (
  *
  * @returns NWKFCFailure attribute
  */
-int16_t dotdot_get_diagnostics_nwkfc_failure(
+uint16_t dotdot_get_diagnostics_nwkfc_failure(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -67089,7 +67089,7 @@ sl_status_t dotdot_set_diagnostics_nwkfc_failure(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_nwkfc_failure
+  uint16_t new_nwkfc_failure
   );
 
 /**
@@ -67175,7 +67175,7 @@ bool dotdot_is_supported_diagnostics_apsfc_failure (
  *
  * @returns APSFCFailure attribute
  */
-int16_t dotdot_get_diagnostics_apsfc_failure(
+uint16_t dotdot_get_diagnostics_apsfc_failure(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -67195,7 +67195,7 @@ sl_status_t dotdot_set_diagnostics_apsfc_failure(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_apsfc_failure
+  uint16_t new_apsfc_failure
   );
 
 /**
@@ -67281,7 +67281,7 @@ bool dotdot_is_supported_diagnostics_aps_unauthorized_key (
  *
  * @returns APSUnauthorizedKey attribute
  */
-int16_t dotdot_get_diagnostics_aps_unauthorized_key(
+uint16_t dotdot_get_diagnostics_aps_unauthorized_key(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -67301,7 +67301,7 @@ sl_status_t dotdot_set_diagnostics_aps_unauthorized_key(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_unauthorized_key
+  uint16_t new_aps_unauthorized_key
   );
 
 /**
@@ -67387,7 +67387,7 @@ bool dotdot_is_supported_diagnostics_nwk_decrypt_failures (
  *
  * @returns NWKDecryptFailures attribute
  */
-int16_t dotdot_get_diagnostics_nwk_decrypt_failures(
+uint16_t dotdot_get_diagnostics_nwk_decrypt_failures(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -67407,7 +67407,7 @@ sl_status_t dotdot_set_diagnostics_nwk_decrypt_failures(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_nwk_decrypt_failures
+  uint16_t new_nwk_decrypt_failures
   );
 
 /**
@@ -67493,7 +67493,7 @@ bool dotdot_is_supported_diagnostics_aps_decrypt_failures (
  *
  * @returns APSDecryptFailures attribute
  */
-int16_t dotdot_get_diagnostics_aps_decrypt_failures(
+uint16_t dotdot_get_diagnostics_aps_decrypt_failures(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -67513,7 +67513,7 @@ sl_status_t dotdot_set_diagnostics_aps_decrypt_failures(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_decrypt_failures
+  uint16_t new_aps_decrypt_failures
   );
 
 /**
@@ -67599,7 +67599,7 @@ bool dotdot_is_supported_diagnostics_packet_buffer_allocate_failures (
  *
  * @returns PacketBufferAllocateFailures attribute
  */
-int16_t dotdot_get_diagnostics_packet_buffer_allocate_failures(
+uint16_t dotdot_get_diagnostics_packet_buffer_allocate_failures(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -67619,7 +67619,7 @@ sl_status_t dotdot_set_diagnostics_packet_buffer_allocate_failures(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_packet_buffer_allocate_failures
+  uint16_t new_packet_buffer_allocate_failures
   );
 
 /**
@@ -67705,7 +67705,7 @@ bool dotdot_is_supported_diagnostics_relayed_ucast (
  *
  * @returns RelayedUcast attribute
  */
-int16_t dotdot_get_diagnostics_relayed_ucast(
+uint16_t dotdot_get_diagnostics_relayed_ucast(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -67725,7 +67725,7 @@ sl_status_t dotdot_set_diagnostics_relayed_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_relayed_ucast
+  uint16_t new_relayed_ucast
   );
 
 /**
@@ -67811,7 +67811,7 @@ bool dotdot_is_supported_diagnostics_phy_to_mac_queue_limit_reached (
  *
  * @returns PHYToMACQueueLimitReached attribute
  */
-int16_t dotdot_get_diagnostics_phy_to_mac_queue_limit_reached(
+uint16_t dotdot_get_diagnostics_phy_to_mac_queue_limit_reached(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -67831,7 +67831,7 @@ sl_status_t dotdot_set_diagnostics_phy_to_mac_queue_limit_reached(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_phy_to_mac_queue_limit_reached
+  uint16_t new_phy_to_mac_queue_limit_reached
   );
 
 /**
@@ -67917,7 +67917,7 @@ bool dotdot_is_supported_diagnostics_packet_validate_drop_count (
  *
  * @returns PacketValidateDropCount attribute
  */
-int16_t dotdot_get_diagnostics_packet_validate_drop_count(
+uint16_t dotdot_get_diagnostics_packet_validate_drop_count(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -67937,7 +67937,7 @@ sl_status_t dotdot_set_diagnostics_packet_validate_drop_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_packet_validate_drop_count
+  uint16_t new_packet_validate_drop_count
   );
 
 /**
@@ -68023,7 +68023,7 @@ bool dotdot_is_supported_diagnostics_average_mac_retry_per_aps_message_sent (
  *
  * @returns AverageMACRetryPerAPSMessageSent attribute
  */
-int16_t dotdot_get_diagnostics_average_mac_retry_per_aps_message_sent(
+uint16_t dotdot_get_diagnostics_average_mac_retry_per_aps_message_sent(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -68043,7 +68043,7 @@ sl_status_t dotdot_set_diagnostics_average_mac_retry_per_aps_message_sent(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_mac_retry_per_aps_message_sent
+  uint16_t new_average_mac_retry_per_aps_message_sent
   );
 
 /**
@@ -68129,7 +68129,7 @@ bool dotdot_is_supported_diagnostics_last_messagelqi (
  *
  * @returns LastMessageLQI attribute
  */
-int8_t dotdot_get_diagnostics_last_messagelqi(
+uint8_t dotdot_get_diagnostics_last_messagelqi(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -68149,7 +68149,7 @@ sl_status_t dotdot_set_diagnostics_last_messagelqi(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_last_messagelqi
+  uint8_t new_last_messagelqi
   );
 
 /**
@@ -68609,7 +68609,7 @@ bool dotdot_is_supported_state_endpoint_id_list (
  *
  * @returns EndpointIdList attribute
  */
-int8_t dotdot_get_state_endpoint_id_list(
+uint8_t dotdot_get_state_endpoint_id_list(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -68632,7 +68632,7 @@ sl_status_t dotdot_set_state_endpoint_id_list(
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
   size_t new_endpoint_id_list_count,
-  const int8_t* new_endpoint_id_list
+  const uint8_t* new_endpoint_id_list
   );
 
 /**
@@ -68930,7 +68930,7 @@ bool dotdot_is_supported_state_maximum_command_delay (
  *
  * @returns MaximumCommandDelay attribute
  */
-int32_t dotdot_get_state_maximum_command_delay(
+uint32_t dotdot_get_state_maximum_command_delay(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -68950,7 +68950,7 @@ sl_status_t dotdot_set_state_maximum_command_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_maximum_command_delay
+  uint32_t new_maximum_command_delay
   );
 
 /**
@@ -69531,7 +69531,7 @@ bool dotdot_is_supported_system_metrics_reporting_interval_seconds (
  *
  * @returns ReportingIntervalSeconds attribute
  */
-int32_t dotdot_get_system_metrics_reporting_interval_seconds(
+uint32_t dotdot_get_system_metrics_reporting_interval_seconds(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -69551,7 +69551,7 @@ sl_status_t dotdot_set_system_metrics_reporting_interval_seconds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_reporting_interval_seconds
+  uint32_t new_reporting_interval_seconds
   );
 
 /**
@@ -71578,7 +71578,7 @@ bool dotdot_is_supported_system_metrics_uptime_minutes (
  *
  * @returns UptimeMinutes attribute
  */
-int64_t dotdot_get_system_metrics_uptime_minutes(
+uint64_t dotdot_get_system_metrics_uptime_minutes(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -71598,7 +71598,7 @@ sl_status_t dotdot_set_system_metrics_uptime_minutes(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_uptime_minutes
+  uint64_t new_uptime_minutes
   );
 
 /**
@@ -72320,7 +72320,7 @@ bool dotdot_is_supported_system_metrics_system_interrupts (
  *
  * @returns SystemInterrupts attribute
  */
-int64_t dotdot_get_system_metrics_system_interrupts(
+uint64_t dotdot_get_system_metrics_system_interrupts(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -72340,7 +72340,7 @@ sl_status_t dotdot_set_system_metrics_system_interrupts(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_system_interrupts
+  uint64_t new_system_interrupts
   );
 
 /**
@@ -72890,7 +72890,7 @@ bool dotdot_is_supported_application_monitoring_uptime_minutes (
  *
  * @returns UptimeMinutes attribute
  */
-int64_t dotdot_get_application_monitoring_uptime_minutes(
+uint64_t dotdot_get_application_monitoring_uptime_minutes(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -72910,7 +72910,7 @@ sl_status_t dotdot_set_application_monitoring_uptime_minutes(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_uptime_minutes
+  uint64_t new_uptime_minutes
   );
 
 /**
@@ -72996,7 +72996,7 @@ bool dotdot_is_supported_application_monitoring_process_id (
  *
  * @returns ProcessId attribute
  */
-int64_t dotdot_get_application_monitoring_process_id(
+uint64_t dotdot_get_application_monitoring_process_id(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -73016,7 +73016,7 @@ sl_status_t dotdot_set_application_monitoring_process_id(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_process_id
+  uint64_t new_process_id
   );
 
 /**
@@ -73532,7 +73532,7 @@ bool dotdot_is_supported_application_monitoring_mqtt_statistics_reporting_interv
  *
  * @returns MQTTStatisticsReportingIntervalSeconds attribute
  */
-int32_t dotdot_get_application_monitoring_mqtt_statistics_reporting_interval_seconds(
+uint32_t dotdot_get_application_monitoring_mqtt_statistics_reporting_interval_seconds(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -73552,7 +73552,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_statistics_reporting_interval
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mqtt_statistics_reporting_interval_seconds
+  uint32_t new_mqtt_statistics_reporting_interval_seconds
   );
 
 /**
@@ -73638,7 +73638,7 @@ bool dotdot_is_supported_application_monitoring_mqtt_messages_sent (
  *
  * @returns MQTTMessagesSent attribute
  */
-int64_t dotdot_get_application_monitoring_mqtt_messages_sent(
+uint64_t dotdot_get_application_monitoring_mqtt_messages_sent(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -73658,7 +73658,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_messages_sent(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_mqtt_messages_sent
+  uint64_t new_mqtt_messages_sent
   );
 
 /**
@@ -73744,7 +73744,7 @@ bool dotdot_is_supported_application_monitoring_mqtt_messages_received (
  *
  * @returns MQTTMessagesReceived attribute
  */
-int64_t dotdot_get_application_monitoring_mqtt_messages_received(
+uint64_t dotdot_get_application_monitoring_mqtt_messages_received(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -73764,7 +73764,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_messages_received(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_mqtt_messages_received
+  uint64_t new_mqtt_messages_received
   );
 
 /**
@@ -73850,7 +73850,7 @@ bool dotdot_is_supported_application_monitoring_mqtt_subscription_count (
  *
  * @returns MQTTSubscriptionCount attribute
  */
-int64_t dotdot_get_application_monitoring_mqtt_subscription_count(
+uint64_t dotdot_get_application_monitoring_mqtt_subscription_count(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -73870,7 +73870,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_subscription_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_mqtt_subscription_count
+  uint64_t new_mqtt_subscription_count
   );
 
 /**
@@ -74274,7 +74274,7 @@ bool dotdot_is_supported_application_monitoring_application_statistics_reporting
  *
  * @returns ApplicationStatisticsReportingIntervalSeconds attribute
  */
-int32_t dotdot_get_application_monitoring_application_statistics_reporting_interval_seconds(
+uint32_t dotdot_get_application_monitoring_application_statistics_reporting_interval_seconds(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -74294,7 +74294,7 @@ sl_status_t dotdot_set_application_monitoring_application_statistics_reporting_i
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_application_statistics_reporting_interval_seconds
+  uint32_t new_application_statistics_reporting_interval_seconds
   );
 
 /**
@@ -75321,7 +75321,7 @@ bool dotdot_is_supported_user_credential_supported_user_unique_identifiers (
  *
  * @returns SupportedUserUniqueIdentifiers attribute
  */
-int16_t dotdot_get_user_credential_supported_user_unique_identifiers(
+uint16_t dotdot_get_user_credential_supported_user_unique_identifiers(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -75341,7 +75341,7 @@ sl_status_t dotdot_set_user_credential_supported_user_unique_identifiers(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_supported_user_unique_identifiers
+  uint16_t new_supported_user_unique_identifiers
   );
 
 /**
@@ -78011,7 +78011,7 @@ bool dotdot_is_supported_unify_humidity_control_humidifier_setpoint_precision (
  *
  * @returns HumidifierSetpointPrecision attribute
  */
-int8_t dotdot_get_unify_humidity_control_humidifier_setpoint_precision(
+uint8_t dotdot_get_unify_humidity_control_humidifier_setpoint_precision(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -78031,7 +78031,7 @@ sl_status_t dotdot_set_unify_humidity_control_humidifier_setpoint_precision(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_humidifier_setpoint_precision
+  uint8_t new_humidifier_setpoint_precision
   );
 
 /**
@@ -78541,7 +78541,7 @@ bool dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_precision
  *
  * @returns DehumidifierSetpointPrecision attribute
  */
-int8_t dotdot_get_unify_humidity_control_dehumidifier_setpoint_precision(
+uint8_t dotdot_get_unify_humidity_control_dehumidifier_setpoint_precision(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -78561,7 +78561,7 @@ sl_status_t dotdot_set_unify_humidity_control_dehumidifier_setpoint_precision(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_dehumidifier_setpoint_precision
+  uint8_t new_dehumidifier_setpoint_precision
   );
 
 /**
@@ -79071,7 +79071,7 @@ bool dotdot_is_supported_unify_humidity_control_auto_setpoint_precision (
  *
  * @returns AutoSetpointPrecision attribute
  */
-int8_t dotdot_get_unify_humidity_control_auto_setpoint_precision(
+uint8_t dotdot_get_unify_humidity_control_auto_setpoint_precision(
   const dotdot_unid_t unid,
   const dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state);
@@ -79091,7 +79091,7 @@ sl_status_t dotdot_set_unify_humidity_control_auto_setpoint_precision(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_auto_setpoint_precision
+  uint8_t new_auto_setpoint_precision
   );
 
 /**
diff --git a/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_attribute_publisher.cpp b/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_attribute_publisher.cpp
index ab1a977fa1..75631aebad 100644
--- a/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_attribute_publisher.cpp
+++ b/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_attribute_publisher.cpp
@@ -98,28 +98,28 @@ static void basic_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION) {
           uic_mqtt_dotdot_basic_zcl_version_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION) {
           uic_mqtt_dotdot_basic_application_version_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION) {
           uic_mqtt_dotdot_basic_stack_version_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION) {
           uic_mqtt_dotdot_basic_hw_version_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -172,7 +172,7 @@ static void basic_cluster_publish_desired_value_callback(
           std::vector<char> str_desired = attr.desired_or_reported<std::vector<char>>();
           uic_mqtt_dotdot_basic_product_code_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(str_desired.data()),
+            static_cast<const char*>(str_desired.data()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -501,28 +501,28 @@ static void basic_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION) {
           uic_mqtt_dotdot_basic_zcl_version_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION) {
           uic_mqtt_dotdot_basic_application_version_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION) {
           uic_mqtt_dotdot_basic_stack_version_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION) {
           uic_mqtt_dotdot_basic_hw_version_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -575,7 +575,7 @@ static void basic_cluster_publish_reported_value_callback(
           std::vector<char> str_desired = attr.reported<std::vector<char>>();
           uic_mqtt_dotdot_basic_product_code_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>( str_desired.data() ),
+            static_cast<const char*>( str_desired.data() ),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -773,14 +773,14 @@ static void power_configuration_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_mains_voltage_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY) {
           uic_mqtt_dotdot_power_configuration_mains_frequency_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -794,35 +794,35 @@ static void power_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_mains_voltage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_mains_voltage_max_threshold_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT) {
           uic_mqtt_dotdot_power_configuration_mains_voltage_dwell_trip_point_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_remaining_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -844,21 +844,21 @@ static void power_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING) {
           uic_mqtt_dotdot_power_configuration_batterya_hr_rating_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY) {
           uic_mqtt_dotdot_power_configuration_battery_quantity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery_rated_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -872,56 +872,56 @@ static void power_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -935,14 +935,14 @@ static void power_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_remaining_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -964,21 +964,21 @@ static void power_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING) {
           uic_mqtt_dotdot_power_configuration_battery2a_hr_rating_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY) {
           uic_mqtt_dotdot_power_configuration_battery2_quantity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery2_rated_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -992,56 +992,56 @@ static void power_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -1055,14 +1055,14 @@ static void power_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_remaining_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -1084,21 +1084,21 @@ static void power_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING) {
           uic_mqtt_dotdot_power_configuration_battery3a_hr_rating_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY) {
           uic_mqtt_dotdot_power_configuration_battery3_quantity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery3_rated_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -1112,56 +1112,56 @@ static void power_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -1709,14 +1709,14 @@ static void power_configuration_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_mains_voltage_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY) {
           uic_mqtt_dotdot_power_configuration_mains_frequency_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -1730,35 +1730,35 @@ static void power_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_mains_voltage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_mains_voltage_max_threshold_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT) {
           uic_mqtt_dotdot_power_configuration_mains_voltage_dwell_trip_point_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_remaining_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -1780,21 +1780,21 @@ static void power_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING) {
           uic_mqtt_dotdot_power_configuration_batterya_hr_rating_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY) {
           uic_mqtt_dotdot_power_configuration_battery_quantity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery_rated_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -1808,56 +1808,56 @@ static void power_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery_voltage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery_percentage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -1871,14 +1871,14 @@ static void power_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_remaining_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -1900,21 +1900,21 @@ static void power_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING) {
           uic_mqtt_dotdot_power_configuration_battery2a_hr_rating_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY) {
           uic_mqtt_dotdot_power_configuration_battery2_quantity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery2_rated_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -1928,56 +1928,56 @@ static void power_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -1991,14 +1991,14 @@ static void power_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_remaining_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -2020,21 +2020,21 @@ static void power_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING) {
           uic_mqtt_dotdot_power_configuration_battery3a_hr_rating_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY) {
           uic_mqtt_dotdot_power_configuration_battery3_quantity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE) {
           uic_mqtt_dotdot_power_configuration_battery3_rated_voltage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -2048,56 +2048,56 @@ static void power_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_min_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold1_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold2_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3) {
           uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold3_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -2247,7 +2247,7 @@ static void device_temperature_configuration_cluster_publish_desired_value_callb
           if (type == DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL) {
           uic_mqtt_dotdot_device_temperature_configuration_over_temp_total_dwell_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -2275,14 +2275,14 @@ static void device_temperature_configuration_cluster_publish_desired_value_callb
           if (type == DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT) {
           uic_mqtt_dotdot_device_temperature_configuration_low_temp_dwell_trip_point_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT) {
           uic_mqtt_dotdot_device_temperature_configuration_high_temp_dwell_trip_point_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -2460,7 +2460,7 @@ static void device_temperature_configuration_cluster_publish_reported_value_call
           if (type == DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL) {
           uic_mqtt_dotdot_device_temperature_configuration_over_temp_total_dwell_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -2488,14 +2488,14 @@ static void device_temperature_configuration_cluster_publish_reported_value_call
           if (type == DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT) {
           uic_mqtt_dotdot_device_temperature_configuration_low_temp_dwell_trip_point_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT) {
           uic_mqtt_dotdot_device_temperature_configuration_high_temp_dwell_trip_point_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -2617,7 +2617,7 @@ static void identify_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME) {
           uic_mqtt_dotdot_identify_identify_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -2710,7 +2710,7 @@ static void identify_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME) {
           uic_mqtt_dotdot_identify_identify_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -3047,21 +3047,21 @@ static void scenes_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT) {
           uic_mqtt_dotdot_scenes_scene_count_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE) {
           uic_mqtt_dotdot_scenes_current_scene_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP) {
           uic_mqtt_dotdot_scenes_current_group_publish(
             base_topic.c_str(),
-            static_cast<uint8_t *>(attr.desired_or_reported<uint8_t *>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -3226,21 +3226,21 @@ static void scenes_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT) {
           uic_mqtt_dotdot_scenes_scene_count_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE) {
           uic_mqtt_dotdot_scenes_current_scene_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP) {
           uic_mqtt_dotdot_scenes_current_group_publish(
             base_topic.c_str(),
-            static_cast<uint8_t *>(attr.reported<uint8_t *>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -3400,14 +3400,14 @@ static void on_off_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME) {
           uic_mqtt_dotdot_on_off_on_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME) {
           uic_mqtt_dotdot_on_off_off_wait_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -3553,14 +3553,14 @@ static void on_off_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME) {
           uic_mqtt_dotdot_on_off_on_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME) {
           uic_mqtt_dotdot_on_off_off_wait_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -3689,49 +3689,49 @@ static void level_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL) {
           uic_mqtt_dotdot_level_current_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME) {
           uic_mqtt_dotdot_level_remaining_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL) {
           uic_mqtt_dotdot_level_min_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL) {
           uic_mqtt_dotdot_level_max_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY) {
           uic_mqtt_dotdot_level_current_frequency_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY) {
           uic_mqtt_dotdot_level_min_frequency_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY) {
           uic_mqtt_dotdot_level_max_frequency_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -3745,42 +3745,42 @@ static void level_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME) {
           uic_mqtt_dotdot_level_on_off_transition_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL) {
           uic_mqtt_dotdot_level_on_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME) {
           uic_mqtt_dotdot_level_on_transition_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME) {
           uic_mqtt_dotdot_level_off_transition_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE) {
           uic_mqtt_dotdot_level_default_move_rate_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL) {
           uic_mqtt_dotdot_level_start_up_current_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -3977,49 +3977,49 @@ static void level_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL) {
           uic_mqtt_dotdot_level_current_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME) {
           uic_mqtt_dotdot_level_remaining_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL) {
           uic_mqtt_dotdot_level_min_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL) {
           uic_mqtt_dotdot_level_max_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY) {
           uic_mqtt_dotdot_level_current_frequency_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY) {
           uic_mqtt_dotdot_level_min_frequency_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY) {
           uic_mqtt_dotdot_level_max_frequency_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -4033,42 +4033,42 @@ static void level_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME) {
           uic_mqtt_dotdot_level_on_off_transition_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL) {
           uic_mqtt_dotdot_level_on_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME) {
           uic_mqtt_dotdot_level_on_transition_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME) {
           uic_mqtt_dotdot_level_off_transition_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE) {
           uic_mqtt_dotdot_level_default_move_rate_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL) {
           uic_mqtt_dotdot_level_start_up_current_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -4190,7 +4190,7 @@ static void alarms_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT) {
           uic_mqtt_dotdot_alarms_alarm_count_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -4283,7 +4283,7 @@ static void alarms_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT) {
           uic_mqtt_dotdot_alarms_alarm_count_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -4405,7 +4405,7 @@ static void time_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_TIME_TIME) {
           uic_mqtt_dotdot_time_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -4426,14 +4426,14 @@ static void time_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_DST_START) {
           uic_mqtt_dotdot_time_dst_start_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_DST_END) {
           uic_mqtt_dotdot_time_dst_end_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -4447,28 +4447,28 @@ static void time_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME) {
           uic_mqtt_dotdot_time_standard_time_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME) {
           uic_mqtt_dotdot_time_local_time_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME) {
           uic_mqtt_dotdot_time_last_set_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME) {
           uic_mqtt_dotdot_time_valid_until_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -4633,7 +4633,7 @@ static void time_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_TIME_TIME) {
           uic_mqtt_dotdot_time_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.reported<uint8_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -4654,14 +4654,14 @@ static void time_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_DST_START) {
           uic_mqtt_dotdot_time_dst_start_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_DST_END) {
           uic_mqtt_dotdot_time_dst_end_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -4675,28 +4675,28 @@ static void time_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME) {
           uic_mqtt_dotdot_time_standard_time_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME) {
           uic_mqtt_dotdot_time_local_time_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME) {
           uic_mqtt_dotdot_time_last_set_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.reported<uint8_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME) {
           uic_mqtt_dotdot_time_valid_until_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.reported<uint8_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -4818,49 +4818,49 @@ static void poll_control_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL) {
           uic_mqtt_dotdot_poll_control_check_in_interval_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL) {
           uic_mqtt_dotdot_poll_control_long_poll_interval_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL) {
           uic_mqtt_dotdot_poll_control_short_poll_interval_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT) {
           uic_mqtt_dotdot_poll_control_fast_poll_timeout_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN) {
           uic_mqtt_dotdot_poll_control_check_in_interval_min_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN) {
           uic_mqtt_dotdot_poll_control_long_poll_interval_min_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX) {
           uic_mqtt_dotdot_poll_control_fast_poll_timeout_max_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -5001,49 +5001,49 @@ static void poll_control_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL) {
           uic_mqtt_dotdot_poll_control_check_in_interval_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL) {
           uic_mqtt_dotdot_poll_control_long_poll_interval_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL) {
           uic_mqtt_dotdot_poll_control_short_poll_interval_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT) {
           uic_mqtt_dotdot_poll_control_fast_poll_timeout_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN) {
           uic_mqtt_dotdot_poll_control_check_in_interval_min_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN) {
           uic_mqtt_dotdot_poll_control_long_poll_interval_min_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX) {
           uic_mqtt_dotdot_poll_control_fast_poll_timeout_max_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -5165,14 +5165,14 @@ static void shade_configuration_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT) {
           uic_mqtt_dotdot_shade_configuration_physical_closed_limit_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE) {
           uic_mqtt_dotdot_shade_configuration_motor_step_size_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -5186,7 +5186,7 @@ static void shade_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT) {
           uic_mqtt_dotdot_shade_configuration_closed_limit_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -5318,14 +5318,14 @@ static void shade_configuration_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT) {
           uic_mqtt_dotdot_shade_configuration_physical_closed_limit_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE) {
           uic_mqtt_dotdot_shade_configuration_motor_step_size_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -5339,7 +5339,7 @@ static void shade_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT) {
           uic_mqtt_dotdot_shade_configuration_closed_limit_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -5496,98 +5496,98 @@ static void door_lock_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS) {
           uic_mqtt_dotdot_door_lock_door_open_events_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS) {
           uic_mqtt_dotdot_door_lock_door_closed_events_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD) {
           uic_mqtt_dotdot_door_lock_open_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_log_records_supported_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_total_users_supported_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_pin_users_supported_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_rfid_users_supported_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER) {
           uic_mqtt_dotdot_door_lock_number_of_week_day_schedules_supported_per_user_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER) {
           uic_mqtt_dotdot_door_lock_number_of_year_day_schedules_supported_per_user_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_holiday_schedules_supported_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH) {
           uic_mqtt_dotdot_door_lock_max_pin_code_length_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH) {
           uic_mqtt_dotdot_door_lock_min_pin_code_length_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH) {
           uic_mqtt_dotdot_door_lock_max_rfid_code_length_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH) {
           uic_mqtt_dotdot_door_lock_min_rfid_code_length_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -5601,7 +5601,7 @@ static void door_lock_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER) {
           uic_mqtt_dotdot_door_lock_number_of_credentials_supported_per_user_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -5623,21 +5623,21 @@ static void door_lock_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS) {
           uic_mqtt_dotdot_door_lock_led_settings_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME) {
           uic_mqtt_dotdot_door_lock_auto_relock_time_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME) {
           uic_mqtt_dotdot_door_lock_sound_volume_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -5700,14 +5700,14 @@ static void door_lock_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT) {
           uic_mqtt_dotdot_door_lock_wrong_code_entry_limit_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME) {
           uic_mqtt_dotdot_door_lock_user_code_temporary_disable_time_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -5735,7 +5735,7 @@ static void door_lock_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT) {
           uic_mqtt_dotdot_door_lock_expiring_user_timeout_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -6295,98 +6295,98 @@ static void door_lock_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS) {
           uic_mqtt_dotdot_door_lock_door_open_events_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS) {
           uic_mqtt_dotdot_door_lock_door_closed_events_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD) {
           uic_mqtt_dotdot_door_lock_open_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_log_records_supported_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_total_users_supported_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_pin_users_supported_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_rfid_users_supported_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER) {
           uic_mqtt_dotdot_door_lock_number_of_week_day_schedules_supported_per_user_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER) {
           uic_mqtt_dotdot_door_lock_number_of_year_day_schedules_supported_per_user_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED) {
           uic_mqtt_dotdot_door_lock_number_of_holiday_schedules_supported_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH) {
           uic_mqtt_dotdot_door_lock_max_pin_code_length_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH) {
           uic_mqtt_dotdot_door_lock_min_pin_code_length_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH) {
           uic_mqtt_dotdot_door_lock_max_rfid_code_length_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH) {
           uic_mqtt_dotdot_door_lock_min_rfid_code_length_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -6400,7 +6400,7 @@ static void door_lock_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER) {
           uic_mqtt_dotdot_door_lock_number_of_credentials_supported_per_user_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -6422,21 +6422,21 @@ static void door_lock_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS) {
           uic_mqtt_dotdot_door_lock_led_settings_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME) {
           uic_mqtt_dotdot_door_lock_auto_relock_time_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME) {
           uic_mqtt_dotdot_door_lock_sound_volume_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -6499,14 +6499,14 @@ static void door_lock_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT) {
           uic_mqtt_dotdot_door_lock_wrong_code_entry_limit_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME) {
           uic_mqtt_dotdot_door_lock_user_code_temporary_disable_time_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -6534,7 +6534,7 @@ static void door_lock_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT) {
           uic_mqtt_dotdot_door_lock_expiring_user_timeout_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -6726,42 +6726,42 @@ static void window_covering_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT) {
           uic_mqtt_dotdot_window_covering_physical_closed_limit_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT) {
           uic_mqtt_dotdot_window_covering_physical_closed_limit_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT) {
           uic_mqtt_dotdot_window_covering_current_position_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT) {
           uic_mqtt_dotdot_window_covering_current_position_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT) {
           uic_mqtt_dotdot_window_covering_number_of_actuations_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT) {
           uic_mqtt_dotdot_window_covering_number_of_actuations_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -6775,63 +6775,63 @@ static void window_covering_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE) {
           uic_mqtt_dotdot_window_covering_current_position_lift_percentage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE) {
           uic_mqtt_dotdot_window_covering_current_position_tilt_percentage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT) {
           uic_mqtt_dotdot_window_covering_installed_open_limit_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT) {
           uic_mqtt_dotdot_window_covering_installed_closed_limit_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT) {
           uic_mqtt_dotdot_window_covering_installed_open_limit_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT) {
           uic_mqtt_dotdot_window_covering_installed_closed_limit_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT) {
           uic_mqtt_dotdot_window_covering_velocity_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT) {
           uic_mqtt_dotdot_window_covering_acceleration_time_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT) {
           uic_mqtt_dotdot_window_covering_deceleration_time_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -6846,7 +6846,7 @@ static void window_covering_cluster_publish_desired_value_callback(
           std::vector<char> str_desired = attr.desired_or_reported<std::vector<char>>();
           uic_mqtt_dotdot_window_covering_intermediate_setpoints_lift_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(str_desired.data()),
+            static_cast<const char*>(str_desired.data()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -6854,7 +6854,7 @@ static void window_covering_cluster_publish_desired_value_callback(
           std::vector<char> str_desired = attr.desired_or_reported<std::vector<char>>();
           uic_mqtt_dotdot_window_covering_intermediate_setpoints_tilt_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(str_desired.data()),
+            static_cast<const char*>(str_desired.data()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -7106,42 +7106,42 @@ static void window_covering_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT) {
           uic_mqtt_dotdot_window_covering_physical_closed_limit_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT) {
           uic_mqtt_dotdot_window_covering_physical_closed_limit_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT) {
           uic_mqtt_dotdot_window_covering_current_position_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT) {
           uic_mqtt_dotdot_window_covering_current_position_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT) {
           uic_mqtt_dotdot_window_covering_number_of_actuations_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT) {
           uic_mqtt_dotdot_window_covering_number_of_actuations_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -7155,63 +7155,63 @@ static void window_covering_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE) {
           uic_mqtt_dotdot_window_covering_current_position_lift_percentage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE) {
           uic_mqtt_dotdot_window_covering_current_position_tilt_percentage_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT) {
           uic_mqtt_dotdot_window_covering_installed_open_limit_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT) {
           uic_mqtt_dotdot_window_covering_installed_closed_limit_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT) {
           uic_mqtt_dotdot_window_covering_installed_open_limit_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT) {
           uic_mqtt_dotdot_window_covering_installed_closed_limit_tilt_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT) {
           uic_mqtt_dotdot_window_covering_velocity_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT) {
           uic_mqtt_dotdot_window_covering_acceleration_time_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT) {
           uic_mqtt_dotdot_window_covering_deceleration_time_lift_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -7226,7 +7226,7 @@ static void window_covering_cluster_publish_reported_value_callback(
           std::vector<char> str_desired = attr.reported<std::vector<char>>();
           uic_mqtt_dotdot_window_covering_intermediate_setpoints_lift_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>( str_desired.data() ),
+            static_cast<const char*>( str_desired.data() ),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -7234,7 +7234,7 @@ static void window_covering_cluster_publish_reported_value_callback(
           std::vector<char> str_desired = attr.reported<std::vector<char>>();
           uic_mqtt_dotdot_window_covering_intermediate_setpoints_tilt_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>( str_desired.data() ),
+            static_cast<const char*>( str_desired.data() ),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -7377,49 +7377,49 @@ static void barrier_control_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS) {
           uic_mqtt_dotdot_barrier_control_open_events_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS) {
           uic_mqtt_dotdot_barrier_control_close_events_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS) {
           uic_mqtt_dotdot_barrier_control_command_open_events_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS) {
           uic_mqtt_dotdot_barrier_control_command_close_events_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD) {
           uic_mqtt_dotdot_barrier_control_open_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD) {
           uic_mqtt_dotdot_barrier_control_close_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION) {
           uic_mqtt_dotdot_barrier_control_barrier_position_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -7605,49 +7605,49 @@ static void barrier_control_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS) {
           uic_mqtt_dotdot_barrier_control_open_events_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS) {
           uic_mqtt_dotdot_barrier_control_close_events_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS) {
           uic_mqtt_dotdot_barrier_control_command_open_events_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS) {
           uic_mqtt_dotdot_barrier_control_command_close_events_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD) {
           uic_mqtt_dotdot_barrier_control_open_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD) {
           uic_mqtt_dotdot_barrier_control_close_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION) {
           uic_mqtt_dotdot_barrier_control_barrier_position_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -7776,14 +7776,14 @@ static void pump_configuration_and_control_cluster_publish_desired_value_callbac
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED) {
           uic_mqtt_dotdot_pump_configuration_and_control_max_speed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW) {
           uic_mqtt_dotdot_pump_configuration_and_control_max_flow_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -7818,28 +7818,28 @@ static void pump_configuration_and_control_cluster_publish_desired_value_callbac
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED) {
           uic_mqtt_dotdot_pump_configuration_and_control_min_const_speed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED) {
           uic_mqtt_dotdot_pump_configuration_and_control_max_const_speed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW) {
           uic_mqtt_dotdot_pump_configuration_and_control_min_const_flow_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW) {
           uic_mqtt_dotdot_pump_configuration_and_control_max_const_flow_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -7888,28 +7888,28 @@ static void pump_configuration_and_control_cluster_publish_desired_value_callbac
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED) {
           uic_mqtt_dotdot_pump_configuration_and_control_speed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS) {
           uic_mqtt_dotdot_pump_configuration_and_control_lifetime_running_hours_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER) {
           uic_mqtt_dotdot_pump_configuration_and_control_power_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED) {
           uic_mqtt_dotdot_pump_configuration_and_control_lifetime_energy_consumed_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -8214,14 +8214,14 @@ static void pump_configuration_and_control_cluster_publish_reported_value_callba
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED) {
           uic_mqtt_dotdot_pump_configuration_and_control_max_speed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW) {
           uic_mqtt_dotdot_pump_configuration_and_control_max_flow_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -8256,28 +8256,28 @@ static void pump_configuration_and_control_cluster_publish_reported_value_callba
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED) {
           uic_mqtt_dotdot_pump_configuration_and_control_min_const_speed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED) {
           uic_mqtt_dotdot_pump_configuration_and_control_max_const_speed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW) {
           uic_mqtt_dotdot_pump_configuration_and_control_min_const_flow_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW) {
           uic_mqtt_dotdot_pump_configuration_and_control_max_const_flow_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -8326,28 +8326,28 @@ static void pump_configuration_and_control_cluster_publish_reported_value_callba
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED) {
           uic_mqtt_dotdot_pump_configuration_and_control_speed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS) {
           uic_mqtt_dotdot_pump_configuration_and_control_lifetime_running_hours_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER) {
           uic_mqtt_dotdot_pump_configuration_and_control_power_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED) {
           uic_mqtt_dotdot_pump_configuration_and_control_lifetime_energy_consumed_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -8539,14 +8539,14 @@ static void thermostat_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND) {
           uic_mqtt_dotdot_thermostat_pi_cooling_demand_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND) {
           uic_mqtt_dotdot_thermostat_pi_heating_demand_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -8672,14 +8672,14 @@ static void thermostat_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS) {
           uic_mqtt_dotdot_thermostat_number_of_weekly_transitions_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS) {
           uic_mqtt_dotdot_thermostat_number_of_daily_transitions_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -8693,7 +8693,7 @@ static void thermostat_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION) {
           uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_duration_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -8728,56 +8728,56 @@ static void thermostat_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP) {
           uic_mqtt_dotdot_thermostat_setpoint_change_source_timestamp_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK) {
           uic_mqtt_dotdot_thermostat_occupied_setback_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN) {
           uic_mqtt_dotdot_thermostat_occupied_setback_min_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX) {
           uic_mqtt_dotdot_thermostat_occupied_setback_max_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK) {
           uic_mqtt_dotdot_thermostat_unoccupied_setback_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN) {
           uic_mqtt_dotdot_thermostat_unoccupied_setback_min_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX) {
           uic_mqtt_dotdot_thermostat_unoccupied_setback_max_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA) {
           uic_mqtt_dotdot_thermostat_emergency_heat_delta_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -8791,7 +8791,7 @@ static void thermostat_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY) {
           uic_mqtt_dotdot_thermostat_ac_capacity_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -9367,14 +9367,14 @@ static void thermostat_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND) {
           uic_mqtt_dotdot_thermostat_pi_cooling_demand_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND) {
           uic_mqtt_dotdot_thermostat_pi_heating_demand_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -9500,14 +9500,14 @@ static void thermostat_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS) {
           uic_mqtt_dotdot_thermostat_number_of_weekly_transitions_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS) {
           uic_mqtt_dotdot_thermostat_number_of_daily_transitions_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -9521,7 +9521,7 @@ static void thermostat_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION) {
           uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_duration_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -9556,56 +9556,56 @@ static void thermostat_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP) {
           uic_mqtt_dotdot_thermostat_setpoint_change_source_timestamp_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.reported<uint8_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK) {
           uic_mqtt_dotdot_thermostat_occupied_setback_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN) {
           uic_mqtt_dotdot_thermostat_occupied_setback_min_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX) {
           uic_mqtt_dotdot_thermostat_occupied_setback_max_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK) {
           uic_mqtt_dotdot_thermostat_unoccupied_setback_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN) {
           uic_mqtt_dotdot_thermostat_unoccupied_setback_min_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX) {
           uic_mqtt_dotdot_thermostat_unoccupied_setback_max_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA) {
           uic_mqtt_dotdot_thermostat_emergency_heat_delta_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -9619,7 +9619,7 @@ static void thermostat_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY) {
           uic_mqtt_dotdot_thermostat_ac_capacity_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -10020,21 +10020,21 @@ static void dehumidification_control_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY) {
           uic_mqtt_dotdot_dehumidification_control_relative_humidity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING) {
           uic_mqtt_dotdot_dehumidification_control_dehumidification_cooling_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT) {
           uic_mqtt_dotdot_dehumidification_control_rh_dehumidification_setpoint_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -10055,14 +10055,14 @@ static void dehumidification_control_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS) {
           uic_mqtt_dotdot_dehumidification_control_dehumidification_hysteresis_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL) {
           uic_mqtt_dotdot_dehumidification_control_dehumidification_max_cool_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -10218,21 +10218,21 @@ static void dehumidification_control_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY) {
           uic_mqtt_dotdot_dehumidification_control_relative_humidity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING) {
           uic_mqtt_dotdot_dehumidification_control_dehumidification_cooling_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT) {
           uic_mqtt_dotdot_dehumidification_control_rh_dehumidification_setpoint_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -10253,14 +10253,14 @@ static void dehumidification_control_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS) {
           uic_mqtt_dotdot_dehumidification_control_dehumidification_hysteresis_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL) {
           uic_mqtt_dotdot_dehumidification_control_dehumidification_max_cool_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -10648,35 +10648,35 @@ static void color_control_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE) {
           uic_mqtt_dotdot_color_control_current_hue_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION) {
           uic_mqtt_dotdot_color_control_current_saturation_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME) {
           uic_mqtt_dotdot_color_control_remaining_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX) {
           uic_mqtt_dotdot_color_control_currentx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY) {
           uic_mqtt_dotdot_color_control_currenty_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -10698,7 +10698,7 @@ static void color_control_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS) {
           uic_mqtt_dotdot_color_control_color_temperature_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -10719,217 +10719,217 @@ static void color_control_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES) {
           uic_mqtt_dotdot_color_control_number_of_primaries_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X) {
           uic_mqtt_dotdot_color_control_primary1x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y) {
           uic_mqtt_dotdot_color_control_primary1y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary1_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X) {
           uic_mqtt_dotdot_color_control_primary2x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y) {
           uic_mqtt_dotdot_color_control_primary2y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary2_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X) {
           uic_mqtt_dotdot_color_control_primary3x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y) {
           uic_mqtt_dotdot_color_control_primary3y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary3_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X) {
           uic_mqtt_dotdot_color_control_primary4x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y) {
           uic_mqtt_dotdot_color_control_primary4y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary4_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X) {
           uic_mqtt_dotdot_color_control_primary5x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y) {
           uic_mqtt_dotdot_color_control_primary5y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary5_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X) {
           uic_mqtt_dotdot_color_control_primary6x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y) {
           uic_mqtt_dotdot_color_control_primary6y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary6_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX) {
           uic_mqtt_dotdot_color_control_white_pointx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY) {
           uic_mqtt_dotdot_color_control_white_pointy_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX) {
           uic_mqtt_dotdot_color_control_color_pointrx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY) {
           uic_mqtt_dotdot_color_control_color_pointry_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY) {
           uic_mqtt_dotdot_color_control_color_pointr_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX) {
           uic_mqtt_dotdot_color_control_color_pointgx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY) {
           uic_mqtt_dotdot_color_control_color_pointgy_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY) {
           uic_mqtt_dotdot_color_control_color_pointg_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX) {
           uic_mqtt_dotdot_color_control_color_pointbx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY) {
           uic_mqtt_dotdot_color_control_color_pointby_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY) {
           uic_mqtt_dotdot_color_control_color_pointb_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE) {
           uic_mqtt_dotdot_color_control_enhanced_current_hue_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -10943,35 +10943,35 @@ static void color_control_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE) {
           uic_mqtt_dotdot_color_control_color_loop_active_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION) {
           uic_mqtt_dotdot_color_control_color_loop_direction_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME) {
           uic_mqtt_dotdot_color_control_color_loop_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE) {
           uic_mqtt_dotdot_color_control_color_loop_start_enhanced_hue_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE) {
           uic_mqtt_dotdot_color_control_color_loop_stored_enhanced_hue_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -10985,28 +10985,28 @@ static void color_control_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS) {
           uic_mqtt_dotdot_color_control_color_temp_physical_min_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS) {
           uic_mqtt_dotdot_color_control_color_temp_physical_max_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS) {
           uic_mqtt_dotdot_color_control_couple_color_temp_to_level_min_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS) {
           uic_mqtt_dotdot_color_control_start_up_color_temperature_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -11507,35 +11507,35 @@ static void color_control_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE) {
           uic_mqtt_dotdot_color_control_current_hue_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION) {
           uic_mqtt_dotdot_color_control_current_saturation_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME) {
           uic_mqtt_dotdot_color_control_remaining_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX) {
           uic_mqtt_dotdot_color_control_currentx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY) {
           uic_mqtt_dotdot_color_control_currenty_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -11557,7 +11557,7 @@ static void color_control_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS) {
           uic_mqtt_dotdot_color_control_color_temperature_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -11578,217 +11578,217 @@ static void color_control_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES) {
           uic_mqtt_dotdot_color_control_number_of_primaries_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X) {
           uic_mqtt_dotdot_color_control_primary1x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y) {
           uic_mqtt_dotdot_color_control_primary1y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary1_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X) {
           uic_mqtt_dotdot_color_control_primary2x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y) {
           uic_mqtt_dotdot_color_control_primary2y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary2_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X) {
           uic_mqtt_dotdot_color_control_primary3x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y) {
           uic_mqtt_dotdot_color_control_primary3y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary3_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X) {
           uic_mqtt_dotdot_color_control_primary4x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y) {
           uic_mqtt_dotdot_color_control_primary4y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary4_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X) {
           uic_mqtt_dotdot_color_control_primary5x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y) {
           uic_mqtt_dotdot_color_control_primary5y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary5_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X) {
           uic_mqtt_dotdot_color_control_primary6x_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y) {
           uic_mqtt_dotdot_color_control_primary6y_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY) {
           uic_mqtt_dotdot_color_control_primary6_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX) {
           uic_mqtt_dotdot_color_control_white_pointx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY) {
           uic_mqtt_dotdot_color_control_white_pointy_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX) {
           uic_mqtt_dotdot_color_control_color_pointrx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY) {
           uic_mqtt_dotdot_color_control_color_pointry_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY) {
           uic_mqtt_dotdot_color_control_color_pointr_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX) {
           uic_mqtt_dotdot_color_control_color_pointgx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY) {
           uic_mqtt_dotdot_color_control_color_pointgy_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY) {
           uic_mqtt_dotdot_color_control_color_pointg_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX) {
           uic_mqtt_dotdot_color_control_color_pointbx_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY) {
           uic_mqtt_dotdot_color_control_color_pointby_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY) {
           uic_mqtt_dotdot_color_control_color_pointb_intensity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE) {
           uic_mqtt_dotdot_color_control_enhanced_current_hue_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -11802,35 +11802,35 @@ static void color_control_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE) {
           uic_mqtt_dotdot_color_control_color_loop_active_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION) {
           uic_mqtt_dotdot_color_control_color_loop_direction_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME) {
           uic_mqtt_dotdot_color_control_color_loop_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE) {
           uic_mqtt_dotdot_color_control_color_loop_start_enhanced_hue_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE) {
           uic_mqtt_dotdot_color_control_color_loop_stored_enhanced_hue_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -11844,28 +11844,28 @@ static void color_control_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS) {
           uic_mqtt_dotdot_color_control_color_temp_physical_min_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS) {
           uic_mqtt_dotdot_color_control_color_temp_physical_max_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS) {
           uic_mqtt_dotdot_color_control_couple_color_temp_to_level_min_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS) {
           uic_mqtt_dotdot_color_control_start_up_color_temperature_mireds_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -11987,14 +11987,14 @@ static void ballast_configuration_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_physical_min_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_physical_max_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -12008,49 +12008,49 @@ static void ballast_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_min_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_max_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_power_on_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME) {
           uic_mqtt_dotdot_ballast_configuration_power_on_fade_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR) {
           uic_mqtt_dotdot_ballast_configuration_intrinsic_ballast_factor_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT) {
           uic_mqtt_dotdot_ballast_configuration_ballast_factor_adjustment_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY) {
           uic_mqtt_dotdot_ballast_configuration_lamp_quantity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -12073,14 +12073,14 @@ static void ballast_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS) {
           uic_mqtt_dotdot_ballast_configuration_lamp_rated_hours_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS) {
           uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -12094,7 +12094,7 @@ static void ballast_configuration_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT) {
           uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_trip_point_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -12307,14 +12307,14 @@ static void ballast_configuration_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_physical_min_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_physical_max_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -12328,49 +12328,49 @@ static void ballast_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_min_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_max_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL) {
           uic_mqtt_dotdot_ballast_configuration_power_on_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME) {
           uic_mqtt_dotdot_ballast_configuration_power_on_fade_time_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR) {
           uic_mqtt_dotdot_ballast_configuration_intrinsic_ballast_factor_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT) {
           uic_mqtt_dotdot_ballast_configuration_ballast_factor_adjustment_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY) {
           uic_mqtt_dotdot_ballast_configuration_lamp_quantity_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -12393,14 +12393,14 @@ static void ballast_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS) {
           uic_mqtt_dotdot_ballast_configuration_lamp_rated_hours_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS) {
           uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -12414,7 +12414,7 @@ static void ballast_configuration_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT) {
           uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_trip_point_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -12536,28 +12536,28 @@ static void illuminance_measurement_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_illuminance_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_illuminance_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_illuminance_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_illuminance_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -12689,28 +12689,28 @@ static void illuminance_measurement_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_illuminance_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_illuminance_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_illuminance_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_illuminance_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -12853,7 +12853,7 @@ static void illuminance_level_sensing_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL) {
           uic_mqtt_dotdot_illuminance_level_sensing_illuminance_target_level_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -12976,7 +12976,7 @@ static void illuminance_level_sensing_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL) {
           uic_mqtt_dotdot_illuminance_level_sensing_illuminance_target_level_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -13119,7 +13119,7 @@ static void temperature_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_temperature_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -13257,7 +13257,7 @@ static void temperature_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_temperature_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -13400,7 +13400,7 @@ static void pressure_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_pressure_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -13428,7 +13428,7 @@ static void pressure_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE) {
           uic_mqtt_dotdot_pressure_measurement_scaled_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -13613,7 +13613,7 @@ static void pressure_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_pressure_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -13641,7 +13641,7 @@ static void pressure_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE) {
           uic_mqtt_dotdot_pressure_measurement_scaled_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -13770,28 +13770,28 @@ static void flow_measurement_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_flow_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_flow_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_flow_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_flow_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -13908,28 +13908,28 @@ static void flow_measurement_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_flow_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_flow_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_flow_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_flow_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -14051,28 +14051,28 @@ static void relativity_humidity_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE) {
           uic_mqtt_dotdot_relativity_humidity_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_relativity_humidity_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_relativity_humidity_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE) {
           uic_mqtt_dotdot_relativity_humidity_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -14189,28 +14189,28 @@ static void relativity_humidity_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE) {
           uic_mqtt_dotdot_relativity_humidity_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_relativity_humidity_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_relativity_humidity_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE) {
           uic_mqtt_dotdot_relativity_humidity_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -14353,63 +14353,63 @@ static void occupancy_sensing_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD) {
           uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD) {
           uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD) {
           uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -14611,63 +14611,63 @@ static void occupancy_sensing_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD) {
           uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD) {
           uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY) {
           uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD) {
           uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -14789,28 +14789,28 @@ static void soil_moisture_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE) {
           uic_mqtt_dotdot_soil_moisture_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_soil_moisture_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_soil_moisture_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE) {
           uic_mqtt_dotdot_soil_moisture_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -14927,28 +14927,28 @@ static void soil_moisture_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE) {
           uic_mqtt_dotdot_soil_moisture_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_soil_moisture_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_soil_moisture_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE) {
           uic_mqtt_dotdot_soil_moisture_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -15070,28 +15070,28 @@ static void ph_measurement_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_ph_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_ph_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_ph_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_ph_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -15208,28 +15208,28 @@ static void ph_measurement_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_ph_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_ph_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_ph_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_ph_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -15351,28 +15351,28 @@ static void electrical_conductivity_measurement_cluster_publish_desired_value_ca
       if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_electrical_conductivity_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_electrical_conductivity_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_electrical_conductivity_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_electrical_conductivity_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -15489,28 +15489,28 @@ static void electrical_conductivity_measurement_cluster_publish_reported_value_c
       if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_electrical_conductivity_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_electrical_conductivity_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_electrical_conductivity_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_electrical_conductivity_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -15632,28 +15632,28 @@ static void wind_speed_measurement_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_wind_speed_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_wind_speed_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_wind_speed_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_wind_speed_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -15770,28 +15770,28 @@ static void wind_speed_measurement_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE) {
           uic_mqtt_dotdot_wind_speed_measurement_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE) {
           uic_mqtt_dotdot_wind_speed_measurement_min_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE) {
           uic_mqtt_dotdot_wind_speed_measurement_max_measured_value_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE) {
           uic_mqtt_dotdot_wind_speed_measurement_tolerance_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -16784,21 +16784,21 @@ static void ias_zone_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID) {
           uic_mqtt_dotdot_ias_zone_zoneid_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED) {
           uic_mqtt_dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL) {
           uic_mqtt_dotdot_ias_zone_current_zone_sensitivity_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -16967,21 +16967,21 @@ static void ias_zone_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID) {
           uic_mqtt_dotdot_ias_zone_zoneid_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED) {
           uic_mqtt_dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL) {
           uic_mqtt_dotdot_ias_zone_current_zone_sensitivity_level_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -17103,7 +17103,7 @@ static void iaswd_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION) {
           uic_mqtt_dotdot_iaswd_max_duration_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -17196,7 +17196,7 @@ static void iaswd_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION) {
           uic_mqtt_dotdot_iaswd_max_duration_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -17318,21 +17318,21 @@ static void metering_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED) {
           uic_mqtt_dotdot_metering_current_summation_delivered_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED) {
           uic_mqtt_dotdot_metering_current_summation_received_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED) {
           uic_mqtt_dotdot_metering_current_max_demand_delivered_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -17353,28 +17353,28 @@ static void metering_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME) {
           uic_mqtt_dotdot_metering_reading_snap_shot_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME) {
           uic_mqtt_dotdot_metering_current_max_demand_delivered_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME) {
           uic_mqtt_dotdot_metering_current_max_demand_received_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD) {
           uic_mqtt_dotdot_metering_default_update_period_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -17388,14 +17388,14 @@ static void metering_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION) {
           uic_mqtt_dotdot_metering_current_inlet_energy_carrier_summation_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION) {
           uic_mqtt_dotdot_metering_current_outlet_energy_carrier_summation_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -17423,14 +17423,14 @@ static void metering_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER) {
           uic_mqtt_dotdot_metering_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR) {
           uic_mqtt_dotdot_metering_divisor_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -17786,21 +17786,21 @@ static void metering_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED) {
           uic_mqtt_dotdot_metering_current_summation_delivered_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED) {
           uic_mqtt_dotdot_metering_current_summation_received_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED) {
           uic_mqtt_dotdot_metering_current_max_demand_delivered_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -17821,28 +17821,28 @@ static void metering_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME) {
           uic_mqtt_dotdot_metering_reading_snap_shot_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.reported<uint8_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME) {
           uic_mqtt_dotdot_metering_current_max_demand_delivered_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.reported<uint8_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME) {
           uic_mqtt_dotdot_metering_current_max_demand_received_time_publish(
             base_topic.c_str(),
-            static_cast<uint8_t>(attr.reported<uint8_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD) {
           uic_mqtt_dotdot_metering_default_update_period_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -17856,14 +17856,14 @@ static void metering_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION) {
           uic_mqtt_dotdot_metering_current_inlet_energy_carrier_summation_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION) {
           uic_mqtt_dotdot_metering_current_outlet_energy_carrier_summation_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -17891,14 +17891,14 @@ static void metering_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER) {
           uic_mqtt_dotdot_metering_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR) {
           uic_mqtt_dotdot_metering_divisor_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -18153,70 +18153,70 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_dc_voltage_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_dc_voltage_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_dc_current_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_dc_current_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_dc_power_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_dc_power_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_min_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_max_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT) {
           uic_mqtt_dotdot_electrical_measurement_neutral_current_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18237,7 +18237,7 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER) {
           uic_mqtt_dotdot_electrical_measurement_total_apparent_power_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18328,28 +18328,28 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_power_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_power_divisor_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18370,7 +18370,7 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT) {
           uic_mqtt_dotdot_electrical_measurement_line_current_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18391,42 +18391,42 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_min_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_max_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18461,7 +18461,7 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER) {
           uic_mqtt_dotdot_electrical_measurement_apparent_power_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18475,91 +18475,91 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_ac_voltage_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_ac_voltage_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_ac_current_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_ac_current_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_ac_power_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_ac_power_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18664,7 +18664,7 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB) {
           uic_mqtt_dotdot_electrical_measurement_line_current_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18685,42 +18685,42 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_min_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_max_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18755,7 +18755,7 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB) {
           uic_mqtt_dotdot_electrical_measurement_apparent_power_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18769,56 +18769,56 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC) {
           uic_mqtt_dotdot_electrical_measurement_line_current_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18839,42 +18839,42 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_min_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_max_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18909,7 +18909,7 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC) {
           uic_mqtt_dotdot_electrical_measurement_apparent_power_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -18923,49 +18923,49 @@ static void electrical_measurement_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -20136,70 +20136,70 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_dc_voltage_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_dc_voltage_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_dc_current_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_dc_current_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_dc_power_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_dc_power_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_min_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_max_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT) {
           uic_mqtt_dotdot_electrical_measurement_neutral_current_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20220,7 +20220,7 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER) {
           uic_mqtt_dotdot_electrical_measurement_total_apparent_power_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20311,28 +20311,28 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_ac_frequency_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_power_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_power_divisor_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20353,7 +20353,7 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT) {
           uic_mqtt_dotdot_electrical_measurement_line_current_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20374,42 +20374,42 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_min_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_max_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20444,7 +20444,7 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER) {
           uic_mqtt_dotdot_electrical_measurement_apparent_power_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20458,91 +20458,91 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_ac_voltage_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_ac_voltage_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_ac_current_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_ac_current_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER) {
           uic_mqtt_dotdot_electrical_measurement_ac_power_multiplier_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR) {
           uic_mqtt_dotdot_electrical_measurement_ac_power_divisor_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20647,7 +20647,7 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB) {
           uic_mqtt_dotdot_electrical_measurement_line_current_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20668,42 +20668,42 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_min_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_max_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20738,7 +20738,7 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB) {
           uic_mqtt_dotdot_electrical_measurement_apparent_power_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20752,56 +20752,56 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phb_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC) {
           uic_mqtt_dotdot_electrical_measurement_line_current_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20822,42 +20822,42 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_min_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_current_max_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20892,7 +20892,7 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC) {
           uic_mqtt_dotdot_electrical_measurement_apparent_power_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -20906,49 +20906,49 @@ static void electrical_measurement_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC) {
           uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC) {
           uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phc_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -21070,217 +21070,217 @@ static void diagnostics_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS) {
           uic_mqtt_dotdot_diagnostics_number_of_resets_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES) {
           uic_mqtt_dotdot_diagnostics_persistent_memory_writes_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST) {
           uic_mqtt_dotdot_diagnostics_mac_rx_bcast_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST) {
           uic_mqtt_dotdot_diagnostics_mac_tx_bcast_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST) {
           uic_mqtt_dotdot_diagnostics_mac_rx_ucast_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST) {
           uic_mqtt_dotdot_diagnostics_mac_tx_ucast_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY) {
           uic_mqtt_dotdot_diagnostics_mac_tx_ucast_retry_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL) {
           uic_mqtt_dotdot_diagnostics_mac_tx_ucast_fail_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST) {
           uic_mqtt_dotdot_diagnostics_aps_rx_bcast_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST) {
           uic_mqtt_dotdot_diagnostics_aps_tx_bcast_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST) {
           uic_mqtt_dotdot_diagnostics_aps_rx_ucast_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS) {
           uic_mqtt_dotdot_diagnostics_aps_tx_ucast_success_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY) {
           uic_mqtt_dotdot_diagnostics_aps_tx_ucast_retry_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL) {
           uic_mqtt_dotdot_diagnostics_aps_tx_ucast_fail_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED) {
           uic_mqtt_dotdot_diagnostics_route_disc_initiated_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED) {
           uic_mqtt_dotdot_diagnostics_neighbor_added_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED) {
           uic_mqtt_dotdot_diagnostics_neighbor_removed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE) {
           uic_mqtt_dotdot_diagnostics_neighbor_stale_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION) {
           uic_mqtt_dotdot_diagnostics_join_indication_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED) {
           uic_mqtt_dotdot_diagnostics_child_moved_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE) {
           uic_mqtt_dotdot_diagnostics_nwkfc_failure_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE) {
           uic_mqtt_dotdot_diagnostics_apsfc_failure_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY) {
           uic_mqtt_dotdot_diagnostics_aps_unauthorized_key_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES) {
           uic_mqtt_dotdot_diagnostics_nwk_decrypt_failures_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES) {
           uic_mqtt_dotdot_diagnostics_aps_decrypt_failures_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES) {
           uic_mqtt_dotdot_diagnostics_packet_buffer_allocate_failures_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST) {
           uic_mqtt_dotdot_diagnostics_relayed_ucast_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED) {
           uic_mqtt_dotdot_diagnostics_phy_to_mac_queue_limit_reached_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT) {
           uic_mqtt_dotdot_diagnostics_packet_validate_drop_count_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT) {
           uic_mqtt_dotdot_diagnostics_average_mac_retry_per_aps_message_sent_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI) {
           uic_mqtt_dotdot_diagnostics_last_messagelqi_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -21628,217 +21628,217 @@ static void diagnostics_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS) {
           uic_mqtt_dotdot_diagnostics_number_of_resets_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES) {
           uic_mqtt_dotdot_diagnostics_persistent_memory_writes_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST) {
           uic_mqtt_dotdot_diagnostics_mac_rx_bcast_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST) {
           uic_mqtt_dotdot_diagnostics_mac_tx_bcast_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST) {
           uic_mqtt_dotdot_diagnostics_mac_rx_ucast_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST) {
           uic_mqtt_dotdot_diagnostics_mac_tx_ucast_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY) {
           uic_mqtt_dotdot_diagnostics_mac_tx_ucast_retry_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL) {
           uic_mqtt_dotdot_diagnostics_mac_tx_ucast_fail_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST) {
           uic_mqtt_dotdot_diagnostics_aps_rx_bcast_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST) {
           uic_mqtt_dotdot_diagnostics_aps_tx_bcast_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST) {
           uic_mqtt_dotdot_diagnostics_aps_rx_ucast_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS) {
           uic_mqtt_dotdot_diagnostics_aps_tx_ucast_success_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY) {
           uic_mqtt_dotdot_diagnostics_aps_tx_ucast_retry_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL) {
           uic_mqtt_dotdot_diagnostics_aps_tx_ucast_fail_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED) {
           uic_mqtt_dotdot_diagnostics_route_disc_initiated_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED) {
           uic_mqtt_dotdot_diagnostics_neighbor_added_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED) {
           uic_mqtt_dotdot_diagnostics_neighbor_removed_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE) {
           uic_mqtt_dotdot_diagnostics_neighbor_stale_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION) {
           uic_mqtt_dotdot_diagnostics_join_indication_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED) {
           uic_mqtt_dotdot_diagnostics_child_moved_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE) {
           uic_mqtt_dotdot_diagnostics_nwkfc_failure_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE) {
           uic_mqtt_dotdot_diagnostics_apsfc_failure_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY) {
           uic_mqtt_dotdot_diagnostics_aps_unauthorized_key_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES) {
           uic_mqtt_dotdot_diagnostics_nwk_decrypt_failures_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES) {
           uic_mqtt_dotdot_diagnostics_aps_decrypt_failures_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES) {
           uic_mqtt_dotdot_diagnostics_packet_buffer_allocate_failures_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST) {
           uic_mqtt_dotdot_diagnostics_relayed_ucast_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED) {
           uic_mqtt_dotdot_diagnostics_phy_to_mac_queue_limit_reached_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT) {
           uic_mqtt_dotdot_diagnostics_packet_validate_drop_count_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT) {
           uic_mqtt_dotdot_diagnostics_average_mac_retry_per_aps_message_sent_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI) {
           uic_mqtt_dotdot_diagnostics_last_messagelqi_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -22202,7 +22202,7 @@ static void state_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY) {
           uic_mqtt_dotdot_state_maximum_command_delay_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -22342,7 +22342,7 @@ static void state_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY) {
           uic_mqtt_dotdot_state_maximum_command_delay_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -22701,7 +22701,7 @@ static void system_metrics_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS) {
           uic_mqtt_dotdot_system_metrics_reporting_interval_seconds_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -22800,7 +22800,7 @@ static void system_metrics_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES) {
           uic_mqtt_dotdot_system_metrics_uptime_minutes_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -22849,7 +22849,7 @@ static void system_metrics_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS) {
           uic_mqtt_dotdot_system_metrics_system_interrupts_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -23145,7 +23145,7 @@ static void system_metrics_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS) {
           uic_mqtt_dotdot_system_metrics_reporting_interval_seconds_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -23244,7 +23244,7 @@ static void system_metrics_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES) {
           uic_mqtt_dotdot_system_metrics_uptime_minutes_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -23293,7 +23293,7 @@ static void system_metrics_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS) {
           uic_mqtt_dotdot_system_metrics_system_interrupts_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -23432,14 +23432,14 @@ static void application_monitoring_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES) {
           uic_mqtt_dotdot_application_monitoring_uptime_minutes_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID) {
           uic_mqtt_dotdot_application_monitoring_process_id_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -23476,28 +23476,28 @@ static void application_monitoring_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS) {
           uic_mqtt_dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT) {
           uic_mqtt_dotdot_application_monitoring_mqtt_messages_sent_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED) {
           uic_mqtt_dotdot_application_monitoring_mqtt_messages_received_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT) {
           uic_mqtt_dotdot_application_monitoring_mqtt_subscription_count_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.desired_or_reported<int64_t>()),
+            static_cast<uint64_t>(attr.desired_or_reported<uint64_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -23525,7 +23525,7 @@ static void application_monitoring_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS) {
           uic_mqtt_dotdot_application_monitoring_application_statistics_reporting_interval_seconds_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.desired_or_reported<int32_t>()),
+            static_cast<uint32_t>(attr.desired_or_reported<uint32_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -23850,14 +23850,14 @@ static void application_monitoring_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES) {
           uic_mqtt_dotdot_application_monitoring_uptime_minutes_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID) {
           uic_mqtt_dotdot_application_monitoring_process_id_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -23894,28 +23894,28 @@ static void application_monitoring_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS) {
           uic_mqtt_dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT) {
           uic_mqtt_dotdot_application_monitoring_mqtt_messages_sent_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED) {
           uic_mqtt_dotdot_application_monitoring_mqtt_messages_received_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT) {
           uic_mqtt_dotdot_application_monitoring_mqtt_subscription_count_publish(
             base_topic.c_str(),
-            static_cast<int64_t>(attr.reported<int64_t>()),
+            static_cast<uint64_t>(attr.reported<uint64_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -23943,7 +23943,7 @@ static void application_monitoring_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS) {
           uic_mqtt_dotdot_application_monitoring_application_statistics_reporting_interval_seconds_publish(
             base_topic.c_str(),
-            static_cast<int32_t>(attr.reported<int32_t>()),
+            static_cast<uint32_t>(attr.reported<uint32_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -24544,7 +24544,7 @@ static void user_credential_cluster_publish_desired_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS) {
           uic_mqtt_dotdot_user_credential_supported_user_unique_identifiers_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.desired_or_reported<int16_t>()),
+            static_cast<uint16_t>(attr.desired_or_reported<uint16_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -24743,7 +24743,7 @@ static void user_credential_cluster_publish_reported_value_callback(
       if (type == DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS) {
           uic_mqtt_dotdot_user_credential_supported_user_unique_identifiers_publish(
             base_topic.c_str(),
-            static_cast<int16_t>(attr.reported<int16_t>()),
+            static_cast<uint16_t>(attr.reported<uint16_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -25889,7 +25889,7 @@ static void unify_humidity_control_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION) {
           uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_precision_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -25924,7 +25924,7 @@ static void unify_humidity_control_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION) {
           uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_precision_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -25959,7 +25959,7 @@ static void unify_humidity_control_cluster_publish_desired_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION) {
           uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_precision_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.desired_or_reported<int8_t>()),
+            static_cast<uint8_t>(attr.desired_or_reported<uint8_t>()),
             UCL_MQTT_PUBLISH_TYPE_DESIRED);
         return;
       }
@@ -26252,7 +26252,7 @@ static void unify_humidity_control_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION) {
           uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_precision_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -26287,7 +26287,7 @@ static void unify_humidity_control_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION) {
           uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_precision_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
@@ -26322,7 +26322,7 @@ static void unify_humidity_control_cluster_publish_reported_value_callback(
           if (type == DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION) {
           uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_precision_publish(
             base_topic.c_str(),
-            static_cast<int8_t>(attr.reported<int8_t>()),
+            static_cast<uint8_t>(attr.reported<uint8_t>()),
             (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
         return;
       }
diff --git a/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_helpers.cpp b/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_helpers.cpp
index 0b8fc63e13..ba326df8ab 100644
--- a/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_helpers.cpp
+++ b/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_helpers.cpp
@@ -40,7 +40,7 @@ bool dotdot_is_supported_basic_zcl_version(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_basic_zcl_version(
+uint8_t dotdot_get_basic_zcl_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -51,7 +51,7 @@ int8_t dotdot_get_basic_zcl_version(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -63,7 +63,7 @@ sl_status_t dotdot_set_basic_zcl_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_zcl_version
+  uint8_t new_zcl_version
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -76,7 +76,7 @@ sl_status_t dotdot_set_basic_zcl_version(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_zcl_version,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_basic_zcl_version_undefine_reported(
@@ -151,7 +151,7 @@ bool dotdot_is_supported_basic_application_version(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_basic_application_version(
+uint8_t dotdot_get_basic_application_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -162,7 +162,7 @@ int8_t dotdot_get_basic_application_version(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -174,7 +174,7 @@ sl_status_t dotdot_set_basic_application_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_application_version
+  uint8_t new_application_version
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -187,7 +187,7 @@ sl_status_t dotdot_set_basic_application_version(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_application_version,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_basic_application_version_undefine_reported(
@@ -262,7 +262,7 @@ bool dotdot_is_supported_basic_stack_version(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_basic_stack_version(
+uint8_t dotdot_get_basic_stack_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -273,7 +273,7 @@ int8_t dotdot_get_basic_stack_version(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -285,7 +285,7 @@ sl_status_t dotdot_set_basic_stack_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_stack_version
+  uint8_t new_stack_version
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -298,7 +298,7 @@ sl_status_t dotdot_set_basic_stack_version(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_stack_version,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_basic_stack_version_undefine_reported(
@@ -373,7 +373,7 @@ bool dotdot_is_supported_basic_hw_version(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_basic_hw_version(
+uint8_t dotdot_get_basic_hw_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -384,7 +384,7 @@ int8_t dotdot_get_basic_hw_version(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -396,7 +396,7 @@ sl_status_t dotdot_set_basic_hw_version(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_hw_version
+  uint8_t new_hw_version
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -409,7 +409,7 @@ sl_status_t dotdot_set_basic_hw_version(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_hw_version,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_basic_hw_version_undefine_reported(
@@ -1153,7 +1153,7 @@ bool dotdot_is_supported_basic_product_code(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_basic_product_code(
+const char* dotdot_get_basic_product_code(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -1176,7 +1176,7 @@ sl_status_t dotdot_set_basic_product_code(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_product_code
+  const char* new_product_code
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -2478,7 +2478,7 @@ bool dotdot_is_supported_power_configuration_mains_voltage(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_power_configuration_mains_voltage(
+uint16_t dotdot_get_power_configuration_mains_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -2489,7 +2489,7 @@ int16_t dotdot_get_power_configuration_mains_voltage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -2501,7 +2501,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mains_voltage
+  uint16_t new_mains_voltage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -2514,7 +2514,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mains_voltage,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_power_configuration_mains_voltage_undefine_reported(
@@ -2589,7 +2589,7 @@ bool dotdot_is_supported_power_configuration_mains_frequency(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_mains_frequency(
+uint8_t dotdot_get_power_configuration_mains_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -2600,7 +2600,7 @@ int8_t dotdot_get_power_configuration_mains_frequency(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -2612,7 +2612,7 @@ sl_status_t dotdot_set_power_configuration_mains_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_mains_frequency
+  uint8_t new_mains_frequency
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -2625,7 +2625,7 @@ sl_status_t dotdot_set_power_configuration_mains_frequency(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mains_frequency,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_mains_frequency_undefine_reported(
@@ -2811,7 +2811,7 @@ bool dotdot_is_supported_power_configuration_mains_voltage_min_threshold(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_power_configuration_mains_voltage_min_threshold(
+uint16_t dotdot_get_power_configuration_mains_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -2822,7 +2822,7 @@ int16_t dotdot_get_power_configuration_mains_voltage_min_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -2834,7 +2834,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mains_voltage_min_threshold
+  uint16_t new_mains_voltage_min_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -2847,7 +2847,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage_min_threshold(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mains_voltage_min_threshold,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_power_configuration_mains_voltage_min_threshold_undefine_reported(
@@ -2922,7 +2922,7 @@ bool dotdot_is_supported_power_configuration_mains_voltage_max_threshold(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_power_configuration_mains_voltage_max_threshold(
+uint16_t dotdot_get_power_configuration_mains_voltage_max_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -2933,7 +2933,7 @@ int16_t dotdot_get_power_configuration_mains_voltage_max_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -2945,7 +2945,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage_max_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mains_voltage_max_threshold
+  uint16_t new_mains_voltage_max_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -2958,7 +2958,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage_max_threshold(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mains_voltage_max_threshold,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_power_configuration_mains_voltage_max_threshold_undefine_reported(
@@ -3033,7 +3033,7 @@ bool dotdot_is_supported_power_configuration_mains_voltage_dwell_trip_point(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_power_configuration_mains_voltage_dwell_trip_point(
+uint16_t dotdot_get_power_configuration_mains_voltage_dwell_trip_point(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -3044,7 +3044,7 @@ int16_t dotdot_get_power_configuration_mains_voltage_dwell_trip_point(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -3056,7 +3056,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage_dwell_trip_point(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mains_voltage_dwell_trip_point
+  uint16_t new_mains_voltage_dwell_trip_point
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -3069,7 +3069,7 @@ sl_status_t dotdot_set_power_configuration_mains_voltage_dwell_trip_point(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mains_voltage_dwell_trip_point,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_power_configuration_mains_voltage_dwell_trip_point_undefine_reported(
@@ -3144,7 +3144,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_voltage(
+uint8_t dotdot_get_power_configuration_battery_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -3155,7 +3155,7 @@ int8_t dotdot_get_power_configuration_battery_voltage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -3167,7 +3167,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage
+  uint8_t new_battery_voltage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -3180,7 +3180,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_voltage,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_voltage_undefine_reported(
@@ -3255,7 +3255,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_remaining(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_percentage_remaining(
+uint8_t dotdot_get_power_configuration_battery_percentage_remaining(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -3266,7 +3266,7 @@ int8_t dotdot_get_power_configuration_battery_percentage_remaining(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -3278,7 +3278,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_remaining(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_remaining
+  uint8_t new_battery_percentage_remaining
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -3291,7 +3291,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_remaining(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_percentage_remaining,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_percentage_remaining_undefine_reported(
@@ -3589,7 +3589,7 @@ bool dotdot_is_supported_power_configuration_batterya_hr_rating(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_power_configuration_batterya_hr_rating(
+uint16_t dotdot_get_power_configuration_batterya_hr_rating(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -3600,7 +3600,7 @@ int16_t dotdot_get_power_configuration_batterya_hr_rating(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -3612,7 +3612,7 @@ sl_status_t dotdot_set_power_configuration_batterya_hr_rating(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_batterya_hr_rating
+  uint16_t new_batterya_hr_rating
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -3625,7 +3625,7 @@ sl_status_t dotdot_set_power_configuration_batterya_hr_rating(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_batterya_hr_rating,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_power_configuration_batterya_hr_rating_undefine_reported(
@@ -3700,7 +3700,7 @@ bool dotdot_is_supported_power_configuration_battery_quantity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_quantity(
+uint8_t dotdot_get_power_configuration_battery_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -3711,7 +3711,7 @@ int8_t dotdot_get_power_configuration_battery_quantity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -3723,7 +3723,7 @@ sl_status_t dotdot_set_power_configuration_battery_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_quantity
+  uint8_t new_battery_quantity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -3736,7 +3736,7 @@ sl_status_t dotdot_set_power_configuration_battery_quantity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_quantity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_quantity_undefine_reported(
@@ -3811,7 +3811,7 @@ bool dotdot_is_supported_power_configuration_battery_rated_voltage(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_rated_voltage(
+uint8_t dotdot_get_power_configuration_battery_rated_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -3822,7 +3822,7 @@ int8_t dotdot_get_power_configuration_battery_rated_voltage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -3834,7 +3834,7 @@ sl_status_t dotdot_set_power_configuration_battery_rated_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_rated_voltage
+  uint8_t new_battery_rated_voltage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -3847,7 +3847,7 @@ sl_status_t dotdot_set_power_configuration_battery_rated_voltage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_rated_voltage,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_rated_voltage_undefine_reported(
@@ -4033,7 +4033,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage_min_threshold(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_voltage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -4044,7 +4044,7 @@ int8_t dotdot_get_power_configuration_battery_voltage_min_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -4056,7 +4056,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage_min_threshold
+  uint8_t new_battery_voltage_min_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -4069,7 +4069,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_min_threshold(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_voltage_min_threshold,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_voltage_min_threshold_undefine_reported(
@@ -4144,7 +4144,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage_threshold1(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_voltage_threshold1(
+uint8_t dotdot_get_power_configuration_battery_voltage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -4155,7 +4155,7 @@ int8_t dotdot_get_power_configuration_battery_voltage_threshold1(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -4167,7 +4167,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage_threshold1
+  uint8_t new_battery_voltage_threshold1
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -4180,7 +4180,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_threshold1(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_voltage_threshold1,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_voltage_threshold1_undefine_reported(
@@ -4255,7 +4255,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage_threshold2(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_voltage_threshold2(
+uint8_t dotdot_get_power_configuration_battery_voltage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -4266,7 +4266,7 @@ int8_t dotdot_get_power_configuration_battery_voltage_threshold2(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -4278,7 +4278,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage_threshold2
+  uint8_t new_battery_voltage_threshold2
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -4291,7 +4291,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_threshold2(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_voltage_threshold2,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_voltage_threshold2_undefine_reported(
@@ -4366,7 +4366,7 @@ bool dotdot_is_supported_power_configuration_battery_voltage_threshold3(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_voltage_threshold3(
+uint8_t dotdot_get_power_configuration_battery_voltage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -4377,7 +4377,7 @@ int8_t dotdot_get_power_configuration_battery_voltage_threshold3(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -4389,7 +4389,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_voltage_threshold3
+  uint8_t new_battery_voltage_threshold3
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -4402,7 +4402,7 @@ sl_status_t dotdot_set_power_configuration_battery_voltage_threshold3(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_voltage_threshold3,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_voltage_threshold3_undefine_reported(
@@ -4477,7 +4477,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_min_threshold(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_percentage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery_percentage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -4488,7 +4488,7 @@ int8_t dotdot_get_power_configuration_battery_percentage_min_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -4500,7 +4500,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_min_threshold
+  uint8_t new_battery_percentage_min_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -4513,7 +4513,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_min_threshold(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_percentage_min_threshold,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_percentage_min_threshold_undefine_reported(
@@ -4588,7 +4588,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_threshold1(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_percentage_threshold1(
+uint8_t dotdot_get_power_configuration_battery_percentage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -4599,7 +4599,7 @@ int8_t dotdot_get_power_configuration_battery_percentage_threshold1(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -4611,7 +4611,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_threshold1
+  uint8_t new_battery_percentage_threshold1
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -4624,7 +4624,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_threshold1(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_percentage_threshold1,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_percentage_threshold1_undefine_reported(
@@ -4699,7 +4699,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_threshold2(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_percentage_threshold2(
+uint8_t dotdot_get_power_configuration_battery_percentage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -4710,7 +4710,7 @@ int8_t dotdot_get_power_configuration_battery_percentage_threshold2(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -4722,7 +4722,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_threshold2
+  uint8_t new_battery_percentage_threshold2
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -4735,7 +4735,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_threshold2(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_percentage_threshold2,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_percentage_threshold2_undefine_reported(
@@ -4810,7 +4810,7 @@ bool dotdot_is_supported_power_configuration_battery_percentage_threshold3(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery_percentage_threshold3(
+uint8_t dotdot_get_power_configuration_battery_percentage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -4821,7 +4821,7 @@ int8_t dotdot_get_power_configuration_battery_percentage_threshold3(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -4833,7 +4833,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery_percentage_threshold3
+  uint8_t new_battery_percentage_threshold3
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -4846,7 +4846,7 @@ sl_status_t dotdot_set_power_configuration_battery_percentage_threshold3(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery_percentage_threshold3,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery_percentage_threshold3_undefine_reported(
@@ -5032,7 +5032,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_voltage(
+uint8_t dotdot_get_power_configuration_battery2_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -5043,7 +5043,7 @@ int8_t dotdot_get_power_configuration_battery2_voltage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -5055,7 +5055,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage
+  uint8_t new_battery2_voltage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -5068,7 +5068,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_voltage,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_voltage_undefine_reported(
@@ -5143,7 +5143,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_remaining(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_percentage_remaining(
+uint8_t dotdot_get_power_configuration_battery2_percentage_remaining(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -5154,7 +5154,7 @@ int8_t dotdot_get_power_configuration_battery2_percentage_remaining(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -5166,7 +5166,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_remaining(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_remaining
+  uint8_t new_battery2_percentage_remaining
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -5179,7 +5179,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_remaining(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_percentage_remaining,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_percentage_remaining_undefine_reported(
@@ -5477,7 +5477,7 @@ bool dotdot_is_supported_power_configuration_battery2a_hr_rating(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_power_configuration_battery2a_hr_rating(
+uint16_t dotdot_get_power_configuration_battery2a_hr_rating(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -5488,7 +5488,7 @@ int16_t dotdot_get_power_configuration_battery2a_hr_rating(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -5500,7 +5500,7 @@ sl_status_t dotdot_set_power_configuration_battery2a_hr_rating(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_battery2a_hr_rating
+  uint16_t new_battery2a_hr_rating
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -5513,7 +5513,7 @@ sl_status_t dotdot_set_power_configuration_battery2a_hr_rating(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2a_hr_rating,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2a_hr_rating_undefine_reported(
@@ -5588,7 +5588,7 @@ bool dotdot_is_supported_power_configuration_battery2_quantity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_quantity(
+uint8_t dotdot_get_power_configuration_battery2_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -5599,7 +5599,7 @@ int8_t dotdot_get_power_configuration_battery2_quantity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -5611,7 +5611,7 @@ sl_status_t dotdot_set_power_configuration_battery2_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_quantity
+  uint8_t new_battery2_quantity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -5624,7 +5624,7 @@ sl_status_t dotdot_set_power_configuration_battery2_quantity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_quantity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_quantity_undefine_reported(
@@ -5699,7 +5699,7 @@ bool dotdot_is_supported_power_configuration_battery2_rated_voltage(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_rated_voltage(
+uint8_t dotdot_get_power_configuration_battery2_rated_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -5710,7 +5710,7 @@ int8_t dotdot_get_power_configuration_battery2_rated_voltage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -5722,7 +5722,7 @@ sl_status_t dotdot_set_power_configuration_battery2_rated_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_rated_voltage
+  uint8_t new_battery2_rated_voltage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -5735,7 +5735,7 @@ sl_status_t dotdot_set_power_configuration_battery2_rated_voltage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_rated_voltage,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_rated_voltage_undefine_reported(
@@ -5921,7 +5921,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage_min_threshold(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_voltage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery2_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -5932,7 +5932,7 @@ int8_t dotdot_get_power_configuration_battery2_voltage_min_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -5944,7 +5944,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage_min_threshold
+  uint8_t new_battery2_voltage_min_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -5957,7 +5957,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_min_threshold(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_voltage_min_threshold,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_voltage_min_threshold_undefine_reported(
@@ -6032,7 +6032,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage_threshold1(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_voltage_threshold1(
+uint8_t dotdot_get_power_configuration_battery2_voltage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -6043,7 +6043,7 @@ int8_t dotdot_get_power_configuration_battery2_voltage_threshold1(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -6055,7 +6055,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage_threshold1
+  uint8_t new_battery2_voltage_threshold1
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -6068,7 +6068,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold1(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_voltage_threshold1,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_voltage_threshold1_undefine_reported(
@@ -6143,7 +6143,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage_threshold2(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_voltage_threshold2(
+uint8_t dotdot_get_power_configuration_battery2_voltage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -6154,7 +6154,7 @@ int8_t dotdot_get_power_configuration_battery2_voltage_threshold2(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -6166,7 +6166,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage_threshold2
+  uint8_t new_battery2_voltage_threshold2
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -6179,7 +6179,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold2(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_voltage_threshold2,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_voltage_threshold2_undefine_reported(
@@ -6254,7 +6254,7 @@ bool dotdot_is_supported_power_configuration_battery2_voltage_threshold3(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_voltage_threshold3(
+uint8_t dotdot_get_power_configuration_battery2_voltage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -6265,7 +6265,7 @@ int8_t dotdot_get_power_configuration_battery2_voltage_threshold3(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -6277,7 +6277,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_voltage_threshold3
+  uint8_t new_battery2_voltage_threshold3
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -6290,7 +6290,7 @@ sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold3(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_voltage_threshold3,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_voltage_threshold3_undefine_reported(
@@ -6365,7 +6365,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_min_threshold(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_percentage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery2_percentage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -6376,7 +6376,7 @@ int8_t dotdot_get_power_configuration_battery2_percentage_min_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -6388,7 +6388,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_min_threshold
+  uint8_t new_battery2_percentage_min_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -6401,7 +6401,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_min_threshold(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_percentage_min_threshold,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_percentage_min_threshold_undefine_reported(
@@ -6476,7 +6476,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_threshold1(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_percentage_threshold1(
+uint8_t dotdot_get_power_configuration_battery2_percentage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -6487,7 +6487,7 @@ int8_t dotdot_get_power_configuration_battery2_percentage_threshold1(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -6499,7 +6499,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_threshold1
+  uint8_t new_battery2_percentage_threshold1
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -6512,7 +6512,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold1(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_percentage_threshold1,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_percentage_threshold1_undefine_reported(
@@ -6587,7 +6587,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_threshold2(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_percentage_threshold2(
+uint8_t dotdot_get_power_configuration_battery2_percentage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -6598,7 +6598,7 @@ int8_t dotdot_get_power_configuration_battery2_percentage_threshold2(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -6610,7 +6610,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_threshold2
+  uint8_t new_battery2_percentage_threshold2
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -6623,7 +6623,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold2(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_percentage_threshold2,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_percentage_threshold2_undefine_reported(
@@ -6698,7 +6698,7 @@ bool dotdot_is_supported_power_configuration_battery2_percentage_threshold3(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery2_percentage_threshold3(
+uint8_t dotdot_get_power_configuration_battery2_percentage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -6709,7 +6709,7 @@ int8_t dotdot_get_power_configuration_battery2_percentage_threshold3(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -6721,7 +6721,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery2_percentage_threshold3
+  uint8_t new_battery2_percentage_threshold3
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -6734,7 +6734,7 @@ sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold3(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery2_percentage_threshold3,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery2_percentage_threshold3_undefine_reported(
@@ -6920,7 +6920,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_voltage(
+uint8_t dotdot_get_power_configuration_battery3_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -6931,7 +6931,7 @@ int8_t dotdot_get_power_configuration_battery3_voltage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -6943,7 +6943,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage
+  uint8_t new_battery3_voltage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -6956,7 +6956,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_voltage,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_voltage_undefine_reported(
@@ -7031,7 +7031,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_remaining(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_percentage_remaining(
+uint8_t dotdot_get_power_configuration_battery3_percentage_remaining(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -7042,7 +7042,7 @@ int8_t dotdot_get_power_configuration_battery3_percentage_remaining(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -7054,7 +7054,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_remaining(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_remaining
+  uint8_t new_battery3_percentage_remaining
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -7067,7 +7067,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_remaining(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_percentage_remaining,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_percentage_remaining_undefine_reported(
@@ -7365,7 +7365,7 @@ bool dotdot_is_supported_power_configuration_battery3a_hr_rating(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_power_configuration_battery3a_hr_rating(
+uint16_t dotdot_get_power_configuration_battery3a_hr_rating(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -7376,7 +7376,7 @@ int16_t dotdot_get_power_configuration_battery3a_hr_rating(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -7388,7 +7388,7 @@ sl_status_t dotdot_set_power_configuration_battery3a_hr_rating(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_battery3a_hr_rating
+  uint16_t new_battery3a_hr_rating
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -7401,7 +7401,7 @@ sl_status_t dotdot_set_power_configuration_battery3a_hr_rating(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3a_hr_rating,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3a_hr_rating_undefine_reported(
@@ -7476,7 +7476,7 @@ bool dotdot_is_supported_power_configuration_battery3_quantity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_quantity(
+uint8_t dotdot_get_power_configuration_battery3_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -7487,7 +7487,7 @@ int8_t dotdot_get_power_configuration_battery3_quantity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -7499,7 +7499,7 @@ sl_status_t dotdot_set_power_configuration_battery3_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_quantity
+  uint8_t new_battery3_quantity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -7512,7 +7512,7 @@ sl_status_t dotdot_set_power_configuration_battery3_quantity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_quantity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_quantity_undefine_reported(
@@ -7587,7 +7587,7 @@ bool dotdot_is_supported_power_configuration_battery3_rated_voltage(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_rated_voltage(
+uint8_t dotdot_get_power_configuration_battery3_rated_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -7598,7 +7598,7 @@ int8_t dotdot_get_power_configuration_battery3_rated_voltage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -7610,7 +7610,7 @@ sl_status_t dotdot_set_power_configuration_battery3_rated_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_rated_voltage
+  uint8_t new_battery3_rated_voltage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -7623,7 +7623,7 @@ sl_status_t dotdot_set_power_configuration_battery3_rated_voltage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_rated_voltage,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_rated_voltage_undefine_reported(
@@ -7809,7 +7809,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage_min_threshold(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_voltage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery3_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -7820,7 +7820,7 @@ int8_t dotdot_get_power_configuration_battery3_voltage_min_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -7832,7 +7832,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage_min_threshold
+  uint8_t new_battery3_voltage_min_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -7845,7 +7845,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_min_threshold(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_voltage_min_threshold,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_voltage_min_threshold_undefine_reported(
@@ -7920,7 +7920,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage_threshold1(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_voltage_threshold1(
+uint8_t dotdot_get_power_configuration_battery3_voltage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -7931,7 +7931,7 @@ int8_t dotdot_get_power_configuration_battery3_voltage_threshold1(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -7943,7 +7943,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage_threshold1
+  uint8_t new_battery3_voltage_threshold1
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -7956,7 +7956,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold1(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_voltage_threshold1,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_voltage_threshold1_undefine_reported(
@@ -8031,7 +8031,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage_threshold2(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_voltage_threshold2(
+uint8_t dotdot_get_power_configuration_battery3_voltage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -8042,7 +8042,7 @@ int8_t dotdot_get_power_configuration_battery3_voltage_threshold2(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -8054,7 +8054,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage_threshold2
+  uint8_t new_battery3_voltage_threshold2
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -8067,7 +8067,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold2(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_voltage_threshold2,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_voltage_threshold2_undefine_reported(
@@ -8142,7 +8142,7 @@ bool dotdot_is_supported_power_configuration_battery3_voltage_threshold3(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_voltage_threshold3(
+uint8_t dotdot_get_power_configuration_battery3_voltage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -8153,7 +8153,7 @@ int8_t dotdot_get_power_configuration_battery3_voltage_threshold3(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -8165,7 +8165,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_voltage_threshold3
+  uint8_t new_battery3_voltage_threshold3
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -8178,7 +8178,7 @@ sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold3(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_voltage_threshold3,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_voltage_threshold3_undefine_reported(
@@ -8253,7 +8253,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_min_threshold(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_percentage_min_threshold(
+uint8_t dotdot_get_power_configuration_battery3_percentage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -8264,7 +8264,7 @@ int8_t dotdot_get_power_configuration_battery3_percentage_min_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -8276,7 +8276,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_min_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_min_threshold
+  uint8_t new_battery3_percentage_min_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -8289,7 +8289,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_min_threshold(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_percentage_min_threshold,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_percentage_min_threshold_undefine_reported(
@@ -8364,7 +8364,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_threshold1(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_percentage_threshold1(
+uint8_t dotdot_get_power_configuration_battery3_percentage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -8375,7 +8375,7 @@ int8_t dotdot_get_power_configuration_battery3_percentage_threshold1(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -8387,7 +8387,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold1(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_threshold1
+  uint8_t new_battery3_percentage_threshold1
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -8400,7 +8400,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold1(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_percentage_threshold1,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_percentage_threshold1_undefine_reported(
@@ -8475,7 +8475,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_threshold2(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_percentage_threshold2(
+uint8_t dotdot_get_power_configuration_battery3_percentage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -8486,7 +8486,7 @@ int8_t dotdot_get_power_configuration_battery3_percentage_threshold2(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -8498,7 +8498,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold2(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_threshold2
+  uint8_t new_battery3_percentage_threshold2
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -8511,7 +8511,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold2(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_percentage_threshold2,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_percentage_threshold2_undefine_reported(
@@ -8586,7 +8586,7 @@ bool dotdot_is_supported_power_configuration_battery3_percentage_threshold3(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_power_configuration_battery3_percentage_threshold3(
+uint8_t dotdot_get_power_configuration_battery3_percentage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -8597,7 +8597,7 @@ int8_t dotdot_get_power_configuration_battery3_percentage_threshold3(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -8609,7 +8609,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold3(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_battery3_percentage_threshold3
+  uint8_t new_battery3_percentage_threshold3
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -8622,7 +8622,7 @@ sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold3(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_battery3_percentage_threshold3,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_power_configuration_battery3_percentage_threshold3_undefine_reported(
@@ -9469,7 +9469,7 @@ bool dotdot_is_supported_device_temperature_configuration_over_temp_total_dwell(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_device_temperature_configuration_over_temp_total_dwell(
+uint16_t dotdot_get_device_temperature_configuration_over_temp_total_dwell(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -9480,7 +9480,7 @@ int16_t dotdot_get_device_temperature_configuration_over_temp_total_dwell(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -9492,7 +9492,7 @@ sl_status_t dotdot_set_device_temperature_configuration_over_temp_total_dwell(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_over_temp_total_dwell
+  uint16_t new_over_temp_total_dwell
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -9505,7 +9505,7 @@ sl_status_t dotdot_set_device_temperature_configuration_over_temp_total_dwell(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_over_temp_total_dwell,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_device_temperature_configuration_over_temp_total_dwell_undefine_reported(
@@ -9913,7 +9913,7 @@ bool dotdot_is_supported_device_temperature_configuration_low_temp_dwell_trip_po
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_device_temperature_configuration_low_temp_dwell_trip_point(
+uint32_t dotdot_get_device_temperature_configuration_low_temp_dwell_trip_point(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -9924,7 +9924,7 @@ int32_t dotdot_get_device_temperature_configuration_low_temp_dwell_trip_point(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -9936,7 +9936,7 @@ sl_status_t dotdot_set_device_temperature_configuration_low_temp_dwell_trip_poin
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_low_temp_dwell_trip_point
+  uint32_t new_low_temp_dwell_trip_point
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -9949,7 +9949,7 @@ sl_status_t dotdot_set_device_temperature_configuration_low_temp_dwell_trip_poin
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_low_temp_dwell_trip_point,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_device_temperature_configuration_low_temp_dwell_trip_point_undefine_reported(
@@ -10024,7 +10024,7 @@ bool dotdot_is_supported_device_temperature_configuration_high_temp_dwell_trip_p
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_device_temperature_configuration_high_temp_dwell_trip_point(
+uint32_t dotdot_get_device_temperature_configuration_high_temp_dwell_trip_point(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -10035,7 +10035,7 @@ int32_t dotdot_get_device_temperature_configuration_high_temp_dwell_trip_point(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -10047,7 +10047,7 @@ sl_status_t dotdot_set_device_temperature_configuration_high_temp_dwell_trip_poi
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_high_temp_dwell_trip_point
+  uint32_t new_high_temp_dwell_trip_point
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -10060,7 +10060,7 @@ sl_status_t dotdot_set_device_temperature_configuration_high_temp_dwell_trip_poi
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_high_temp_dwell_trip_point,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_device_temperature_configuration_high_temp_dwell_trip_point_undefine_reported(
@@ -10196,7 +10196,7 @@ bool dotdot_is_supported_identify_identify_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_identify_identify_time(
+uint16_t dotdot_get_identify_identify_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -10207,7 +10207,7 @@ int16_t dotdot_get_identify_identify_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -10219,7 +10219,7 @@ sl_status_t dotdot_set_identify_identify_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_identify_time
+  uint16_t new_identify_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -10232,7 +10232,7 @@ sl_status_t dotdot_set_identify_identify_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_identify_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_identify_identify_time_undefine_reported(
@@ -10465,7 +10465,7 @@ bool dotdot_is_supported_scenes_scene_count(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_scenes_scene_count(
+uint8_t dotdot_get_scenes_scene_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -10476,7 +10476,7 @@ int8_t dotdot_get_scenes_scene_count(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -10488,7 +10488,7 @@ sl_status_t dotdot_set_scenes_scene_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_scene_count
+  uint8_t new_scene_count
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -10501,7 +10501,7 @@ sl_status_t dotdot_set_scenes_scene_count(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_scene_count,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_scenes_scene_count_undefine_reported(
@@ -10576,7 +10576,7 @@ bool dotdot_is_supported_scenes_current_scene(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_scenes_current_scene(
+uint8_t dotdot_get_scenes_current_scene(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -10587,7 +10587,7 @@ int8_t dotdot_get_scenes_current_scene(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -10599,7 +10599,7 @@ sl_status_t dotdot_set_scenes_current_scene(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_scene
+  uint8_t new_current_scene
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -10612,7 +10612,7 @@ sl_status_t dotdot_set_scenes_current_scene(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_scene,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_scenes_current_scene_undefine_reported(
@@ -10687,7 +10687,7 @@ bool dotdot_is_supported_scenes_current_group(
   return attribute_store_node_exists(node);
 }
 
-uint8_t * dotdot_get_scenes_current_group(
+uint16_t dotdot_get_scenes_current_group(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -10698,7 +10698,7 @@ uint8_t * dotdot_get_scenes_current_group(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);
 
-  uint8_t * result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -10710,7 +10710,7 @@ sl_status_t dotdot_set_scenes_current_group(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t * new_current_group
+  uint16_t new_current_group
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -10723,7 +10723,7 @@ sl_status_t dotdot_set_scenes_current_group(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_group,
-                                                  sizeof(uint8_t *));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_scenes_current_group_undefine_reported(
@@ -11507,7 +11507,7 @@ bool dotdot_is_supported_on_off_on_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_on_off_on_time(
+uint16_t dotdot_get_on_off_on_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -11518,7 +11518,7 @@ int16_t dotdot_get_on_off_on_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -11530,7 +11530,7 @@ sl_status_t dotdot_set_on_off_on_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_on_time
+  uint16_t new_on_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -11543,7 +11543,7 @@ sl_status_t dotdot_set_on_off_on_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_on_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_on_off_on_time_undefine_reported(
@@ -11618,7 +11618,7 @@ bool dotdot_is_supported_on_off_off_wait_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_on_off_off_wait_time(
+uint16_t dotdot_get_on_off_off_wait_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -11629,7 +11629,7 @@ int16_t dotdot_get_on_off_off_wait_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -11641,7 +11641,7 @@ sl_status_t dotdot_set_on_off_off_wait_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_off_wait_time
+  uint16_t new_off_wait_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -11654,7 +11654,7 @@ sl_status_t dotdot_set_on_off_off_wait_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_off_wait_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_on_off_off_wait_time_undefine_reported(
@@ -11883,7 +11883,7 @@ bool dotdot_is_supported_level_current_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_level_current_level(
+uint8_t dotdot_get_level_current_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -11894,7 +11894,7 @@ int8_t dotdot_get_level_current_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -11906,7 +11906,7 @@ sl_status_t dotdot_set_level_current_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_level
+  uint8_t new_current_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -11919,7 +11919,7 @@ sl_status_t dotdot_set_level_current_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_level_current_level_undefine_reported(
@@ -11994,7 +11994,7 @@ bool dotdot_is_supported_level_remaining_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_level_remaining_time(
+uint16_t dotdot_get_level_remaining_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -12005,7 +12005,7 @@ int16_t dotdot_get_level_remaining_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -12017,7 +12017,7 @@ sl_status_t dotdot_set_level_remaining_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_remaining_time
+  uint16_t new_remaining_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -12030,7 +12030,7 @@ sl_status_t dotdot_set_level_remaining_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_remaining_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_level_remaining_time_undefine_reported(
@@ -12105,7 +12105,7 @@ bool dotdot_is_supported_level_min_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_level_min_level(
+uint8_t dotdot_get_level_min_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -12116,7 +12116,7 @@ int8_t dotdot_get_level_min_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -12128,7 +12128,7 @@ sl_status_t dotdot_set_level_min_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_min_level
+  uint8_t new_min_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -12141,7 +12141,7 @@ sl_status_t dotdot_set_level_min_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_level_min_level_undefine_reported(
@@ -12216,7 +12216,7 @@ bool dotdot_is_supported_level_max_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_level_max_level(
+uint8_t dotdot_get_level_max_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -12227,7 +12227,7 @@ int8_t dotdot_get_level_max_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -12239,7 +12239,7 @@ sl_status_t dotdot_set_level_max_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_max_level
+  uint8_t new_max_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -12252,7 +12252,7 @@ sl_status_t dotdot_set_level_max_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_level_max_level_undefine_reported(
@@ -12327,7 +12327,7 @@ bool dotdot_is_supported_level_current_frequency(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_level_current_frequency(
+uint16_t dotdot_get_level_current_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -12338,7 +12338,7 @@ int16_t dotdot_get_level_current_frequency(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -12350,7 +12350,7 @@ sl_status_t dotdot_set_level_current_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_current_frequency
+  uint16_t new_current_frequency
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -12363,7 +12363,7 @@ sl_status_t dotdot_set_level_current_frequency(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_frequency,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_level_current_frequency_undefine_reported(
@@ -12438,7 +12438,7 @@ bool dotdot_is_supported_level_min_frequency(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_level_min_frequency(
+uint16_t dotdot_get_level_min_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -12449,7 +12449,7 @@ int16_t dotdot_get_level_min_frequency(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -12461,7 +12461,7 @@ sl_status_t dotdot_set_level_min_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_frequency
+  uint16_t new_min_frequency
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -12474,7 +12474,7 @@ sl_status_t dotdot_set_level_min_frequency(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_frequency,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_level_min_frequency_undefine_reported(
@@ -12549,7 +12549,7 @@ bool dotdot_is_supported_level_max_frequency(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_level_max_frequency(
+uint16_t dotdot_get_level_max_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -12560,7 +12560,7 @@ int16_t dotdot_get_level_max_frequency(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -12572,7 +12572,7 @@ sl_status_t dotdot_set_level_max_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_frequency
+  uint16_t new_max_frequency
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -12585,7 +12585,7 @@ sl_status_t dotdot_set_level_max_frequency(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_frequency,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_level_max_frequency_undefine_reported(
@@ -12771,7 +12771,7 @@ bool dotdot_is_supported_level_on_off_transition_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_level_on_off_transition_time(
+uint16_t dotdot_get_level_on_off_transition_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -12782,7 +12782,7 @@ int16_t dotdot_get_level_on_off_transition_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -12794,7 +12794,7 @@ sl_status_t dotdot_set_level_on_off_transition_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_on_off_transition_time
+  uint16_t new_on_off_transition_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -12807,7 +12807,7 @@ sl_status_t dotdot_set_level_on_off_transition_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_on_off_transition_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_level_on_off_transition_time_undefine_reported(
@@ -12882,7 +12882,7 @@ bool dotdot_is_supported_level_on_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_level_on_level(
+uint8_t dotdot_get_level_on_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -12893,7 +12893,7 @@ int8_t dotdot_get_level_on_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -12905,7 +12905,7 @@ sl_status_t dotdot_set_level_on_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_on_level
+  uint8_t new_on_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -12918,7 +12918,7 @@ sl_status_t dotdot_set_level_on_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_on_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_level_on_level_undefine_reported(
@@ -12993,7 +12993,7 @@ bool dotdot_is_supported_level_on_transition_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_level_on_transition_time(
+uint16_t dotdot_get_level_on_transition_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -13004,7 +13004,7 @@ int16_t dotdot_get_level_on_transition_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -13016,7 +13016,7 @@ sl_status_t dotdot_set_level_on_transition_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_on_transition_time
+  uint16_t new_on_transition_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -13029,7 +13029,7 @@ sl_status_t dotdot_set_level_on_transition_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_on_transition_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_level_on_transition_time_undefine_reported(
@@ -13104,7 +13104,7 @@ bool dotdot_is_supported_level_off_transition_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_level_off_transition_time(
+uint16_t dotdot_get_level_off_transition_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -13115,7 +13115,7 @@ int16_t dotdot_get_level_off_transition_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -13127,7 +13127,7 @@ sl_status_t dotdot_set_level_off_transition_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_off_transition_time
+  uint16_t new_off_transition_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -13140,7 +13140,7 @@ sl_status_t dotdot_set_level_off_transition_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_off_transition_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_level_off_transition_time_undefine_reported(
@@ -13215,7 +13215,7 @@ bool dotdot_is_supported_level_default_move_rate(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_level_default_move_rate(
+uint16_t dotdot_get_level_default_move_rate(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -13226,7 +13226,7 @@ int16_t dotdot_get_level_default_move_rate(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -13238,7 +13238,7 @@ sl_status_t dotdot_set_level_default_move_rate(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_default_move_rate
+  uint16_t new_default_move_rate
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -13251,7 +13251,7 @@ sl_status_t dotdot_set_level_default_move_rate(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_default_move_rate,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_level_default_move_rate_undefine_reported(
@@ -13326,7 +13326,7 @@ bool dotdot_is_supported_level_start_up_current_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_level_start_up_current_level(
+uint8_t dotdot_get_level_start_up_current_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -13337,7 +13337,7 @@ int8_t dotdot_get_level_start_up_current_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -13349,7 +13349,7 @@ sl_status_t dotdot_set_level_start_up_current_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_start_up_current_level
+  uint8_t new_start_up_current_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -13362,7 +13362,7 @@ sl_status_t dotdot_set_level_start_up_current_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_start_up_current_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_level_start_up_current_level_undefine_reported(
@@ -13519,7 +13519,7 @@ bool dotdot_is_supported_alarms_alarm_count(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_alarms_alarm_count(
+uint16_t dotdot_get_alarms_alarm_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -13530,7 +13530,7 @@ int16_t dotdot_get_alarms_alarm_count(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -13542,7 +13542,7 @@ sl_status_t dotdot_set_alarms_alarm_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_alarm_count
+  uint16_t new_alarm_count
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -13555,7 +13555,7 @@ sl_status_t dotdot_set_alarms_alarm_count(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_alarm_count,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_alarms_alarm_count_undefine_reported(
@@ -13652,7 +13652,7 @@ bool dotdot_is_supported_time_time(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_time_time(
+uint32_t dotdot_get_time_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -13663,7 +13663,7 @@ uint8_t dotdot_get_time_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_TIME_TIME);
 
-  uint8_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -13675,7 +13675,7 @@ sl_status_t dotdot_set_time_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_time
+  uint32_t new_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -13688,7 +13688,7 @@ sl_status_t dotdot_set_time_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_time,
-                                                  sizeof(uint8_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_time_time_undefine_reported(
@@ -13985,7 +13985,7 @@ bool dotdot_is_supported_time_dst_start(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_time_dst_start(
+uint32_t dotdot_get_time_dst_start(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -13996,7 +13996,7 @@ int32_t dotdot_get_time_dst_start(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_TIME_DST_START);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -14008,7 +14008,7 @@ sl_status_t dotdot_set_time_dst_start(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_dst_start
+  uint32_t new_dst_start
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -14021,7 +14021,7 @@ sl_status_t dotdot_set_time_dst_start(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dst_start,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_time_dst_start_undefine_reported(
@@ -14096,7 +14096,7 @@ bool dotdot_is_supported_time_dst_end(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_time_dst_end(
+uint32_t dotdot_get_time_dst_end(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -14107,7 +14107,7 @@ int32_t dotdot_get_time_dst_end(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_TIME_DST_END);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -14119,7 +14119,7 @@ sl_status_t dotdot_set_time_dst_end(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_dst_end
+  uint32_t new_dst_end
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -14132,7 +14132,7 @@ sl_status_t dotdot_set_time_dst_end(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dst_end,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_time_dst_end_undefine_reported(
@@ -14318,7 +14318,7 @@ bool dotdot_is_supported_time_standard_time(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_time_standard_time(
+uint32_t dotdot_get_time_standard_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -14329,7 +14329,7 @@ int32_t dotdot_get_time_standard_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -14341,7 +14341,7 @@ sl_status_t dotdot_set_time_standard_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_standard_time
+  uint32_t new_standard_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -14354,7 +14354,7 @@ sl_status_t dotdot_set_time_standard_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_standard_time,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_time_standard_time_undefine_reported(
@@ -14429,7 +14429,7 @@ bool dotdot_is_supported_time_local_time(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_time_local_time(
+uint32_t dotdot_get_time_local_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -14440,7 +14440,7 @@ int32_t dotdot_get_time_local_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -14452,7 +14452,7 @@ sl_status_t dotdot_set_time_local_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_local_time
+  uint32_t new_local_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -14465,7 +14465,7 @@ sl_status_t dotdot_set_time_local_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_local_time,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_time_local_time_undefine_reported(
@@ -14540,7 +14540,7 @@ bool dotdot_is_supported_time_last_set_time(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_time_last_set_time(
+uint32_t dotdot_get_time_last_set_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -14551,7 +14551,7 @@ uint8_t dotdot_get_time_last_set_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);
 
-  uint8_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -14563,7 +14563,7 @@ sl_status_t dotdot_set_time_last_set_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_last_set_time
+  uint32_t new_last_set_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -14576,7 +14576,7 @@ sl_status_t dotdot_set_time_last_set_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_last_set_time,
-                                                  sizeof(uint8_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_time_last_set_time_undefine_reported(
@@ -14651,7 +14651,7 @@ bool dotdot_is_supported_time_valid_until_time(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_time_valid_until_time(
+uint32_t dotdot_get_time_valid_until_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -14662,7 +14662,7 @@ uint8_t dotdot_get_time_valid_until_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);
 
-  uint8_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -14674,7 +14674,7 @@ sl_status_t dotdot_set_time_valid_until_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_valid_until_time
+  uint32_t new_valid_until_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -14687,7 +14687,7 @@ sl_status_t dotdot_set_time_valid_until_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_valid_until_time,
-                                                  sizeof(uint8_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_time_valid_until_time_undefine_reported(
@@ -14832,7 +14832,7 @@ bool dotdot_is_supported_poll_control_check_in_interval(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_poll_control_check_in_interval(
+uint32_t dotdot_get_poll_control_check_in_interval(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -14843,7 +14843,7 @@ int32_t dotdot_get_poll_control_check_in_interval(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -14855,7 +14855,7 @@ sl_status_t dotdot_set_poll_control_check_in_interval(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_check_in_interval
+  uint32_t new_check_in_interval
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -14868,7 +14868,7 @@ sl_status_t dotdot_set_poll_control_check_in_interval(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_check_in_interval,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_poll_control_check_in_interval_undefine_reported(
@@ -14943,7 +14943,7 @@ bool dotdot_is_supported_poll_control_long_poll_interval(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_poll_control_long_poll_interval(
+uint32_t dotdot_get_poll_control_long_poll_interval(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -14954,7 +14954,7 @@ int32_t dotdot_get_poll_control_long_poll_interval(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -14966,7 +14966,7 @@ sl_status_t dotdot_set_poll_control_long_poll_interval(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_long_poll_interval
+  uint32_t new_long_poll_interval
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -14979,7 +14979,7 @@ sl_status_t dotdot_set_poll_control_long_poll_interval(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_long_poll_interval,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_poll_control_long_poll_interval_undefine_reported(
@@ -15054,7 +15054,7 @@ bool dotdot_is_supported_poll_control_short_poll_interval(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_poll_control_short_poll_interval(
+uint16_t dotdot_get_poll_control_short_poll_interval(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -15065,7 +15065,7 @@ int16_t dotdot_get_poll_control_short_poll_interval(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -15077,7 +15077,7 @@ sl_status_t dotdot_set_poll_control_short_poll_interval(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_short_poll_interval
+  uint16_t new_short_poll_interval
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -15090,7 +15090,7 @@ sl_status_t dotdot_set_poll_control_short_poll_interval(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_short_poll_interval,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_poll_control_short_poll_interval_undefine_reported(
@@ -15165,7 +15165,7 @@ bool dotdot_is_supported_poll_control_fast_poll_timeout(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_poll_control_fast_poll_timeout(
+uint16_t dotdot_get_poll_control_fast_poll_timeout(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -15176,7 +15176,7 @@ int16_t dotdot_get_poll_control_fast_poll_timeout(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -15188,7 +15188,7 @@ sl_status_t dotdot_set_poll_control_fast_poll_timeout(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_fast_poll_timeout
+  uint16_t new_fast_poll_timeout
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -15201,7 +15201,7 @@ sl_status_t dotdot_set_poll_control_fast_poll_timeout(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_fast_poll_timeout,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_poll_control_fast_poll_timeout_undefine_reported(
@@ -15276,7 +15276,7 @@ bool dotdot_is_supported_poll_control_check_in_interval_min(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_poll_control_check_in_interval_min(
+uint32_t dotdot_get_poll_control_check_in_interval_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -15287,7 +15287,7 @@ int32_t dotdot_get_poll_control_check_in_interval_min(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -15299,7 +15299,7 @@ sl_status_t dotdot_set_poll_control_check_in_interval_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_check_in_interval_min
+  uint32_t new_check_in_interval_min
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -15312,7 +15312,7 @@ sl_status_t dotdot_set_poll_control_check_in_interval_min(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_check_in_interval_min,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_poll_control_check_in_interval_min_undefine_reported(
@@ -15387,7 +15387,7 @@ bool dotdot_is_supported_poll_control_long_poll_interval_min(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_poll_control_long_poll_interval_min(
+uint32_t dotdot_get_poll_control_long_poll_interval_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -15398,7 +15398,7 @@ int32_t dotdot_get_poll_control_long_poll_interval_min(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -15410,7 +15410,7 @@ sl_status_t dotdot_set_poll_control_long_poll_interval_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_long_poll_interval_min
+  uint32_t new_long_poll_interval_min
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -15423,7 +15423,7 @@ sl_status_t dotdot_set_poll_control_long_poll_interval_min(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_long_poll_interval_min,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_poll_control_long_poll_interval_min_undefine_reported(
@@ -15498,7 +15498,7 @@ bool dotdot_is_supported_poll_control_fast_poll_timeout_max(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_poll_control_fast_poll_timeout_max(
+uint16_t dotdot_get_poll_control_fast_poll_timeout_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -15509,7 +15509,7 @@ int16_t dotdot_get_poll_control_fast_poll_timeout_max(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -15521,7 +15521,7 @@ sl_status_t dotdot_set_poll_control_fast_poll_timeout_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_fast_poll_timeout_max
+  uint16_t new_fast_poll_timeout_max
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -15534,7 +15534,7 @@ sl_status_t dotdot_set_poll_control_fast_poll_timeout_max(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_fast_poll_timeout_max,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_poll_control_fast_poll_timeout_max_undefine_reported(
@@ -15655,7 +15655,7 @@ bool dotdot_is_supported_shade_configuration_physical_closed_limit(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_shade_configuration_physical_closed_limit(
+uint16_t dotdot_get_shade_configuration_physical_closed_limit(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -15666,7 +15666,7 @@ int16_t dotdot_get_shade_configuration_physical_closed_limit(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -15678,7 +15678,7 @@ sl_status_t dotdot_set_shade_configuration_physical_closed_limit(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_closed_limit
+  uint16_t new_physical_closed_limit
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -15691,7 +15691,7 @@ sl_status_t dotdot_set_shade_configuration_physical_closed_limit(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_physical_closed_limit,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_shade_configuration_physical_closed_limit_undefine_reported(
@@ -15766,7 +15766,7 @@ bool dotdot_is_supported_shade_configuration_motor_step_size(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_shade_configuration_motor_step_size(
+uint8_t dotdot_get_shade_configuration_motor_step_size(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -15777,7 +15777,7 @@ int8_t dotdot_get_shade_configuration_motor_step_size(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -15789,7 +15789,7 @@ sl_status_t dotdot_set_shade_configuration_motor_step_size(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_motor_step_size
+  uint8_t new_motor_step_size
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -15802,7 +15802,7 @@ sl_status_t dotdot_set_shade_configuration_motor_step_size(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_motor_step_size,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_shade_configuration_motor_step_size_undefine_reported(
@@ -15988,7 +15988,7 @@ bool dotdot_is_supported_shade_configuration_closed_limit(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_shade_configuration_closed_limit(
+uint16_t dotdot_get_shade_configuration_closed_limit(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -15999,7 +15999,7 @@ int16_t dotdot_get_shade_configuration_closed_limit(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -16011,7 +16011,7 @@ sl_status_t dotdot_set_shade_configuration_closed_limit(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_closed_limit
+  uint16_t new_closed_limit
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -16024,7 +16024,7 @@ sl_status_t dotdot_set_shade_configuration_closed_limit(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_closed_limit,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_shade_configuration_closed_limit_undefine_reported(
@@ -16697,7 +16697,7 @@ bool dotdot_is_supported_door_lock_door_open_events(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_door_lock_door_open_events(
+uint32_t dotdot_get_door_lock_door_open_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -16708,7 +16708,7 @@ int32_t dotdot_get_door_lock_door_open_events(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -16720,7 +16720,7 @@ sl_status_t dotdot_set_door_lock_door_open_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_door_open_events
+  uint32_t new_door_open_events
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -16733,7 +16733,7 @@ sl_status_t dotdot_set_door_lock_door_open_events(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_door_open_events,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_door_lock_door_open_events_undefine_reported(
@@ -16808,7 +16808,7 @@ bool dotdot_is_supported_door_lock_door_closed_events(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_door_lock_door_closed_events(
+uint32_t dotdot_get_door_lock_door_closed_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -16819,7 +16819,7 @@ int32_t dotdot_get_door_lock_door_closed_events(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -16831,7 +16831,7 @@ sl_status_t dotdot_set_door_lock_door_closed_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_door_closed_events
+  uint32_t new_door_closed_events
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -16844,7 +16844,7 @@ sl_status_t dotdot_set_door_lock_door_closed_events(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_door_closed_events,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_door_lock_door_closed_events_undefine_reported(
@@ -16919,7 +16919,7 @@ bool dotdot_is_supported_door_lock_open_period(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_door_lock_open_period(
+uint16_t dotdot_get_door_lock_open_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -16930,7 +16930,7 @@ int16_t dotdot_get_door_lock_open_period(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -16942,7 +16942,7 @@ sl_status_t dotdot_set_door_lock_open_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_open_period
+  uint16_t new_open_period
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -16955,7 +16955,7 @@ sl_status_t dotdot_set_door_lock_open_period(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_open_period,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_door_lock_open_period_undefine_reported(
@@ -17030,7 +17030,7 @@ bool dotdot_is_supported_door_lock_number_of_log_records_supported(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_door_lock_number_of_log_records_supported(
+uint16_t dotdot_get_door_lock_number_of_log_records_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -17041,7 +17041,7 @@ int16_t dotdot_get_door_lock_number_of_log_records_supported(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -17053,7 +17053,7 @@ sl_status_t dotdot_set_door_lock_number_of_log_records_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_log_records_supported
+  uint16_t new_number_of_log_records_supported
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -17066,7 +17066,7 @@ sl_status_t dotdot_set_door_lock_number_of_log_records_supported(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_log_records_supported,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_door_lock_number_of_log_records_supported_undefine_reported(
@@ -17141,7 +17141,7 @@ bool dotdot_is_supported_door_lock_number_of_total_users_supported(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_door_lock_number_of_total_users_supported(
+uint16_t dotdot_get_door_lock_number_of_total_users_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -17152,7 +17152,7 @@ int16_t dotdot_get_door_lock_number_of_total_users_supported(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -17164,7 +17164,7 @@ sl_status_t dotdot_set_door_lock_number_of_total_users_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_total_users_supported
+  uint16_t new_number_of_total_users_supported
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -17177,7 +17177,7 @@ sl_status_t dotdot_set_door_lock_number_of_total_users_supported(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_total_users_supported,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_door_lock_number_of_total_users_supported_undefine_reported(
@@ -17252,7 +17252,7 @@ bool dotdot_is_supported_door_lock_number_of_pin_users_supported(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_door_lock_number_of_pin_users_supported(
+uint16_t dotdot_get_door_lock_number_of_pin_users_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -17263,7 +17263,7 @@ int16_t dotdot_get_door_lock_number_of_pin_users_supported(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -17275,7 +17275,7 @@ sl_status_t dotdot_set_door_lock_number_of_pin_users_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_pin_users_supported
+  uint16_t new_number_of_pin_users_supported
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -17288,7 +17288,7 @@ sl_status_t dotdot_set_door_lock_number_of_pin_users_supported(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_pin_users_supported,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_door_lock_number_of_pin_users_supported_undefine_reported(
@@ -17363,7 +17363,7 @@ bool dotdot_is_supported_door_lock_number_of_rfid_users_supported(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_door_lock_number_of_rfid_users_supported(
+uint16_t dotdot_get_door_lock_number_of_rfid_users_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -17374,7 +17374,7 @@ int16_t dotdot_get_door_lock_number_of_rfid_users_supported(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -17386,7 +17386,7 @@ sl_status_t dotdot_set_door_lock_number_of_rfid_users_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_rfid_users_supported
+  uint16_t new_number_of_rfid_users_supported
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -17399,7 +17399,7 @@ sl_status_t dotdot_set_door_lock_number_of_rfid_users_supported(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_rfid_users_supported,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_door_lock_number_of_rfid_users_supported_undefine_reported(
@@ -17474,7 +17474,7 @@ bool dotdot_is_supported_door_lock_number_of_week_day_schedules_supported_per_us
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_number_of_week_day_schedules_supported_per_user(
+uint8_t dotdot_get_door_lock_number_of_week_day_schedules_supported_per_user(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -17485,7 +17485,7 @@ int8_t dotdot_get_door_lock_number_of_week_day_schedules_supported_per_user(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -17497,7 +17497,7 @@ sl_status_t dotdot_set_door_lock_number_of_week_day_schedules_supported_per_user
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_week_day_schedules_supported_per_user
+  uint8_t new_number_of_week_day_schedules_supported_per_user
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -17510,7 +17510,7 @@ sl_status_t dotdot_set_door_lock_number_of_week_day_schedules_supported_per_user
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_week_day_schedules_supported_per_user,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_number_of_week_day_schedules_supported_per_user_undefine_reported(
@@ -17585,7 +17585,7 @@ bool dotdot_is_supported_door_lock_number_of_year_day_schedules_supported_per_us
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_number_of_year_day_schedules_supported_per_user(
+uint8_t dotdot_get_door_lock_number_of_year_day_schedules_supported_per_user(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -17596,7 +17596,7 @@ int8_t dotdot_get_door_lock_number_of_year_day_schedules_supported_per_user(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -17608,7 +17608,7 @@ sl_status_t dotdot_set_door_lock_number_of_year_day_schedules_supported_per_user
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_year_day_schedules_supported_per_user
+  uint8_t new_number_of_year_day_schedules_supported_per_user
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -17621,7 +17621,7 @@ sl_status_t dotdot_set_door_lock_number_of_year_day_schedules_supported_per_user
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_year_day_schedules_supported_per_user,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_number_of_year_day_schedules_supported_per_user_undefine_reported(
@@ -17696,7 +17696,7 @@ bool dotdot_is_supported_door_lock_number_of_holiday_schedules_supported(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_number_of_holiday_schedules_supported(
+uint8_t dotdot_get_door_lock_number_of_holiday_schedules_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -17707,7 +17707,7 @@ int8_t dotdot_get_door_lock_number_of_holiday_schedules_supported(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -17719,7 +17719,7 @@ sl_status_t dotdot_set_door_lock_number_of_holiday_schedules_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_holiday_schedules_supported
+  uint8_t new_number_of_holiday_schedules_supported
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -17732,7 +17732,7 @@ sl_status_t dotdot_set_door_lock_number_of_holiday_schedules_supported(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_holiday_schedules_supported,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_number_of_holiday_schedules_supported_undefine_reported(
@@ -17807,7 +17807,7 @@ bool dotdot_is_supported_door_lock_max_pin_code_length(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_max_pin_code_length(
+uint8_t dotdot_get_door_lock_max_pin_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -17818,7 +17818,7 @@ int8_t dotdot_get_door_lock_max_pin_code_length(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -17830,7 +17830,7 @@ sl_status_t dotdot_set_door_lock_max_pin_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_max_pin_code_length
+  uint8_t new_max_pin_code_length
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -17843,7 +17843,7 @@ sl_status_t dotdot_set_door_lock_max_pin_code_length(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_pin_code_length,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_max_pin_code_length_undefine_reported(
@@ -17918,7 +17918,7 @@ bool dotdot_is_supported_door_lock_min_pin_code_length(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_min_pin_code_length(
+uint8_t dotdot_get_door_lock_min_pin_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -17929,7 +17929,7 @@ int8_t dotdot_get_door_lock_min_pin_code_length(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -17941,7 +17941,7 @@ sl_status_t dotdot_set_door_lock_min_pin_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_min_pin_code_length
+  uint8_t new_min_pin_code_length
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -17954,7 +17954,7 @@ sl_status_t dotdot_set_door_lock_min_pin_code_length(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_pin_code_length,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_min_pin_code_length_undefine_reported(
@@ -18029,7 +18029,7 @@ bool dotdot_is_supported_door_lock_max_rfid_code_length(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_max_rfid_code_length(
+uint8_t dotdot_get_door_lock_max_rfid_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -18040,7 +18040,7 @@ int8_t dotdot_get_door_lock_max_rfid_code_length(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -18052,7 +18052,7 @@ sl_status_t dotdot_set_door_lock_max_rfid_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_max_rfid_code_length
+  uint8_t new_max_rfid_code_length
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -18065,7 +18065,7 @@ sl_status_t dotdot_set_door_lock_max_rfid_code_length(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_rfid_code_length,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_max_rfid_code_length_undefine_reported(
@@ -18140,7 +18140,7 @@ bool dotdot_is_supported_door_lock_min_rfid_code_length(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_min_rfid_code_length(
+uint8_t dotdot_get_door_lock_min_rfid_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -18151,7 +18151,7 @@ int8_t dotdot_get_door_lock_min_rfid_code_length(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -18163,7 +18163,7 @@ sl_status_t dotdot_set_door_lock_min_rfid_code_length(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_min_rfid_code_length
+  uint8_t new_min_rfid_code_length
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -18176,7 +18176,7 @@ sl_status_t dotdot_set_door_lock_min_rfid_code_length(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_rfid_code_length,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_min_rfid_code_length_undefine_reported(
@@ -18362,7 +18362,7 @@ bool dotdot_is_supported_door_lock_number_of_credentials_supported_per_user(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_number_of_credentials_supported_per_user(
+uint8_t dotdot_get_door_lock_number_of_credentials_supported_per_user(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -18373,7 +18373,7 @@ int8_t dotdot_get_door_lock_number_of_credentials_supported_per_user(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -18385,7 +18385,7 @@ sl_status_t dotdot_set_door_lock_number_of_credentials_supported_per_user(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_credentials_supported_per_user
+  uint8_t new_number_of_credentials_supported_per_user
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -18398,7 +18398,7 @@ sl_status_t dotdot_set_door_lock_number_of_credentials_supported_per_user(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_credentials_supported_per_user,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_number_of_credentials_supported_per_user_undefine_reported(
@@ -18696,7 +18696,7 @@ bool dotdot_is_supported_door_lock_led_settings(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_led_settings(
+uint8_t dotdot_get_door_lock_led_settings(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -18707,7 +18707,7 @@ int8_t dotdot_get_door_lock_led_settings(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -18719,7 +18719,7 @@ sl_status_t dotdot_set_door_lock_led_settings(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_led_settings
+  uint8_t new_led_settings
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -18732,7 +18732,7 @@ sl_status_t dotdot_set_door_lock_led_settings(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_led_settings,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_led_settings_undefine_reported(
@@ -18807,7 +18807,7 @@ bool dotdot_is_supported_door_lock_auto_relock_time(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_door_lock_auto_relock_time(
+uint32_t dotdot_get_door_lock_auto_relock_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -18818,7 +18818,7 @@ int32_t dotdot_get_door_lock_auto_relock_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -18830,7 +18830,7 @@ sl_status_t dotdot_set_door_lock_auto_relock_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_auto_relock_time
+  uint32_t new_auto_relock_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -18843,7 +18843,7 @@ sl_status_t dotdot_set_door_lock_auto_relock_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_auto_relock_time,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_door_lock_auto_relock_time_undefine_reported(
@@ -18918,7 +18918,7 @@ bool dotdot_is_supported_door_lock_sound_volume(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_sound_volume(
+uint8_t dotdot_get_door_lock_sound_volume(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -18929,7 +18929,7 @@ int8_t dotdot_get_door_lock_sound_volume(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -18941,7 +18941,7 @@ sl_status_t dotdot_set_door_lock_sound_volume(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_sound_volume
+  uint8_t new_sound_volume
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -18954,7 +18954,7 @@ sl_status_t dotdot_set_door_lock_sound_volume(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_sound_volume,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_sound_volume_undefine_reported(
@@ -19917,7 +19917,7 @@ bool dotdot_is_supported_door_lock_wrong_code_entry_limit(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_wrong_code_entry_limit(
+uint8_t dotdot_get_door_lock_wrong_code_entry_limit(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -19928,7 +19928,7 @@ int8_t dotdot_get_door_lock_wrong_code_entry_limit(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -19940,7 +19940,7 @@ sl_status_t dotdot_set_door_lock_wrong_code_entry_limit(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_wrong_code_entry_limit
+  uint8_t new_wrong_code_entry_limit
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -19953,7 +19953,7 @@ sl_status_t dotdot_set_door_lock_wrong_code_entry_limit(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_wrong_code_entry_limit,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_wrong_code_entry_limit_undefine_reported(
@@ -20028,7 +20028,7 @@ bool dotdot_is_supported_door_lock_user_code_temporary_disable_time(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_door_lock_user_code_temporary_disable_time(
+uint8_t dotdot_get_door_lock_user_code_temporary_disable_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -20039,7 +20039,7 @@ int8_t dotdot_get_door_lock_user_code_temporary_disable_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -20051,7 +20051,7 @@ sl_status_t dotdot_set_door_lock_user_code_temporary_disable_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_user_code_temporary_disable_time
+  uint8_t new_user_code_temporary_disable_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -20064,7 +20064,7 @@ sl_status_t dotdot_set_door_lock_user_code_temporary_disable_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_user_code_temporary_disable_time,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_door_lock_user_code_temporary_disable_time_undefine_reported(
@@ -20472,7 +20472,7 @@ bool dotdot_is_supported_door_lock_expiring_user_timeout(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_door_lock_expiring_user_timeout(
+uint16_t dotdot_get_door_lock_expiring_user_timeout(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -20483,7 +20483,7 @@ int16_t dotdot_get_door_lock_expiring_user_timeout(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -20495,7 +20495,7 @@ sl_status_t dotdot_set_door_lock_expiring_user_timeout(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_expiring_user_timeout
+  uint16_t new_expiring_user_timeout
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -20508,7 +20508,7 @@ sl_status_t dotdot_set_door_lock_expiring_user_timeout(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_expiring_user_timeout,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_door_lock_expiring_user_timeout_undefine_reported(
@@ -21937,7 +21937,7 @@ bool dotdot_is_supported_window_covering_physical_closed_limit_lift(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_physical_closed_limit_lift(
+uint16_t dotdot_get_window_covering_physical_closed_limit_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -21948,7 +21948,7 @@ int16_t dotdot_get_window_covering_physical_closed_limit_lift(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -21960,7 +21960,7 @@ sl_status_t dotdot_set_window_covering_physical_closed_limit_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_closed_limit_lift
+  uint16_t new_physical_closed_limit_lift
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -21973,7 +21973,7 @@ sl_status_t dotdot_set_window_covering_physical_closed_limit_lift(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_physical_closed_limit_lift,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_physical_closed_limit_lift_undefine_reported(
@@ -22048,7 +22048,7 @@ bool dotdot_is_supported_window_covering_physical_closed_limit_tilt(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_physical_closed_limit_tilt(
+uint16_t dotdot_get_window_covering_physical_closed_limit_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -22059,7 +22059,7 @@ int16_t dotdot_get_window_covering_physical_closed_limit_tilt(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -22071,7 +22071,7 @@ sl_status_t dotdot_set_window_covering_physical_closed_limit_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_closed_limit_tilt
+  uint16_t new_physical_closed_limit_tilt
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -22084,7 +22084,7 @@ sl_status_t dotdot_set_window_covering_physical_closed_limit_tilt(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_physical_closed_limit_tilt,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_physical_closed_limit_tilt_undefine_reported(
@@ -22159,7 +22159,7 @@ bool dotdot_is_supported_window_covering_current_position_lift(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_current_position_lift(
+uint16_t dotdot_get_window_covering_current_position_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -22170,7 +22170,7 @@ int16_t dotdot_get_window_covering_current_position_lift(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -22182,7 +22182,7 @@ sl_status_t dotdot_set_window_covering_current_position_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_current_position_lift
+  uint16_t new_current_position_lift
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -22195,7 +22195,7 @@ sl_status_t dotdot_set_window_covering_current_position_lift(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_position_lift,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_current_position_lift_undefine_reported(
@@ -22270,7 +22270,7 @@ bool dotdot_is_supported_window_covering_current_position_tilt(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_current_position_tilt(
+uint16_t dotdot_get_window_covering_current_position_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -22281,7 +22281,7 @@ int16_t dotdot_get_window_covering_current_position_tilt(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -22293,7 +22293,7 @@ sl_status_t dotdot_set_window_covering_current_position_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_current_position_tilt
+  uint16_t new_current_position_tilt
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -22306,7 +22306,7 @@ sl_status_t dotdot_set_window_covering_current_position_tilt(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_position_tilt,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_current_position_tilt_undefine_reported(
@@ -22381,7 +22381,7 @@ bool dotdot_is_supported_window_covering_number_of_actuations_lift(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_number_of_actuations_lift(
+uint16_t dotdot_get_window_covering_number_of_actuations_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -22392,7 +22392,7 @@ int16_t dotdot_get_window_covering_number_of_actuations_lift(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -22404,7 +22404,7 @@ sl_status_t dotdot_set_window_covering_number_of_actuations_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_actuations_lift
+  uint16_t new_number_of_actuations_lift
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -22417,7 +22417,7 @@ sl_status_t dotdot_set_window_covering_number_of_actuations_lift(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_actuations_lift,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_number_of_actuations_lift_undefine_reported(
@@ -22492,7 +22492,7 @@ bool dotdot_is_supported_window_covering_number_of_actuations_tilt(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_number_of_actuations_tilt(
+uint16_t dotdot_get_window_covering_number_of_actuations_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -22503,7 +22503,7 @@ int16_t dotdot_get_window_covering_number_of_actuations_tilt(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -22515,7 +22515,7 @@ sl_status_t dotdot_set_window_covering_number_of_actuations_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_actuations_tilt
+  uint16_t new_number_of_actuations_tilt
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -22528,7 +22528,7 @@ sl_status_t dotdot_set_window_covering_number_of_actuations_tilt(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_actuations_tilt,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_number_of_actuations_tilt_undefine_reported(
@@ -22714,7 +22714,7 @@ bool dotdot_is_supported_window_covering_current_position_lift_percentage(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_window_covering_current_position_lift_percentage(
+uint8_t dotdot_get_window_covering_current_position_lift_percentage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -22725,7 +22725,7 @@ int8_t dotdot_get_window_covering_current_position_lift_percentage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -22737,7 +22737,7 @@ sl_status_t dotdot_set_window_covering_current_position_lift_percentage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_position_lift_percentage
+  uint8_t new_current_position_lift_percentage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -22750,7 +22750,7 @@ sl_status_t dotdot_set_window_covering_current_position_lift_percentage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_position_lift_percentage,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_window_covering_current_position_lift_percentage_undefine_reported(
@@ -22825,7 +22825,7 @@ bool dotdot_is_supported_window_covering_current_position_tilt_percentage(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_window_covering_current_position_tilt_percentage(
+uint8_t dotdot_get_window_covering_current_position_tilt_percentage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -22836,7 +22836,7 @@ int8_t dotdot_get_window_covering_current_position_tilt_percentage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -22848,7 +22848,7 @@ sl_status_t dotdot_set_window_covering_current_position_tilt_percentage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_position_tilt_percentage
+  uint8_t new_current_position_tilt_percentage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -22861,7 +22861,7 @@ sl_status_t dotdot_set_window_covering_current_position_tilt_percentage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_position_tilt_percentage,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_window_covering_current_position_tilt_percentage_undefine_reported(
@@ -22936,7 +22936,7 @@ bool dotdot_is_supported_window_covering_installed_open_limit_lift(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_installed_open_limit_lift(
+uint16_t dotdot_get_window_covering_installed_open_limit_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -22947,7 +22947,7 @@ int16_t dotdot_get_window_covering_installed_open_limit_lift(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -22959,7 +22959,7 @@ sl_status_t dotdot_set_window_covering_installed_open_limit_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_installed_open_limit_lift
+  uint16_t new_installed_open_limit_lift
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -22972,7 +22972,7 @@ sl_status_t dotdot_set_window_covering_installed_open_limit_lift(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_installed_open_limit_lift,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_installed_open_limit_lift_undefine_reported(
@@ -23047,7 +23047,7 @@ bool dotdot_is_supported_window_covering_installed_closed_limit_lift(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_installed_closed_limit_lift(
+uint16_t dotdot_get_window_covering_installed_closed_limit_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -23058,7 +23058,7 @@ int16_t dotdot_get_window_covering_installed_closed_limit_lift(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -23070,7 +23070,7 @@ sl_status_t dotdot_set_window_covering_installed_closed_limit_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_installed_closed_limit_lift
+  uint16_t new_installed_closed_limit_lift
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -23083,7 +23083,7 @@ sl_status_t dotdot_set_window_covering_installed_closed_limit_lift(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_installed_closed_limit_lift,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_installed_closed_limit_lift_undefine_reported(
@@ -23158,7 +23158,7 @@ bool dotdot_is_supported_window_covering_installed_open_limit_tilt(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_installed_open_limit_tilt(
+uint16_t dotdot_get_window_covering_installed_open_limit_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -23169,7 +23169,7 @@ int16_t dotdot_get_window_covering_installed_open_limit_tilt(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -23181,7 +23181,7 @@ sl_status_t dotdot_set_window_covering_installed_open_limit_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_installed_open_limit_tilt
+  uint16_t new_installed_open_limit_tilt
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -23194,7 +23194,7 @@ sl_status_t dotdot_set_window_covering_installed_open_limit_tilt(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_installed_open_limit_tilt,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_installed_open_limit_tilt_undefine_reported(
@@ -23269,7 +23269,7 @@ bool dotdot_is_supported_window_covering_installed_closed_limit_tilt(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_installed_closed_limit_tilt(
+uint16_t dotdot_get_window_covering_installed_closed_limit_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -23280,7 +23280,7 @@ int16_t dotdot_get_window_covering_installed_closed_limit_tilt(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -23292,7 +23292,7 @@ sl_status_t dotdot_set_window_covering_installed_closed_limit_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_installed_closed_limit_tilt
+  uint16_t new_installed_closed_limit_tilt
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -23305,7 +23305,7 @@ sl_status_t dotdot_set_window_covering_installed_closed_limit_tilt(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_installed_closed_limit_tilt,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_installed_closed_limit_tilt_undefine_reported(
@@ -23380,7 +23380,7 @@ bool dotdot_is_supported_window_covering_velocity_lift(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_velocity_lift(
+uint16_t dotdot_get_window_covering_velocity_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -23391,7 +23391,7 @@ int16_t dotdot_get_window_covering_velocity_lift(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -23403,7 +23403,7 @@ sl_status_t dotdot_set_window_covering_velocity_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_velocity_lift
+  uint16_t new_velocity_lift
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -23416,7 +23416,7 @@ sl_status_t dotdot_set_window_covering_velocity_lift(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_velocity_lift,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_velocity_lift_undefine_reported(
@@ -23491,7 +23491,7 @@ bool dotdot_is_supported_window_covering_acceleration_time_lift(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_acceleration_time_lift(
+uint16_t dotdot_get_window_covering_acceleration_time_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -23502,7 +23502,7 @@ int16_t dotdot_get_window_covering_acceleration_time_lift(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -23514,7 +23514,7 @@ sl_status_t dotdot_set_window_covering_acceleration_time_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_acceleration_time_lift
+  uint16_t new_acceleration_time_lift
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -23527,7 +23527,7 @@ sl_status_t dotdot_set_window_covering_acceleration_time_lift(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_acceleration_time_lift,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_acceleration_time_lift_undefine_reported(
@@ -23602,7 +23602,7 @@ bool dotdot_is_supported_window_covering_deceleration_time_lift(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_window_covering_deceleration_time_lift(
+uint16_t dotdot_get_window_covering_deceleration_time_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -23613,7 +23613,7 @@ int16_t dotdot_get_window_covering_deceleration_time_lift(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -23625,7 +23625,7 @@ sl_status_t dotdot_set_window_covering_deceleration_time_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_deceleration_time_lift
+  uint16_t new_deceleration_time_lift
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -23638,7 +23638,7 @@ sl_status_t dotdot_set_window_covering_deceleration_time_lift(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_deceleration_time_lift,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_window_covering_deceleration_time_lift_undefine_reported(
@@ -23824,7 +23824,7 @@ bool dotdot_is_supported_window_covering_intermediate_setpoints_lift(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_window_covering_intermediate_setpoints_lift(
+const char* dotdot_get_window_covering_intermediate_setpoints_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -23847,7 +23847,7 @@ sl_status_t dotdot_set_window_covering_intermediate_setpoints_lift(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_intermediate_setpoints_lift
+  const char* new_intermediate_setpoints_lift
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -23936,7 +23936,7 @@ bool dotdot_is_supported_window_covering_intermediate_setpoints_tilt(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_window_covering_intermediate_setpoints_tilt(
+const char* dotdot_get_window_covering_intermediate_setpoints_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -23959,7 +23959,7 @@ sl_status_t dotdot_set_window_covering_intermediate_setpoints_tilt(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_intermediate_setpoints_tilt
+  const char* new_intermediate_setpoints_tilt
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -24472,7 +24472,7 @@ bool dotdot_is_supported_barrier_control_open_events(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_barrier_control_open_events(
+uint16_t dotdot_get_barrier_control_open_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -24483,7 +24483,7 @@ int16_t dotdot_get_barrier_control_open_events(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -24495,7 +24495,7 @@ sl_status_t dotdot_set_barrier_control_open_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_open_events
+  uint16_t new_open_events
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -24508,7 +24508,7 @@ sl_status_t dotdot_set_barrier_control_open_events(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_open_events,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_barrier_control_open_events_undefine_reported(
@@ -24583,7 +24583,7 @@ bool dotdot_is_supported_barrier_control_close_events(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_barrier_control_close_events(
+uint16_t dotdot_get_barrier_control_close_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -24594,7 +24594,7 @@ int16_t dotdot_get_barrier_control_close_events(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -24606,7 +24606,7 @@ sl_status_t dotdot_set_barrier_control_close_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_close_events
+  uint16_t new_close_events
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -24619,7 +24619,7 @@ sl_status_t dotdot_set_barrier_control_close_events(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_close_events,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_barrier_control_close_events_undefine_reported(
@@ -24694,7 +24694,7 @@ bool dotdot_is_supported_barrier_control_command_open_events(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_barrier_control_command_open_events(
+uint16_t dotdot_get_barrier_control_command_open_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -24705,7 +24705,7 @@ int16_t dotdot_get_barrier_control_command_open_events(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -24717,7 +24717,7 @@ sl_status_t dotdot_set_barrier_control_command_open_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_command_open_events
+  uint16_t new_command_open_events
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -24730,7 +24730,7 @@ sl_status_t dotdot_set_barrier_control_command_open_events(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_command_open_events,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_barrier_control_command_open_events_undefine_reported(
@@ -24805,7 +24805,7 @@ bool dotdot_is_supported_barrier_control_command_close_events(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_barrier_control_command_close_events(
+uint16_t dotdot_get_barrier_control_command_close_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -24816,7 +24816,7 @@ int16_t dotdot_get_barrier_control_command_close_events(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -24828,7 +24828,7 @@ sl_status_t dotdot_set_barrier_control_command_close_events(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_command_close_events
+  uint16_t new_command_close_events
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -24841,7 +24841,7 @@ sl_status_t dotdot_set_barrier_control_command_close_events(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_command_close_events,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_barrier_control_command_close_events_undefine_reported(
@@ -24916,7 +24916,7 @@ bool dotdot_is_supported_barrier_control_open_period(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_barrier_control_open_period(
+uint16_t dotdot_get_barrier_control_open_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -24927,7 +24927,7 @@ int16_t dotdot_get_barrier_control_open_period(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -24939,7 +24939,7 @@ sl_status_t dotdot_set_barrier_control_open_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_open_period
+  uint16_t new_open_period
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -24952,7 +24952,7 @@ sl_status_t dotdot_set_barrier_control_open_period(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_open_period,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_barrier_control_open_period_undefine_reported(
@@ -25027,7 +25027,7 @@ bool dotdot_is_supported_barrier_control_close_period(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_barrier_control_close_period(
+uint16_t dotdot_get_barrier_control_close_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -25038,7 +25038,7 @@ int16_t dotdot_get_barrier_control_close_period(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -25050,7 +25050,7 @@ sl_status_t dotdot_set_barrier_control_close_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_close_period
+  uint16_t new_close_period
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -25063,7 +25063,7 @@ sl_status_t dotdot_set_barrier_control_close_period(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_close_period,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_barrier_control_close_period_undefine_reported(
@@ -25138,7 +25138,7 @@ bool dotdot_is_supported_barrier_control_barrier_position(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_barrier_control_barrier_position(
+uint8_t dotdot_get_barrier_control_barrier_position(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -25149,7 +25149,7 @@ int8_t dotdot_get_barrier_control_barrier_position(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -25161,7 +25161,7 @@ sl_status_t dotdot_set_barrier_control_barrier_position(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_barrier_position
+  uint8_t new_barrier_position
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -25174,7 +25174,7 @@ sl_status_t dotdot_set_barrier_control_barrier_position(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_barrier_position,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_barrier_control_barrier_position_undefine_reported(
@@ -25427,7 +25427,7 @@ bool dotdot_is_supported_pump_configuration_and_control_max_speed(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_pump_configuration_and_control_max_speed(
+uint16_t dotdot_get_pump_configuration_and_control_max_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -25438,7 +25438,7 @@ int16_t dotdot_get_pump_configuration_and_control_max_speed(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -25450,7 +25450,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_speed
+  uint16_t new_max_speed
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -25463,7 +25463,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_speed(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_speed,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_max_speed_undefine_reported(
@@ -25538,7 +25538,7 @@ bool dotdot_is_supported_pump_configuration_and_control_max_flow(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_pump_configuration_and_control_max_flow(
+uint16_t dotdot_get_pump_configuration_and_control_max_flow(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -25549,7 +25549,7 @@ int16_t dotdot_get_pump_configuration_and_control_max_flow(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -25561,7 +25561,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_flow(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_flow
+  uint16_t new_max_flow
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -25574,7 +25574,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_flow(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_flow,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_max_flow_undefine_reported(
@@ -26093,7 +26093,7 @@ bool dotdot_is_supported_pump_configuration_and_control_min_const_speed(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_pump_configuration_and_control_min_const_speed(
+uint16_t dotdot_get_pump_configuration_and_control_min_const_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -26104,7 +26104,7 @@ int16_t dotdot_get_pump_configuration_and_control_min_const_speed(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -26116,7 +26116,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_min_const_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_const_speed
+  uint16_t new_min_const_speed
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -26129,7 +26129,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_min_const_speed(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_const_speed,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_min_const_speed_undefine_reported(
@@ -26204,7 +26204,7 @@ bool dotdot_is_supported_pump_configuration_and_control_max_const_speed(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_pump_configuration_and_control_max_const_speed(
+uint16_t dotdot_get_pump_configuration_and_control_max_const_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -26215,7 +26215,7 @@ int16_t dotdot_get_pump_configuration_and_control_max_const_speed(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -26227,7 +26227,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_const_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_const_speed
+  uint16_t new_max_const_speed
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -26240,7 +26240,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_const_speed(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_const_speed,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_max_const_speed_undefine_reported(
@@ -26315,7 +26315,7 @@ bool dotdot_is_supported_pump_configuration_and_control_min_const_flow(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_pump_configuration_and_control_min_const_flow(
+uint16_t dotdot_get_pump_configuration_and_control_min_const_flow(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -26326,7 +26326,7 @@ int16_t dotdot_get_pump_configuration_and_control_min_const_flow(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -26338,7 +26338,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_min_const_flow(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_const_flow
+  uint16_t new_min_const_flow
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -26351,7 +26351,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_min_const_flow(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_const_flow,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_min_const_flow_undefine_reported(
@@ -26426,7 +26426,7 @@ bool dotdot_is_supported_pump_configuration_and_control_max_const_flow(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_pump_configuration_and_control_max_const_flow(
+uint16_t dotdot_get_pump_configuration_and_control_max_const_flow(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -26437,7 +26437,7 @@ int16_t dotdot_get_pump_configuration_and_control_max_const_flow(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -26449,7 +26449,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_const_flow(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_const_flow
+  uint16_t new_max_const_flow
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -26462,7 +26462,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_max_const_flow(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_const_flow,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_max_const_flow_undefine_reported(
@@ -27203,7 +27203,7 @@ bool dotdot_is_supported_pump_configuration_and_control_speed(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_pump_configuration_and_control_speed(
+uint16_t dotdot_get_pump_configuration_and_control_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -27214,7 +27214,7 @@ int16_t dotdot_get_pump_configuration_and_control_speed(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -27226,7 +27226,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_speed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_speed
+  uint16_t new_speed
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -27239,7 +27239,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_speed(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_speed,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_speed_undefine_reported(
@@ -27314,7 +27314,7 @@ bool dotdot_is_supported_pump_configuration_and_control_lifetime_running_hours(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_pump_configuration_and_control_lifetime_running_hours(
+uint32_t dotdot_get_pump_configuration_and_control_lifetime_running_hours(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -27325,7 +27325,7 @@ int32_t dotdot_get_pump_configuration_and_control_lifetime_running_hours(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -27337,7 +27337,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_lifetime_running_hours(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lifetime_running_hours
+  uint32_t new_lifetime_running_hours
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -27350,7 +27350,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_lifetime_running_hours(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_lifetime_running_hours,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_lifetime_running_hours_undefine_reported(
@@ -27425,7 +27425,7 @@ bool dotdot_is_supported_pump_configuration_and_control_power(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_pump_configuration_and_control_power(
+uint32_t dotdot_get_pump_configuration_and_control_power(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -27436,7 +27436,7 @@ int32_t dotdot_get_pump_configuration_and_control_power(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -27448,7 +27448,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_power(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_power
+  uint32_t new_power
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -27461,7 +27461,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_power(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_power,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_power_undefine_reported(
@@ -27536,7 +27536,7 @@ bool dotdot_is_supported_pump_configuration_and_control_lifetime_energy_consumed
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_pump_configuration_and_control_lifetime_energy_consumed(
+uint32_t dotdot_get_pump_configuration_and_control_lifetime_energy_consumed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -27547,7 +27547,7 @@ int32_t dotdot_get_pump_configuration_and_control_lifetime_energy_consumed(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -27559,7 +27559,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_lifetime_energy_consumed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lifetime_energy_consumed
+  uint32_t new_lifetime_energy_consumed
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -27572,7 +27572,7 @@ sl_status_t dotdot_set_pump_configuration_and_control_lifetime_energy_consumed(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_lifetime_energy_consumed,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_pump_configuration_and_control_lifetime_energy_consumed_undefine_reported(
@@ -28860,7 +28860,7 @@ bool dotdot_is_supported_thermostat_pi_cooling_demand(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_pi_cooling_demand(
+uint8_t dotdot_get_thermostat_pi_cooling_demand(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -28871,7 +28871,7 @@ int8_t dotdot_get_thermostat_pi_cooling_demand(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -28883,7 +28883,7 @@ sl_status_t dotdot_set_thermostat_pi_cooling_demand(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_pi_cooling_demand
+  uint8_t new_pi_cooling_demand
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -28896,7 +28896,7 @@ sl_status_t dotdot_set_thermostat_pi_cooling_demand(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_pi_cooling_demand,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_pi_cooling_demand_undefine_reported(
@@ -28971,7 +28971,7 @@ bool dotdot_is_supported_thermostat_pi_heating_demand(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_pi_heating_demand(
+uint8_t dotdot_get_thermostat_pi_heating_demand(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -28982,7 +28982,7 @@ int8_t dotdot_get_thermostat_pi_heating_demand(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -28994,7 +28994,7 @@ sl_status_t dotdot_set_thermostat_pi_heating_demand(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_pi_heating_demand
+  uint8_t new_pi_heating_demand
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -29007,7 +29007,7 @@ sl_status_t dotdot_set_thermostat_pi_heating_demand(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_pi_heating_demand,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_pi_heating_demand_undefine_reported(
@@ -30969,7 +30969,7 @@ bool dotdot_is_supported_thermostat_number_of_weekly_transitions(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_number_of_weekly_transitions(
+uint8_t dotdot_get_thermostat_number_of_weekly_transitions(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -30980,7 +30980,7 @@ int8_t dotdot_get_thermostat_number_of_weekly_transitions(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -30992,7 +30992,7 @@ sl_status_t dotdot_set_thermostat_number_of_weekly_transitions(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_weekly_transitions
+  uint8_t new_number_of_weekly_transitions
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -31005,7 +31005,7 @@ sl_status_t dotdot_set_thermostat_number_of_weekly_transitions(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_weekly_transitions,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_number_of_weekly_transitions_undefine_reported(
@@ -31080,7 +31080,7 @@ bool dotdot_is_supported_thermostat_number_of_daily_transitions(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_number_of_daily_transitions(
+uint8_t dotdot_get_thermostat_number_of_daily_transitions(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -31091,7 +31091,7 @@ int8_t dotdot_get_thermostat_number_of_daily_transitions(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -31103,7 +31103,7 @@ sl_status_t dotdot_set_thermostat_number_of_daily_transitions(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_daily_transitions
+  uint8_t new_number_of_daily_transitions
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -31116,7 +31116,7 @@ sl_status_t dotdot_set_thermostat_number_of_daily_transitions(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_daily_transitions,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_number_of_daily_transitions_undefine_reported(
@@ -31302,7 +31302,7 @@ bool dotdot_is_supported_thermostat_temperature_setpoint_hold_duration(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_thermostat_temperature_setpoint_hold_duration(
+uint16_t dotdot_get_thermostat_temperature_setpoint_hold_duration(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -31313,7 +31313,7 @@ int16_t dotdot_get_thermostat_temperature_setpoint_hold_duration(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -31325,7 +31325,7 @@ sl_status_t dotdot_set_thermostat_temperature_setpoint_hold_duration(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_temperature_setpoint_hold_duration
+  uint16_t new_temperature_setpoint_hold_duration
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -31338,7 +31338,7 @@ sl_status_t dotdot_set_thermostat_temperature_setpoint_hold_duration(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_temperature_setpoint_hold_duration,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_thermostat_temperature_setpoint_hold_duration_undefine_reported(
@@ -31857,7 +31857,7 @@ bool dotdot_is_supported_thermostat_setpoint_change_source_timestamp(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_thermostat_setpoint_change_source_timestamp(
+uint32_t dotdot_get_thermostat_setpoint_change_source_timestamp(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -31868,7 +31868,7 @@ uint8_t dotdot_get_thermostat_setpoint_change_source_timestamp(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);
 
-  uint8_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -31880,7 +31880,7 @@ sl_status_t dotdot_set_thermostat_setpoint_change_source_timestamp(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_setpoint_change_source_timestamp
+  uint32_t new_setpoint_change_source_timestamp
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -31893,7 +31893,7 @@ sl_status_t dotdot_set_thermostat_setpoint_change_source_timestamp(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_setpoint_change_source_timestamp,
-                                                  sizeof(uint8_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_thermostat_setpoint_change_source_timestamp_undefine_reported(
@@ -31968,7 +31968,7 @@ bool dotdot_is_supported_thermostat_occupied_setback(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_occupied_setback(
+uint8_t dotdot_get_thermostat_occupied_setback(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -31979,7 +31979,7 @@ int8_t dotdot_get_thermostat_occupied_setback(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -31991,7 +31991,7 @@ sl_status_t dotdot_set_thermostat_occupied_setback(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_occupied_setback
+  uint8_t new_occupied_setback
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -32004,7 +32004,7 @@ sl_status_t dotdot_set_thermostat_occupied_setback(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_occupied_setback,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_occupied_setback_undefine_reported(
@@ -32079,7 +32079,7 @@ bool dotdot_is_supported_thermostat_occupied_setback_min(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_occupied_setback_min(
+uint8_t dotdot_get_thermostat_occupied_setback_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -32090,7 +32090,7 @@ int8_t dotdot_get_thermostat_occupied_setback_min(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -32102,7 +32102,7 @@ sl_status_t dotdot_set_thermostat_occupied_setback_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_occupied_setback_min
+  uint8_t new_occupied_setback_min
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -32115,7 +32115,7 @@ sl_status_t dotdot_set_thermostat_occupied_setback_min(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_occupied_setback_min,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_occupied_setback_min_undefine_reported(
@@ -32190,7 +32190,7 @@ bool dotdot_is_supported_thermostat_occupied_setback_max(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_occupied_setback_max(
+uint8_t dotdot_get_thermostat_occupied_setback_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -32201,7 +32201,7 @@ int8_t dotdot_get_thermostat_occupied_setback_max(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -32213,7 +32213,7 @@ sl_status_t dotdot_set_thermostat_occupied_setback_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_occupied_setback_max
+  uint8_t new_occupied_setback_max
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -32226,7 +32226,7 @@ sl_status_t dotdot_set_thermostat_occupied_setback_max(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_occupied_setback_max,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_occupied_setback_max_undefine_reported(
@@ -32301,7 +32301,7 @@ bool dotdot_is_supported_thermostat_unoccupied_setback(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_unoccupied_setback(
+uint8_t dotdot_get_thermostat_unoccupied_setback(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -32312,7 +32312,7 @@ int8_t dotdot_get_thermostat_unoccupied_setback(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -32324,7 +32324,7 @@ sl_status_t dotdot_set_thermostat_unoccupied_setback(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_unoccupied_setback
+  uint8_t new_unoccupied_setback
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -32337,7 +32337,7 @@ sl_status_t dotdot_set_thermostat_unoccupied_setback(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_unoccupied_setback,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_unoccupied_setback_undefine_reported(
@@ -32412,7 +32412,7 @@ bool dotdot_is_supported_thermostat_unoccupied_setback_min(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_unoccupied_setback_min(
+uint8_t dotdot_get_thermostat_unoccupied_setback_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -32423,7 +32423,7 @@ int8_t dotdot_get_thermostat_unoccupied_setback_min(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -32435,7 +32435,7 @@ sl_status_t dotdot_set_thermostat_unoccupied_setback_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_unoccupied_setback_min
+  uint8_t new_unoccupied_setback_min
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -32448,7 +32448,7 @@ sl_status_t dotdot_set_thermostat_unoccupied_setback_min(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_unoccupied_setback_min,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_unoccupied_setback_min_undefine_reported(
@@ -32523,7 +32523,7 @@ bool dotdot_is_supported_thermostat_unoccupied_setback_max(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_unoccupied_setback_max(
+uint8_t dotdot_get_thermostat_unoccupied_setback_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -32534,7 +32534,7 @@ int8_t dotdot_get_thermostat_unoccupied_setback_max(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -32546,7 +32546,7 @@ sl_status_t dotdot_set_thermostat_unoccupied_setback_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_unoccupied_setback_max
+  uint8_t new_unoccupied_setback_max
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -32559,7 +32559,7 @@ sl_status_t dotdot_set_thermostat_unoccupied_setback_max(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_unoccupied_setback_max,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_unoccupied_setback_max_undefine_reported(
@@ -32634,7 +32634,7 @@ bool dotdot_is_supported_thermostat_emergency_heat_delta(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_thermostat_emergency_heat_delta(
+uint8_t dotdot_get_thermostat_emergency_heat_delta(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -32645,7 +32645,7 @@ int8_t dotdot_get_thermostat_emergency_heat_delta(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -32657,7 +32657,7 @@ sl_status_t dotdot_set_thermostat_emergency_heat_delta(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_emergency_heat_delta
+  uint8_t new_emergency_heat_delta
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -32670,7 +32670,7 @@ sl_status_t dotdot_set_thermostat_emergency_heat_delta(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_emergency_heat_delta,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_thermostat_emergency_heat_delta_undefine_reported(
@@ -32856,7 +32856,7 @@ bool dotdot_is_supported_thermostat_ac_capacity(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_thermostat_ac_capacity(
+uint16_t dotdot_get_thermostat_ac_capacity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -32867,7 +32867,7 @@ int16_t dotdot_get_thermostat_ac_capacity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -32879,7 +32879,7 @@ sl_status_t dotdot_set_thermostat_ac_capacity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_capacity
+  uint16_t new_ac_capacity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -32892,7 +32892,7 @@ sl_status_t dotdot_set_thermostat_ac_capacity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_capacity,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_thermostat_ac_capacity_undefine_reported(
@@ -34136,7 +34136,7 @@ bool dotdot_is_supported_dehumidification_control_relative_humidity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_dehumidification_control_relative_humidity(
+uint8_t dotdot_get_dehumidification_control_relative_humidity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -34147,7 +34147,7 @@ int8_t dotdot_get_dehumidification_control_relative_humidity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -34159,7 +34159,7 @@ sl_status_t dotdot_set_dehumidification_control_relative_humidity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_relative_humidity
+  uint8_t new_relative_humidity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -34172,7 +34172,7 @@ sl_status_t dotdot_set_dehumidification_control_relative_humidity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_relative_humidity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_dehumidification_control_relative_humidity_undefine_reported(
@@ -34247,7 +34247,7 @@ bool dotdot_is_supported_dehumidification_control_dehumidification_cooling(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_dehumidification_control_dehumidification_cooling(
+uint8_t dotdot_get_dehumidification_control_dehumidification_cooling(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -34258,7 +34258,7 @@ int8_t dotdot_get_dehumidification_control_dehumidification_cooling(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -34270,7 +34270,7 @@ sl_status_t dotdot_set_dehumidification_control_dehumidification_cooling(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_dehumidification_cooling
+  uint8_t new_dehumidification_cooling
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -34283,7 +34283,7 @@ sl_status_t dotdot_set_dehumidification_control_dehumidification_cooling(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dehumidification_cooling,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_dehumidification_control_dehumidification_cooling_undefine_reported(
@@ -34358,7 +34358,7 @@ bool dotdot_is_supported_dehumidification_control_rh_dehumidification_setpoint(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_dehumidification_control_rh_dehumidification_setpoint(
+uint8_t dotdot_get_dehumidification_control_rh_dehumidification_setpoint(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -34369,7 +34369,7 @@ int8_t dotdot_get_dehumidification_control_rh_dehumidification_setpoint(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -34381,7 +34381,7 @@ sl_status_t dotdot_set_dehumidification_control_rh_dehumidification_setpoint(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_rh_dehumidification_setpoint
+  uint8_t new_rh_dehumidification_setpoint
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -34394,7 +34394,7 @@ sl_status_t dotdot_set_dehumidification_control_rh_dehumidification_setpoint(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rh_dehumidification_setpoint,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_dehumidification_control_rh_dehumidification_setpoint_undefine_reported(
@@ -34691,7 +34691,7 @@ bool dotdot_is_supported_dehumidification_control_dehumidification_hysteresis(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_dehumidification_control_dehumidification_hysteresis(
+uint8_t dotdot_get_dehumidification_control_dehumidification_hysteresis(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -34702,7 +34702,7 @@ int8_t dotdot_get_dehumidification_control_dehumidification_hysteresis(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -34714,7 +34714,7 @@ sl_status_t dotdot_set_dehumidification_control_dehumidification_hysteresis(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_dehumidification_hysteresis
+  uint8_t new_dehumidification_hysteresis
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -34727,7 +34727,7 @@ sl_status_t dotdot_set_dehumidification_control_dehumidification_hysteresis(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dehumidification_hysteresis,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_dehumidification_control_dehumidification_hysteresis_undefine_reported(
@@ -34802,7 +34802,7 @@ bool dotdot_is_supported_dehumidification_control_dehumidification_max_cool(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_dehumidification_control_dehumidification_max_cool(
+uint8_t dotdot_get_dehumidification_control_dehumidification_max_cool(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -34813,7 +34813,7 @@ int8_t dotdot_get_dehumidification_control_dehumidification_max_cool(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -34825,7 +34825,7 @@ sl_status_t dotdot_set_dehumidification_control_dehumidification_max_cool(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_dehumidification_max_cool
+  uint8_t new_dehumidification_max_cool
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -34838,7 +34838,7 @@ sl_status_t dotdot_set_dehumidification_control_dehumidification_max_cool(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dehumidification_max_cool,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_dehumidification_control_dehumidification_max_cool_undefine_reported(
@@ -35455,7 +35455,7 @@ bool dotdot_is_supported_color_control_current_hue(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_current_hue(
+uint8_t dotdot_get_color_control_current_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -35466,7 +35466,7 @@ int8_t dotdot_get_color_control_current_hue(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -35478,7 +35478,7 @@ sl_status_t dotdot_set_color_control_current_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_hue
+  uint8_t new_current_hue
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -35491,7 +35491,7 @@ sl_status_t dotdot_set_color_control_current_hue(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_hue,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_current_hue_undefine_reported(
@@ -35566,7 +35566,7 @@ bool dotdot_is_supported_color_control_current_saturation(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_current_saturation(
+uint8_t dotdot_get_color_control_current_saturation(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -35577,7 +35577,7 @@ int8_t dotdot_get_color_control_current_saturation(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -35589,7 +35589,7 @@ sl_status_t dotdot_set_color_control_current_saturation(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_saturation
+  uint8_t new_current_saturation
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -35602,7 +35602,7 @@ sl_status_t dotdot_set_color_control_current_saturation(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_saturation,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_current_saturation_undefine_reported(
@@ -35677,7 +35677,7 @@ bool dotdot_is_supported_color_control_remaining_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_remaining_time(
+uint16_t dotdot_get_color_control_remaining_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -35688,7 +35688,7 @@ int16_t dotdot_get_color_control_remaining_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -35700,7 +35700,7 @@ sl_status_t dotdot_set_color_control_remaining_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_remaining_time
+  uint16_t new_remaining_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -35713,7 +35713,7 @@ sl_status_t dotdot_set_color_control_remaining_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_remaining_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_remaining_time_undefine_reported(
@@ -35788,7 +35788,7 @@ bool dotdot_is_supported_color_control_currentx(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_currentx(
+uint16_t dotdot_get_color_control_currentx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -35799,7 +35799,7 @@ int16_t dotdot_get_color_control_currentx(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -35811,7 +35811,7 @@ sl_status_t dotdot_set_color_control_currentx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_currentx
+  uint16_t new_currentx
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -35824,7 +35824,7 @@ sl_status_t dotdot_set_color_control_currentx(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_currentx,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_currentx_undefine_reported(
@@ -35899,7 +35899,7 @@ bool dotdot_is_supported_color_control_currenty(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_currenty(
+uint16_t dotdot_get_color_control_currenty(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -35910,7 +35910,7 @@ int16_t dotdot_get_color_control_currenty(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -35922,7 +35922,7 @@ sl_status_t dotdot_set_color_control_currenty(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_currenty
+  uint16_t new_currenty
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -35935,7 +35935,7 @@ sl_status_t dotdot_set_color_control_currenty(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_currenty,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_currenty_undefine_reported(
@@ -36233,7 +36233,7 @@ bool dotdot_is_supported_color_control_color_temperature_mireds(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_temperature_mireds(
+uint16_t dotdot_get_color_control_color_temperature_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -36244,7 +36244,7 @@ int16_t dotdot_get_color_control_color_temperature_mireds(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -36256,7 +36256,7 @@ sl_status_t dotdot_set_color_control_color_temperature_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_temperature_mireds
+  uint16_t new_color_temperature_mireds
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -36269,7 +36269,7 @@ sl_status_t dotdot_set_color_control_color_temperature_mireds(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_temperature_mireds,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_temperature_mireds_undefine_reported(
@@ -36566,7 +36566,7 @@ bool dotdot_is_supported_color_control_number_of_primaries(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_number_of_primaries(
+uint8_t dotdot_get_color_control_number_of_primaries(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -36577,7 +36577,7 @@ int8_t dotdot_get_color_control_number_of_primaries(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -36589,7 +36589,7 @@ sl_status_t dotdot_set_color_control_number_of_primaries(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_primaries
+  uint8_t new_number_of_primaries
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -36602,7 +36602,7 @@ sl_status_t dotdot_set_color_control_number_of_primaries(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_primaries,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_number_of_primaries_undefine_reported(
@@ -36677,7 +36677,7 @@ bool dotdot_is_supported_color_control_primary1x(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary1x(
+uint16_t dotdot_get_color_control_primary1x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -36688,7 +36688,7 @@ int16_t dotdot_get_color_control_primary1x(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -36700,7 +36700,7 @@ sl_status_t dotdot_set_color_control_primary1x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary1x
+  uint16_t new_primary1x
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -36713,7 +36713,7 @@ sl_status_t dotdot_set_color_control_primary1x(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary1x,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary1x_undefine_reported(
@@ -36788,7 +36788,7 @@ bool dotdot_is_supported_color_control_primary1y(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary1y(
+uint16_t dotdot_get_color_control_primary1y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -36799,7 +36799,7 @@ int16_t dotdot_get_color_control_primary1y(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -36811,7 +36811,7 @@ sl_status_t dotdot_set_color_control_primary1y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary1y
+  uint16_t new_primary1y
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -36824,7 +36824,7 @@ sl_status_t dotdot_set_color_control_primary1y(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary1y,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary1y_undefine_reported(
@@ -36899,7 +36899,7 @@ bool dotdot_is_supported_color_control_primary1_intensity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_primary1_intensity(
+uint8_t dotdot_get_color_control_primary1_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -36910,7 +36910,7 @@ int8_t dotdot_get_color_control_primary1_intensity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -36922,7 +36922,7 @@ sl_status_t dotdot_set_color_control_primary1_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary1_intensity
+  uint8_t new_primary1_intensity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -36935,7 +36935,7 @@ sl_status_t dotdot_set_color_control_primary1_intensity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary1_intensity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_primary1_intensity_undefine_reported(
@@ -37010,7 +37010,7 @@ bool dotdot_is_supported_color_control_primary2x(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary2x(
+uint16_t dotdot_get_color_control_primary2x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -37021,7 +37021,7 @@ int16_t dotdot_get_color_control_primary2x(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -37033,7 +37033,7 @@ sl_status_t dotdot_set_color_control_primary2x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary2x
+  uint16_t new_primary2x
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -37046,7 +37046,7 @@ sl_status_t dotdot_set_color_control_primary2x(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary2x,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary2x_undefine_reported(
@@ -37121,7 +37121,7 @@ bool dotdot_is_supported_color_control_primary2y(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary2y(
+uint16_t dotdot_get_color_control_primary2y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -37132,7 +37132,7 @@ int16_t dotdot_get_color_control_primary2y(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -37144,7 +37144,7 @@ sl_status_t dotdot_set_color_control_primary2y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary2y
+  uint16_t new_primary2y
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -37157,7 +37157,7 @@ sl_status_t dotdot_set_color_control_primary2y(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary2y,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary2y_undefine_reported(
@@ -37232,7 +37232,7 @@ bool dotdot_is_supported_color_control_primary2_intensity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_primary2_intensity(
+uint8_t dotdot_get_color_control_primary2_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -37243,7 +37243,7 @@ int8_t dotdot_get_color_control_primary2_intensity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -37255,7 +37255,7 @@ sl_status_t dotdot_set_color_control_primary2_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary2_intensity
+  uint8_t new_primary2_intensity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -37268,7 +37268,7 @@ sl_status_t dotdot_set_color_control_primary2_intensity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary2_intensity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_primary2_intensity_undefine_reported(
@@ -37343,7 +37343,7 @@ bool dotdot_is_supported_color_control_primary3x(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary3x(
+uint16_t dotdot_get_color_control_primary3x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -37354,7 +37354,7 @@ int16_t dotdot_get_color_control_primary3x(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -37366,7 +37366,7 @@ sl_status_t dotdot_set_color_control_primary3x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary3x
+  uint16_t new_primary3x
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -37379,7 +37379,7 @@ sl_status_t dotdot_set_color_control_primary3x(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary3x,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary3x_undefine_reported(
@@ -37454,7 +37454,7 @@ bool dotdot_is_supported_color_control_primary3y(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary3y(
+uint16_t dotdot_get_color_control_primary3y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -37465,7 +37465,7 @@ int16_t dotdot_get_color_control_primary3y(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -37477,7 +37477,7 @@ sl_status_t dotdot_set_color_control_primary3y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary3y
+  uint16_t new_primary3y
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -37490,7 +37490,7 @@ sl_status_t dotdot_set_color_control_primary3y(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary3y,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary3y_undefine_reported(
@@ -37565,7 +37565,7 @@ bool dotdot_is_supported_color_control_primary3_intensity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_primary3_intensity(
+uint8_t dotdot_get_color_control_primary3_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -37576,7 +37576,7 @@ int8_t dotdot_get_color_control_primary3_intensity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -37588,7 +37588,7 @@ sl_status_t dotdot_set_color_control_primary3_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary3_intensity
+  uint8_t new_primary3_intensity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -37601,7 +37601,7 @@ sl_status_t dotdot_set_color_control_primary3_intensity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary3_intensity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_primary3_intensity_undefine_reported(
@@ -37676,7 +37676,7 @@ bool dotdot_is_supported_color_control_primary4x(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary4x(
+uint16_t dotdot_get_color_control_primary4x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -37687,7 +37687,7 @@ int16_t dotdot_get_color_control_primary4x(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -37699,7 +37699,7 @@ sl_status_t dotdot_set_color_control_primary4x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary4x
+  uint16_t new_primary4x
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -37712,7 +37712,7 @@ sl_status_t dotdot_set_color_control_primary4x(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary4x,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary4x_undefine_reported(
@@ -37787,7 +37787,7 @@ bool dotdot_is_supported_color_control_primary4y(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary4y(
+uint16_t dotdot_get_color_control_primary4y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -37798,7 +37798,7 @@ int16_t dotdot_get_color_control_primary4y(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -37810,7 +37810,7 @@ sl_status_t dotdot_set_color_control_primary4y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary4y
+  uint16_t new_primary4y
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -37823,7 +37823,7 @@ sl_status_t dotdot_set_color_control_primary4y(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary4y,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary4y_undefine_reported(
@@ -37898,7 +37898,7 @@ bool dotdot_is_supported_color_control_primary4_intensity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_primary4_intensity(
+uint8_t dotdot_get_color_control_primary4_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -37909,7 +37909,7 @@ int8_t dotdot_get_color_control_primary4_intensity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -37921,7 +37921,7 @@ sl_status_t dotdot_set_color_control_primary4_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary4_intensity
+  uint8_t new_primary4_intensity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -37934,7 +37934,7 @@ sl_status_t dotdot_set_color_control_primary4_intensity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary4_intensity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_primary4_intensity_undefine_reported(
@@ -38009,7 +38009,7 @@ bool dotdot_is_supported_color_control_primary5x(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary5x(
+uint16_t dotdot_get_color_control_primary5x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -38020,7 +38020,7 @@ int16_t dotdot_get_color_control_primary5x(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -38032,7 +38032,7 @@ sl_status_t dotdot_set_color_control_primary5x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary5x
+  uint16_t new_primary5x
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -38045,7 +38045,7 @@ sl_status_t dotdot_set_color_control_primary5x(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary5x,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary5x_undefine_reported(
@@ -38120,7 +38120,7 @@ bool dotdot_is_supported_color_control_primary5y(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary5y(
+uint16_t dotdot_get_color_control_primary5y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -38131,7 +38131,7 @@ int16_t dotdot_get_color_control_primary5y(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -38143,7 +38143,7 @@ sl_status_t dotdot_set_color_control_primary5y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary5y
+  uint16_t new_primary5y
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -38156,7 +38156,7 @@ sl_status_t dotdot_set_color_control_primary5y(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary5y,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary5y_undefine_reported(
@@ -38231,7 +38231,7 @@ bool dotdot_is_supported_color_control_primary5_intensity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_primary5_intensity(
+uint8_t dotdot_get_color_control_primary5_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -38242,7 +38242,7 @@ int8_t dotdot_get_color_control_primary5_intensity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -38254,7 +38254,7 @@ sl_status_t dotdot_set_color_control_primary5_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary5_intensity
+  uint8_t new_primary5_intensity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -38267,7 +38267,7 @@ sl_status_t dotdot_set_color_control_primary5_intensity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary5_intensity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_primary5_intensity_undefine_reported(
@@ -38342,7 +38342,7 @@ bool dotdot_is_supported_color_control_primary6x(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary6x(
+uint16_t dotdot_get_color_control_primary6x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -38353,7 +38353,7 @@ int16_t dotdot_get_color_control_primary6x(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -38365,7 +38365,7 @@ sl_status_t dotdot_set_color_control_primary6x(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary6x
+  uint16_t new_primary6x
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -38378,7 +38378,7 @@ sl_status_t dotdot_set_color_control_primary6x(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary6x,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary6x_undefine_reported(
@@ -38453,7 +38453,7 @@ bool dotdot_is_supported_color_control_primary6y(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_primary6y(
+uint16_t dotdot_get_color_control_primary6y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -38464,7 +38464,7 @@ int16_t dotdot_get_color_control_primary6y(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -38476,7 +38476,7 @@ sl_status_t dotdot_set_color_control_primary6y(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_primary6y
+  uint16_t new_primary6y
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -38489,7 +38489,7 @@ sl_status_t dotdot_set_color_control_primary6y(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary6y,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_primary6y_undefine_reported(
@@ -38564,7 +38564,7 @@ bool dotdot_is_supported_color_control_primary6_intensity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_primary6_intensity(
+uint8_t dotdot_get_color_control_primary6_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -38575,7 +38575,7 @@ int8_t dotdot_get_color_control_primary6_intensity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -38587,7 +38587,7 @@ sl_status_t dotdot_set_color_control_primary6_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_primary6_intensity
+  uint8_t new_primary6_intensity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -38600,7 +38600,7 @@ sl_status_t dotdot_set_color_control_primary6_intensity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_primary6_intensity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_primary6_intensity_undefine_reported(
@@ -38675,7 +38675,7 @@ bool dotdot_is_supported_color_control_white_pointx(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_white_pointx(
+uint16_t dotdot_get_color_control_white_pointx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -38686,7 +38686,7 @@ int16_t dotdot_get_color_control_white_pointx(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -38698,7 +38698,7 @@ sl_status_t dotdot_set_color_control_white_pointx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_white_pointx
+  uint16_t new_white_pointx
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -38711,7 +38711,7 @@ sl_status_t dotdot_set_color_control_white_pointx(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_white_pointx,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_white_pointx_undefine_reported(
@@ -38786,7 +38786,7 @@ bool dotdot_is_supported_color_control_white_pointy(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_white_pointy(
+uint16_t dotdot_get_color_control_white_pointy(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -38797,7 +38797,7 @@ int16_t dotdot_get_color_control_white_pointy(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -38809,7 +38809,7 @@ sl_status_t dotdot_set_color_control_white_pointy(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_white_pointy
+  uint16_t new_white_pointy
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -38822,7 +38822,7 @@ sl_status_t dotdot_set_color_control_white_pointy(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_white_pointy,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_white_pointy_undefine_reported(
@@ -38897,7 +38897,7 @@ bool dotdot_is_supported_color_control_color_pointrx(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_pointrx(
+uint16_t dotdot_get_color_control_color_pointrx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -38908,7 +38908,7 @@ int16_t dotdot_get_color_control_color_pointrx(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -38920,7 +38920,7 @@ sl_status_t dotdot_set_color_control_color_pointrx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointrx
+  uint16_t new_color_pointrx
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -38933,7 +38933,7 @@ sl_status_t dotdot_set_color_control_color_pointrx(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_pointrx,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_pointrx_undefine_reported(
@@ -39008,7 +39008,7 @@ bool dotdot_is_supported_color_control_color_pointry(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_pointry(
+uint16_t dotdot_get_color_control_color_pointry(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -39019,7 +39019,7 @@ int16_t dotdot_get_color_control_color_pointry(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -39031,7 +39031,7 @@ sl_status_t dotdot_set_color_control_color_pointry(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointry
+  uint16_t new_color_pointry
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -39044,7 +39044,7 @@ sl_status_t dotdot_set_color_control_color_pointry(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_pointry,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_pointry_undefine_reported(
@@ -39119,7 +39119,7 @@ bool dotdot_is_supported_color_control_color_pointr_intensity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_color_pointr_intensity(
+uint8_t dotdot_get_color_control_color_pointr_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -39130,7 +39130,7 @@ int8_t dotdot_get_color_control_color_pointr_intensity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -39142,7 +39142,7 @@ sl_status_t dotdot_set_color_control_color_pointr_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_pointr_intensity
+  uint8_t new_color_pointr_intensity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -39155,7 +39155,7 @@ sl_status_t dotdot_set_color_control_color_pointr_intensity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_pointr_intensity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_color_pointr_intensity_undefine_reported(
@@ -39230,7 +39230,7 @@ bool dotdot_is_supported_color_control_color_pointgx(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_pointgx(
+uint16_t dotdot_get_color_control_color_pointgx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -39241,7 +39241,7 @@ int16_t dotdot_get_color_control_color_pointgx(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -39253,7 +39253,7 @@ sl_status_t dotdot_set_color_control_color_pointgx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointgx
+  uint16_t new_color_pointgx
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -39266,7 +39266,7 @@ sl_status_t dotdot_set_color_control_color_pointgx(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_pointgx,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_pointgx_undefine_reported(
@@ -39341,7 +39341,7 @@ bool dotdot_is_supported_color_control_color_pointgy(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_pointgy(
+uint16_t dotdot_get_color_control_color_pointgy(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -39352,7 +39352,7 @@ int16_t dotdot_get_color_control_color_pointgy(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -39364,7 +39364,7 @@ sl_status_t dotdot_set_color_control_color_pointgy(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointgy
+  uint16_t new_color_pointgy
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -39377,7 +39377,7 @@ sl_status_t dotdot_set_color_control_color_pointgy(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_pointgy,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_pointgy_undefine_reported(
@@ -39452,7 +39452,7 @@ bool dotdot_is_supported_color_control_color_pointg_intensity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_color_pointg_intensity(
+uint8_t dotdot_get_color_control_color_pointg_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -39463,7 +39463,7 @@ int8_t dotdot_get_color_control_color_pointg_intensity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -39475,7 +39475,7 @@ sl_status_t dotdot_set_color_control_color_pointg_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_pointg_intensity
+  uint8_t new_color_pointg_intensity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -39488,7 +39488,7 @@ sl_status_t dotdot_set_color_control_color_pointg_intensity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_pointg_intensity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_color_pointg_intensity_undefine_reported(
@@ -39563,7 +39563,7 @@ bool dotdot_is_supported_color_control_color_pointbx(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_pointbx(
+uint16_t dotdot_get_color_control_color_pointbx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -39574,7 +39574,7 @@ int16_t dotdot_get_color_control_color_pointbx(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -39586,7 +39586,7 @@ sl_status_t dotdot_set_color_control_color_pointbx(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointbx
+  uint16_t new_color_pointbx
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -39599,7 +39599,7 @@ sl_status_t dotdot_set_color_control_color_pointbx(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_pointbx,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_pointbx_undefine_reported(
@@ -39674,7 +39674,7 @@ bool dotdot_is_supported_color_control_color_pointby(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_pointby(
+uint16_t dotdot_get_color_control_color_pointby(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -39685,7 +39685,7 @@ int16_t dotdot_get_color_control_color_pointby(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -39697,7 +39697,7 @@ sl_status_t dotdot_set_color_control_color_pointby(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_pointby
+  uint16_t new_color_pointby
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -39710,7 +39710,7 @@ sl_status_t dotdot_set_color_control_color_pointby(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_pointby,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_pointby_undefine_reported(
@@ -39785,7 +39785,7 @@ bool dotdot_is_supported_color_control_color_pointb_intensity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_color_pointb_intensity(
+uint8_t dotdot_get_color_control_color_pointb_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -39796,7 +39796,7 @@ int8_t dotdot_get_color_control_color_pointb_intensity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -39808,7 +39808,7 @@ sl_status_t dotdot_set_color_control_color_pointb_intensity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_pointb_intensity
+  uint8_t new_color_pointb_intensity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -39821,7 +39821,7 @@ sl_status_t dotdot_set_color_control_color_pointb_intensity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_pointb_intensity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_color_pointb_intensity_undefine_reported(
@@ -39896,7 +39896,7 @@ bool dotdot_is_supported_color_control_enhanced_current_hue(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_enhanced_current_hue(
+uint16_t dotdot_get_color_control_enhanced_current_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -39907,7 +39907,7 @@ int16_t dotdot_get_color_control_enhanced_current_hue(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -39919,7 +39919,7 @@ sl_status_t dotdot_set_color_control_enhanced_current_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_enhanced_current_hue
+  uint16_t new_enhanced_current_hue
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -39932,7 +39932,7 @@ sl_status_t dotdot_set_color_control_enhanced_current_hue(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_enhanced_current_hue,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_enhanced_current_hue_undefine_reported(
@@ -40118,7 +40118,7 @@ bool dotdot_is_supported_color_control_color_loop_active(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_color_loop_active(
+uint8_t dotdot_get_color_control_color_loop_active(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -40129,7 +40129,7 @@ int8_t dotdot_get_color_control_color_loop_active(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -40141,7 +40141,7 @@ sl_status_t dotdot_set_color_control_color_loop_active(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_loop_active
+  uint8_t new_color_loop_active
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -40154,7 +40154,7 @@ sl_status_t dotdot_set_color_control_color_loop_active(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_loop_active,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_color_loop_active_undefine_reported(
@@ -40229,7 +40229,7 @@ bool dotdot_is_supported_color_control_color_loop_direction(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_color_control_color_loop_direction(
+uint8_t dotdot_get_color_control_color_loop_direction(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -40240,7 +40240,7 @@ int8_t dotdot_get_color_control_color_loop_direction(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -40252,7 +40252,7 @@ sl_status_t dotdot_set_color_control_color_loop_direction(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_color_loop_direction
+  uint8_t new_color_loop_direction
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -40265,7 +40265,7 @@ sl_status_t dotdot_set_color_control_color_loop_direction(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_loop_direction,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_color_control_color_loop_direction_undefine_reported(
@@ -40340,7 +40340,7 @@ bool dotdot_is_supported_color_control_color_loop_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_loop_time(
+uint16_t dotdot_get_color_control_color_loop_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -40351,7 +40351,7 @@ int16_t dotdot_get_color_control_color_loop_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -40363,7 +40363,7 @@ sl_status_t dotdot_set_color_control_color_loop_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_loop_time
+  uint16_t new_color_loop_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -40376,7 +40376,7 @@ sl_status_t dotdot_set_color_control_color_loop_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_loop_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_loop_time_undefine_reported(
@@ -40451,7 +40451,7 @@ bool dotdot_is_supported_color_control_color_loop_start_enhanced_hue(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_loop_start_enhanced_hue(
+uint16_t dotdot_get_color_control_color_loop_start_enhanced_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -40462,7 +40462,7 @@ int16_t dotdot_get_color_control_color_loop_start_enhanced_hue(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -40474,7 +40474,7 @@ sl_status_t dotdot_set_color_control_color_loop_start_enhanced_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_loop_start_enhanced_hue
+  uint16_t new_color_loop_start_enhanced_hue
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -40487,7 +40487,7 @@ sl_status_t dotdot_set_color_control_color_loop_start_enhanced_hue(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_loop_start_enhanced_hue,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_loop_start_enhanced_hue_undefine_reported(
@@ -40562,7 +40562,7 @@ bool dotdot_is_supported_color_control_color_loop_stored_enhanced_hue(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_loop_stored_enhanced_hue(
+uint16_t dotdot_get_color_control_color_loop_stored_enhanced_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -40573,7 +40573,7 @@ int16_t dotdot_get_color_control_color_loop_stored_enhanced_hue(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -40585,7 +40585,7 @@ sl_status_t dotdot_set_color_control_color_loop_stored_enhanced_hue(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_loop_stored_enhanced_hue
+  uint16_t new_color_loop_stored_enhanced_hue
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -40598,7 +40598,7 @@ sl_status_t dotdot_set_color_control_color_loop_stored_enhanced_hue(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_loop_stored_enhanced_hue,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_loop_stored_enhanced_hue_undefine_reported(
@@ -40784,7 +40784,7 @@ bool dotdot_is_supported_color_control_color_temp_physical_min_mireds(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_temp_physical_min_mireds(
+uint16_t dotdot_get_color_control_color_temp_physical_min_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -40795,7 +40795,7 @@ int16_t dotdot_get_color_control_color_temp_physical_min_mireds(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -40807,7 +40807,7 @@ sl_status_t dotdot_set_color_control_color_temp_physical_min_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_temp_physical_min_mireds
+  uint16_t new_color_temp_physical_min_mireds
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -40820,7 +40820,7 @@ sl_status_t dotdot_set_color_control_color_temp_physical_min_mireds(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_temp_physical_min_mireds,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_temp_physical_min_mireds_undefine_reported(
@@ -40895,7 +40895,7 @@ bool dotdot_is_supported_color_control_color_temp_physical_max_mireds(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_color_temp_physical_max_mireds(
+uint16_t dotdot_get_color_control_color_temp_physical_max_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -40906,7 +40906,7 @@ int16_t dotdot_get_color_control_color_temp_physical_max_mireds(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -40918,7 +40918,7 @@ sl_status_t dotdot_set_color_control_color_temp_physical_max_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_color_temp_physical_max_mireds
+  uint16_t new_color_temp_physical_max_mireds
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -40931,7 +40931,7 @@ sl_status_t dotdot_set_color_control_color_temp_physical_max_mireds(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_color_temp_physical_max_mireds,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_color_temp_physical_max_mireds_undefine_reported(
@@ -41006,7 +41006,7 @@ bool dotdot_is_supported_color_control_couple_color_temp_to_level_min_mireds(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_couple_color_temp_to_level_min_mireds(
+uint16_t dotdot_get_color_control_couple_color_temp_to_level_min_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -41017,7 +41017,7 @@ int16_t dotdot_get_color_control_couple_color_temp_to_level_min_mireds(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -41029,7 +41029,7 @@ sl_status_t dotdot_set_color_control_couple_color_temp_to_level_min_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_couple_color_temp_to_level_min_mireds
+  uint16_t new_couple_color_temp_to_level_min_mireds
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -41042,7 +41042,7 @@ sl_status_t dotdot_set_color_control_couple_color_temp_to_level_min_mireds(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_couple_color_temp_to_level_min_mireds,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_couple_color_temp_to_level_min_mireds_undefine_reported(
@@ -41117,7 +41117,7 @@ bool dotdot_is_supported_color_control_start_up_color_temperature_mireds(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_color_control_start_up_color_temperature_mireds(
+uint16_t dotdot_get_color_control_start_up_color_temperature_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -41128,7 +41128,7 @@ int16_t dotdot_get_color_control_start_up_color_temperature_mireds(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -41140,7 +41140,7 @@ sl_status_t dotdot_set_color_control_start_up_color_temperature_mireds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_start_up_color_temperature_mireds
+  uint16_t new_start_up_color_temperature_mireds
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -41153,7 +41153,7 @@ sl_status_t dotdot_set_color_control_start_up_color_temperature_mireds(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_start_up_color_temperature_mireds,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_color_control_start_up_color_temperature_mireds_undefine_reported(
@@ -41442,7 +41442,7 @@ bool dotdot_is_supported_ballast_configuration_physical_min_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ballast_configuration_physical_min_level(
+uint8_t dotdot_get_ballast_configuration_physical_min_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -41453,7 +41453,7 @@ int8_t dotdot_get_ballast_configuration_physical_min_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -41465,7 +41465,7 @@ sl_status_t dotdot_set_ballast_configuration_physical_min_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_physical_min_level
+  uint8_t new_physical_min_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -41478,7 +41478,7 @@ sl_status_t dotdot_set_ballast_configuration_physical_min_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_physical_min_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ballast_configuration_physical_min_level_undefine_reported(
@@ -41553,7 +41553,7 @@ bool dotdot_is_supported_ballast_configuration_physical_max_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ballast_configuration_physical_max_level(
+uint8_t dotdot_get_ballast_configuration_physical_max_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -41564,7 +41564,7 @@ int8_t dotdot_get_ballast_configuration_physical_max_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -41576,7 +41576,7 @@ sl_status_t dotdot_set_ballast_configuration_physical_max_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_physical_max_level
+  uint8_t new_physical_max_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -41589,7 +41589,7 @@ sl_status_t dotdot_set_ballast_configuration_physical_max_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_physical_max_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ballast_configuration_physical_max_level_undefine_reported(
@@ -41775,7 +41775,7 @@ bool dotdot_is_supported_ballast_configuration_min_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ballast_configuration_min_level(
+uint8_t dotdot_get_ballast_configuration_min_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -41786,7 +41786,7 @@ int8_t dotdot_get_ballast_configuration_min_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -41798,7 +41798,7 @@ sl_status_t dotdot_set_ballast_configuration_min_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_min_level
+  uint8_t new_min_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -41811,7 +41811,7 @@ sl_status_t dotdot_set_ballast_configuration_min_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ballast_configuration_min_level_undefine_reported(
@@ -41886,7 +41886,7 @@ bool dotdot_is_supported_ballast_configuration_max_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ballast_configuration_max_level(
+uint8_t dotdot_get_ballast_configuration_max_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -41897,7 +41897,7 @@ int8_t dotdot_get_ballast_configuration_max_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -41909,7 +41909,7 @@ sl_status_t dotdot_set_ballast_configuration_max_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_max_level
+  uint8_t new_max_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -41922,7 +41922,7 @@ sl_status_t dotdot_set_ballast_configuration_max_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ballast_configuration_max_level_undefine_reported(
@@ -41997,7 +41997,7 @@ bool dotdot_is_supported_ballast_configuration_power_on_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ballast_configuration_power_on_level(
+uint8_t dotdot_get_ballast_configuration_power_on_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -42008,7 +42008,7 @@ int8_t dotdot_get_ballast_configuration_power_on_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -42020,7 +42020,7 @@ sl_status_t dotdot_set_ballast_configuration_power_on_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_power_on_level
+  uint8_t new_power_on_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -42033,7 +42033,7 @@ sl_status_t dotdot_set_ballast_configuration_power_on_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_power_on_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ballast_configuration_power_on_level_undefine_reported(
@@ -42108,7 +42108,7 @@ bool dotdot_is_supported_ballast_configuration_power_on_fade_time(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_ballast_configuration_power_on_fade_time(
+uint16_t dotdot_get_ballast_configuration_power_on_fade_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -42119,7 +42119,7 @@ int16_t dotdot_get_ballast_configuration_power_on_fade_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -42131,7 +42131,7 @@ sl_status_t dotdot_set_ballast_configuration_power_on_fade_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_power_on_fade_time
+  uint16_t new_power_on_fade_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -42144,7 +42144,7 @@ sl_status_t dotdot_set_ballast_configuration_power_on_fade_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_power_on_fade_time,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_ballast_configuration_power_on_fade_time_undefine_reported(
@@ -42219,7 +42219,7 @@ bool dotdot_is_supported_ballast_configuration_intrinsic_ballast_factor(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ballast_configuration_intrinsic_ballast_factor(
+uint8_t dotdot_get_ballast_configuration_intrinsic_ballast_factor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -42230,7 +42230,7 @@ int8_t dotdot_get_ballast_configuration_intrinsic_ballast_factor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -42242,7 +42242,7 @@ sl_status_t dotdot_set_ballast_configuration_intrinsic_ballast_factor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_intrinsic_ballast_factor
+  uint8_t new_intrinsic_ballast_factor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -42255,7 +42255,7 @@ sl_status_t dotdot_set_ballast_configuration_intrinsic_ballast_factor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_intrinsic_ballast_factor,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ballast_configuration_intrinsic_ballast_factor_undefine_reported(
@@ -42330,7 +42330,7 @@ bool dotdot_is_supported_ballast_configuration_ballast_factor_adjustment(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ballast_configuration_ballast_factor_adjustment(
+uint8_t dotdot_get_ballast_configuration_ballast_factor_adjustment(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -42341,7 +42341,7 @@ int8_t dotdot_get_ballast_configuration_ballast_factor_adjustment(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -42353,7 +42353,7 @@ sl_status_t dotdot_set_ballast_configuration_ballast_factor_adjustment(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_ballast_factor_adjustment
+  uint8_t new_ballast_factor_adjustment
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -42366,7 +42366,7 @@ sl_status_t dotdot_set_ballast_configuration_ballast_factor_adjustment(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ballast_factor_adjustment,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ballast_configuration_ballast_factor_adjustment_undefine_reported(
@@ -42441,7 +42441,7 @@ bool dotdot_is_supported_ballast_configuration_lamp_quantity(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ballast_configuration_lamp_quantity(
+uint8_t dotdot_get_ballast_configuration_lamp_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -42452,7 +42452,7 @@ int8_t dotdot_get_ballast_configuration_lamp_quantity(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -42464,7 +42464,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_quantity(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_lamp_quantity
+  uint8_t new_lamp_quantity
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -42477,7 +42477,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_quantity(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_lamp_quantity,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ballast_configuration_lamp_quantity_undefine_reported(
@@ -42776,7 +42776,7 @@ bool dotdot_is_supported_ballast_configuration_lamp_rated_hours(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_ballast_configuration_lamp_rated_hours(
+uint32_t dotdot_get_ballast_configuration_lamp_rated_hours(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -42787,7 +42787,7 @@ int32_t dotdot_get_ballast_configuration_lamp_rated_hours(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -42799,7 +42799,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_rated_hours(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lamp_rated_hours
+  uint32_t new_lamp_rated_hours
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -42812,7 +42812,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_rated_hours(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_lamp_rated_hours,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_ballast_configuration_lamp_rated_hours_undefine_reported(
@@ -42887,7 +42887,7 @@ bool dotdot_is_supported_ballast_configuration_lamp_burn_hours(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_ballast_configuration_lamp_burn_hours(
+uint32_t dotdot_get_ballast_configuration_lamp_burn_hours(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -42898,7 +42898,7 @@ int32_t dotdot_get_ballast_configuration_lamp_burn_hours(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -42910,7 +42910,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lamp_burn_hours
+  uint32_t new_lamp_burn_hours
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -42923,7 +42923,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_lamp_burn_hours,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_ballast_configuration_lamp_burn_hours_undefine_reported(
@@ -43109,7 +43109,7 @@ bool dotdot_is_supported_ballast_configuration_lamp_burn_hours_trip_point(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_ballast_configuration_lamp_burn_hours_trip_point(
+uint32_t dotdot_get_ballast_configuration_lamp_burn_hours_trip_point(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -43120,7 +43120,7 @@ int32_t dotdot_get_ballast_configuration_lamp_burn_hours_trip_point(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -43132,7 +43132,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours_trip_point(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_lamp_burn_hours_trip_point
+  uint32_t new_lamp_burn_hours_trip_point
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -43145,7 +43145,7 @@ sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours_trip_point(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_lamp_burn_hours_trip_point,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_ballast_configuration_lamp_burn_hours_trip_point_undefine_reported(
@@ -43323,7 +43323,7 @@ bool dotdot_is_supported_illuminance_measurement_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_illuminance_measurement_measured_value(
+uint16_t dotdot_get_illuminance_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -43334,7 +43334,7 @@ int16_t dotdot_get_illuminance_measurement_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -43346,7 +43346,7 @@ sl_status_t dotdot_set_illuminance_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -43359,7 +43359,7 @@ sl_status_t dotdot_set_illuminance_measurement_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_illuminance_measurement_measured_value_undefine_reported(
@@ -43434,7 +43434,7 @@ bool dotdot_is_supported_illuminance_measurement_min_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_illuminance_measurement_min_measured_value(
+uint16_t dotdot_get_illuminance_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -43445,7 +43445,7 @@ int16_t dotdot_get_illuminance_measurement_min_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -43457,7 +43457,7 @@ sl_status_t dotdot_set_illuminance_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -43470,7 +43470,7 @@ sl_status_t dotdot_set_illuminance_measurement_min_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_illuminance_measurement_min_measured_value_undefine_reported(
@@ -43545,7 +43545,7 @@ bool dotdot_is_supported_illuminance_measurement_max_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_illuminance_measurement_max_measured_value(
+uint16_t dotdot_get_illuminance_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -43556,7 +43556,7 @@ int16_t dotdot_get_illuminance_measurement_max_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -43568,7 +43568,7 @@ sl_status_t dotdot_set_illuminance_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -43581,7 +43581,7 @@ sl_status_t dotdot_set_illuminance_measurement_max_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_illuminance_measurement_max_measured_value_undefine_reported(
@@ -43656,7 +43656,7 @@ bool dotdot_is_supported_illuminance_measurement_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_illuminance_measurement_tolerance(
+uint16_t dotdot_get_illuminance_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -43667,7 +43667,7 @@ int16_t dotdot_get_illuminance_measurement_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -43679,7 +43679,7 @@ sl_status_t dotdot_set_illuminance_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -43692,7 +43692,7 @@ sl_status_t dotdot_set_illuminance_measurement_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_illuminance_measurement_tolerance_undefine_reported(
@@ -44134,7 +44134,7 @@ bool dotdot_is_supported_illuminance_level_sensing_illuminance_target_level(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_illuminance_level_sensing_illuminance_target_level(
+uint16_t dotdot_get_illuminance_level_sensing_illuminance_target_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -44145,7 +44145,7 @@ int16_t dotdot_get_illuminance_level_sensing_illuminance_target_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -44157,7 +44157,7 @@ sl_status_t dotdot_set_illuminance_level_sensing_illuminance_target_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_illuminance_target_level
+  uint16_t new_illuminance_target_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -44170,7 +44170,7 @@ sl_status_t dotdot_set_illuminance_level_sensing_illuminance_target_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_illuminance_target_level,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_illuminance_level_sensing_illuminance_target_level_undefine_reported(
@@ -44609,7 +44609,7 @@ bool dotdot_is_supported_temperature_measurement_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_temperature_measurement_tolerance(
+uint16_t dotdot_get_temperature_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -44620,7 +44620,7 @@ int16_t dotdot_get_temperature_measurement_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -44632,7 +44632,7 @@ sl_status_t dotdot_set_temperature_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -44645,7 +44645,7 @@ sl_status_t dotdot_set_temperature_measurement_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_temperature_measurement_tolerance_undefine_reported(
@@ -45084,7 +45084,7 @@ bool dotdot_is_supported_pressure_measurement_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_pressure_measurement_tolerance(
+uint16_t dotdot_get_pressure_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -45095,7 +45095,7 @@ int16_t dotdot_get_pressure_measurement_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -45107,7 +45107,7 @@ sl_status_t dotdot_set_pressure_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -45120,7 +45120,7 @@ sl_status_t dotdot_set_pressure_measurement_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_pressure_measurement_tolerance_undefine_reported(
@@ -45528,7 +45528,7 @@ bool dotdot_is_supported_pressure_measurement_scaled_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_pressure_measurement_scaled_tolerance(
+uint16_t dotdot_get_pressure_measurement_scaled_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -45539,7 +45539,7 @@ int16_t dotdot_get_pressure_measurement_scaled_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -45551,7 +45551,7 @@ sl_status_t dotdot_set_pressure_measurement_scaled_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_scaled_tolerance
+  uint16_t new_scaled_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -45564,7 +45564,7 @@ sl_status_t dotdot_set_pressure_measurement_scaled_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_scaled_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_pressure_measurement_scaled_tolerance_undefine_reported(
@@ -45796,7 +45796,7 @@ bool dotdot_is_supported_flow_measurement_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_flow_measurement_measured_value(
+uint16_t dotdot_get_flow_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -45807,7 +45807,7 @@ int16_t dotdot_get_flow_measurement_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -45819,7 +45819,7 @@ sl_status_t dotdot_set_flow_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -45832,7 +45832,7 @@ sl_status_t dotdot_set_flow_measurement_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_flow_measurement_measured_value_undefine_reported(
@@ -45907,7 +45907,7 @@ bool dotdot_is_supported_flow_measurement_min_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_flow_measurement_min_measured_value(
+uint16_t dotdot_get_flow_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -45918,7 +45918,7 @@ int16_t dotdot_get_flow_measurement_min_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -45930,7 +45930,7 @@ sl_status_t dotdot_set_flow_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -45943,7 +45943,7 @@ sl_status_t dotdot_set_flow_measurement_min_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_flow_measurement_min_measured_value_undefine_reported(
@@ -46018,7 +46018,7 @@ bool dotdot_is_supported_flow_measurement_max_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_flow_measurement_max_measured_value(
+uint16_t dotdot_get_flow_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -46029,7 +46029,7 @@ int16_t dotdot_get_flow_measurement_max_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -46041,7 +46041,7 @@ sl_status_t dotdot_set_flow_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -46054,7 +46054,7 @@ sl_status_t dotdot_set_flow_measurement_max_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_flow_measurement_max_measured_value_undefine_reported(
@@ -46129,7 +46129,7 @@ bool dotdot_is_supported_flow_measurement_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_flow_measurement_tolerance(
+uint16_t dotdot_get_flow_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -46140,7 +46140,7 @@ int16_t dotdot_get_flow_measurement_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -46152,7 +46152,7 @@ sl_status_t dotdot_set_flow_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -46165,7 +46165,7 @@ sl_status_t dotdot_set_flow_measurement_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_flow_measurement_tolerance_undefine_reported(
@@ -46271,7 +46271,7 @@ bool dotdot_is_supported_relativity_humidity_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_relativity_humidity_measured_value(
+uint16_t dotdot_get_relativity_humidity_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -46282,7 +46282,7 @@ int16_t dotdot_get_relativity_humidity_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -46294,7 +46294,7 @@ sl_status_t dotdot_set_relativity_humidity_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -46307,7 +46307,7 @@ sl_status_t dotdot_set_relativity_humidity_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_relativity_humidity_measured_value_undefine_reported(
@@ -46382,7 +46382,7 @@ bool dotdot_is_supported_relativity_humidity_min_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_relativity_humidity_min_measured_value(
+uint16_t dotdot_get_relativity_humidity_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -46393,7 +46393,7 @@ int16_t dotdot_get_relativity_humidity_min_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -46405,7 +46405,7 @@ sl_status_t dotdot_set_relativity_humidity_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -46418,7 +46418,7 @@ sl_status_t dotdot_set_relativity_humidity_min_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_relativity_humidity_min_measured_value_undefine_reported(
@@ -46493,7 +46493,7 @@ bool dotdot_is_supported_relativity_humidity_max_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_relativity_humidity_max_measured_value(
+uint16_t dotdot_get_relativity_humidity_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -46504,7 +46504,7 @@ int16_t dotdot_get_relativity_humidity_max_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -46516,7 +46516,7 @@ sl_status_t dotdot_set_relativity_humidity_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -46529,7 +46529,7 @@ sl_status_t dotdot_set_relativity_humidity_max_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_relativity_humidity_max_measured_value_undefine_reported(
@@ -46604,7 +46604,7 @@ bool dotdot_is_supported_relativity_humidity_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_relativity_humidity_tolerance(
+uint16_t dotdot_get_relativity_humidity_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -46615,7 +46615,7 @@ int16_t dotdot_get_relativity_humidity_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -46627,7 +46627,7 @@ sl_status_t dotdot_set_relativity_humidity_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -46640,7 +46640,7 @@ sl_status_t dotdot_set_relativity_humidity_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_relativity_humidity_tolerance_undefine_reported(
@@ -47079,7 +47079,7 @@ bool dotdot_is_supported_occupancy_sensing_pir_occupied_to_unoccupied_delay(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_occupancy_sensing_pir_occupied_to_unoccupied_delay(
+uint16_t dotdot_get_occupancy_sensing_pir_occupied_to_unoccupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -47090,7 +47090,7 @@ int16_t dotdot_get_occupancy_sensing_pir_occupied_to_unoccupied_delay(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -47102,7 +47102,7 @@ sl_status_t dotdot_set_occupancy_sensing_pir_occupied_to_unoccupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_pir_occupied_to_unoccupied_delay
+  uint16_t new_pir_occupied_to_unoccupied_delay
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -47115,7 +47115,7 @@ sl_status_t dotdot_set_occupancy_sensing_pir_occupied_to_unoccupied_delay(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_pir_occupied_to_unoccupied_delay,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_undefine_reported(
@@ -47190,7 +47190,7 @@ bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_delay(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_delay(
+uint16_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -47201,7 +47201,7 @@ int16_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_delay(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -47213,7 +47213,7 @@ sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_pir_unoccupied_to_occupied_delay
+  uint16_t new_pir_unoccupied_to_occupied_delay
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -47226,7 +47226,7 @@ sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_delay(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_pir_unoccupied_to_occupied_delay,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_undefine_reported(
@@ -47301,7 +47301,7 @@ bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
+uint8_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -47312,7 +47312,7 @@ int8_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -47324,7 +47324,7 @@ sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_pir_unoccupied_to_occupied_threshold
+  uint8_t new_pir_unoccupied_to_occupied_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -47337,7 +47337,7 @@ sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_pir_unoccupied_to_occupied_threshold,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_undefine_reported(
@@ -47412,7 +47412,7 @@ bool dotdot_is_supported_occupancy_sensing_ultrasonic_occupied_to_unoccupied_del
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
+uint16_t dotdot_get_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -47423,7 +47423,7 @@ int16_t dotdot_get_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -47435,7 +47435,7 @@ sl_status_t dotdot_set_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ultrasonic_occupied_to_unoccupied_delay
+  uint16_t new_ultrasonic_occupied_to_unoccupied_delay
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -47448,7 +47448,7 @@ sl_status_t dotdot_set_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ultrasonic_occupied_to_unoccupied_delay,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_undefine_reported(
@@ -47523,7 +47523,7 @@ bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_del
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
+uint16_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -47534,7 +47534,7 @@ int16_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -47546,7 +47546,7 @@ sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ultrasonic_unoccupied_to_occupied_delay
+  uint16_t new_ultrasonic_unoccupied_to_occupied_delay
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -47559,7 +47559,7 @@ sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ultrasonic_unoccupied_to_occupied_delay,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_undefine_reported(
@@ -47634,7 +47634,7 @@ bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_thr
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
+uint8_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -47645,7 +47645,7 @@ int8_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -47657,7 +47657,7 @@ sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_thres
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_ultrasonic_unoccupied_to_occupied_threshold
+  uint8_t new_ultrasonic_unoccupied_to_occupied_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -47670,7 +47670,7 @@ sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_thres
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ultrasonic_unoccupied_to_occupied_threshold,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_undefine_reported(
@@ -47745,7 +47745,7 @@ bool dotdot_is_supported_occupancy_sensing_physical_contact_occupied_to_unoccupi
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
+uint16_t dotdot_get_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -47756,7 +47756,7 @@ int16_t dotdot_get_occupancy_sensing_physical_contact_occupied_to_unoccupied_del
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -47768,7 +47768,7 @@ sl_status_t dotdot_set_occupancy_sensing_physical_contact_occupied_to_unoccupied
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_contact_occupied_to_unoccupied_delay
+  uint16_t new_physical_contact_occupied_to_unoccupied_delay
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -47781,7 +47781,7 @@ sl_status_t dotdot_set_occupancy_sensing_physical_contact_occupied_to_unoccupied
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_physical_contact_occupied_to_unoccupied_delay,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_undefine_reported(
@@ -47856,7 +47856,7 @@ bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupi
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
+uint16_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -47867,7 +47867,7 @@ int16_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_del
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -47879,7 +47879,7 @@ sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_physical_contact_unoccupied_to_occupied_delay
+  uint16_t new_physical_contact_unoccupied_to_occupied_delay
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -47892,7 +47892,7 @@ sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_physical_contact_unoccupied_to_occupied_delay,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_undefine_reported(
@@ -47967,7 +47967,7 @@ bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupi
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
+uint8_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -47978,7 +47978,7 @@ int8_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_thre
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -47990,7 +47990,7 @@ sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_physical_contact_unoccupied_to_occupied_threshold
+  uint8_t new_physical_contact_unoccupied_to_occupied_threshold
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -48003,7 +48003,7 @@ sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_physical_contact_unoccupied_to_occupied_threshold,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_undefine_reported(
@@ -48160,7 +48160,7 @@ bool dotdot_is_supported_soil_moisture_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_soil_moisture_measured_value(
+uint16_t dotdot_get_soil_moisture_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -48171,7 +48171,7 @@ int16_t dotdot_get_soil_moisture_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -48183,7 +48183,7 @@ sl_status_t dotdot_set_soil_moisture_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -48196,7 +48196,7 @@ sl_status_t dotdot_set_soil_moisture_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_soil_moisture_measured_value_undefine_reported(
@@ -48271,7 +48271,7 @@ bool dotdot_is_supported_soil_moisture_min_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_soil_moisture_min_measured_value(
+uint16_t dotdot_get_soil_moisture_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -48282,7 +48282,7 @@ int16_t dotdot_get_soil_moisture_min_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -48294,7 +48294,7 @@ sl_status_t dotdot_set_soil_moisture_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -48307,7 +48307,7 @@ sl_status_t dotdot_set_soil_moisture_min_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_soil_moisture_min_measured_value_undefine_reported(
@@ -48382,7 +48382,7 @@ bool dotdot_is_supported_soil_moisture_max_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_soil_moisture_max_measured_value(
+uint16_t dotdot_get_soil_moisture_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -48393,7 +48393,7 @@ int16_t dotdot_get_soil_moisture_max_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -48405,7 +48405,7 @@ sl_status_t dotdot_set_soil_moisture_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -48418,7 +48418,7 @@ sl_status_t dotdot_set_soil_moisture_max_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_soil_moisture_max_measured_value_undefine_reported(
@@ -48493,7 +48493,7 @@ bool dotdot_is_supported_soil_moisture_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_soil_moisture_tolerance(
+uint16_t dotdot_get_soil_moisture_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -48504,7 +48504,7 @@ int16_t dotdot_get_soil_moisture_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -48516,7 +48516,7 @@ sl_status_t dotdot_set_soil_moisture_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -48529,7 +48529,7 @@ sl_status_t dotdot_set_soil_moisture_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_soil_moisture_tolerance_undefine_reported(
@@ -48635,7 +48635,7 @@ bool dotdot_is_supported_ph_measurement_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_ph_measurement_measured_value(
+uint16_t dotdot_get_ph_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -48646,7 +48646,7 @@ int16_t dotdot_get_ph_measurement_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -48658,7 +48658,7 @@ sl_status_t dotdot_set_ph_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -48671,7 +48671,7 @@ sl_status_t dotdot_set_ph_measurement_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_ph_measurement_measured_value_undefine_reported(
@@ -48746,7 +48746,7 @@ bool dotdot_is_supported_ph_measurement_min_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_ph_measurement_min_measured_value(
+uint16_t dotdot_get_ph_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -48757,7 +48757,7 @@ int16_t dotdot_get_ph_measurement_min_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -48769,7 +48769,7 @@ sl_status_t dotdot_set_ph_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -48782,7 +48782,7 @@ sl_status_t dotdot_set_ph_measurement_min_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_ph_measurement_min_measured_value_undefine_reported(
@@ -48857,7 +48857,7 @@ bool dotdot_is_supported_ph_measurement_max_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_ph_measurement_max_measured_value(
+uint16_t dotdot_get_ph_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -48868,7 +48868,7 @@ int16_t dotdot_get_ph_measurement_max_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -48880,7 +48880,7 @@ sl_status_t dotdot_set_ph_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -48893,7 +48893,7 @@ sl_status_t dotdot_set_ph_measurement_max_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_ph_measurement_max_measured_value_undefine_reported(
@@ -48968,7 +48968,7 @@ bool dotdot_is_supported_ph_measurement_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_ph_measurement_tolerance(
+uint16_t dotdot_get_ph_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -48979,7 +48979,7 @@ int16_t dotdot_get_ph_measurement_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -48991,7 +48991,7 @@ sl_status_t dotdot_set_ph_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -49004,7 +49004,7 @@ sl_status_t dotdot_set_ph_measurement_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_ph_measurement_tolerance_undefine_reported(
@@ -49110,7 +49110,7 @@ bool dotdot_is_supported_electrical_conductivity_measurement_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_conductivity_measurement_measured_value(
+uint16_t dotdot_get_electrical_conductivity_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -49121,7 +49121,7 @@ int16_t dotdot_get_electrical_conductivity_measurement_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -49133,7 +49133,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -49146,7 +49146,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_conductivity_measurement_measured_value_undefine_reported(
@@ -49221,7 +49221,7 @@ bool dotdot_is_supported_electrical_conductivity_measurement_min_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_conductivity_measurement_min_measured_value(
+uint16_t dotdot_get_electrical_conductivity_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -49232,7 +49232,7 @@ int16_t dotdot_get_electrical_conductivity_measurement_min_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -49244,7 +49244,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -49257,7 +49257,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_min_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_conductivity_measurement_min_measured_value_undefine_reported(
@@ -49332,7 +49332,7 @@ bool dotdot_is_supported_electrical_conductivity_measurement_max_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_conductivity_measurement_max_measured_value(
+uint16_t dotdot_get_electrical_conductivity_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -49343,7 +49343,7 @@ int16_t dotdot_get_electrical_conductivity_measurement_max_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -49355,7 +49355,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -49368,7 +49368,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_max_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_conductivity_measurement_max_measured_value_undefine_reported(
@@ -49443,7 +49443,7 @@ bool dotdot_is_supported_electrical_conductivity_measurement_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_conductivity_measurement_tolerance(
+uint16_t dotdot_get_electrical_conductivity_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -49454,7 +49454,7 @@ int16_t dotdot_get_electrical_conductivity_measurement_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -49466,7 +49466,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -49479,7 +49479,7 @@ sl_status_t dotdot_set_electrical_conductivity_measurement_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_conductivity_measurement_tolerance_undefine_reported(
@@ -49585,7 +49585,7 @@ bool dotdot_is_supported_wind_speed_measurement_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_wind_speed_measurement_measured_value(
+uint16_t dotdot_get_wind_speed_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -49596,7 +49596,7 @@ int16_t dotdot_get_wind_speed_measurement_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -49608,7 +49608,7 @@ sl_status_t dotdot_set_wind_speed_measurement_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_measured_value
+  uint16_t new_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -49621,7 +49621,7 @@ sl_status_t dotdot_set_wind_speed_measurement_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_wind_speed_measurement_measured_value_undefine_reported(
@@ -49696,7 +49696,7 @@ bool dotdot_is_supported_wind_speed_measurement_min_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_wind_speed_measurement_min_measured_value(
+uint16_t dotdot_get_wind_speed_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -49707,7 +49707,7 @@ int16_t dotdot_get_wind_speed_measurement_min_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -49719,7 +49719,7 @@ sl_status_t dotdot_set_wind_speed_measurement_min_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_min_measured_value
+  uint16_t new_min_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -49732,7 +49732,7 @@ sl_status_t dotdot_set_wind_speed_measurement_min_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_min_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_wind_speed_measurement_min_measured_value_undefine_reported(
@@ -49807,7 +49807,7 @@ bool dotdot_is_supported_wind_speed_measurement_max_measured_value(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_wind_speed_measurement_max_measured_value(
+uint16_t dotdot_get_wind_speed_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -49818,7 +49818,7 @@ int16_t dotdot_get_wind_speed_measurement_max_measured_value(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -49830,7 +49830,7 @@ sl_status_t dotdot_set_wind_speed_measurement_max_measured_value(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_measured_value
+  uint16_t new_max_measured_value
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -49843,7 +49843,7 @@ sl_status_t dotdot_set_wind_speed_measurement_max_measured_value(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_measured_value,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_wind_speed_measurement_max_measured_value_undefine_reported(
@@ -49918,7 +49918,7 @@ bool dotdot_is_supported_wind_speed_measurement_tolerance(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_wind_speed_measurement_tolerance(
+uint16_t dotdot_get_wind_speed_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -49929,7 +49929,7 @@ int16_t dotdot_get_wind_speed_measurement_tolerance(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -49941,7 +49941,7 @@ sl_status_t dotdot_set_wind_speed_measurement_tolerance(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_tolerance
+  uint16_t new_tolerance
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -49954,7 +49954,7 @@ sl_status_t dotdot_set_wind_speed_measurement_tolerance(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_tolerance,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_wind_speed_measurement_tolerance_undefine_reported(
@@ -51929,7 +51929,7 @@ bool dotdot_is_supported_ias_zone_zoneid(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ias_zone_zoneid(
+uint8_t dotdot_get_ias_zone_zoneid(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -51940,7 +51940,7 @@ int8_t dotdot_get_ias_zone_zoneid(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -51952,7 +51952,7 @@ sl_status_t dotdot_set_ias_zone_zoneid(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_zoneid
+  uint8_t new_zoneid
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -51965,7 +51965,7 @@ sl_status_t dotdot_set_ias_zone_zoneid(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_zoneid,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ias_zone_zoneid_undefine_reported(
@@ -52040,7 +52040,7 @@ bool dotdot_is_supported_ias_zone_number_of_zone_sensitivity_levels_supported(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ias_zone_number_of_zone_sensitivity_levels_supported(
+uint8_t dotdot_get_ias_zone_number_of_zone_sensitivity_levels_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -52051,7 +52051,7 @@ int8_t dotdot_get_ias_zone_number_of_zone_sensitivity_levels_supported(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -52063,7 +52063,7 @@ sl_status_t dotdot_set_ias_zone_number_of_zone_sensitivity_levels_supported(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_number_of_zone_sensitivity_levels_supported
+  uint8_t new_number_of_zone_sensitivity_levels_supported
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -52076,7 +52076,7 @@ sl_status_t dotdot_set_ias_zone_number_of_zone_sensitivity_levels_supported(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_zone_sensitivity_levels_supported,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_undefine_reported(
@@ -52151,7 +52151,7 @@ bool dotdot_is_supported_ias_zone_current_zone_sensitivity_level(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_ias_zone_current_zone_sensitivity_level(
+uint8_t dotdot_get_ias_zone_current_zone_sensitivity_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -52162,7 +52162,7 @@ int8_t dotdot_get_ias_zone_current_zone_sensitivity_level(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -52174,7 +52174,7 @@ sl_status_t dotdot_set_ias_zone_current_zone_sensitivity_level(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_current_zone_sensitivity_level
+  uint8_t new_current_zone_sensitivity_level
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -52187,7 +52187,7 @@ sl_status_t dotdot_set_ias_zone_current_zone_sensitivity_level(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_zone_sensitivity_level,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_ias_zone_current_zone_sensitivity_level_undefine_reported(
@@ -52308,7 +52308,7 @@ bool dotdot_is_supported_iaswd_max_duration(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_iaswd_max_duration(
+uint16_t dotdot_get_iaswd_max_duration(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -52319,7 +52319,7 @@ int16_t dotdot_get_iaswd_max_duration(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -52331,7 +52331,7 @@ sl_status_t dotdot_set_iaswd_max_duration(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_max_duration
+  uint16_t new_max_duration
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -52344,7 +52344,7 @@ sl_status_t dotdot_set_iaswd_max_duration(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_max_duration,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_iaswd_max_duration_undefine_reported(
@@ -52444,7 +52444,7 @@ bool dotdot_is_supported_metering_current_summation_delivered(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_metering_current_summation_delivered(
+uint64_t dotdot_get_metering_current_summation_delivered(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -52455,7 +52455,7 @@ int64_t dotdot_get_metering_current_summation_delivered(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -52467,7 +52467,7 @@ sl_status_t dotdot_set_metering_current_summation_delivered(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_summation_delivered
+  uint64_t new_current_summation_delivered
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -52480,7 +52480,7 @@ sl_status_t dotdot_set_metering_current_summation_delivered(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_summation_delivered,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_metering_current_summation_delivered_undefine_reported(
@@ -52555,7 +52555,7 @@ bool dotdot_is_supported_metering_current_summation_received(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_metering_current_summation_received(
+uint64_t dotdot_get_metering_current_summation_received(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -52566,7 +52566,7 @@ int64_t dotdot_get_metering_current_summation_received(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -52578,7 +52578,7 @@ sl_status_t dotdot_set_metering_current_summation_received(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_summation_received
+  uint64_t new_current_summation_received
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -52591,7 +52591,7 @@ sl_status_t dotdot_set_metering_current_summation_received(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_summation_received,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_metering_current_summation_received_undefine_reported(
@@ -52666,7 +52666,7 @@ bool dotdot_is_supported_metering_current_max_demand_delivered(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_metering_current_max_demand_delivered(
+uint64_t dotdot_get_metering_current_max_demand_delivered(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -52677,7 +52677,7 @@ int64_t dotdot_get_metering_current_max_demand_delivered(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -52689,7 +52689,7 @@ sl_status_t dotdot_set_metering_current_max_demand_delivered(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_max_demand_delivered
+  uint64_t new_current_max_demand_delivered
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -52702,7 +52702,7 @@ sl_status_t dotdot_set_metering_current_max_demand_delivered(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_max_demand_delivered,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_metering_current_max_demand_delivered_undefine_reported(
@@ -52999,7 +52999,7 @@ bool dotdot_is_supported_metering_reading_snap_shot_time(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_metering_reading_snap_shot_time(
+uint32_t dotdot_get_metering_reading_snap_shot_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -53010,7 +53010,7 @@ uint8_t dotdot_get_metering_reading_snap_shot_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);
 
-  uint8_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -53022,7 +53022,7 @@ sl_status_t dotdot_set_metering_reading_snap_shot_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_reading_snap_shot_time
+  uint32_t new_reading_snap_shot_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -53035,7 +53035,7 @@ sl_status_t dotdot_set_metering_reading_snap_shot_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_reading_snap_shot_time,
-                                                  sizeof(uint8_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_metering_reading_snap_shot_time_undefine_reported(
@@ -53110,7 +53110,7 @@ bool dotdot_is_supported_metering_current_max_demand_delivered_time(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_metering_current_max_demand_delivered_time(
+uint32_t dotdot_get_metering_current_max_demand_delivered_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -53121,7 +53121,7 @@ uint8_t dotdot_get_metering_current_max_demand_delivered_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);
 
-  uint8_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -53133,7 +53133,7 @@ sl_status_t dotdot_set_metering_current_max_demand_delivered_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_current_max_demand_delivered_time
+  uint32_t new_current_max_demand_delivered_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -53146,7 +53146,7 @@ sl_status_t dotdot_set_metering_current_max_demand_delivered_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_max_demand_delivered_time,
-                                                  sizeof(uint8_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_metering_current_max_demand_delivered_time_undefine_reported(
@@ -53221,7 +53221,7 @@ bool dotdot_is_supported_metering_current_max_demand_received_time(
   return attribute_store_node_exists(node);
 }
 
-uint8_t dotdot_get_metering_current_max_demand_received_time(
+uint32_t dotdot_get_metering_current_max_demand_received_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -53232,7 +53232,7 @@ uint8_t dotdot_get_metering_current_max_demand_received_time(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);
 
-  uint8_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -53244,7 +53244,7 @@ sl_status_t dotdot_set_metering_current_max_demand_received_time(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  uint8_t new_current_max_demand_received_time
+  uint32_t new_current_max_demand_received_time
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -53257,7 +53257,7 @@ sl_status_t dotdot_set_metering_current_max_demand_received_time(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_max_demand_received_time,
-                                                  sizeof(uint8_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_metering_current_max_demand_received_time_undefine_reported(
@@ -53332,7 +53332,7 @@ bool dotdot_is_supported_metering_default_update_period(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_metering_default_update_period(
+uint8_t dotdot_get_metering_default_update_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -53343,7 +53343,7 @@ int8_t dotdot_get_metering_default_update_period(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -53355,7 +53355,7 @@ sl_status_t dotdot_set_metering_default_update_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_default_update_period
+  uint8_t new_default_update_period
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -53368,7 +53368,7 @@ sl_status_t dotdot_set_metering_default_update_period(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_default_update_period,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_metering_default_update_period_undefine_reported(
@@ -53554,7 +53554,7 @@ bool dotdot_is_supported_metering_current_inlet_energy_carrier_summation(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_metering_current_inlet_energy_carrier_summation(
+uint64_t dotdot_get_metering_current_inlet_energy_carrier_summation(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -53565,7 +53565,7 @@ int64_t dotdot_get_metering_current_inlet_energy_carrier_summation(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -53577,7 +53577,7 @@ sl_status_t dotdot_set_metering_current_inlet_energy_carrier_summation(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_inlet_energy_carrier_summation
+  uint64_t new_current_inlet_energy_carrier_summation
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -53590,7 +53590,7 @@ sl_status_t dotdot_set_metering_current_inlet_energy_carrier_summation(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_inlet_energy_carrier_summation,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_metering_current_inlet_energy_carrier_summation_undefine_reported(
@@ -53665,7 +53665,7 @@ bool dotdot_is_supported_metering_current_outlet_energy_carrier_summation(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_metering_current_outlet_energy_carrier_summation(
+uint64_t dotdot_get_metering_current_outlet_energy_carrier_summation(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -53676,7 +53676,7 @@ int64_t dotdot_get_metering_current_outlet_energy_carrier_summation(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -53688,7 +53688,7 @@ sl_status_t dotdot_set_metering_current_outlet_energy_carrier_summation(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_current_outlet_energy_carrier_summation
+  uint64_t new_current_outlet_energy_carrier_summation
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -53701,7 +53701,7 @@ sl_status_t dotdot_set_metering_current_outlet_energy_carrier_summation(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_current_outlet_energy_carrier_summation,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_metering_current_outlet_energy_carrier_summation_undefine_reported(
@@ -54109,7 +54109,7 @@ bool dotdot_is_supported_metering_multiplier(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_metering_multiplier(
+uint32_t dotdot_get_metering_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -54120,7 +54120,7 @@ int32_t dotdot_get_metering_multiplier(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -54132,7 +54132,7 @@ sl_status_t dotdot_set_metering_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_multiplier
+  uint32_t new_multiplier
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -54145,7 +54145,7 @@ sl_status_t dotdot_set_metering_multiplier(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_multiplier,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_metering_multiplier_undefine_reported(
@@ -54220,7 +54220,7 @@ bool dotdot_is_supported_metering_divisor(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_metering_divisor(
+uint32_t dotdot_get_metering_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -54231,7 +54231,7 @@ int32_t dotdot_get_metering_divisor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -54243,7 +54243,7 @@ sl_status_t dotdot_set_metering_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_divisor
+  uint32_t new_divisor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -54256,7 +54256,7 @@ sl_status_t dotdot_set_metering_divisor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_divisor,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_metering_divisor_undefine_reported(
@@ -56537,7 +56537,7 @@ bool dotdot_is_supported_electrical_measurement_dc_voltage_multiplier(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_dc_voltage_multiplier(
+uint16_t dotdot_get_electrical_measurement_dc_voltage_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -56548,7 +56548,7 @@ int16_t dotdot_get_electrical_measurement_dc_voltage_multiplier(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -56560,7 +56560,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_voltage_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_voltage_multiplier
+  uint16_t new_dc_voltage_multiplier
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -56573,7 +56573,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_voltage_multiplier(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dc_voltage_multiplier,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_dc_voltage_multiplier_undefine_reported(
@@ -56648,7 +56648,7 @@ bool dotdot_is_supported_electrical_measurement_dc_voltage_divisor(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_dc_voltage_divisor(
+uint16_t dotdot_get_electrical_measurement_dc_voltage_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -56659,7 +56659,7 @@ int16_t dotdot_get_electrical_measurement_dc_voltage_divisor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -56671,7 +56671,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_voltage_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_voltage_divisor
+  uint16_t new_dc_voltage_divisor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -56684,7 +56684,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_voltage_divisor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dc_voltage_divisor,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_dc_voltage_divisor_undefine_reported(
@@ -56759,7 +56759,7 @@ bool dotdot_is_supported_electrical_measurement_dc_current_multiplier(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_dc_current_multiplier(
+uint16_t dotdot_get_electrical_measurement_dc_current_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -56770,7 +56770,7 @@ int16_t dotdot_get_electrical_measurement_dc_current_multiplier(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -56782,7 +56782,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_current_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_current_multiplier
+  uint16_t new_dc_current_multiplier
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -56795,7 +56795,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_current_multiplier(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dc_current_multiplier,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_dc_current_multiplier_undefine_reported(
@@ -56870,7 +56870,7 @@ bool dotdot_is_supported_electrical_measurement_dc_current_divisor(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_dc_current_divisor(
+uint16_t dotdot_get_electrical_measurement_dc_current_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -56881,7 +56881,7 @@ int16_t dotdot_get_electrical_measurement_dc_current_divisor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -56893,7 +56893,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_current_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_current_divisor
+  uint16_t new_dc_current_divisor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -56906,7 +56906,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_current_divisor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dc_current_divisor,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_dc_current_divisor_undefine_reported(
@@ -56981,7 +56981,7 @@ bool dotdot_is_supported_electrical_measurement_dc_power_multiplier(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_dc_power_multiplier(
+uint16_t dotdot_get_electrical_measurement_dc_power_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -56992,7 +56992,7 @@ int16_t dotdot_get_electrical_measurement_dc_power_multiplier(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -57004,7 +57004,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_power_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_power_multiplier
+  uint16_t new_dc_power_multiplier
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -57017,7 +57017,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_power_multiplier(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dc_power_multiplier,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_dc_power_multiplier_undefine_reported(
@@ -57092,7 +57092,7 @@ bool dotdot_is_supported_electrical_measurement_dc_power_divisor(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_dc_power_divisor(
+uint16_t dotdot_get_electrical_measurement_dc_power_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -57103,7 +57103,7 @@ int16_t dotdot_get_electrical_measurement_dc_power_divisor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -57115,7 +57115,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_power_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_dc_power_divisor
+  uint16_t new_dc_power_divisor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -57128,7 +57128,7 @@ sl_status_t dotdot_set_electrical_measurement_dc_power_divisor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dc_power_divisor,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_dc_power_divisor_undefine_reported(
@@ -57203,7 +57203,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_frequency(
+uint16_t dotdot_get_electrical_measurement_ac_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -57214,7 +57214,7 @@ int16_t dotdot_get_electrical_measurement_ac_frequency(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -57226,7 +57226,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency
+  uint16_t new_ac_frequency
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -57239,7 +57239,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_frequency,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_frequency_undefine_reported(
@@ -57314,7 +57314,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency_min(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_frequency_min(
+uint16_t dotdot_get_electrical_measurement_ac_frequency_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -57325,7 +57325,7 @@ int16_t dotdot_get_electrical_measurement_ac_frequency_min(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -57337,7 +57337,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency_min
+  uint16_t new_ac_frequency_min
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -57350,7 +57350,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_min(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_frequency_min,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_frequency_min_undefine_reported(
@@ -57425,7 +57425,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency_max(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_frequency_max(
+uint16_t dotdot_get_electrical_measurement_ac_frequency_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -57436,7 +57436,7 @@ int16_t dotdot_get_electrical_measurement_ac_frequency_max(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -57448,7 +57448,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency_max
+  uint16_t new_ac_frequency_max
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -57461,7 +57461,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_max(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_frequency_max,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_frequency_max_undefine_reported(
@@ -57536,7 +57536,7 @@ bool dotdot_is_supported_electrical_measurement_neutral_current(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_neutral_current(
+uint16_t dotdot_get_electrical_measurement_neutral_current(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -57547,7 +57547,7 @@ int16_t dotdot_get_electrical_measurement_neutral_current(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -57559,7 +57559,7 @@ sl_status_t dotdot_set_electrical_measurement_neutral_current(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_neutral_current
+  uint16_t new_neutral_current
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -57572,7 +57572,7 @@ sl_status_t dotdot_set_electrical_measurement_neutral_current(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_neutral_current,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_neutral_current_undefine_reported(
@@ -57869,7 +57869,7 @@ bool dotdot_is_supported_electrical_measurement_total_apparent_power(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_electrical_measurement_total_apparent_power(
+uint32_t dotdot_get_electrical_measurement_total_apparent_power(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -57880,7 +57880,7 @@ int32_t dotdot_get_electrical_measurement_total_apparent_power(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -57892,7 +57892,7 @@ sl_status_t dotdot_set_electrical_measurement_total_apparent_power(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_total_apparent_power
+  uint32_t new_total_apparent_power
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -57905,7 +57905,7 @@ sl_status_t dotdot_set_electrical_measurement_total_apparent_power(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_total_apparent_power,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_electrical_measurement_total_apparent_power_undefine_reported(
@@ -59312,7 +59312,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency_multiplier(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_frequency_multiplier(
+uint16_t dotdot_get_electrical_measurement_ac_frequency_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -59323,7 +59323,7 @@ int16_t dotdot_get_electrical_measurement_ac_frequency_multiplier(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -59335,7 +59335,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency_multiplier
+  uint16_t new_ac_frequency_multiplier
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -59348,7 +59348,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_multiplier(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_frequency_multiplier,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_frequency_multiplier_undefine_reported(
@@ -59423,7 +59423,7 @@ bool dotdot_is_supported_electrical_measurement_ac_frequency_divisor(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_frequency_divisor(
+uint16_t dotdot_get_electrical_measurement_ac_frequency_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -59434,7 +59434,7 @@ int16_t dotdot_get_electrical_measurement_ac_frequency_divisor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -59446,7 +59446,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_frequency_divisor
+  uint16_t new_ac_frequency_divisor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -59459,7 +59459,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_frequency_divisor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_frequency_divisor,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_frequency_divisor_undefine_reported(
@@ -59534,7 +59534,7 @@ bool dotdot_is_supported_electrical_measurement_power_multiplier(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_electrical_measurement_power_multiplier(
+uint32_t dotdot_get_electrical_measurement_power_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -59545,7 +59545,7 @@ int32_t dotdot_get_electrical_measurement_power_multiplier(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -59557,7 +59557,7 @@ sl_status_t dotdot_set_electrical_measurement_power_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_power_multiplier
+  uint32_t new_power_multiplier
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -59570,7 +59570,7 @@ sl_status_t dotdot_set_electrical_measurement_power_multiplier(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_power_multiplier,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_electrical_measurement_power_multiplier_undefine_reported(
@@ -59645,7 +59645,7 @@ bool dotdot_is_supported_electrical_measurement_power_divisor(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_electrical_measurement_power_divisor(
+uint32_t dotdot_get_electrical_measurement_power_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -59656,7 +59656,7 @@ int32_t dotdot_get_electrical_measurement_power_divisor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -59668,7 +59668,7 @@ sl_status_t dotdot_set_electrical_measurement_power_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_power_divisor
+  uint32_t new_power_divisor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -59681,7 +59681,7 @@ sl_status_t dotdot_set_electrical_measurement_power_divisor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_power_divisor,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_electrical_measurement_power_divisor_undefine_reported(
@@ -59978,7 +59978,7 @@ bool dotdot_is_supported_electrical_measurement_line_current(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_line_current(
+uint16_t dotdot_get_electrical_measurement_line_current(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -59989,7 +59989,7 @@ int16_t dotdot_get_electrical_measurement_line_current(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -60001,7 +60001,7 @@ sl_status_t dotdot_set_electrical_measurement_line_current(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_line_current
+  uint16_t new_line_current
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -60014,7 +60014,7 @@ sl_status_t dotdot_set_electrical_measurement_line_current(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_line_current,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_line_current_undefine_reported(
@@ -60311,7 +60311,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage(
+uint16_t dotdot_get_electrical_measurement_rms_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -60322,7 +60322,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -60334,7 +60334,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage
+  uint16_t new_rms_voltage
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -60347,7 +60347,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_undefine_reported(
@@ -60422,7 +60422,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_min(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_min(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -60433,7 +60433,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_min(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -60445,7 +60445,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_min
+  uint16_t new_rms_voltage_min
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -60458,7 +60458,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_min(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_min,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_min_undefine_reported(
@@ -60533,7 +60533,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_max(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_max(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -60544,7 +60544,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_max(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -60556,7 +60556,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_max
+  uint16_t new_rms_voltage_max
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -60569,7 +60569,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_max(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_max,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_max_undefine_reported(
@@ -60644,7 +60644,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_current(
+uint16_t dotdot_get_electrical_measurement_rms_current(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -60655,7 +60655,7 @@ int16_t dotdot_get_electrical_measurement_rms_current(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -60667,7 +60667,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current
+  uint16_t new_rms_current
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -60680,7 +60680,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_current,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_current_undefine_reported(
@@ -60755,7 +60755,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_min(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_current_min(
+uint16_t dotdot_get_electrical_measurement_rms_current_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -60766,7 +60766,7 @@ int16_t dotdot_get_electrical_measurement_rms_current_min(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -60778,7 +60778,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_min(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_min
+  uint16_t new_rms_current_min
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -60791,7 +60791,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_min(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_current_min,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_current_min_undefine_reported(
@@ -60866,7 +60866,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_max(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_current_max(
+uint16_t dotdot_get_electrical_measurement_rms_current_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -60877,7 +60877,7 @@ int16_t dotdot_get_electrical_measurement_rms_current_max(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -60889,7 +60889,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_max(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_max
+  uint16_t new_rms_current_max
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -60902,7 +60902,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_max(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_current_max,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_current_max_undefine_reported(
@@ -61421,7 +61421,7 @@ bool dotdot_is_supported_electrical_measurement_apparent_power(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_apparent_power(
+uint16_t dotdot_get_electrical_measurement_apparent_power(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -61432,7 +61432,7 @@ int16_t dotdot_get_electrical_measurement_apparent_power(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -61444,7 +61444,7 @@ sl_status_t dotdot_set_electrical_measurement_apparent_power(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_apparent_power
+  uint16_t new_apparent_power
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -61457,7 +61457,7 @@ sl_status_t dotdot_set_electrical_measurement_apparent_power(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_apparent_power,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_apparent_power_undefine_reported(
@@ -61643,7 +61643,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period(
+uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -61654,7 +61654,7 @@ int16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -61666,7 +61666,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_pe
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_voltage_measurement_period
+  uint16_t new_average_rms_voltage_measurement_period
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -61679,7 +61679,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_pe
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_rms_voltage_measurement_period,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_undefine_reported(
@@ -61754,7 +61754,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter(
+uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -61765,7 +61765,7 @@ int16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -61777,7 +61777,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_over_voltage_counter
+  uint16_t new_average_rms_over_voltage_counter
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -61790,7 +61790,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_rms_over_voltage_counter,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_undefine_reported(
@@ -61865,7 +61865,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counte
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter(
+uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -61876,7 +61876,7 @@ int16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -61888,7 +61888,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_under_voltage_counter
+  uint16_t new_average_rms_under_voltage_counter
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -61901,7 +61901,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_rms_under_voltage_counter,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_undefine_reported(
@@ -61976,7 +61976,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -61987,7 +61987,7 @@ int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -61999,7 +61999,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_over_voltage_period
+  uint16_t new_rms_extreme_over_voltage_period
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -62012,7 +62012,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_extreme_over_voltage_period,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_undefine_reported(
@@ -62087,7 +62087,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -62098,7 +62098,7 @@ int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -62110,7 +62110,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_under_voltage_period
+  uint16_t new_rms_extreme_under_voltage_period
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -62123,7 +62123,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_extreme_under_voltage_period,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_undefine_reported(
@@ -62198,7 +62198,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_sag_period(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -62209,7 +62209,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_sag_period(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -62221,7 +62221,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_sag_period
+  uint16_t new_rms_voltage_sag_period
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -62234,7 +62234,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_sag_period,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_undefine_reported(
@@ -62309,7 +62309,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_swell_period(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -62320,7 +62320,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_swell_period(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -62332,7 +62332,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_swell_period
+  uint16_t new_rms_voltage_swell_period
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -62345,7 +62345,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_swell_period,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_undefine_reported(
@@ -62420,7 +62420,7 @@ bool dotdot_is_supported_electrical_measurement_ac_voltage_multiplier(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_voltage_multiplier(
+uint16_t dotdot_get_electrical_measurement_ac_voltage_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -62431,7 +62431,7 @@ int16_t dotdot_get_electrical_measurement_ac_voltage_multiplier(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -62443,7 +62443,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_voltage_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_voltage_multiplier
+  uint16_t new_ac_voltage_multiplier
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -62456,7 +62456,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_voltage_multiplier(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_voltage_multiplier,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_voltage_multiplier_undefine_reported(
@@ -62531,7 +62531,7 @@ bool dotdot_is_supported_electrical_measurement_ac_voltage_divisor(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_voltage_divisor(
+uint16_t dotdot_get_electrical_measurement_ac_voltage_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -62542,7 +62542,7 @@ int16_t dotdot_get_electrical_measurement_ac_voltage_divisor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -62554,7 +62554,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_voltage_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_voltage_divisor
+  uint16_t new_ac_voltage_divisor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -62567,7 +62567,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_voltage_divisor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_voltage_divisor,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_voltage_divisor_undefine_reported(
@@ -62642,7 +62642,7 @@ bool dotdot_is_supported_electrical_measurement_ac_current_multiplier(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_current_multiplier(
+uint16_t dotdot_get_electrical_measurement_ac_current_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -62653,7 +62653,7 @@ int16_t dotdot_get_electrical_measurement_ac_current_multiplier(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -62665,7 +62665,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_current_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_current_multiplier
+  uint16_t new_ac_current_multiplier
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -62678,7 +62678,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_current_multiplier(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_current_multiplier,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_current_multiplier_undefine_reported(
@@ -62753,7 +62753,7 @@ bool dotdot_is_supported_electrical_measurement_ac_current_divisor(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_current_divisor(
+uint16_t dotdot_get_electrical_measurement_ac_current_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -62764,7 +62764,7 @@ int16_t dotdot_get_electrical_measurement_ac_current_divisor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -62776,7 +62776,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_current_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_current_divisor
+  uint16_t new_ac_current_divisor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -62789,7 +62789,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_current_divisor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_current_divisor,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_current_divisor_undefine_reported(
@@ -62864,7 +62864,7 @@ bool dotdot_is_supported_electrical_measurement_ac_power_multiplier(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_power_multiplier(
+uint16_t dotdot_get_electrical_measurement_ac_power_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -62875,7 +62875,7 @@ int16_t dotdot_get_electrical_measurement_ac_power_multiplier(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -62887,7 +62887,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_power_multiplier(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_power_multiplier
+  uint16_t new_ac_power_multiplier
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -62900,7 +62900,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_power_multiplier(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_power_multiplier,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_power_multiplier_undefine_reported(
@@ -62975,7 +62975,7 @@ bool dotdot_is_supported_electrical_measurement_ac_power_divisor(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_ac_power_divisor(
+uint16_t dotdot_get_electrical_measurement_ac_power_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -62986,7 +62986,7 @@ int16_t dotdot_get_electrical_measurement_ac_power_divisor(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -62998,7 +62998,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_power_divisor(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_ac_power_divisor
+  uint16_t new_ac_power_divisor
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -63011,7 +63011,7 @@ sl_status_t dotdot_set_electrical_measurement_ac_power_divisor(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_ac_power_divisor,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_ac_power_divisor_undefine_reported(
@@ -64640,7 +64640,7 @@ bool dotdot_is_supported_electrical_measurement_line_current_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_line_current_phb(
+uint16_t dotdot_get_electrical_measurement_line_current_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -64651,7 +64651,7 @@ int16_t dotdot_get_electrical_measurement_line_current_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -64663,7 +64663,7 @@ sl_status_t dotdot_set_electrical_measurement_line_current_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_line_current_phb
+  uint16_t new_line_current_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -64676,7 +64676,7 @@ sl_status_t dotdot_set_electrical_measurement_line_current_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_line_current_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_line_current_phb_undefine_reported(
@@ -64973,7 +64973,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -64984,7 +64984,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -64996,7 +64996,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_phb
+  uint16_t new_rms_voltage_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -65009,7 +65009,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_phb_undefine_reported(
@@ -65084,7 +65084,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_min_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -65095,7 +65095,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_min_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -65107,7 +65107,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_min_phb
+  uint16_t new_rms_voltage_min_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -65120,7 +65120,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_min_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_min_phb_undefine_reported(
@@ -65195,7 +65195,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_max_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -65206,7 +65206,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_max_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -65218,7 +65218,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_max_phb
+  uint16_t new_rms_voltage_max_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -65231,7 +65231,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_max_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_max_phb_undefine_reported(
@@ -65306,7 +65306,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_current_phb(
+uint16_t dotdot_get_electrical_measurement_rms_current_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -65317,7 +65317,7 @@ int16_t dotdot_get_electrical_measurement_rms_current_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -65329,7 +65329,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_phb
+  uint16_t new_rms_current_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -65342,7 +65342,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_current_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_current_phb_undefine_reported(
@@ -65417,7 +65417,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_min_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_current_min_phb(
+uint16_t dotdot_get_electrical_measurement_rms_current_min_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -65428,7 +65428,7 @@ int16_t dotdot_get_electrical_measurement_rms_current_min_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -65440,7 +65440,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_min_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_min_phb
+  uint16_t new_rms_current_min_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -65453,7 +65453,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_min_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_current_min_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_current_min_phb_undefine_reported(
@@ -65528,7 +65528,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_max_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_current_max_phb(
+uint16_t dotdot_get_electrical_measurement_rms_current_max_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -65539,7 +65539,7 @@ int16_t dotdot_get_electrical_measurement_rms_current_max_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -65551,7 +65551,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_max_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_max_phb
+  uint16_t new_rms_current_max_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -65564,7 +65564,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_max_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_current_max_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_current_max_phb_undefine_reported(
@@ -66083,7 +66083,7 @@ bool dotdot_is_supported_electrical_measurement_apparent_power_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_apparent_power_phb(
+uint16_t dotdot_get_electrical_measurement_apparent_power_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -66094,7 +66094,7 @@ int16_t dotdot_get_electrical_measurement_apparent_power_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -66106,7 +66106,7 @@ sl_status_t dotdot_set_electrical_measurement_apparent_power_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_apparent_power_phb
+  uint16_t new_apparent_power_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -66119,7 +66119,7 @@ sl_status_t dotdot_set_electrical_measurement_apparent_power_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_apparent_power_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_apparent_power_phb_undefine_reported(
@@ -66305,7 +66305,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phb(
+uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -66316,7 +66316,7 @@ int16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -66328,7 +66328,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_pe
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_voltage_measurement_period_phb
+  uint16_t new_average_rms_voltage_measurement_period_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -66341,7 +66341,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_pe
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_rms_voltage_measurement_period_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_undefine_reported(
@@ -66416,7 +66416,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phb(
+uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -66427,7 +66427,7 @@ int16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -66439,7 +66439,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_p
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_over_voltage_counter_phb
+  uint16_t new_average_rms_over_voltage_counter_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -66452,7 +66452,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_p
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_rms_over_voltage_counter_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_undefine_reported(
@@ -66527,7 +66527,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counte
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phb(
+uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -66538,7 +66538,7 @@ int16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -66550,7 +66550,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_under_voltage_counter_phb
+  uint16_t new_average_rms_under_voltage_counter_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -66563,7 +66563,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_rms_under_voltage_counter_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_undefine_reported(
@@ -66638,7 +66638,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phb(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -66649,7 +66649,7 @@ int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -66661,7 +66661,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_ph
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_over_voltage_period_phb
+  uint16_t new_rms_extreme_over_voltage_period_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -66674,7 +66674,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_ph
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_extreme_over_voltage_period_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_undefine_reported(
@@ -66749,7 +66749,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phb(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -66760,7 +66760,7 @@ int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -66772,7 +66772,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_p
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_under_voltage_period_phb
+  uint16_t new_rms_extreme_under_voltage_period_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -66785,7 +66785,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_p
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_extreme_under_voltage_period_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_undefine_reported(
@@ -66860,7 +66860,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -66871,7 +66871,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -66883,7 +66883,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_sag_period_phb
+  uint16_t new_rms_voltage_sag_period_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -66896,7 +66896,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_sag_period_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phb_undefine_reported(
@@ -66971,7 +66971,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phb(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phb(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -66982,7 +66982,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phb(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -66994,7 +66994,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phb(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_swell_period_phb
+  uint16_t new_rms_voltage_swell_period_phb
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -67007,7 +67007,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phb(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_swell_period_phb,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phb_undefine_reported(
@@ -67082,7 +67082,7 @@ bool dotdot_is_supported_electrical_measurement_line_current_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_line_current_phc(
+uint16_t dotdot_get_electrical_measurement_line_current_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -67093,7 +67093,7 @@ int16_t dotdot_get_electrical_measurement_line_current_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -67105,7 +67105,7 @@ sl_status_t dotdot_set_electrical_measurement_line_current_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_line_current_phc
+  uint16_t new_line_current_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -67118,7 +67118,7 @@ sl_status_t dotdot_set_electrical_measurement_line_current_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_line_current_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_line_current_phc_undefine_reported(
@@ -67415,7 +67415,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -67426,7 +67426,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -67438,7 +67438,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_phc
+  uint16_t new_rms_voltage_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -67451,7 +67451,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_phc_undefine_reported(
@@ -67526,7 +67526,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_min_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -67537,7 +67537,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_min_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -67549,7 +67549,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_min_phc
+  uint16_t new_rms_voltage_min_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -67562,7 +67562,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_min_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_min_phc_undefine_reported(
@@ -67637,7 +67637,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_max_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -67648,7 +67648,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_max_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -67660,7 +67660,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_max_phc
+  uint16_t new_rms_voltage_max_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -67673,7 +67673,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_max_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_max_phc_undefine_reported(
@@ -67748,7 +67748,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_current_phc(
+uint16_t dotdot_get_electrical_measurement_rms_current_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -67759,7 +67759,7 @@ int16_t dotdot_get_electrical_measurement_rms_current_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -67771,7 +67771,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_phc
+  uint16_t new_rms_current_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -67784,7 +67784,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_current_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_current_phc_undefine_reported(
@@ -67859,7 +67859,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_min_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_current_min_phc(
+uint16_t dotdot_get_electrical_measurement_rms_current_min_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -67870,7 +67870,7 @@ int16_t dotdot_get_electrical_measurement_rms_current_min_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -67882,7 +67882,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_min_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_min_phc
+  uint16_t new_rms_current_min_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -67895,7 +67895,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_min_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_current_min_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_current_min_phc_undefine_reported(
@@ -67970,7 +67970,7 @@ bool dotdot_is_supported_electrical_measurement_rms_current_max_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_current_max_phc(
+uint16_t dotdot_get_electrical_measurement_rms_current_max_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -67981,7 +67981,7 @@ int16_t dotdot_get_electrical_measurement_rms_current_max_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -67993,7 +67993,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_max_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_current_max_phc
+  uint16_t new_rms_current_max_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -68006,7 +68006,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_current_max_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_current_max_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_current_max_phc_undefine_reported(
@@ -68525,7 +68525,7 @@ bool dotdot_is_supported_electrical_measurement_apparent_power_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_apparent_power_phc(
+uint16_t dotdot_get_electrical_measurement_apparent_power_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -68536,7 +68536,7 @@ int16_t dotdot_get_electrical_measurement_apparent_power_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -68548,7 +68548,7 @@ sl_status_t dotdot_set_electrical_measurement_apparent_power_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_apparent_power_phc
+  uint16_t new_apparent_power_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -68561,7 +68561,7 @@ sl_status_t dotdot_set_electrical_measurement_apparent_power_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_apparent_power_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_apparent_power_phc_undefine_reported(
@@ -68747,7 +68747,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phc(
+uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -68758,7 +68758,7 @@ int16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -68770,7 +68770,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_pe
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_voltage_measurement_period_phc
+  uint16_t new_average_rms_voltage_measurement_period_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -68783,7 +68783,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_pe
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_rms_voltage_measurement_period_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_undefine_reported(
@@ -68858,7 +68858,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phc(
+uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -68869,7 +68869,7 @@ int16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -68881,7 +68881,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_p
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_over_voltage_counter_phc
+  uint16_t new_average_rms_over_voltage_counter_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -68894,7 +68894,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_p
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_rms_over_voltage_counter_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_undefine_reported(
@@ -68969,7 +68969,7 @@ bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counte
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phc(
+uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -68980,7 +68980,7 @@ int16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -68992,7 +68992,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_rms_under_voltage_counter_phc
+  uint16_t new_average_rms_under_voltage_counter_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -69005,7 +69005,7 @@ sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_rms_under_voltage_counter_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_undefine_reported(
@@ -69080,7 +69080,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phc(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -69091,7 +69091,7 @@ int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -69103,7 +69103,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_ph
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_over_voltage_period_phc
+  uint16_t new_rms_extreme_over_voltage_period_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -69116,7 +69116,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_ph
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_extreme_over_voltage_period_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_undefine_reported(
@@ -69191,7 +69191,7 @@ bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phc(
+uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -69202,7 +69202,7 @@ int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -69214,7 +69214,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_p
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_extreme_under_voltage_period_phc
+  uint16_t new_rms_extreme_under_voltage_period_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -69227,7 +69227,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_p
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_extreme_under_voltage_period_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_undefine_reported(
@@ -69302,7 +69302,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -69313,7 +69313,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -69325,7 +69325,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_sag_period_phc
+  uint16_t new_rms_voltage_sag_period_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -69338,7 +69338,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_sag_period_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phc_undefine_reported(
@@ -69413,7 +69413,7 @@ bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phc(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phc(
+uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -69424,7 +69424,7 @@ int16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phc(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -69436,7 +69436,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phc(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_rms_voltage_swell_period_phc
+  uint16_t new_rms_voltage_swell_period_phc
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -69449,7 +69449,7 @@ sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phc(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_rms_voltage_swell_period_phc,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phc_undefine_reported(
@@ -70005,7 +70005,7 @@ bool dotdot_is_supported_diagnostics_number_of_resets(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_number_of_resets(
+uint16_t dotdot_get_diagnostics_number_of_resets(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -70016,7 +70016,7 @@ int16_t dotdot_get_diagnostics_number_of_resets(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -70028,7 +70028,7 @@ sl_status_t dotdot_set_diagnostics_number_of_resets(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_number_of_resets
+  uint16_t new_number_of_resets
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -70041,7 +70041,7 @@ sl_status_t dotdot_set_diagnostics_number_of_resets(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_number_of_resets,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_number_of_resets_undefine_reported(
@@ -70116,7 +70116,7 @@ bool dotdot_is_supported_diagnostics_persistent_memory_writes(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_persistent_memory_writes(
+uint16_t dotdot_get_diagnostics_persistent_memory_writes(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -70127,7 +70127,7 @@ int16_t dotdot_get_diagnostics_persistent_memory_writes(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -70139,7 +70139,7 @@ sl_status_t dotdot_set_diagnostics_persistent_memory_writes(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_persistent_memory_writes
+  uint16_t new_persistent_memory_writes
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -70152,7 +70152,7 @@ sl_status_t dotdot_set_diagnostics_persistent_memory_writes(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_persistent_memory_writes,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_persistent_memory_writes_undefine_reported(
@@ -70227,7 +70227,7 @@ bool dotdot_is_supported_diagnostics_mac_rx_bcast(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_diagnostics_mac_rx_bcast(
+uint32_t dotdot_get_diagnostics_mac_rx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -70238,7 +70238,7 @@ int32_t dotdot_get_diagnostics_mac_rx_bcast(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -70250,7 +70250,7 @@ sl_status_t dotdot_set_diagnostics_mac_rx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mac_rx_bcast
+  uint32_t new_mac_rx_bcast
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -70263,7 +70263,7 @@ sl_status_t dotdot_set_diagnostics_mac_rx_bcast(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mac_rx_bcast,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_diagnostics_mac_rx_bcast_undefine_reported(
@@ -70338,7 +70338,7 @@ bool dotdot_is_supported_diagnostics_mac_tx_bcast(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_diagnostics_mac_tx_bcast(
+uint32_t dotdot_get_diagnostics_mac_tx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -70349,7 +70349,7 @@ int32_t dotdot_get_diagnostics_mac_tx_bcast(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -70361,7 +70361,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mac_tx_bcast
+  uint32_t new_mac_tx_bcast
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -70374,7 +70374,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_bcast(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mac_tx_bcast,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_diagnostics_mac_tx_bcast_undefine_reported(
@@ -70449,7 +70449,7 @@ bool dotdot_is_supported_diagnostics_mac_rx_ucast(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_diagnostics_mac_rx_ucast(
+uint32_t dotdot_get_diagnostics_mac_rx_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -70460,7 +70460,7 @@ int32_t dotdot_get_diagnostics_mac_rx_ucast(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -70472,7 +70472,7 @@ sl_status_t dotdot_set_diagnostics_mac_rx_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mac_rx_ucast
+  uint32_t new_mac_rx_ucast
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -70485,7 +70485,7 @@ sl_status_t dotdot_set_diagnostics_mac_rx_ucast(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mac_rx_ucast,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_diagnostics_mac_rx_ucast_undefine_reported(
@@ -70560,7 +70560,7 @@ bool dotdot_is_supported_diagnostics_mac_tx_ucast(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_diagnostics_mac_tx_ucast(
+uint32_t dotdot_get_diagnostics_mac_tx_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -70571,7 +70571,7 @@ int32_t dotdot_get_diagnostics_mac_tx_ucast(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -70583,7 +70583,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mac_tx_ucast
+  uint32_t new_mac_tx_ucast
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -70596,7 +70596,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_ucast(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mac_tx_ucast,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_diagnostics_mac_tx_ucast_undefine_reported(
@@ -70671,7 +70671,7 @@ bool dotdot_is_supported_diagnostics_mac_tx_ucast_retry(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_mac_tx_ucast_retry(
+uint16_t dotdot_get_diagnostics_mac_tx_ucast_retry(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -70682,7 +70682,7 @@ int16_t dotdot_get_diagnostics_mac_tx_ucast_retry(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -70694,7 +70694,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_ucast_retry(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mac_tx_ucast_retry
+  uint16_t new_mac_tx_ucast_retry
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -70707,7 +70707,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_ucast_retry(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mac_tx_ucast_retry,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_mac_tx_ucast_retry_undefine_reported(
@@ -70782,7 +70782,7 @@ bool dotdot_is_supported_diagnostics_mac_tx_ucast_fail(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_mac_tx_ucast_fail(
+uint16_t dotdot_get_diagnostics_mac_tx_ucast_fail(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -70793,7 +70793,7 @@ int16_t dotdot_get_diagnostics_mac_tx_ucast_fail(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -70805,7 +70805,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_ucast_fail(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_mac_tx_ucast_fail
+  uint16_t new_mac_tx_ucast_fail
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -70818,7 +70818,7 @@ sl_status_t dotdot_set_diagnostics_mac_tx_ucast_fail(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mac_tx_ucast_fail,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_mac_tx_ucast_fail_undefine_reported(
@@ -70893,7 +70893,7 @@ bool dotdot_is_supported_diagnostics_aps_rx_bcast(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_aps_rx_bcast(
+uint16_t dotdot_get_diagnostics_aps_rx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -70904,7 +70904,7 @@ int16_t dotdot_get_diagnostics_aps_rx_bcast(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -70916,7 +70916,7 @@ sl_status_t dotdot_set_diagnostics_aps_rx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_rx_bcast
+  uint16_t new_aps_rx_bcast
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -70929,7 +70929,7 @@ sl_status_t dotdot_set_diagnostics_aps_rx_bcast(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_aps_rx_bcast,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_aps_rx_bcast_undefine_reported(
@@ -71004,7 +71004,7 @@ bool dotdot_is_supported_diagnostics_aps_tx_bcast(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_aps_tx_bcast(
+uint16_t dotdot_get_diagnostics_aps_tx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -71015,7 +71015,7 @@ int16_t dotdot_get_diagnostics_aps_tx_bcast(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -71027,7 +71027,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_bcast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_tx_bcast
+  uint16_t new_aps_tx_bcast
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -71040,7 +71040,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_bcast(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_aps_tx_bcast,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_aps_tx_bcast_undefine_reported(
@@ -71115,7 +71115,7 @@ bool dotdot_is_supported_diagnostics_aps_rx_ucast(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_aps_rx_ucast(
+uint16_t dotdot_get_diagnostics_aps_rx_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -71126,7 +71126,7 @@ int16_t dotdot_get_diagnostics_aps_rx_ucast(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -71138,7 +71138,7 @@ sl_status_t dotdot_set_diagnostics_aps_rx_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_rx_ucast
+  uint16_t new_aps_rx_ucast
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -71151,7 +71151,7 @@ sl_status_t dotdot_set_diagnostics_aps_rx_ucast(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_aps_rx_ucast,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_aps_rx_ucast_undefine_reported(
@@ -71226,7 +71226,7 @@ bool dotdot_is_supported_diagnostics_aps_tx_ucast_success(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_aps_tx_ucast_success(
+uint16_t dotdot_get_diagnostics_aps_tx_ucast_success(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -71237,7 +71237,7 @@ int16_t dotdot_get_diagnostics_aps_tx_ucast_success(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -71249,7 +71249,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_ucast_success(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_tx_ucast_success
+  uint16_t new_aps_tx_ucast_success
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -71262,7 +71262,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_ucast_success(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_aps_tx_ucast_success,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_aps_tx_ucast_success_undefine_reported(
@@ -71337,7 +71337,7 @@ bool dotdot_is_supported_diagnostics_aps_tx_ucast_retry(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_aps_tx_ucast_retry(
+uint16_t dotdot_get_diagnostics_aps_tx_ucast_retry(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -71348,7 +71348,7 @@ int16_t dotdot_get_diagnostics_aps_tx_ucast_retry(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -71360,7 +71360,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_ucast_retry(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_tx_ucast_retry
+  uint16_t new_aps_tx_ucast_retry
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -71373,7 +71373,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_ucast_retry(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_aps_tx_ucast_retry,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_aps_tx_ucast_retry_undefine_reported(
@@ -71448,7 +71448,7 @@ bool dotdot_is_supported_diagnostics_aps_tx_ucast_fail(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_aps_tx_ucast_fail(
+uint16_t dotdot_get_diagnostics_aps_tx_ucast_fail(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -71459,7 +71459,7 @@ int16_t dotdot_get_diagnostics_aps_tx_ucast_fail(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -71471,7 +71471,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_ucast_fail(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_tx_ucast_fail
+  uint16_t new_aps_tx_ucast_fail
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -71484,7 +71484,7 @@ sl_status_t dotdot_set_diagnostics_aps_tx_ucast_fail(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_aps_tx_ucast_fail,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_aps_tx_ucast_fail_undefine_reported(
@@ -71559,7 +71559,7 @@ bool dotdot_is_supported_diagnostics_route_disc_initiated(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_route_disc_initiated(
+uint16_t dotdot_get_diagnostics_route_disc_initiated(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -71570,7 +71570,7 @@ int16_t dotdot_get_diagnostics_route_disc_initiated(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -71582,7 +71582,7 @@ sl_status_t dotdot_set_diagnostics_route_disc_initiated(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_route_disc_initiated
+  uint16_t new_route_disc_initiated
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -71595,7 +71595,7 @@ sl_status_t dotdot_set_diagnostics_route_disc_initiated(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_route_disc_initiated,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_route_disc_initiated_undefine_reported(
@@ -71670,7 +71670,7 @@ bool dotdot_is_supported_diagnostics_neighbor_added(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_neighbor_added(
+uint16_t dotdot_get_diagnostics_neighbor_added(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -71681,7 +71681,7 @@ int16_t dotdot_get_diagnostics_neighbor_added(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -71693,7 +71693,7 @@ sl_status_t dotdot_set_diagnostics_neighbor_added(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_neighbor_added
+  uint16_t new_neighbor_added
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -71706,7 +71706,7 @@ sl_status_t dotdot_set_diagnostics_neighbor_added(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_neighbor_added,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_neighbor_added_undefine_reported(
@@ -71781,7 +71781,7 @@ bool dotdot_is_supported_diagnostics_neighbor_removed(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_neighbor_removed(
+uint16_t dotdot_get_diagnostics_neighbor_removed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -71792,7 +71792,7 @@ int16_t dotdot_get_diagnostics_neighbor_removed(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -71804,7 +71804,7 @@ sl_status_t dotdot_set_diagnostics_neighbor_removed(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_neighbor_removed
+  uint16_t new_neighbor_removed
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -71817,7 +71817,7 @@ sl_status_t dotdot_set_diagnostics_neighbor_removed(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_neighbor_removed,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_neighbor_removed_undefine_reported(
@@ -71892,7 +71892,7 @@ bool dotdot_is_supported_diagnostics_neighbor_stale(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_neighbor_stale(
+uint16_t dotdot_get_diagnostics_neighbor_stale(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -71903,7 +71903,7 @@ int16_t dotdot_get_diagnostics_neighbor_stale(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -71915,7 +71915,7 @@ sl_status_t dotdot_set_diagnostics_neighbor_stale(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_neighbor_stale
+  uint16_t new_neighbor_stale
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -71928,7 +71928,7 @@ sl_status_t dotdot_set_diagnostics_neighbor_stale(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_neighbor_stale,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_neighbor_stale_undefine_reported(
@@ -72003,7 +72003,7 @@ bool dotdot_is_supported_diagnostics_join_indication(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_join_indication(
+uint16_t dotdot_get_diagnostics_join_indication(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -72014,7 +72014,7 @@ int16_t dotdot_get_diagnostics_join_indication(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -72026,7 +72026,7 @@ sl_status_t dotdot_set_diagnostics_join_indication(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_join_indication
+  uint16_t new_join_indication
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -72039,7 +72039,7 @@ sl_status_t dotdot_set_diagnostics_join_indication(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_join_indication,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_join_indication_undefine_reported(
@@ -72114,7 +72114,7 @@ bool dotdot_is_supported_diagnostics_child_moved(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_child_moved(
+uint16_t dotdot_get_diagnostics_child_moved(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -72125,7 +72125,7 @@ int16_t dotdot_get_diagnostics_child_moved(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -72137,7 +72137,7 @@ sl_status_t dotdot_set_diagnostics_child_moved(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_child_moved
+  uint16_t new_child_moved
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -72150,7 +72150,7 @@ sl_status_t dotdot_set_diagnostics_child_moved(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_child_moved,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_child_moved_undefine_reported(
@@ -72225,7 +72225,7 @@ bool dotdot_is_supported_diagnostics_nwkfc_failure(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_nwkfc_failure(
+uint16_t dotdot_get_diagnostics_nwkfc_failure(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -72236,7 +72236,7 @@ int16_t dotdot_get_diagnostics_nwkfc_failure(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -72248,7 +72248,7 @@ sl_status_t dotdot_set_diagnostics_nwkfc_failure(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_nwkfc_failure
+  uint16_t new_nwkfc_failure
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -72261,7 +72261,7 @@ sl_status_t dotdot_set_diagnostics_nwkfc_failure(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_nwkfc_failure,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_nwkfc_failure_undefine_reported(
@@ -72336,7 +72336,7 @@ bool dotdot_is_supported_diagnostics_apsfc_failure(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_apsfc_failure(
+uint16_t dotdot_get_diagnostics_apsfc_failure(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -72347,7 +72347,7 @@ int16_t dotdot_get_diagnostics_apsfc_failure(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -72359,7 +72359,7 @@ sl_status_t dotdot_set_diagnostics_apsfc_failure(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_apsfc_failure
+  uint16_t new_apsfc_failure
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -72372,7 +72372,7 @@ sl_status_t dotdot_set_diagnostics_apsfc_failure(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_apsfc_failure,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_apsfc_failure_undefine_reported(
@@ -72447,7 +72447,7 @@ bool dotdot_is_supported_diagnostics_aps_unauthorized_key(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_aps_unauthorized_key(
+uint16_t dotdot_get_diagnostics_aps_unauthorized_key(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -72458,7 +72458,7 @@ int16_t dotdot_get_diagnostics_aps_unauthorized_key(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -72470,7 +72470,7 @@ sl_status_t dotdot_set_diagnostics_aps_unauthorized_key(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_unauthorized_key
+  uint16_t new_aps_unauthorized_key
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -72483,7 +72483,7 @@ sl_status_t dotdot_set_diagnostics_aps_unauthorized_key(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_aps_unauthorized_key,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_aps_unauthorized_key_undefine_reported(
@@ -72558,7 +72558,7 @@ bool dotdot_is_supported_diagnostics_nwk_decrypt_failures(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_nwk_decrypt_failures(
+uint16_t dotdot_get_diagnostics_nwk_decrypt_failures(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -72569,7 +72569,7 @@ int16_t dotdot_get_diagnostics_nwk_decrypt_failures(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -72581,7 +72581,7 @@ sl_status_t dotdot_set_diagnostics_nwk_decrypt_failures(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_nwk_decrypt_failures
+  uint16_t new_nwk_decrypt_failures
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -72594,7 +72594,7 @@ sl_status_t dotdot_set_diagnostics_nwk_decrypt_failures(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_nwk_decrypt_failures,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_nwk_decrypt_failures_undefine_reported(
@@ -72669,7 +72669,7 @@ bool dotdot_is_supported_diagnostics_aps_decrypt_failures(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_aps_decrypt_failures(
+uint16_t dotdot_get_diagnostics_aps_decrypt_failures(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -72680,7 +72680,7 @@ int16_t dotdot_get_diagnostics_aps_decrypt_failures(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -72692,7 +72692,7 @@ sl_status_t dotdot_set_diagnostics_aps_decrypt_failures(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_aps_decrypt_failures
+  uint16_t new_aps_decrypt_failures
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -72705,7 +72705,7 @@ sl_status_t dotdot_set_diagnostics_aps_decrypt_failures(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_aps_decrypt_failures,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_aps_decrypt_failures_undefine_reported(
@@ -72780,7 +72780,7 @@ bool dotdot_is_supported_diagnostics_packet_buffer_allocate_failures(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_packet_buffer_allocate_failures(
+uint16_t dotdot_get_diagnostics_packet_buffer_allocate_failures(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -72791,7 +72791,7 @@ int16_t dotdot_get_diagnostics_packet_buffer_allocate_failures(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -72803,7 +72803,7 @@ sl_status_t dotdot_set_diagnostics_packet_buffer_allocate_failures(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_packet_buffer_allocate_failures
+  uint16_t new_packet_buffer_allocate_failures
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -72816,7 +72816,7 @@ sl_status_t dotdot_set_diagnostics_packet_buffer_allocate_failures(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_packet_buffer_allocate_failures,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_packet_buffer_allocate_failures_undefine_reported(
@@ -72891,7 +72891,7 @@ bool dotdot_is_supported_diagnostics_relayed_ucast(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_relayed_ucast(
+uint16_t dotdot_get_diagnostics_relayed_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -72902,7 +72902,7 @@ int16_t dotdot_get_diagnostics_relayed_ucast(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -72914,7 +72914,7 @@ sl_status_t dotdot_set_diagnostics_relayed_ucast(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_relayed_ucast
+  uint16_t new_relayed_ucast
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -72927,7 +72927,7 @@ sl_status_t dotdot_set_diagnostics_relayed_ucast(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_relayed_ucast,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_relayed_ucast_undefine_reported(
@@ -73002,7 +73002,7 @@ bool dotdot_is_supported_diagnostics_phy_to_mac_queue_limit_reached(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_phy_to_mac_queue_limit_reached(
+uint16_t dotdot_get_diagnostics_phy_to_mac_queue_limit_reached(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -73013,7 +73013,7 @@ int16_t dotdot_get_diagnostics_phy_to_mac_queue_limit_reached(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -73025,7 +73025,7 @@ sl_status_t dotdot_set_diagnostics_phy_to_mac_queue_limit_reached(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_phy_to_mac_queue_limit_reached
+  uint16_t new_phy_to_mac_queue_limit_reached
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -73038,7 +73038,7 @@ sl_status_t dotdot_set_diagnostics_phy_to_mac_queue_limit_reached(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_phy_to_mac_queue_limit_reached,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_phy_to_mac_queue_limit_reached_undefine_reported(
@@ -73113,7 +73113,7 @@ bool dotdot_is_supported_diagnostics_packet_validate_drop_count(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_packet_validate_drop_count(
+uint16_t dotdot_get_diagnostics_packet_validate_drop_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -73124,7 +73124,7 @@ int16_t dotdot_get_diagnostics_packet_validate_drop_count(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -73136,7 +73136,7 @@ sl_status_t dotdot_set_diagnostics_packet_validate_drop_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_packet_validate_drop_count
+  uint16_t new_packet_validate_drop_count
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -73149,7 +73149,7 @@ sl_status_t dotdot_set_diagnostics_packet_validate_drop_count(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_packet_validate_drop_count,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_packet_validate_drop_count_undefine_reported(
@@ -73224,7 +73224,7 @@ bool dotdot_is_supported_diagnostics_average_mac_retry_per_aps_message_sent(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_diagnostics_average_mac_retry_per_aps_message_sent(
+uint16_t dotdot_get_diagnostics_average_mac_retry_per_aps_message_sent(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -73235,7 +73235,7 @@ int16_t dotdot_get_diagnostics_average_mac_retry_per_aps_message_sent(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -73247,7 +73247,7 @@ sl_status_t dotdot_set_diagnostics_average_mac_retry_per_aps_message_sent(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_average_mac_retry_per_aps_message_sent
+  uint16_t new_average_mac_retry_per_aps_message_sent
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -73260,7 +73260,7 @@ sl_status_t dotdot_set_diagnostics_average_mac_retry_per_aps_message_sent(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_average_mac_retry_per_aps_message_sent,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_diagnostics_average_mac_retry_per_aps_message_sent_undefine_reported(
@@ -73335,7 +73335,7 @@ bool dotdot_is_supported_diagnostics_last_messagelqi(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_diagnostics_last_messagelqi(
+uint8_t dotdot_get_diagnostics_last_messagelqi(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -73346,7 +73346,7 @@ int8_t dotdot_get_diagnostics_last_messagelqi(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -73358,7 +73358,7 @@ sl_status_t dotdot_set_diagnostics_last_messagelqi(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_last_messagelqi
+  uint8_t new_last_messagelqi
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -73371,7 +73371,7 @@ sl_status_t dotdot_set_diagnostics_last_messagelqi(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_last_messagelqi,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_diagnostics_last_messagelqi_undefine_reported(
@@ -73925,7 +73925,7 @@ bool dotdot_is_supported_state_endpoint_id_list(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_state_endpoint_id_list(
+uint8_t dotdot_get_state_endpoint_id_list(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -73936,7 +73936,7 @@ int8_t dotdot_get_state_endpoint_id_list(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -73949,7 +73949,7 @@ sl_status_t dotdot_set_state_endpoint_id_list(
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
   size_t new_endpoint_id_list_count,
-  const int8_t* new_endpoint_id_list
+  const uint8_t* new_endpoint_id_list
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -74261,7 +74261,7 @@ bool dotdot_is_supported_state_maximum_command_delay(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_state_maximum_command_delay(
+uint32_t dotdot_get_state_maximum_command_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -74272,7 +74272,7 @@ int32_t dotdot_get_state_maximum_command_delay(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -74284,7 +74284,7 @@ sl_status_t dotdot_set_state_maximum_command_delay(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_maximum_command_delay
+  uint32_t new_maximum_command_delay
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -74297,7 +74297,7 @@ sl_status_t dotdot_set_state_maximum_command_delay(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_maximum_command_delay,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_state_maximum_command_delay_undefine_reported(
@@ -74887,7 +74887,7 @@ bool dotdot_is_supported_system_metrics_reporting_interval_seconds(
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_system_metrics_reporting_interval_seconds(
+uint32_t dotdot_get_system_metrics_reporting_interval_seconds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -74898,7 +74898,7 @@ int32_t dotdot_get_system_metrics_reporting_interval_seconds(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -74910,7 +74910,7 @@ sl_status_t dotdot_set_system_metrics_reporting_interval_seconds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_reporting_interval_seconds
+  uint32_t new_reporting_interval_seconds
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -74923,7 +74923,7 @@ sl_status_t dotdot_set_system_metrics_reporting_interval_seconds(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_reporting_interval_seconds,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_system_metrics_reporting_interval_seconds_undefine_reported(
@@ -77025,7 +77025,7 @@ bool dotdot_is_supported_system_metrics_uptime_minutes(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_system_metrics_uptime_minutes(
+uint64_t dotdot_get_system_metrics_uptime_minutes(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -77036,7 +77036,7 @@ int64_t dotdot_get_system_metrics_uptime_minutes(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -77048,7 +77048,7 @@ sl_status_t dotdot_set_system_metrics_uptime_minutes(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_uptime_minutes
+  uint64_t new_uptime_minutes
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -77061,7 +77061,7 @@ sl_status_t dotdot_set_system_metrics_uptime_minutes(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_uptime_minutes,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_system_metrics_uptime_minutes_undefine_reported(
@@ -77802,7 +77802,7 @@ bool dotdot_is_supported_system_metrics_system_interrupts(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_system_metrics_system_interrupts(
+uint64_t dotdot_get_system_metrics_system_interrupts(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -77813,7 +77813,7 @@ int64_t dotdot_get_system_metrics_system_interrupts(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -77825,7 +77825,7 @@ sl_status_t dotdot_set_system_metrics_system_interrupts(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_system_interrupts
+  uint64_t new_system_interrupts
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -77838,7 +77838,7 @@ sl_status_t dotdot_set_system_metrics_system_interrupts(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_system_interrupts,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_system_metrics_system_interrupts_undefine_reported(
@@ -78465,7 +78465,7 @@ bool dotdot_is_supported_application_monitoring_uptime_minutes(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_application_monitoring_uptime_minutes(
+uint64_t dotdot_get_application_monitoring_uptime_minutes(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -78476,7 +78476,7 @@ int64_t dotdot_get_application_monitoring_uptime_minutes(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -78488,7 +78488,7 @@ sl_status_t dotdot_set_application_monitoring_uptime_minutes(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_uptime_minutes
+  uint64_t new_uptime_minutes
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -78501,7 +78501,7 @@ sl_status_t dotdot_set_application_monitoring_uptime_minutes(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_uptime_minutes,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_application_monitoring_uptime_minutes_undefine_reported(
@@ -78576,7 +78576,7 @@ bool dotdot_is_supported_application_monitoring_process_id(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_application_monitoring_process_id(
+uint64_t dotdot_get_application_monitoring_process_id(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -78587,7 +78587,7 @@ int64_t dotdot_get_application_monitoring_process_id(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -78599,7 +78599,7 @@ sl_status_t dotdot_set_application_monitoring_process_id(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_process_id
+  uint64_t new_process_id
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -78612,7 +78612,7 @@ sl_status_t dotdot_set_application_monitoring_process_id(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_process_id,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_application_monitoring_process_id_undefine_reported(
@@ -79133,7 +79133,7 @@ bool dotdot_is_supported_application_monitoring_mqtt_statistics_reporting_interv
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_application_monitoring_mqtt_statistics_reporting_interval_seconds(
+uint32_t dotdot_get_application_monitoring_mqtt_statistics_reporting_interval_seconds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -79144,7 +79144,7 @@ int32_t dotdot_get_application_monitoring_mqtt_statistics_reporting_interval_sec
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -79156,7 +79156,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_statistics_reporting_interval
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_mqtt_statistics_reporting_interval_seconds
+  uint32_t new_mqtt_statistics_reporting_interval_seconds
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -79169,7 +79169,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_statistics_reporting_interval
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mqtt_statistics_reporting_interval_seconds,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_undefine_reported(
@@ -79244,7 +79244,7 @@ bool dotdot_is_supported_application_monitoring_mqtt_messages_sent(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_application_monitoring_mqtt_messages_sent(
+uint64_t dotdot_get_application_monitoring_mqtt_messages_sent(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -79255,7 +79255,7 @@ int64_t dotdot_get_application_monitoring_mqtt_messages_sent(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -79267,7 +79267,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_messages_sent(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_mqtt_messages_sent
+  uint64_t new_mqtt_messages_sent
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -79280,7 +79280,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_messages_sent(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mqtt_messages_sent,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_application_monitoring_mqtt_messages_sent_undefine_reported(
@@ -79355,7 +79355,7 @@ bool dotdot_is_supported_application_monitoring_mqtt_messages_received(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_application_monitoring_mqtt_messages_received(
+uint64_t dotdot_get_application_monitoring_mqtt_messages_received(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -79366,7 +79366,7 @@ int64_t dotdot_get_application_monitoring_mqtt_messages_received(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -79378,7 +79378,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_messages_received(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_mqtt_messages_received
+  uint64_t new_mqtt_messages_received
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -79391,7 +79391,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_messages_received(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mqtt_messages_received,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_application_monitoring_mqtt_messages_received_undefine_reported(
@@ -79466,7 +79466,7 @@ bool dotdot_is_supported_application_monitoring_mqtt_subscription_count(
   return attribute_store_node_exists(node);
 }
 
-int64_t dotdot_get_application_monitoring_mqtt_subscription_count(
+uint64_t dotdot_get_application_monitoring_mqtt_subscription_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -79477,7 +79477,7 @@ int64_t dotdot_get_application_monitoring_mqtt_subscription_count(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);
 
-  int64_t result = {};
+  uint64_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -79489,7 +79489,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_subscription_count(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int64_t new_mqtt_subscription_count
+  uint64_t new_mqtt_subscription_count
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -79502,7 +79502,7 @@ sl_status_t dotdot_set_application_monitoring_mqtt_subscription_count(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_mqtt_subscription_count,
-                                                  sizeof(int64_t));
+                                                  sizeof(uint64_t));
   }
 
 sl_status_t dotdot_application_monitoring_mqtt_subscription_count_undefine_reported(
@@ -79910,7 +79910,7 @@ bool dotdot_is_supported_application_monitoring_application_statistics_reporting
   return attribute_store_node_exists(node);
 }
 
-int32_t dotdot_get_application_monitoring_application_statistics_reporting_interval_seconds(
+uint32_t dotdot_get_application_monitoring_application_statistics_reporting_interval_seconds(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -79921,7 +79921,7 @@ int32_t dotdot_get_application_monitoring_application_statistics_reporting_inter
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);
 
-  int32_t result = {};
+  uint32_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -79933,7 +79933,7 @@ sl_status_t dotdot_set_application_monitoring_application_statistics_reporting_i
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int32_t new_application_statistics_reporting_interval_seconds
+  uint32_t new_application_statistics_reporting_interval_seconds
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -79946,7 +79946,7 @@ sl_status_t dotdot_set_application_monitoring_application_statistics_reporting_i
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_application_statistics_reporting_interval_seconds,
-                                                  sizeof(int32_t));
+                                                  sizeof(uint32_t));
   }
 
 sl_status_t dotdot_application_monitoring_application_statistics_reporting_interval_seconds_undefine_reported(
@@ -81067,7 +81067,7 @@ bool dotdot_is_supported_user_credential_supported_user_unique_identifiers(
   return attribute_store_node_exists(node);
 }
 
-int16_t dotdot_get_user_credential_supported_user_unique_identifiers(
+uint16_t dotdot_get_user_credential_supported_user_unique_identifiers(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -81078,7 +81078,7 @@ int16_t dotdot_get_user_credential_supported_user_unique_identifiers(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS);
 
-  int16_t result = {};
+  uint16_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -81090,7 +81090,7 @@ sl_status_t dotdot_set_user_credential_supported_user_unique_identifiers(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int16_t new_supported_user_unique_identifiers
+  uint16_t new_supported_user_unique_identifiers
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -81103,7 +81103,7 @@ sl_status_t dotdot_set_user_credential_supported_user_unique_identifiers(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_supported_user_unique_identifiers,
-                                                  sizeof(int16_t));
+                                                  sizeof(uint16_t));
   }
 
 sl_status_t dotdot_user_credential_supported_user_unique_identifiers_undefine_reported(
@@ -83886,7 +83886,7 @@ bool dotdot_is_supported_unify_humidity_control_humidifier_setpoint_precision(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_unify_humidity_control_humidifier_setpoint_precision(
+uint8_t dotdot_get_unify_humidity_control_humidifier_setpoint_precision(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -83897,7 +83897,7 @@ int8_t dotdot_get_unify_humidity_control_humidifier_setpoint_precision(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -83909,7 +83909,7 @@ sl_status_t dotdot_set_unify_humidity_control_humidifier_setpoint_precision(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_humidifier_setpoint_precision
+  uint8_t new_humidifier_setpoint_precision
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -83922,7 +83922,7 @@ sl_status_t dotdot_set_unify_humidity_control_humidifier_setpoint_precision(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_humidifier_setpoint_precision,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_precision_undefine_reported(
@@ -84441,7 +84441,7 @@ bool dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_precision(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_unify_humidity_control_dehumidifier_setpoint_precision(
+uint8_t dotdot_get_unify_humidity_control_dehumidifier_setpoint_precision(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -84452,7 +84452,7 @@ int8_t dotdot_get_unify_humidity_control_dehumidifier_setpoint_precision(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -84464,7 +84464,7 @@ sl_status_t dotdot_set_unify_humidity_control_dehumidifier_setpoint_precision(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_dehumidifier_setpoint_precision
+  uint8_t new_dehumidifier_setpoint_precision
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -84477,7 +84477,7 @@ sl_status_t dotdot_set_unify_humidity_control_dehumidifier_setpoint_precision(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_dehumidifier_setpoint_precision,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_precision_undefine_reported(
@@ -84996,7 +84996,7 @@ bool dotdot_is_supported_unify_humidity_control_auto_setpoint_precision(
   return attribute_store_node_exists(node);
 }
 
-int8_t dotdot_get_unify_humidity_control_auto_setpoint_precision(
+uint8_t dotdot_get_unify_humidity_control_auto_setpoint_precision(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state)
@@ -85007,7 +85007,7 @@ int8_t dotdot_get_unify_humidity_control_auto_setpoint_precision(
       endpoint_node,
       DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION);
 
-  int8_t result = {};
+  uint8_t result = {};
   attribute_store_read_value(node,
                              value_state,
                              (uint8_t *)&result,
@@ -85019,7 +85019,7 @@ sl_status_t dotdot_set_unify_humidity_control_auto_setpoint_precision(
   const dotdot_unid_t unid,
   dotdot_endpoint_id_t endpoint_id,
   attribute_store_node_value_state_t value_state,
-  int8_t new_auto_setpoint_precision
+  uint8_t new_auto_setpoint_precision
   )
 {
   attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
@@ -85032,7 +85032,7 @@ sl_status_t dotdot_set_unify_humidity_control_auto_setpoint_precision(
   return attribute_store_set_node_attribute_value(node,
                                                   value_state,
                                                   (uint8_t *)&new_auto_setpoint_precision,
-                                                  sizeof(int8_t));
+                                                  sizeof(uint8_t));
   }
 
 sl_status_t dotdot_unify_humidity_control_auto_setpoint_precision_undefine_reported(
diff --git a/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_registration.cpp b/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_registration.cpp
index 414f77fe8a..329813ba1c 100644
--- a/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_registration.cpp
+++ b/components/unify_dotdot_attribute_store/zap-generated/src/unify_dotdot_attribute_store_registration.cpp
@@ -104,8 +104,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -114,7 +114,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Basic ZCLVersion, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -128,8 +128,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -138,7 +138,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Basic ApplicationVersion, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -152,8 +152,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -162,7 +162,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Basic StackVersion, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -176,8 +176,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -186,7 +186,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Basic HWVersion, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -344,8 +344,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // octstr // octstr // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // octstr // octstr // const char*
+    std::string attribute_type_string           = "const char*";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -354,7 +354,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Basic ProductCode, "
-                     "type:  octstr // uint8_t");
+                     "type:  octstr // const char*");
     }
 
     status |= attribute_store_register_type(
@@ -608,8 +608,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -618,7 +618,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration MainsVoltage, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -632,8 +632,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -642,7 +642,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration MainsFrequency, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -680,8 +680,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -690,7 +690,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration MainsVoltageMinThreshold, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -704,8 +704,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -714,7 +714,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration MainsVoltageMaxThreshold, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -728,8 +728,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -738,7 +738,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration MainsVoltageDwellTripPoint, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -752,8 +752,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -762,7 +762,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryVoltage, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -776,8 +776,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -786,7 +786,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryPercentageRemaining, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -848,8 +848,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -858,7 +858,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryAHrRating, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -872,8 +872,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -882,7 +882,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryQuantity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -896,8 +896,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -906,7 +906,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryRatedVoltage, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -944,8 +944,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -954,7 +954,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryVoltageMinThreshold, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -968,8 +968,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -978,7 +978,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryVoltageThreshold1, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -992,8 +992,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1002,7 +1002,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryVoltageThreshold2, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1016,8 +1016,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1026,7 +1026,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryVoltageThreshold3, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1040,8 +1040,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1050,7 +1050,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryPercentageMinThreshold, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1064,8 +1064,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1074,7 +1074,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryPercentageThreshold1, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1088,8 +1088,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1098,7 +1098,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryPercentageThreshold2, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1112,8 +1112,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1122,7 +1122,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration BatteryPercentageThreshold3, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1160,8 +1160,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1170,7 +1170,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2Voltage, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1184,8 +1184,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1194,7 +1194,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2PercentageRemaining, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1256,8 +1256,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1266,7 +1266,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2AHrRating, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -1280,8 +1280,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1290,7 +1290,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2Quantity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1304,8 +1304,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1314,7 +1314,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2RatedVoltage, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1352,8 +1352,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1362,7 +1362,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2VoltageMinThreshold, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1376,8 +1376,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1386,7 +1386,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2VoltageThreshold1, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1400,8 +1400,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1410,7 +1410,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2VoltageThreshold2, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1424,8 +1424,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1434,7 +1434,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2VoltageThreshold3, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1448,8 +1448,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1458,7 +1458,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2PercentageMinThreshold, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1472,8 +1472,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1482,7 +1482,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2PercentageThreshold1, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1496,8 +1496,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1506,7 +1506,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2PercentageThreshold2, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1520,8 +1520,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1530,7 +1530,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery2PercentageThreshold3, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1568,8 +1568,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1578,7 +1578,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3Voltage, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1592,8 +1592,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1602,7 +1602,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3PercentageRemaining, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1664,8 +1664,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1674,7 +1674,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3AHrRating, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -1688,8 +1688,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1698,7 +1698,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3Quantity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1712,8 +1712,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1722,7 +1722,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3RatedVoltage, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1760,8 +1760,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1770,7 +1770,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3VoltageMinThreshold, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1784,8 +1784,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1794,7 +1794,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3VoltageThreshold1, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1808,8 +1808,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1818,7 +1818,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3VoltageThreshold2, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1832,8 +1832,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1842,7 +1842,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3VoltageThreshold3, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1856,8 +1856,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1866,7 +1866,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3PercentageMinThreshold, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1880,8 +1880,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1890,7 +1890,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3PercentageThreshold1, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1904,8 +1904,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1914,7 +1914,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3PercentageThreshold2, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -1928,8 +1928,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -1938,7 +1938,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PowerConfiguration Battery3PercentageThreshold3, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -2048,8 +2048,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2058,7 +2058,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DeviceTemperatureConfiguration OverTempTotalDwell, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2144,8 +2144,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint24 // uint24 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint24 // uint24 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2154,7 +2154,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DeviceTemperatureConfiguration LowTempDwellTripPoint, "
-                     "type:  uint24 // int32_t");
+                     "type:  uint24 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -2168,8 +2168,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint24 // uint24 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint24 // uint24 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2178,7 +2178,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DeviceTemperatureConfiguration HighTempDwellTripPoint, "
-                     "type:  uint24 // int32_t");
+                     "type:  uint24 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -2192,8 +2192,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2202,7 +2202,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Identify IdentifyTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2240,8 +2240,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2250,7 +2250,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Scenes SceneCount, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -2264,8 +2264,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2274,7 +2274,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Scenes CurrentScene, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -2288,8 +2288,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // SGroupId // SGroupId // uint8_t *
-    std::string attribute_type_string           = "uint8_t *";
+    // SGroupId // SGroupId // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2298,7 +2298,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Scenes CurrentGroup, "
-                     "type:  SGroupId // uint8_t *");
+                     "type:  SGroupId // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2456,8 +2456,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2466,7 +2466,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OnOff OnTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2480,8 +2480,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2490,7 +2490,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OnOff OffWaitTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2528,8 +2528,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2538,7 +2538,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level CurrentLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -2552,8 +2552,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2562,7 +2562,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level RemainingTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2576,8 +2576,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2586,7 +2586,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level MinLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -2600,8 +2600,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2610,7 +2610,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level MaxLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -2624,8 +2624,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2634,7 +2634,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level CurrentFrequency, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2648,8 +2648,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2658,7 +2658,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level MinFrequency, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2672,8 +2672,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2682,7 +2682,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level MaxFrequency, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2720,8 +2720,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2730,7 +2730,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level OnOffTransitionTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2744,8 +2744,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2754,7 +2754,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level OnLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -2768,8 +2768,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2778,7 +2778,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level OnTransitionTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2792,8 +2792,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2802,7 +2802,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level OffTransitionTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2816,8 +2816,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2826,7 +2826,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level DefaultMoveRate, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2840,8 +2840,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2850,7 +2850,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Level StartUpCurrentLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -2864,8 +2864,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2874,7 +2874,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Alarms AlarmCount, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -2888,8 +2888,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // UTC // UTC // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // UTC // UTC // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2898,7 +2898,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Time Time, "
-                     "type:  UTC // uint8_t");
+                     "type:  UTC // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -2960,8 +2960,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2970,7 +2970,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Time DstStart, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -2984,8 +2984,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -2994,7 +2994,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Time DstEnd, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3032,8 +3032,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3042,7 +3042,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Time StandardTime, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3056,8 +3056,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3066,7 +3066,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Time LocalTime, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3080,8 +3080,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // UTC // UTC // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // UTC // UTC // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3090,7 +3090,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Time LastSetTime, "
-                     "type:  UTC // uint8_t");
+                     "type:  UTC // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3104,8 +3104,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // UTC // UTC // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // UTC // UTC // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3114,7 +3114,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Time ValidUntilTime, "
-                     "type:  UTC // uint8_t");
+                     "type:  UTC // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3128,8 +3128,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3138,7 +3138,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PollControl CheckInInterval, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3152,8 +3152,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3162,7 +3162,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PollControl LongPollInterval, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3176,8 +3176,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3186,7 +3186,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PollControl ShortPollInterval, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3200,8 +3200,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3210,7 +3210,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PollControl FastPollTimeout, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3224,8 +3224,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3234,7 +3234,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PollControl CheckInIntervalMin, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3248,8 +3248,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3258,7 +3258,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PollControl LongPollIntervalMin, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3272,8 +3272,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3282,7 +3282,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PollControl FastPollTimeoutMax, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3296,8 +3296,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3306,7 +3306,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ShadeConfiguration PhysicalClosedLimit, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3320,8 +3320,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3330,7 +3330,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ShadeConfiguration MotorStepSize, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3368,8 +3368,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3378,7 +3378,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ShadeConfiguration ClosedLimit, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3512,8 +3512,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3522,7 +3522,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock DoorOpenEvents, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3536,8 +3536,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3546,7 +3546,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock DoorClosedEvents, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3560,8 +3560,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3570,7 +3570,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock OpenPeriod, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3584,8 +3584,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3594,7 +3594,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock NumberOfLogRecordsSupported, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3608,8 +3608,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3618,7 +3618,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock NumberOfTotalUsersSupported, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3632,8 +3632,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3642,7 +3642,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock NumberOfPINUsersSupported, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3656,8 +3656,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3666,7 +3666,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock NumberOfRFIDUsersSupported, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -3680,8 +3680,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3690,7 +3690,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock NumberOfWeekDaySchedulesSupportedPerUser, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3704,8 +3704,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3714,7 +3714,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock NumberOfYearDaySchedulesSupportedPerUser, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3728,8 +3728,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3738,7 +3738,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock NumberOfHolidaySchedulesSupported, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3752,8 +3752,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3762,7 +3762,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock MaxPINCodeLength, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3776,8 +3776,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3786,7 +3786,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock MinPINCodeLength, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3800,8 +3800,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3810,7 +3810,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock MaxRFIDCodeLength, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3824,8 +3824,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3834,7 +3834,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock MinRFIDCodeLength, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3872,8 +3872,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3882,7 +3882,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock NumberOfCredentialsSupportedPerUser, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3944,8 +3944,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3954,7 +3954,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock LEDSettings, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -3968,8 +3968,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -3978,7 +3978,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock AutoRelockTime, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -3992,8 +3992,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4002,7 +4002,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock SoundVolume, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -4208,8 +4208,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4218,7 +4218,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock WrongCodeEntryLimit, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -4232,8 +4232,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4242,7 +4242,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock UserCodeTemporaryDisableTime, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -4328,8 +4328,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4338,7 +4338,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DoorLock ExpiringUserTimeout, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4592,8 +4592,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4602,7 +4602,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering PhysicalClosedLimitLift, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4616,8 +4616,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4626,7 +4626,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering PhysicalClosedLimitTilt, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4640,8 +4640,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4650,7 +4650,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering CurrentPositionLift, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4664,8 +4664,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4674,7 +4674,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering CurrentPositionTilt, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4688,8 +4688,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4698,7 +4698,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering NumberOfActuationsLift, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4712,8 +4712,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4722,7 +4722,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering NumberOfActuationsTilt, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4760,8 +4760,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4770,7 +4770,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering CurrentPositionLiftPercentage, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -4784,8 +4784,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4794,7 +4794,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering CurrentPositionTiltPercentage, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -4808,8 +4808,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4818,7 +4818,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering InstalledOpenLimitLift, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4832,8 +4832,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4842,7 +4842,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering InstalledClosedLimitLift, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4856,8 +4856,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4866,7 +4866,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering InstalledOpenLimitTilt, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4880,8 +4880,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4890,7 +4890,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering InstalledClosedLimitTilt, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4904,8 +4904,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4914,7 +4914,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering VelocityLift, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4928,8 +4928,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4938,7 +4938,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering AccelerationTimeLift, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -4952,8 +4952,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -4962,7 +4962,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering DecelerationTimeLift, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5000,8 +5000,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // octstr // octstr // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // octstr // octstr // const char*
+    std::string attribute_type_string           = "const char*";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5010,7 +5010,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering IntermediateSetpointsLift, "
-                     "type:  octstr // uint8_t");
+                     "type:  octstr // const char*");
     }
 
     status |= attribute_store_register_type(
@@ -5024,8 +5024,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // octstr // octstr // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // octstr // octstr // const char*
+    std::string attribute_type_string           = "const char*";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5034,7 +5034,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindowCovering IntermediateSetpointsTilt, "
-                     "type:  octstr // uint8_t");
+                     "type:  octstr // const char*");
     }
 
     status |= attribute_store_register_type(
@@ -5120,8 +5120,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5130,7 +5130,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BarrierControl OpenEvents, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5144,8 +5144,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5154,7 +5154,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BarrierControl CloseEvents, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5168,8 +5168,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5178,7 +5178,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BarrierControl CommandOpenEvents, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5192,8 +5192,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5202,7 +5202,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BarrierControl CommandCloseEvents, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5216,8 +5216,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5226,7 +5226,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BarrierControl OpenPeriod, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5240,8 +5240,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5250,7 +5250,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BarrierControl ClosePeriod, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5264,8 +5264,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5274,7 +5274,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BarrierControl BarrierPosition, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -5312,8 +5312,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5322,7 +5322,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl MaxSpeed, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5336,8 +5336,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5346,7 +5346,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl MaxFlow, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5456,8 +5456,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5466,7 +5466,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl MinConstSpeed, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5480,8 +5480,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5490,7 +5490,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl MaxConstSpeed, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5504,8 +5504,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5514,7 +5514,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl MinConstFlow, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5528,8 +5528,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5538,7 +5538,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl MaxConstFlow, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5696,8 +5696,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5706,7 +5706,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl Speed, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -5720,8 +5720,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint24 // uint24 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint24 // uint24 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5730,7 +5730,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl LifetimeRunningHours, "
-                     "type:  uint24 // int32_t");
+                     "type:  uint24 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -5744,8 +5744,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint24 // uint24 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint24 // uint24 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5754,7 +5754,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl Power, "
-                     "type:  uint24 // int32_t");
+                     "type:  uint24 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -5768,8 +5768,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -5778,7 +5778,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PumpConfigurationAndControl LifetimeEnergyConsumed, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -6032,8 +6032,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6042,7 +6042,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat PICoolingDemand, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6056,8 +6056,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6066,7 +6066,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat PIHeatingDemand, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6488,8 +6488,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6498,7 +6498,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat NumberOfWeeklyTransitions, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6512,8 +6512,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6522,7 +6522,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat NumberOfDailyTransitions, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6560,8 +6560,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6570,7 +6570,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat TemperatureSetpointHoldDuration, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -6680,8 +6680,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // UTC // UTC // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // UTC // UTC // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6690,7 +6690,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat SetpointChangeSourceTimestamp, "
-                     "type:  UTC // uint8_t");
+                     "type:  UTC // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -6704,8 +6704,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6714,7 +6714,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat OccupiedSetback, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6728,8 +6728,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6738,7 +6738,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat OccupiedSetbackMin, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6752,8 +6752,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6762,7 +6762,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat OccupiedSetbackMax, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6776,8 +6776,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6786,7 +6786,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat UnoccupiedSetback, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6800,8 +6800,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6810,7 +6810,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat UnoccupiedSetbackMin, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6824,8 +6824,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6834,7 +6834,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat UnoccupiedSetbackMax, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6848,8 +6848,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6858,7 +6858,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat EmergencyHeatDelta, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -6896,8 +6896,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -6906,7 +6906,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Thermostat ACCapacity, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7112,8 +7112,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7122,7 +7122,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DehumidificationControl RelativeHumidity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7136,8 +7136,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7146,7 +7146,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DehumidificationControl DehumidificationCooling, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7160,8 +7160,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7170,7 +7170,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DehumidificationControl RHDehumidificationSetpoint, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7232,8 +7232,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7242,7 +7242,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DehumidificationControl DehumidificationHysteresis, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7256,8 +7256,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7266,7 +7266,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL DehumidificationControl DehumidificationMaxCool, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7376,8 +7376,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7386,7 +7386,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl CurrentHue, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7400,8 +7400,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7410,7 +7410,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl CurrentSaturation, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7424,8 +7424,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7434,7 +7434,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl RemainingTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7448,8 +7448,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7458,7 +7458,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl CurrentX, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7472,8 +7472,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7482,7 +7482,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl CurrentY, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7544,8 +7544,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7554,7 +7554,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorTemperatureMireds, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7616,8 +7616,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7626,7 +7626,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl NumberOfPrimaries, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7640,8 +7640,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7650,7 +7650,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary1X, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7664,8 +7664,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7674,7 +7674,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary1Y, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7688,8 +7688,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7698,7 +7698,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary1Intensity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7712,8 +7712,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7722,7 +7722,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary2X, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7736,8 +7736,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7746,7 +7746,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary2Y, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7760,8 +7760,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7770,7 +7770,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary2Intensity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7784,8 +7784,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7794,7 +7794,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary3X, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7808,8 +7808,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7818,7 +7818,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary3Y, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7832,8 +7832,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7842,7 +7842,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary3Intensity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7856,8 +7856,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7866,7 +7866,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary4X, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7880,8 +7880,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7890,7 +7890,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary4Y, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7904,8 +7904,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7914,7 +7914,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary4Intensity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -7928,8 +7928,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7938,7 +7938,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary5X, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7952,8 +7952,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7962,7 +7962,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary5Y, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -7976,8 +7976,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -7986,7 +7986,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary5Intensity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8000,8 +8000,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8010,7 +8010,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary6X, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8024,8 +8024,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8034,7 +8034,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary6Y, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8048,8 +8048,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8058,7 +8058,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl Primary6Intensity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8072,8 +8072,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8082,7 +8082,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl WhitePointX, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8096,8 +8096,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8106,7 +8106,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl WhitePointY, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8120,8 +8120,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8130,7 +8130,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorPointRX, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8144,8 +8144,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8154,7 +8154,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorPointRY, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8168,8 +8168,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8178,7 +8178,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorPointRIntensity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8192,8 +8192,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8202,7 +8202,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorPointGX, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8216,8 +8216,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8226,7 +8226,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorPointGY, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8240,8 +8240,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8250,7 +8250,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorPointGIntensity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8264,8 +8264,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8274,7 +8274,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorPointBX, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8288,8 +8288,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8298,7 +8298,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorPointBY, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8312,8 +8312,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8322,7 +8322,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorPointBIntensity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8336,8 +8336,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8346,7 +8346,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl EnhancedCurrentHue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8384,8 +8384,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8394,7 +8394,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorLoopActive, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8408,8 +8408,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8418,7 +8418,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorLoopDirection, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8432,8 +8432,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8442,7 +8442,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorLoopTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8456,8 +8456,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8466,7 +8466,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorLoopStartEnhancedHue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8480,8 +8480,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8490,7 +8490,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorLoopStoredEnhancedHue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8528,8 +8528,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8538,7 +8538,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorTempPhysicalMinMireds, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8552,8 +8552,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8562,7 +8562,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl ColorTempPhysicalMaxMireds, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8576,8 +8576,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8586,7 +8586,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl CoupleColorTempToLevelMinMireds, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8600,8 +8600,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8610,7 +8610,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ColorControl StartUpColorTemperatureMireds, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8624,8 +8624,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8634,7 +8634,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration PhysicalMinLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8648,8 +8648,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8658,7 +8658,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration PhysicalMaxLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8696,8 +8696,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8706,7 +8706,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration MinLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8720,8 +8720,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8730,7 +8730,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration MaxLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8744,8 +8744,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8754,7 +8754,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration PowerOnLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8768,8 +8768,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8778,7 +8778,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration PowerOnFadeTime, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -8792,8 +8792,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8802,7 +8802,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration IntrinsicBallastFactor, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8816,8 +8816,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8826,7 +8826,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration BallastFactorAdjustment, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8840,8 +8840,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8850,7 +8850,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration LampQuantity, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -8912,8 +8912,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint24 // uint24 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint24 // uint24 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8922,7 +8922,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration LampRatedHours, "
-                     "type:  uint24 // int32_t");
+                     "type:  uint24 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -8936,8 +8936,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint24 // uint24 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint24 // uint24 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8946,7 +8946,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration LampBurnHours, "
-                     "type:  uint24 // int32_t");
+                     "type:  uint24 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -8984,8 +8984,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint24 // uint24 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint24 // uint24 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -8994,7 +8994,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL BallastConfiguration LampBurnHoursTripPoint, "
-                     "type:  uint24 // int32_t");
+                     "type:  uint24 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -9008,8 +9008,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9018,7 +9018,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL IlluminanceMeasurement MeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9032,8 +9032,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9042,7 +9042,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL IlluminanceMeasurement MinMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9056,8 +9056,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9066,7 +9066,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL IlluminanceMeasurement MaxMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9080,8 +9080,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9090,7 +9090,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL IlluminanceMeasurement Tolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9176,8 +9176,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9186,7 +9186,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL IlluminanceLevelSensing IlluminanceTargetLevel, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9272,8 +9272,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9282,7 +9282,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL TemperatureMeasurement Tolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9368,8 +9368,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9378,7 +9378,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PressureMeasurement Tolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9464,8 +9464,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9474,7 +9474,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PressureMeasurement ScaledTolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9512,8 +9512,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9522,7 +9522,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL FlowMeasurement MeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9536,8 +9536,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9546,7 +9546,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL FlowMeasurement MinMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9560,8 +9560,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9570,7 +9570,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL FlowMeasurement MaxMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9584,8 +9584,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9594,7 +9594,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL FlowMeasurement Tolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9608,8 +9608,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9618,7 +9618,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL RelativityHumidity MeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9632,8 +9632,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9642,7 +9642,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL RelativityHumidity MinMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9656,8 +9656,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9666,7 +9666,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL RelativityHumidity MaxMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9680,8 +9680,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9690,7 +9690,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL RelativityHumidity Tolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9776,8 +9776,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9786,7 +9786,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OccupancySensing PIROccupiedToUnoccupiedDelay, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9800,8 +9800,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9810,7 +9810,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OccupancySensing PIRUnoccupiedToOccupiedDelay, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9824,8 +9824,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9834,7 +9834,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OccupancySensing PIRUnoccupiedToOccupiedThreshold, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -9848,8 +9848,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9858,7 +9858,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OccupancySensing UltrasonicOccupiedToUnoccupiedDelay, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9872,8 +9872,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9882,7 +9882,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OccupancySensing UltrasonicUnoccupiedToOccupiedDelay, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9896,8 +9896,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9906,7 +9906,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OccupancySensing UltrasonicUnoccupiedToOccupiedThreshold, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -9920,8 +9920,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9930,7 +9930,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OccupancySensing PhysicalContactOccupiedToUnoccupiedDelay, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9944,8 +9944,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9954,7 +9954,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OccupancySensing PhysicalContactUnoccupiedToOccupiedDelay, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -9968,8 +9968,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -9978,7 +9978,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL OccupancySensing PhysicalContactUnoccupiedToOccupiedThreshold, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -9992,8 +9992,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10002,7 +10002,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL SoilMoisture MeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10016,8 +10016,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10026,7 +10026,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL SoilMoisture MinMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10040,8 +10040,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10050,7 +10050,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL SoilMoisture MaxMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10064,8 +10064,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10074,7 +10074,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL SoilMoisture Tolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10088,8 +10088,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10098,7 +10098,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PhMeasurement MeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10112,8 +10112,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10122,7 +10122,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PhMeasurement MinMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10136,8 +10136,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10146,7 +10146,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PhMeasurement MaxMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10160,8 +10160,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10170,7 +10170,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL PhMeasurement Tolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10184,8 +10184,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10194,7 +10194,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalConductivityMeasurement MeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10208,8 +10208,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10218,7 +10218,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalConductivityMeasurement MinMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10232,8 +10232,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10242,7 +10242,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalConductivityMeasurement MaxMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10256,8 +10256,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10266,7 +10266,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalConductivityMeasurement Tolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10280,8 +10280,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10290,7 +10290,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindSpeedMeasurement MeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10304,8 +10304,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10314,7 +10314,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindSpeedMeasurement MinMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10328,8 +10328,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10338,7 +10338,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindSpeedMeasurement MaxMeasuredValue, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10352,8 +10352,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10362,7 +10362,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL WindSpeedMeasurement Tolerance, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10760,8 +10760,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10770,7 +10770,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL IASZone ZoneID, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -10784,8 +10784,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10794,7 +10794,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL IASZone NumberOfZoneSensitivityLevelsSupported, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -10808,8 +10808,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10818,7 +10818,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL IASZone CurrentZoneSensitivityLevel, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -10832,8 +10832,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10842,7 +10842,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL IASWD MaxDuration, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -10856,8 +10856,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10866,7 +10866,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering CurrentSummationDelivered, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -10880,8 +10880,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10890,7 +10890,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering CurrentSummationReceived, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -10904,8 +10904,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10914,7 +10914,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering CurrentMaxDemandDelivered, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -10976,8 +10976,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // UTC // UTC // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // UTC // UTC // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -10986,7 +10986,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering ReadingSnapShotTime, "
-                     "type:  UTC // uint8_t");
+                     "type:  UTC // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -11000,8 +11000,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // UTC // UTC // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // UTC // UTC // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11010,7 +11010,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering CurrentMaxDemandDeliveredTime, "
-                     "type:  UTC // uint8_t");
+                     "type:  UTC // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -11024,8 +11024,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // UTC // UTC // uint8_t
-    std::string attribute_type_string           = "uint8_t";
+    // UTC // UTC // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11034,7 +11034,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering CurrentMaxDemandReceivedTime, "
-                     "type:  UTC // uint8_t");
+                     "type:  UTC // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -11048,8 +11048,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11058,7 +11058,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering DefaultUpdatePeriod, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -11096,8 +11096,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11106,7 +11106,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering CurrentInletEnergyCarrierSummation, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -11120,8 +11120,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11130,7 +11130,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering CurrentOutletEnergyCarrierSummation, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -11216,8 +11216,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint24 // uint24 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint24 // uint24 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11226,7 +11226,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering Multiplier, "
-                     "type:  uint24 // int32_t");
+                     "type:  uint24 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -11240,8 +11240,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint24 // uint24 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint24 // uint24 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11250,7 +11250,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Metering Divisor, "
-                     "type:  uint24 // int32_t");
+                     "type:  uint24 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -11720,8 +11720,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11730,7 +11730,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement DCVoltageMultiplier, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -11744,8 +11744,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11754,7 +11754,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement DCVoltageDivisor, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -11768,8 +11768,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11778,7 +11778,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement DCCurrentMultiplier, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -11792,8 +11792,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11802,7 +11802,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement DCCurrentDivisor, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -11816,8 +11816,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11826,7 +11826,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement DCPowerMultiplier, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -11840,8 +11840,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11850,7 +11850,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement DCPowerDivisor, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -11864,8 +11864,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11874,7 +11874,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACFrequency, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -11888,8 +11888,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11898,7 +11898,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACFrequencyMin, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -11912,8 +11912,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11922,7 +11922,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACFrequencyMax, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -11936,8 +11936,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -11946,7 +11946,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement NeutralCurrent, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12008,8 +12008,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12018,7 +12018,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement TotalApparentPower, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -12320,8 +12320,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12330,7 +12330,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACFrequencyMultiplier, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12344,8 +12344,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12354,7 +12354,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACFrequencyDivisor, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12368,8 +12368,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12378,7 +12378,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement PowerMultiplier, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -12392,8 +12392,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12402,7 +12402,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement PowerDivisor, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -12464,8 +12464,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12474,7 +12474,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement LineCurrent, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12536,8 +12536,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12546,7 +12546,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltage, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12560,8 +12560,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12570,7 +12570,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageMin, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12584,8 +12584,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12594,7 +12594,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageMax, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12608,8 +12608,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12618,7 +12618,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSCurrent, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12632,8 +12632,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12642,7 +12642,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSCurrentMin, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12656,8 +12656,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12666,7 +12666,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSCurrentMax, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12776,8 +12776,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12786,7 +12786,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ApparentPower, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12824,8 +12824,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12834,7 +12834,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement AverageRMSVoltageMeasurementPeriod, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12848,8 +12848,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12858,7 +12858,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement AverageRMSOverVoltageCounter, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12872,8 +12872,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12882,7 +12882,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement AverageRMSUnderVoltageCounter, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12896,8 +12896,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12906,7 +12906,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSExtremeOverVoltagePeriod, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12920,8 +12920,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12930,7 +12930,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSExtremeUnderVoltagePeriod, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12944,8 +12944,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12954,7 +12954,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageSagPeriod, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12968,8 +12968,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -12978,7 +12978,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageSwellPeriod, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -12992,8 +12992,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13002,7 +13002,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACVoltageMultiplier, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13016,8 +13016,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13026,7 +13026,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACVoltageDivisor, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13040,8 +13040,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13050,7 +13050,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACCurrentMultiplier, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13064,8 +13064,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13074,7 +13074,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACCurrentDivisor, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13088,8 +13088,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13098,7 +13098,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACPowerMultiplier, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13112,8 +13112,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13122,7 +13122,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ACPowerDivisor, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13472,8 +13472,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13482,7 +13482,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement LineCurrentPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13544,8 +13544,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13554,7 +13554,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltagePhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13568,8 +13568,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13578,7 +13578,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageMinPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13592,8 +13592,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13602,7 +13602,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageMaxPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13616,8 +13616,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13626,7 +13626,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSCurrentPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13640,8 +13640,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13650,7 +13650,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSCurrentMinPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13664,8 +13664,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13674,7 +13674,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSCurrentMaxPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13784,8 +13784,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13794,7 +13794,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ApparentPowerPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13832,8 +13832,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13842,7 +13842,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement AverageRMSVoltageMeasurementPeriodPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13856,8 +13856,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13866,7 +13866,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement AverageRMSOverVoltageCounterPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13880,8 +13880,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13890,7 +13890,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement AverageRMSUnderVoltageCounterPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13904,8 +13904,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13914,7 +13914,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSExtremeOverVoltagePeriodPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13928,8 +13928,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13938,7 +13938,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSExtremeUnderVoltagePeriodPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13952,8 +13952,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13962,7 +13962,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageSagPeriodPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -13976,8 +13976,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -13986,7 +13986,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageSwellPeriodPhB, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14000,8 +14000,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14010,7 +14010,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement LineCurrentPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14072,8 +14072,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14082,7 +14082,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltagePhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14096,8 +14096,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14106,7 +14106,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageMinPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14120,8 +14120,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14130,7 +14130,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageMaxPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14144,8 +14144,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14154,7 +14154,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSCurrentPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14168,8 +14168,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14178,7 +14178,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSCurrentMinPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14192,8 +14192,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14202,7 +14202,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSCurrentMaxPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14312,8 +14312,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14322,7 +14322,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement ApparentPowerPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14360,8 +14360,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14370,7 +14370,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement AverageRMSVoltageMeasurementPeriodPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14384,8 +14384,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14394,7 +14394,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement AverageRMSOverVoltageCounterPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14408,8 +14408,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14418,7 +14418,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement AverageRMSUnderVoltageCounterPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14432,8 +14432,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14442,7 +14442,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSExtremeOverVoltagePeriodPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14456,8 +14456,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14466,7 +14466,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSExtremeUnderVoltagePeriodPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14480,8 +14480,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14490,7 +14490,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageSagPeriodPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14504,8 +14504,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14514,7 +14514,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ElectricalMeasurement RMSVoltageSwellPeriodPhC, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14528,8 +14528,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14538,7 +14538,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics NumberOfResets, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14552,8 +14552,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14562,7 +14562,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics PersistentMemoryWrites, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14576,8 +14576,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14586,7 +14586,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics MacRxBcast, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -14600,8 +14600,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14610,7 +14610,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics MacTxBcast, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -14624,8 +14624,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14634,7 +14634,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics MacRxUcast, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -14648,8 +14648,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14658,7 +14658,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics MacTxUcast, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -14672,8 +14672,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14682,7 +14682,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics MacTxUcastRetry, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14696,8 +14696,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14706,7 +14706,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics MacTxUcastFail, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14720,8 +14720,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14730,7 +14730,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics APSRxBcast, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14744,8 +14744,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14754,7 +14754,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics APSTxBcast, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14768,8 +14768,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14778,7 +14778,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics APSRxUcast, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14792,8 +14792,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14802,7 +14802,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics APSTxUcastSuccess, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14816,8 +14816,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14826,7 +14826,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics APSTxUcastRetry, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14840,8 +14840,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14850,7 +14850,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics APSTxUcastFail, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14864,8 +14864,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14874,7 +14874,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics RouteDiscInitiated, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14888,8 +14888,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14898,7 +14898,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics NeighborAdded, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14912,8 +14912,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14922,7 +14922,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics NeighborRemoved, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14936,8 +14936,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14946,7 +14946,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics NeighborStale, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14960,8 +14960,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14970,7 +14970,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics JoinIndication, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -14984,8 +14984,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -14994,7 +14994,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics ChildMoved, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15008,8 +15008,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15018,7 +15018,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics NWKFCFailure, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15032,8 +15032,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15042,7 +15042,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics APSFCFailure, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15056,8 +15056,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15066,7 +15066,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics APSUnauthorizedKey, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15080,8 +15080,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15090,7 +15090,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics NWKDecryptFailures, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15104,8 +15104,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15114,7 +15114,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics APSDecryptFailures, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15128,8 +15128,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15138,7 +15138,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics PacketBufferAllocateFailures, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15152,8 +15152,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15162,7 +15162,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics RelayedUcast, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15176,8 +15176,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15186,7 +15186,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics PHYToMACQueueLimitReached, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15200,8 +15200,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15210,7 +15210,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics PacketValidateDropCount, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15224,8 +15224,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15234,7 +15234,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics AverageMACRetryPerAPSMessageSent, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -15248,8 +15248,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15258,7 +15258,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL Diagnostics LastMessageLQI, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -15344,8 +15344,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15354,7 +15354,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL State EndpointIdList, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -15416,8 +15416,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15426,7 +15426,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL State MaximumCommandDelay, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -15536,8 +15536,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -15546,7 +15546,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL SystemMetrics ReportingIntervalSeconds, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -15992,8 +15992,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16002,7 +16002,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL SystemMetrics UptimeMinutes, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -16160,8 +16160,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16170,7 +16170,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL SystemMetrics SystemInterrupts, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -16280,8 +16280,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16290,7 +16290,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ApplicationMonitoring UptimeMinutes, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -16304,8 +16304,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16314,7 +16314,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ApplicationMonitoring ProcessId, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -16424,8 +16424,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16434,7 +16434,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ApplicationMonitoring MQTTStatisticsReportingIntervalSeconds, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -16448,8 +16448,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16458,7 +16458,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ApplicationMonitoring MQTTMessagesSent, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -16472,8 +16472,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16482,7 +16482,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ApplicationMonitoring MQTTMessagesReceived, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -16496,8 +16496,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint64 // uint64 // int64_t
-    std::string attribute_type_string           = "int64_t";
+    // uint64 // uint64 // uint64_t
+    std::string attribute_type_string           = "uint64_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16506,7 +16506,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ApplicationMonitoring MQTTSubscriptionCount, "
-                     "type:  uint64 // int64_t");
+                     "type:  uint64 // uint64_t");
     }
 
     status |= attribute_store_register_type(
@@ -16592,8 +16592,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint32 // uint32 // int32_t
-    std::string attribute_type_string           = "int32_t";
+    // uint32 // uint32 // uint32_t
+    std::string attribute_type_string           = "uint32_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16602,7 +16602,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL ApplicationMonitoring ApplicationStatisticsReportingIntervalSeconds, "
-                     "type:  uint32 // int32_t");
+                     "type:  uint32 // uint32_t");
     }
 
     status |= attribute_store_register_type(
@@ -16808,8 +16808,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint16 // uint16 // int16_t
-    std::string attribute_type_string           = "int16_t";
+    // uint16 // uint16 // uint16_t
+    std::string attribute_type_string           = "uint16_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -16818,7 +16818,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL UserCredential SupportedUserUniqueIdentifiers, "
-                     "type:  uint16 // int16_t");
+                     "type:  uint16 // uint16_t");
     }
 
     status |= attribute_store_register_type(
@@ -17384,8 +17384,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -17394,7 +17394,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL UnifyHumidityControl HumidifierSetpointPrecision, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -17504,8 +17504,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -17514,7 +17514,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL UnifyHumidityControl DehumidifierSetpointPrecision, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
@@ -17624,8 +17624,8 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
   // clang-format on
 
   {
-    // uint8 // uint8 // int8_t
-    std::string attribute_type_string           = "int8_t";
+    // uint8 // uint8 // uint8_t
+    std::string attribute_type_string           = "uint8_t";
     attribute_store_storage_type_t storage_type = UNKNOWN_STORAGE_TYPE;
 
     // clang-format off
@@ -17634,7 +17634,7 @@ sl_status_t unify_dotdot_attribute_store_registration_init()
     if (storage_type == UNKNOWN_STORAGE_TYPE) {
       sl_log_warning(LOG_TAG,
                      "Unkown storage type for ZCL UnifyHumidityControl AutoSetpointPrecision, "
-                     "type:  uint8 // int8_t");
+                     "type:  uint8 // uint8_t");
     }
 
     status |= attribute_store_register_type(
diff --git a/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.c b/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.c
index 81266094a1..12f32c1833 100644
--- a/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.c
+++ b/components/unify_dotdot_attribute_store/zap-generated/test/unify_dotdot_attribute_store_test.c
@@ -4926,7 +4926,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_identify_identify_callback) {
     // Dummy command parameters
-      int16_t identify_time_value;
+      uint16_t identify_time_value;
       memset(&identify_time_value, 0x00, sizeof(identify_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_identify_identify_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -4937,7 +4937,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_identify_identify_query_response_callback) {
     // Dummy command parameters
-      int16_t timeout_value;
+      uint16_t timeout_value;
       memset(&timeout_value, 0x00, sizeof(timeout_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_identify_identify_query_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -4970,7 +4970,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_add_group_callback) {
     // Dummy command parameters
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
       const char* group_name_value;
       memset(&group_name_value, 0x00, sizeof(group_name_value));
@@ -4987,7 +4987,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_groups_add_group_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5000,7 +5000,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_view_group_callback) {
     // Dummy command parameters
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_groups_view_group_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5013,7 +5013,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
       const char* group_name_value;
       memset(&group_name_value, 0x00, sizeof(group_name_value));
@@ -5039,7 +5039,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_get_group_membership_response_callback) {
     // Dummy command parameters
-      int8_t capacity_value;
+      uint8_t capacity_value;
       memset(&capacity_value, 0x00, sizeof(capacity_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_groups_get_group_membership_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5052,7 +5052,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_remove_group_callback) {
     // Dummy command parameters
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_groups_remove_group_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5065,7 +5065,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_groups_remove_group_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5085,7 +5085,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_add_group_if_identifying_callback) {
     // Dummy command parameters
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
       const char* group_name_value;
       memset(&group_name_value, 0x00, sizeof(group_name_value));
@@ -5100,15 +5100,15 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_add_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * scene_name_value;
+      const char* scene_name_value;
       memset(&scene_name_value, 0x00, sizeof(scene_name_value));
-      int8_t transition_time100ms_value;
+      uint8_t transition_time100ms_value;
       memset(&transition_time100ms_value, 0x00, sizeof(transition_time100ms_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_add_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5131,9 +5131,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_add_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5148,9 +5148,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_view_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_view_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5165,13 +5165,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * scene_name_value;
+      const char* scene_name_value;
       memset(&scene_name_value, 0x00, sizeof(scene_name_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_view_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5192,9 +5192,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_remove_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_remove_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5209,9 +5209,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_remove_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5226,7 +5226,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_remove_all_scenes_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_remove_all_scenes_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5239,7 +5239,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5252,9 +5252,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_store_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_store_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5269,9 +5269,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_store_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5286,11 +5286,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_recall_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_recall_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5305,7 +5305,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_get_scene_membership_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_get_scene_membership_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5318,9 +5318,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int8_t capacity_value;
+      uint8_t capacity_value;
       memset(&capacity_value, 0x00, sizeof(capacity_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_get_scene_membership_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5337,13 +5337,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_enhanced_add_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * scene_name_value;
+      const char* scene_name_value;
       memset(&scene_name_value, 0x00, sizeof(scene_name_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_enhanced_add_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5364,9 +5364,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5381,9 +5381,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_enhanced_view_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_enhanced_view_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5398,13 +5398,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * scene_name_value;
+      const char* scene_name_value;
       memset(&scene_name_value, 0x00, sizeof(scene_name_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5427,13 +5427,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t mode_value;
       memset(&mode_value, 0x00, sizeof(mode_value));
-      uint8_t * group_identifier_from_value;
+      uint16_t group_identifier_from_value;
       memset(&group_identifier_from_value, 0x00, sizeof(group_identifier_from_value));
-      int8_t scene_identifier_from_value;
+      uint8_t scene_identifier_from_value;
       memset(&scene_identifier_from_value, 0x00, sizeof(scene_identifier_from_value));
-      uint8_t * group_identifier_to_value;
+      uint16_t group_identifier_to_value;
       memset(&group_identifier_to_value, 0x00, sizeof(group_identifier_to_value));
-      int8_t scene_identifier_to_value;
+      uint8_t scene_identifier_to_value;
       memset(&scene_identifier_to_value, 0x00, sizeof(scene_identifier_to_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_copy_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5454,9 +5454,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * group_identifier_from_value;
+      uint16_t group_identifier_from_value;
       memset(&group_identifier_from_value, 0x00, sizeof(group_identifier_from_value));
-      int8_t scene_identifier_from_value;
+      uint8_t scene_identifier_from_value;
       memset(&scene_identifier_from_value, 0x00, sizeof(scene_identifier_from_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_scenes_copy_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5494,7 +5494,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       OffWithEffectEffectIdentifier effect_identifier_value;
       memset(&effect_identifier_value, 0x00, sizeof(effect_identifier_value));
-      int8_t effect_variant_value;
+      uint8_t effect_variant_value;
       memset(&effect_variant_value, 0x00, sizeof(effect_variant_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_on_off_off_with_effect_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5516,9 +5516,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t on_off_control_value;
       memset(&on_off_control_value, 0x00, sizeof(on_off_control_value));
-      int16_t on_time_value;
+      uint16_t on_time_value;
       memset(&on_time_value, 0x00, sizeof(on_time_value));
-      int16_t off_wait_time_value;
+      uint16_t off_wait_time_value;
       memset(&off_wait_time_value, 0x00, sizeof(off_wait_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_on_off_on_with_timed_off_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5533,9 +5533,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_level_move_to_level_callback) {
     // Dummy command parameters
-      int8_t level_value;
+      uint8_t level_value;
       memset(&level_value, 0x00, sizeof(level_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -5558,7 +5558,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       MoveStepMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int8_t rate_value;
+      uint8_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -5581,9 +5581,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       MoveStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int8_t step_size_value;
+      uint8_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -5621,9 +5621,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_level_move_to_level_with_on_off_callback) {
     // Dummy command parameters
-      int8_t level_value;
+      uint8_t level_value;
       memset(&level_value, 0x00, sizeof(level_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -5646,7 +5646,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       MoveStepMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int8_t rate_value;
+      uint8_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -5669,9 +5669,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       MoveStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int8_t step_size_value;
+      uint8_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -5709,7 +5709,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_level_move_to_closest_frequency_callback) {
     // Dummy command parameters
-      int16_t frequency_value;
+      uint16_t frequency_value;
       memset(&frequency_value, 0x00, sizeof(frequency_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_level_move_to_closest_frequency_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5722,7 +5722,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t alarm_code_value;
       memset(&alarm_code_value, 0x00, sizeof(alarm_code_value));
-      uint8_t cluster_identifier_value;
+      uint16_t cluster_identifier_value;
       memset(&cluster_identifier_value, 0x00, sizeof(cluster_identifier_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_alarms_reset_alarm_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5737,7 +5737,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t alarm_code_value;
       memset(&alarm_code_value, 0x00, sizeof(alarm_code_value));
-      uint8_t cluster_identifier_value;
+      uint16_t cluster_identifier_value;
       memset(&cluster_identifier_value, 0x00, sizeof(cluster_identifier_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_alarms_alarm_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5761,9 +5761,9 @@ void test_automatic_deduction_of_supported_commands()
       memset(&status_value, 0x00, sizeof(status_value));
       uint8_t alarm_code_value;
       memset(&alarm_code_value, 0x00, sizeof(alarm_code_value));
-      uint8_t cluster_identifier_value;
+      uint16_t cluster_identifier_value;
       memset(&cluster_identifier_value, 0x00, sizeof(cluster_identifier_value));
-      int32_t time_stamp_value;
+      uint32_t time_stamp_value;
       memset(&time_stamp_value, 0x00, sizeof(time_stamp_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_alarms_get_alarm_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5803,7 +5803,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       bool start_fast_polling_value;
       memset(&start_fast_polling_value, 0x00, sizeof(start_fast_polling_value));
-      int16_t fast_poll_timeout_value;
+      uint16_t fast_poll_timeout_value;
       memset(&fast_poll_timeout_value, 0x00, sizeof(fast_poll_timeout_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_poll_control_check_in_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5823,7 +5823,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback) {
     // Dummy command parameters
-      int32_t new_long_poll_interval_value;
+      uint32_t new_long_poll_interval_value;
       memset(&new_long_poll_interval_value, 0x00, sizeof(new_long_poll_interval_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5834,7 +5834,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback) {
     // Dummy command parameters
-      int16_t new_short_poll_interval_value;
+      uint16_t new_short_poll_interval_value;
       memset(&new_short_poll_interval_value, 0x00, sizeof(new_short_poll_interval_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5845,7 +5845,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_lock_door_callback) {
     // Dummy command parameters
-      uint8_t pin_or_rfid_code_value;
+      const char* pin_or_rfid_code_value;
       memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_lock_door_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5867,7 +5867,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_unlock_door_callback) {
     // Dummy command parameters
-      uint8_t pin_or_rfid_code_value;
+      const char* pin_or_rfid_code_value;
       memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_unlock_door_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5889,7 +5889,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_toggle_callback) {
     // Dummy command parameters
-      uint8_t pin_or_rfid_code_value;
+      const char* pin_or_rfid_code_value;
       memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_toggle_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5911,9 +5911,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback) {
     // Dummy command parameters
-      int16_t timeout_in_seconds_value;
+      uint16_t timeout_in_seconds_value;
       memset(&timeout_in_seconds_value, 0x00, sizeof(timeout_in_seconds_value));
-      uint8_t pin_or_rfid_code_value;
+      const char* pin_or_rfid_code_value;
       memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5937,7 +5937,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_log_record_callback) {
     // Dummy command parameters
-      int16_t log_index_value;
+      uint16_t log_index_value;
       memset(&log_index_value, 0x00, sizeof(log_index_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_log_record_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5948,19 +5948,19 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_log_record_response_callback) {
     // Dummy command parameters
-      int16_t log_entryid_value;
+      uint16_t log_entryid_value;
       memset(&log_entryid_value, 0x00, sizeof(log_entryid_value));
-      int32_t timestamp_value;
+      uint32_t timestamp_value;
       memset(&timestamp_value, 0x00, sizeof(timestamp_value));
       GetLogRecordResponseEventType event_type_value;
       memset(&event_type_value, 0x00, sizeof(event_type_value));
       DrlkOperEventSource source_operation_event_value;
       memset(&source_operation_event_value, 0x00, sizeof(source_operation_event_value));
-      int8_t event_id_or_alarm_code_value;
+      uint8_t event_id_or_alarm_code_value;
       memset(&event_id_or_alarm_code_value, 0x00, sizeof(event_id_or_alarm_code_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
-      uint8_t pin_value;
+      const char* pin_value;
       memset(&pin_value, 0x00, sizeof(pin_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_log_record_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -5983,13 +5983,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_pin_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
-      uint8_t pin_value;
+      const char* pin_value;
       memset(&pin_value, 0x00, sizeof(pin_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_set_pin_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6017,7 +6017,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_pin_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_pin_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6028,13 +6028,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_pin_code_response_callback) {
     // Dummy command parameters
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
-      uint8_t code_value;
+      const char* code_value;
       memset(&code_value, 0x00, sizeof(code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_pin_code_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6051,7 +6051,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_pin_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_clear_pin_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6091,7 +6091,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_user_status_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -6117,7 +6117,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_status_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_user_status_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6128,7 +6128,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_status_response_callback) {
     // Dummy command parameters
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -6143,19 +6143,19 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       uint8_t days_mask_value;
       memset(&days_mask_value, 0x00, sizeof(days_mask_value));
-      int8_t start_hour_value;
+      uint8_t start_hour_value;
       memset(&start_hour_value, 0x00, sizeof(start_hour_value));
-      int8_t start_minute_value;
+      uint8_t start_minute_value;
       memset(&start_minute_value, 0x00, sizeof(start_minute_value));
-      int8_t end_hour_value;
+      uint8_t end_hour_value;
       memset(&end_hour_value, 0x00, sizeof(end_hour_value));
-      int8_t end_minute_value;
+      uint8_t end_minute_value;
       memset(&end_minute_value, 0x00, sizeof(end_minute_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6189,9 +6189,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6204,21 +6204,21 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback) {
     // Dummy command parameters
-      int8_t scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
       uint8_t days_mask_value;
       memset(&days_mask_value, 0x00, sizeof(days_mask_value));
-      int8_t start_hour_value;
+      uint8_t start_hour_value;
       memset(&start_hour_value, 0x00, sizeof(start_hour_value));
-      int8_t start_minute_value;
+      uint8_t start_minute_value;
       memset(&start_minute_value, 0x00, sizeof(start_minute_value));
-      int8_t end_hour_value;
+      uint8_t end_hour_value;
       memset(&end_hour_value, 0x00, sizeof(end_hour_value));
-      int8_t end_minute_value;
+      uint8_t end_minute_value;
       memset(&end_minute_value, 0x00, sizeof(end_minute_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6243,9 +6243,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6269,13 +6269,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
-      int32_t local_start_time_value;
+      uint32_t local_start_time_value;
       memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-      int32_t local_end_time_value;
+      uint32_t local_end_time_value;
       memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6303,9 +6303,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6318,15 +6318,15 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback) {
     // Dummy command parameters
-      int8_t scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int32_t local_start_time_value;
+      uint32_t local_start_time_value;
       memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-      int32_t local_end_time_value;
+      uint32_t local_end_time_value;
       memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6345,9 +6345,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6371,11 +6371,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * holiday_scheduleid_value;
+      uint8_t holiday_scheduleid_value;
       memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
-      int32_t local_start_time_value;
+      uint32_t local_start_time_value;
       memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-      int32_t local_end_time_value;
+      uint32_t local_end_time_value;
       memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
       DrlkOperMode operating_mode_during_holiday_value;
       memset(&operating_mode_during_holiday_value, 0x00, sizeof(operating_mode_during_holiday_value));
@@ -6405,7 +6405,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * holiday_scheduleid_value;
+      uint8_t holiday_scheduleid_value;
       memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6416,13 +6416,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback) {
     // Dummy command parameters
-      int8_t holiday_scheduleid_value;
+      uint8_t holiday_scheduleid_value;
       memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int32_t local_start_time_value;
+      uint32_t local_start_time_value;
       memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-      int32_t local_end_time_value;
+      uint32_t local_end_time_value;
       memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
       DrlkOperMode operating_mode_during_holiday_value;
       memset(&operating_mode_during_holiday_value, 0x00, sizeof(operating_mode_during_holiday_value));
@@ -6443,7 +6443,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * holiday_scheduleid_value;
+      uint8_t holiday_scheduleid_value;
       memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6465,7 +6465,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_user_type_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -6491,7 +6491,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_type_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_user_type_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6502,7 +6502,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_type_response_callback) {
     // Dummy command parameters
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -6517,13 +6517,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_rfid_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
-      uint8_t rfid_code_value;
+      const char* rfid_code_value;
       memset(&rfid_code_value, 0x00, sizeof(rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_set_rfid_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6551,7 +6551,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_rfid_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_rfid_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6562,13 +6562,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_rfid_code_response_callback) {
     // Dummy command parameters
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
-      uint8_t rfid_code_value;
+      const char* rfid_code_value;
       memset(&rfid_code_value, 0x00, sizeof(rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_rfid_code_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6585,7 +6585,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_rfid_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_clear_rfid_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6627,11 +6627,11 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       DataOperationTypeEnum operation_type_value;
       memset(&operation_type_value, 0x00, sizeof(operation_type_value));
-      int16_t user_index_value;
+      uint16_t user_index_value;
       memset(&user_index_value, 0x00, sizeof(user_index_value));
       const char* user_name_value;
       memset(&user_name_value, 0x00, sizeof(user_name_value));
-      int32_t user_uniqueid_value;
+      uint32_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -6660,7 +6660,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_callback) {
     // Dummy command parameters
-      int16_t user_index_value;
+      uint16_t user_index_value;
       memset(&user_index_value, 0x00, sizeof(user_index_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_get_user_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6678,7 +6678,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_user_callback) {
     // Dummy command parameters
-      int16_t user_index_value;
+      uint16_t user_index_value;
       memset(&user_index_value, 0x00, sizeof(user_index_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_clear_user_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6693,11 +6693,11 @@ void test_automatic_deduction_of_supported_commands()
       memset(&operation_event_source_value, 0x00, sizeof(operation_event_source_value));
       OperatingEventNotificationOperationEventCode operation_event_code_value;
       memset(&operation_event_code_value, 0x00, sizeof(operation_event_code_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
-      uint8_t pin_value;
+      const char* pin_value;
       memset(&pin_value, 0x00, sizeof(pin_value));
-      int32_t local_time_value;
+      uint32_t local_time_value;
       memset(&local_time_value, 0x00, sizeof(local_time_value));
       const char* data_value;
       memset(&data_value, 0x00, sizeof(data_value));
@@ -6724,15 +6724,15 @@ void test_automatic_deduction_of_supported_commands()
       memset(&program_event_source_value, 0x00, sizeof(program_event_source_value));
       ProgrammingEventNotificationProgramEventCode program_event_code_value;
       memset(&program_event_code_value, 0x00, sizeof(program_event_code_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
-      uint8_t pin_value;
+      const char* pin_value;
       memset(&pin_value, 0x00, sizeof(pin_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
       DrlkUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
-      int32_t local_time_value;
+      uint32_t local_time_value;
       memset(&local_time_value, 0x00, sizeof(local_time_value));
       const char* data_value;
       memset(&data_value, 0x00, sizeof(data_value));
@@ -6763,9 +6763,9 @@ void test_automatic_deduction_of_supported_commands()
       memset(&operation_type_value, 0x00, sizeof(operation_type_value));
       CredentialStruct credential_value;
       memset(&credential_value, 0x00, sizeof(credential_value));
-      uint8_t credential_data_value;
+      const char* credential_data_value;
       memset(&credential_data_value, 0x00, sizeof(credential_data_value));
-      int16_t user_index_value;
+      uint16_t user_index_value;
       memset(&user_index_value, 0x00, sizeof(user_index_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -6826,7 +6826,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_unbolt_door_callback) {
     // Dummy command parameters
-      uint8_t pin_code_value;
+      const char* pin_code_value;
       memset(&pin_code_value, 0x00, sizeof(pin_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_door_lock_unbolt_door_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6858,7 +6858,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_window_covering_go_to_lift_value_callback) {
     // Dummy command parameters
-      int16_t lift_value_value;
+      uint16_t lift_value_value;
       memset(&lift_value_value, 0x00, sizeof(lift_value_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_window_covering_go_to_lift_value_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6869,7 +6869,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback) {
     // Dummy command parameters
-      int8_t percentage_lift_value_value;
+      uint8_t percentage_lift_value_value;
       memset(&percentage_lift_value_value, 0x00, sizeof(percentage_lift_value_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6880,7 +6880,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback) {
     // Dummy command parameters
-      int16_t tilt_value_value;
+      uint16_t tilt_value_value;
       memset(&tilt_value_value, 0x00, sizeof(tilt_value_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6891,7 +6891,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback) {
     // Dummy command parameters
-      int8_t percentage_tilt_value_value;
+      uint8_t percentage_tilt_value_value;
       memset(&percentage_tilt_value_value, 0x00, sizeof(percentage_tilt_value_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6902,7 +6902,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_barrier_control_go_to_percent_callback) {
     // Dummy command parameters
-      int8_t percent_open_value;
+      uint8_t percent_open_value;
       memset(&percent_open_value, 0x00, sizeof(percent_open_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_barrier_control_go_to_percent_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -6977,17 +6977,17 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback) {
     // Dummy command parameters
-      int16_t time_of_day_value;
+      uint16_t time_of_day_value;
       memset(&time_of_day_value, 0x00, sizeof(time_of_day_value));
       uint8_t relay_status_value;
       memset(&relay_status_value, 0x00, sizeof(relay_status_value));
       int16_t local_temperature_value;
       memset(&local_temperature_value, 0x00, sizeof(local_temperature_value));
-      int8_t humidity_percentage_value;
+      uint8_t humidity_percentage_value;
       memset(&humidity_percentage_value, 0x00, sizeof(humidity_percentage_value));
       int16_t set_point_value;
       memset(&set_point_value, 0x00, sizeof(set_point_value));
-      int16_t unread_entries_value;
+      uint16_t unread_entries_value;
       memset(&unread_entries_value, 0x00, sizeof(unread_entries_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7037,11 +7037,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_hue_callback) {
     // Dummy command parameters
-      int8_t hue_value;
+      uint8_t hue_value;
       memset(&hue_value, 0x00, sizeof(hue_value));
       CCDirection direction_value;
       memset(&direction_value, 0x00, sizeof(direction_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7066,7 +7066,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCMoveMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int8_t rate_value;
+      uint8_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7089,9 +7089,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int8_t step_size_value;
+      uint8_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int8_t transition_time_value;
+      uint8_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7114,9 +7114,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_saturation_callback) {
     // Dummy command parameters
-      int8_t saturation_value;
+      uint8_t saturation_value;
       memset(&saturation_value, 0x00, sizeof(saturation_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7139,7 +7139,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCMoveMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int8_t rate_value;
+      uint8_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7162,9 +7162,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int8_t step_size_value;
+      uint8_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int8_t transition_time_value;
+      uint8_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7187,11 +7187,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback) {
     // Dummy command parameters
-      int8_t hue_value;
+      uint8_t hue_value;
       memset(&hue_value, 0x00, sizeof(hue_value));
-      int8_t saturation_value;
+      uint8_t saturation_value;
       memset(&saturation_value, 0x00, sizeof(saturation_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7214,11 +7214,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_color_callback) {
     // Dummy command parameters
-      int16_t colorx_value;
+      uint16_t colorx_value;
       memset(&colorx_value, 0x00, sizeof(colorx_value));
-      int16_t colory_value;
+      uint16_t colory_value;
       memset(&colory_value, 0x00, sizeof(colory_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7268,7 +7268,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&stepx_value, 0x00, sizeof(stepx_value));
       int16_t stepy_value;
       memset(&stepy_value, 0x00, sizeof(stepy_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7291,9 +7291,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_color_temperature_callback) {
     // Dummy command parameters
-      int16_t color_temperature_mireds_value;
+      uint16_t color_temperature_mireds_value;
       memset(&color_temperature_mireds_value, 0x00, sizeof(color_temperature_mireds_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7314,11 +7314,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback) {
     // Dummy command parameters
-      int16_t enhanced_hue_value;
+      uint16_t enhanced_hue_value;
       memset(&enhanced_hue_value, 0x00, sizeof(enhanced_hue_value));
       CCDirection direction_value;
       memset(&direction_value, 0x00, sizeof(direction_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7343,7 +7343,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCMoveMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int16_t rate_value;
+      uint16_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7366,9 +7366,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int16_t step_size_value;
+      uint16_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7391,11 +7391,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback) {
     // Dummy command parameters
-      int16_t enhanced_hue_value;
+      uint16_t enhanced_hue_value;
       memset(&enhanced_hue_value, 0x00, sizeof(enhanced_hue_value));
-      int8_t saturation_value;
+      uint8_t saturation_value;
       memset(&saturation_value, 0x00, sizeof(saturation_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7424,9 +7424,9 @@ void test_automatic_deduction_of_supported_commands()
       memset(&action_value, 0x00, sizeof(action_value));
       CCColorLoopDirection direction_value;
       memset(&direction_value, 0x00, sizeof(direction_value));
-      int16_t time_value;
+      uint16_t time_value;
       memset(&time_value, 0x00, sizeof(time_value));
-      int16_t start_hue_value;
+      uint16_t start_hue_value;
       memset(&start_hue_value, 0x00, sizeof(start_hue_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7470,11 +7470,11 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCMoveMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int16_t rate_value;
+      uint16_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
-      uint8_t * color_temperature_minimum_mireds_value;
+      uint16_t color_temperature_minimum_mireds_value;
       memset(&color_temperature_minimum_mireds_value, 0x00, sizeof(color_temperature_minimum_mireds_value));
-      uint8_t * color_temperature_maximum_mireds_value;
+      uint16_t color_temperature_maximum_mireds_value;
       memset(&color_temperature_maximum_mireds_value, 0x00, sizeof(color_temperature_maximum_mireds_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7501,13 +7501,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int16_t step_size_value;
+      uint16_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * color_temperature_minimum_mireds_value;
+      uint16_t color_temperature_minimum_mireds_value;
       memset(&color_temperature_minimum_mireds_value, 0x00, sizeof(color_temperature_minimum_mireds_value));
-      uint8_t * color_temperature_maximum_mireds_value;
+      uint16_t color_temperature_maximum_mireds_value;
       memset(&color_temperature_maximum_mireds_value, 0x00, sizeof(color_temperature_maximum_mireds_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -7536,7 +7536,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       ZoneEnrollResponseEnrollResponseCode enroll_response_code_value;
       memset(&enroll_response_code_value, 0x00, sizeof(enroll_response_code_value));
-      int8_t zoneid_value;
+      uint8_t zoneid_value;
       memset(&zoneid_value, 0x00, sizeof(zoneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7553,9 +7553,9 @@ void test_automatic_deduction_of_supported_commands()
       memset(&zone_status_value, 0x00, sizeof(zone_status_value));
       uint8_t extended_status_value;
       memset(&extended_status_value, 0x00, sizeof(extended_status_value));
-      int8_t zoneid_value;
+      uint8_t zoneid_value;
       memset(&zoneid_value, 0x00, sizeof(zoneid_value));
-      int16_t delay_value;
+      uint16_t delay_value;
       memset(&delay_value, 0x00, sizeof(delay_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7581,7 +7581,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       IasZoneType zone_type_value;
       memset(&zone_type_value, 0x00, sizeof(zone_type_value));
-      int16_t manufacturer_code_value;
+      uint16_t manufacturer_code_value;
       memset(&manufacturer_code_value, 0x00, sizeof(manufacturer_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7594,9 +7594,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback) {
     // Dummy command parameters
-      int8_t test_mode_duration_value;
+      uint8_t test_mode_duration_value;
       memset(&test_mode_duration_value, 0x00, sizeof(test_mode_duration_value));
-      int8_t current_zone_sensitivity_level_value;
+      uint8_t current_zone_sensitivity_level_value;
       memset(&current_zone_sensitivity_level_value, 0x00, sizeof(current_zone_sensitivity_level_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7611,9 +7611,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t siren_configuration_value;
       memset(&siren_configuration_value, 0x00, sizeof(siren_configuration_value));
-      int16_t warning_duration_value;
+      uint16_t warning_duration_value;
       memset(&warning_duration_value, 0x00, sizeof(warning_duration_value));
-      int8_t strobe_duty_cycle_value;
+      uint8_t strobe_duty_cycle_value;
       memset(&strobe_duty_cycle_value, 0x00, sizeof(strobe_duty_cycle_value));
       IaswdLevel strobe_level_value;
       memset(&strobe_level_value, 0x00, sizeof(strobe_level_value));
@@ -7643,11 +7643,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback) {
     // Dummy command parameters
-      int8_t profile_count_value;
+      uint8_t profile_count_value;
       memset(&profile_count_value, 0x00, sizeof(profile_count_value));
       ProfileIntervalPeriod profile_interval_period_value;
       memset(&profile_interval_period_value, 0x00, sizeof(profile_interval_period_value));
-      int8_t max_number_of_intervals_value;
+      uint8_t max_number_of_intervals_value;
       memset(&max_number_of_intervals_value, 0x00, sizeof(max_number_of_intervals_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7671,15 +7671,15 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback) {
     // Dummy command parameters
-      uint8_t start_time_value;
+      uint32_t start_time_value;
       memset(&start_time_value, 0x00, sizeof(start_time_value));
       GetMeasurementProfileResponseStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
       ProfileIntervalPeriod profile_interval_period_value;
       memset(&profile_interval_period_value, 0x00, sizeof(profile_interval_period_value));
-      int8_t number_of_intervals_delivered_value;
+      uint8_t number_of_intervals_delivered_value;
       memset(&number_of_intervals_delivered_value, 0x00, sizeof(number_of_intervals_delivered_value));
-      uint8_t attribute_id_value;
+      uint16_t attribute_id_value;
       memset(&attribute_id_value, 0x00, sizeof(attribute_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7700,11 +7700,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback) {
     // Dummy command parameters
-      uint8_t attributeid_value;
+      uint16_t attributeid_value;
       memset(&attributeid_value, 0x00, sizeof(attributeid_value));
-      uint8_t start_time_value;
+      uint32_t start_time_value;
       memset(&start_time_value, 0x00, sizeof(start_time_value));
-      int8_t number_of_intervals_value;
+      uint8_t number_of_intervals_value;
       memset(&number_of_intervals_value, 0x00, sizeof(number_of_intervals_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7725,13 +7725,13 @@ void test_automatic_deduction_of_supported_commands()
       memset(&destinationunid_value, 0x00, sizeof(destinationunid_value));
       bool transmission_successful_value;
       memset(&transmission_successful_value, 0x00, sizeof(transmission_successful_value));
-      int16_t transmission_time_ms_value;
+      uint16_t transmission_time_ms_value;
       memset(&transmission_time_ms_value, 0x00, sizeof(transmission_time_ms_value));
       int8_t tx_powerd_bm_value;
       memset(&tx_powerd_bm_value, 0x00, sizeof(tx_powerd_bm_value));
-      int8_t tx_channel_value;
+      uint8_t tx_channel_value;
       memset(&tx_channel_value, 0x00, sizeof(tx_channel_value));
-      int8_t routing_attempts_value;
+      uint8_t routing_attempts_value;
       memset(&routing_attempts_value, 0x00, sizeof(routing_attempts_value));
       bool route_changed_value;
       memset(&route_changed_value, 0x00, sizeof(route_changed_value));
@@ -7741,7 +7741,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&measured_noise_floord_bm_value, 0x00, sizeof(measured_noise_floord_bm_value));
       int8_t ackrssi_value;
       memset(&ackrssi_value, 0x00, sizeof(ackrssi_value));
-      int8_t ack_channel_value;
+      uint8_t ack_channel_value;
       memset(&ack_channel_value, 0x00, sizeof(ack_channel_value));
       const char* last_route_failed_link_functionalunid_value;
       memset(&last_route_failed_link_functionalunid_value, 0x00, sizeof(last_route_failed_link_functionalunid_value));
@@ -7844,7 +7844,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&cluster_name_value, 0x00, sizeof(cluster_name_value));
       const char* destination_unid_value;
       memset(&destination_unid_value, 0x00, sizeof(destination_unid_value));
-      int8_t destination_ep_value;
+      uint8_t destination_ep_value;
       memset(&destination_ep_value, 0x00, sizeof(destination_ep_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_binding_bind_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7863,7 +7863,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&cluster_name_value, 0x00, sizeof(cluster_name_value));
       const char* destination_unid_value;
       memset(&destination_unid_value, 0x00, sizeof(destination_unid_value));
-      int8_t destination_ep_value;
+      uint8_t destination_ep_value;
       memset(&destination_ep_value, 0x00, sizeof(destination_ep_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_binding_unbind_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7923,7 +7923,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback) {
     // Dummy command parameters
-      int16_t parameter_id_value;
+      uint16_t parameter_id_value;
       memset(&parameter_id_value, 0x00, sizeof(parameter_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7941,7 +7941,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_configuration_parameters_set_parameter_callback) {
     // Dummy command parameters
-      int16_t parameter_id_value;
+      uint16_t parameter_id_value;
       memset(&parameter_id_value, 0x00, sizeof(parameter_id_value));
       int64_t value_value;
       memset(&value_value, 0x00, sizeof(value_value));
@@ -7956,9 +7956,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback) {
     // Dummy command parameters
-      int16_t first_parameter_id_value;
+      uint16_t first_parameter_id_value;
       memset(&first_parameter_id_value, 0x00, sizeof(first_parameter_id_value));
-      int16_t last_parameter_id_value;
+      uint16_t last_parameter_id_value;
       memset(&last_parameter_id_value, 0x00, sizeof(last_parameter_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -7971,7 +7971,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_add_user_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       UserTypeEnum user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -7981,7 +7981,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&credential_rule_value, 0x00, sizeof(credential_rule_value));
       const char* user_name_value;
       memset(&user_name_value, 0x00, sizeof(user_name_value));
-      int16_t expiring_timeout_minutes_value;
+      uint16_t expiring_timeout_minutes_value;
       memset(&expiring_timeout_minutes_value, 0x00, sizeof(expiring_timeout_minutes_value));
       UserNameEncodingType user_name_encoding_value;
       memset(&user_name_encoding_value, 0x00, sizeof(user_name_encoding_value));
@@ -8006,7 +8006,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_modify_user_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       UserTypeEnum user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -8016,7 +8016,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&credential_rule_value, 0x00, sizeof(credential_rule_value));
       const char* user_name_value;
       memset(&user_name_value, 0x00, sizeof(user_name_value));
-      int16_t expiring_timeout_minutes_value;
+      uint16_t expiring_timeout_minutes_value;
       memset(&expiring_timeout_minutes_value, 0x00, sizeof(expiring_timeout_minutes_value));
       UserNameEncodingType user_name_encoding_value;
       memset(&user_name_encoding_value, 0x00, sizeof(user_name_encoding_value));
@@ -8041,7 +8041,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_delete_user_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_user_credential_delete_user_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8052,11 +8052,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_add_credential_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
       const char* credential_data_value;
       memset(&credential_data_value, 0x00, sizeof(credential_data_value));
@@ -8075,11 +8075,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_modify_credential_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
       const char* credential_data_value;
       memset(&credential_data_value, 0x00, sizeof(credential_data_value));
@@ -8098,11 +8098,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_delete_credential_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_user_credential_delete_credential_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8142,7 +8142,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_delete_all_credentials_for_user_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_user_credential_delete_all_credentials_for_user_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8153,7 +8153,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_delete_all_credentials_for_user_by_type_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
@@ -8168,13 +8168,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_credential_learn_start_add_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
-      int8_t credential_learn_timeout_value;
+      uint8_t credential_learn_timeout_value;
       memset(&credential_learn_timeout_value, 0x00, sizeof(credential_learn_timeout_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_user_credential_credential_learn_start_add_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8191,13 +8191,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_credential_learn_start_modify_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
-      int8_t credential_learn_timeout_value;
+      uint8_t credential_learn_timeout_value;
       memset(&credential_learn_timeout_value, 0x00, sizeof(credential_learn_timeout_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_user_credential_credential_learn_start_modify_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8223,13 +8223,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t source_user_uniqueid_value;
+      uint16_t source_user_uniqueid_value;
       memset(&source_user_uniqueid_value, 0x00, sizeof(source_user_uniqueid_value));
-      int16_t source_credential_slot_value;
+      uint16_t source_credential_slot_value;
       memset(&source_credential_slot_value, 0x00, sizeof(source_credential_slot_value));
-      int16_t destination_user_uniqueid_value;
+      uint16_t destination_user_uniqueid_value;
       memset(&destination_user_uniqueid_value, 0x00, sizeof(destination_user_uniqueid_value));
-      int16_t destination_credential_slot_value;
+      uint16_t destination_credential_slot_value;
       memset(&destination_credential_slot_value, 0x00, sizeof(destination_credential_slot_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_user_credential_credential_association_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8248,7 +8248,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_get_user_checksum_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_FAIL, test_uic_mqtt_dotdot_user_credential_get_user_checksum_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8333,9 +8333,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       SetpointType type_value;
       memset(&type_value, 0x00, sizeof(type_value));
-      int8_t precision_value;
+      uint8_t precision_value;
       memset(&precision_value, 0x00, sizeof(precision_value));
-      int8_t scale_value;
+      uint8_t scale_value;
       memset(&scale_value, 0x00, sizeof(scale_value));
       int32_t value_value;
       memset(&value_value, 0x00, sizeof(value_value));
@@ -8365,7 +8365,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_identify_identify_callback) {
     // Dummy command parameters
-      int16_t identify_time_value;
+      uint16_t identify_time_value;
       memset(&identify_time_value, 0x00, sizeof(identify_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_identify_identify_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8376,7 +8376,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_identify_identify_query_response_callback) {
     // Dummy command parameters
-      int16_t timeout_value;
+      uint16_t timeout_value;
       memset(&timeout_value, 0x00, sizeof(timeout_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_identify_identify_query_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8409,7 +8409,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_add_group_callback) {
     // Dummy command parameters
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
       const char* group_name_value;
       memset(&group_name_value, 0x00, sizeof(group_name_value));
@@ -8426,7 +8426,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_groups_add_group_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8439,7 +8439,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_view_group_callback) {
     // Dummy command parameters
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_groups_view_group_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8452,7 +8452,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
       const char* group_name_value;
       memset(&group_name_value, 0x00, sizeof(group_name_value));
@@ -8478,7 +8478,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_get_group_membership_response_callback) {
     // Dummy command parameters
-      int8_t capacity_value;
+      uint8_t capacity_value;
       memset(&capacity_value, 0x00, sizeof(capacity_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_groups_get_group_membership_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8491,7 +8491,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_remove_group_callback) {
     // Dummy command parameters
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_groups_remove_group_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8504,7 +8504,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_groups_remove_group_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8524,7 +8524,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_groups_add_group_if_identifying_callback) {
     // Dummy command parameters
-      int16_t group_id_value;
+      uint16_t group_id_value;
       memset(&group_id_value, 0x00, sizeof(group_id_value));
       const char* group_name_value;
       memset(&group_name_value, 0x00, sizeof(group_name_value));
@@ -8539,15 +8539,15 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_add_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * scene_name_value;
+      const char* scene_name_value;
       memset(&scene_name_value, 0x00, sizeof(scene_name_value));
-      int8_t transition_time100ms_value;
+      uint8_t transition_time100ms_value;
       memset(&transition_time100ms_value, 0x00, sizeof(transition_time100ms_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_add_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8570,9 +8570,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_add_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8587,9 +8587,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_view_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_view_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8604,13 +8604,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * scene_name_value;
+      const char* scene_name_value;
       memset(&scene_name_value, 0x00, sizeof(scene_name_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_view_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8631,9 +8631,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_remove_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_remove_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8648,9 +8648,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_remove_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8665,7 +8665,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_remove_all_scenes_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_remove_all_scenes_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8678,7 +8678,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8691,9 +8691,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_store_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_store_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8708,9 +8708,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_store_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8725,11 +8725,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_recall_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_recall_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8744,7 +8744,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_get_scene_membership_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_get_scene_membership_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8757,9 +8757,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int8_t capacity_value;
+      uint8_t capacity_value;
       memset(&capacity_value, 0x00, sizeof(capacity_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_get_scene_membership_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8776,13 +8776,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_enhanced_add_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * scene_name_value;
+      const char* scene_name_value;
       memset(&scene_name_value, 0x00, sizeof(scene_name_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_enhanced_add_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8803,9 +8803,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8820,9 +8820,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_scenes_enhanced_view_scene_callback) {
     // Dummy command parameters
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_enhanced_view_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8837,13 +8837,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * groupid_value;
+      uint16_t groupid_value;
       memset(&groupid_value, 0x00, sizeof(groupid_value));
-      int8_t sceneid_value;
+      uint8_t sceneid_value;
       memset(&sceneid_value, 0x00, sizeof(sceneid_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * scene_name_value;
+      const char* scene_name_value;
       memset(&scene_name_value, 0x00, sizeof(scene_name_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8866,13 +8866,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t mode_value;
       memset(&mode_value, 0x00, sizeof(mode_value));
-      uint8_t * group_identifier_from_value;
+      uint16_t group_identifier_from_value;
       memset(&group_identifier_from_value, 0x00, sizeof(group_identifier_from_value));
-      int8_t scene_identifier_from_value;
+      uint8_t scene_identifier_from_value;
       memset(&scene_identifier_from_value, 0x00, sizeof(scene_identifier_from_value));
-      uint8_t * group_identifier_to_value;
+      uint16_t group_identifier_to_value;
       memset(&group_identifier_to_value, 0x00, sizeof(group_identifier_to_value));
-      int8_t scene_identifier_to_value;
+      uint8_t scene_identifier_to_value;
       memset(&scene_identifier_to_value, 0x00, sizeof(scene_identifier_to_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_copy_scene_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8893,9 +8893,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      uint8_t * group_identifier_from_value;
+      uint16_t group_identifier_from_value;
       memset(&group_identifier_from_value, 0x00, sizeof(group_identifier_from_value));
-      int8_t scene_identifier_from_value;
+      uint8_t scene_identifier_from_value;
       memset(&scene_identifier_from_value, 0x00, sizeof(scene_identifier_from_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_scenes_copy_scene_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8933,7 +8933,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       OffWithEffectEffectIdentifier effect_identifier_value;
       memset(&effect_identifier_value, 0x00, sizeof(effect_identifier_value));
-      int8_t effect_variant_value;
+      uint8_t effect_variant_value;
       memset(&effect_variant_value, 0x00, sizeof(effect_variant_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_on_off_off_with_effect_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8955,9 +8955,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t on_off_control_value;
       memset(&on_off_control_value, 0x00, sizeof(on_off_control_value));
-      int16_t on_time_value;
+      uint16_t on_time_value;
       memset(&on_time_value, 0x00, sizeof(on_time_value));
-      int16_t off_wait_time_value;
+      uint16_t off_wait_time_value;
       memset(&off_wait_time_value, 0x00, sizeof(off_wait_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_on_off_on_with_timed_off_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -8972,9 +8972,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_level_move_to_level_callback) {
     // Dummy command parameters
-      int8_t level_value;
+      uint8_t level_value;
       memset(&level_value, 0x00, sizeof(level_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -8997,7 +8997,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       MoveStepMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int8_t rate_value;
+      uint8_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -9020,9 +9020,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       MoveStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int8_t step_size_value;
+      uint8_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -9060,9 +9060,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_level_move_to_level_with_on_off_callback) {
     // Dummy command parameters
-      int8_t level_value;
+      uint8_t level_value;
       memset(&level_value, 0x00, sizeof(level_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -9085,7 +9085,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       MoveStepMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int8_t rate_value;
+      uint8_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -9108,9 +9108,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       MoveStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int8_t step_size_value;
+      uint8_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -9148,7 +9148,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_level_move_to_closest_frequency_callback) {
     // Dummy command parameters
-      int16_t frequency_value;
+      uint16_t frequency_value;
       memset(&frequency_value, 0x00, sizeof(frequency_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_level_move_to_closest_frequency_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9161,7 +9161,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t alarm_code_value;
       memset(&alarm_code_value, 0x00, sizeof(alarm_code_value));
-      uint8_t cluster_identifier_value;
+      uint16_t cluster_identifier_value;
       memset(&cluster_identifier_value, 0x00, sizeof(cluster_identifier_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_alarms_reset_alarm_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9176,7 +9176,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t alarm_code_value;
       memset(&alarm_code_value, 0x00, sizeof(alarm_code_value));
-      uint8_t cluster_identifier_value;
+      uint16_t cluster_identifier_value;
       memset(&cluster_identifier_value, 0x00, sizeof(cluster_identifier_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_alarms_alarm_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9200,9 +9200,9 @@ void test_automatic_deduction_of_supported_commands()
       memset(&status_value, 0x00, sizeof(status_value));
       uint8_t alarm_code_value;
       memset(&alarm_code_value, 0x00, sizeof(alarm_code_value));
-      uint8_t cluster_identifier_value;
+      uint16_t cluster_identifier_value;
       memset(&cluster_identifier_value, 0x00, sizeof(cluster_identifier_value));
-      int32_t time_stamp_value;
+      uint32_t time_stamp_value;
       memset(&time_stamp_value, 0x00, sizeof(time_stamp_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_alarms_get_alarm_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9242,7 +9242,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       bool start_fast_polling_value;
       memset(&start_fast_polling_value, 0x00, sizeof(start_fast_polling_value));
-      int16_t fast_poll_timeout_value;
+      uint16_t fast_poll_timeout_value;
       memset(&fast_poll_timeout_value, 0x00, sizeof(fast_poll_timeout_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_poll_control_check_in_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9262,7 +9262,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback) {
     // Dummy command parameters
-      int32_t new_long_poll_interval_value;
+      uint32_t new_long_poll_interval_value;
       memset(&new_long_poll_interval_value, 0x00, sizeof(new_long_poll_interval_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9273,7 +9273,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback) {
     // Dummy command parameters
-      int16_t new_short_poll_interval_value;
+      uint16_t new_short_poll_interval_value;
       memset(&new_short_poll_interval_value, 0x00, sizeof(new_short_poll_interval_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9284,7 +9284,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_lock_door_callback) {
     // Dummy command parameters
-      uint8_t pin_or_rfid_code_value;
+      const char* pin_or_rfid_code_value;
       memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_lock_door_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9306,7 +9306,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_unlock_door_callback) {
     // Dummy command parameters
-      uint8_t pin_or_rfid_code_value;
+      const char* pin_or_rfid_code_value;
       memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_unlock_door_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9328,7 +9328,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_toggle_callback) {
     // Dummy command parameters
-      uint8_t pin_or_rfid_code_value;
+      const char* pin_or_rfid_code_value;
       memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_toggle_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9350,9 +9350,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback) {
     // Dummy command parameters
-      int16_t timeout_in_seconds_value;
+      uint16_t timeout_in_seconds_value;
       memset(&timeout_in_seconds_value, 0x00, sizeof(timeout_in_seconds_value));
-      uint8_t pin_or_rfid_code_value;
+      const char* pin_or_rfid_code_value;
       memset(&pin_or_rfid_code_value, 0x00, sizeof(pin_or_rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9376,7 +9376,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_log_record_callback) {
     // Dummy command parameters
-      int16_t log_index_value;
+      uint16_t log_index_value;
       memset(&log_index_value, 0x00, sizeof(log_index_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_log_record_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9387,19 +9387,19 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_log_record_response_callback) {
     // Dummy command parameters
-      int16_t log_entryid_value;
+      uint16_t log_entryid_value;
       memset(&log_entryid_value, 0x00, sizeof(log_entryid_value));
-      int32_t timestamp_value;
+      uint32_t timestamp_value;
       memset(&timestamp_value, 0x00, sizeof(timestamp_value));
       GetLogRecordResponseEventType event_type_value;
       memset(&event_type_value, 0x00, sizeof(event_type_value));
       DrlkOperEventSource source_operation_event_value;
       memset(&source_operation_event_value, 0x00, sizeof(source_operation_event_value));
-      int8_t event_id_or_alarm_code_value;
+      uint8_t event_id_or_alarm_code_value;
       memset(&event_id_or_alarm_code_value, 0x00, sizeof(event_id_or_alarm_code_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
-      uint8_t pin_value;
+      const char* pin_value;
       memset(&pin_value, 0x00, sizeof(pin_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_log_record_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9422,13 +9422,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_pin_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
-      uint8_t pin_value;
+      const char* pin_value;
       memset(&pin_value, 0x00, sizeof(pin_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_set_pin_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9456,7 +9456,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_pin_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_pin_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9467,13 +9467,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_pin_code_response_callback) {
     // Dummy command parameters
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
-      uint8_t code_value;
+      const char* code_value;
       memset(&code_value, 0x00, sizeof(code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_pin_code_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9490,7 +9490,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_pin_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_clear_pin_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9530,7 +9530,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_user_status_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -9556,7 +9556,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_status_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_user_status_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9567,7 +9567,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_status_response_callback) {
     // Dummy command parameters
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -9582,19 +9582,19 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       uint8_t days_mask_value;
       memset(&days_mask_value, 0x00, sizeof(days_mask_value));
-      int8_t start_hour_value;
+      uint8_t start_hour_value;
       memset(&start_hour_value, 0x00, sizeof(start_hour_value));
-      int8_t start_minute_value;
+      uint8_t start_minute_value;
       memset(&start_minute_value, 0x00, sizeof(start_minute_value));
-      int8_t end_hour_value;
+      uint8_t end_hour_value;
       memset(&end_hour_value, 0x00, sizeof(end_hour_value));
-      int8_t end_minute_value;
+      uint8_t end_minute_value;
       memset(&end_minute_value, 0x00, sizeof(end_minute_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9628,9 +9628,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9643,21 +9643,21 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback) {
     // Dummy command parameters
-      int8_t scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
       uint8_t days_mask_value;
       memset(&days_mask_value, 0x00, sizeof(days_mask_value));
-      int8_t start_hour_value;
+      uint8_t start_hour_value;
       memset(&start_hour_value, 0x00, sizeof(start_hour_value));
-      int8_t start_minute_value;
+      uint8_t start_minute_value;
       memset(&start_minute_value, 0x00, sizeof(start_minute_value));
-      int8_t end_hour_value;
+      uint8_t end_hour_value;
       memset(&end_hour_value, 0x00, sizeof(end_hour_value));
-      int8_t end_minute_value;
+      uint8_t end_minute_value;
       memset(&end_minute_value, 0x00, sizeof(end_minute_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9682,9 +9682,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9708,13 +9708,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
-      int32_t local_start_time_value;
+      uint32_t local_start_time_value;
       memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-      int32_t local_end_time_value;
+      uint32_t local_end_time_value;
       memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9742,9 +9742,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9757,15 +9757,15 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback) {
     // Dummy command parameters
-      int8_t scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int32_t local_start_time_value;
+      uint32_t local_start_time_value;
       memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-      int32_t local_end_time_value;
+      uint32_t local_end_time_value;
       memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9784,9 +9784,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback) {
     // Dummy command parameters
-      uint8_t * scheduleid_value;
+      uint8_t scheduleid_value;
       memset(&scheduleid_value, 0x00, sizeof(scheduleid_value));
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9810,11 +9810,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * holiday_scheduleid_value;
+      uint8_t holiday_scheduleid_value;
       memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
-      int32_t local_start_time_value;
+      uint32_t local_start_time_value;
       memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-      int32_t local_end_time_value;
+      uint32_t local_end_time_value;
       memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
       DrlkOperMode operating_mode_during_holiday_value;
       memset(&operating_mode_during_holiday_value, 0x00, sizeof(operating_mode_during_holiday_value));
@@ -9844,7 +9844,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * holiday_scheduleid_value;
+      uint8_t holiday_scheduleid_value;
       memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9855,13 +9855,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback) {
     // Dummy command parameters
-      int8_t holiday_scheduleid_value;
+      uint8_t holiday_scheduleid_value;
       memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
       zclStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
-      int32_t local_start_time_value;
+      uint32_t local_start_time_value;
       memset(&local_start_time_value, 0x00, sizeof(local_start_time_value));
-      int32_t local_end_time_value;
+      uint32_t local_end_time_value;
       memset(&local_end_time_value, 0x00, sizeof(local_end_time_value));
       DrlkOperMode operating_mode_during_holiday_value;
       memset(&operating_mode_during_holiday_value, 0x00, sizeof(operating_mode_during_holiday_value));
@@ -9882,7 +9882,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback) {
     // Dummy command parameters
-      uint8_t * holiday_scheduleid_value;
+      uint8_t holiday_scheduleid_value;
       memset(&holiday_scheduleid_value, 0x00, sizeof(holiday_scheduleid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9904,7 +9904,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_user_type_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -9930,7 +9930,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_type_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_user_type_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9941,7 +9941,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_type_response_callback) {
     // Dummy command parameters
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -9956,13 +9956,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_set_rfid_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
-      uint8_t rfid_code_value;
+      const char* rfid_code_value;
       memset(&rfid_code_value, 0x00, sizeof(rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_set_rfid_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -9990,7 +9990,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_rfid_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_rfid_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10001,13 +10001,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_rfid_code_response_callback) {
     // Dummy command parameters
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
       DrlkUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
-      uint8_t rfid_code_value;
+      const char* rfid_code_value;
       memset(&rfid_code_value, 0x00, sizeof(rfid_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_rfid_code_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10024,7 +10024,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_rfid_code_callback) {
     // Dummy command parameters
-      uint8_t * userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_clear_rfid_code_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10066,11 +10066,11 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       DataOperationTypeEnum operation_type_value;
       memset(&operation_type_value, 0x00, sizeof(operation_type_value));
-      int16_t user_index_value;
+      uint16_t user_index_value;
       memset(&user_index_value, 0x00, sizeof(user_index_value));
       const char* user_name_value;
       memset(&user_name_value, 0x00, sizeof(user_name_value));
-      int32_t user_uniqueid_value;
+      uint32_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -10099,7 +10099,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_get_user_callback) {
     // Dummy command parameters
-      int16_t user_index_value;
+      uint16_t user_index_value;
       memset(&user_index_value, 0x00, sizeof(user_index_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_get_user_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10117,7 +10117,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_clear_user_callback) {
     // Dummy command parameters
-      int16_t user_index_value;
+      uint16_t user_index_value;
       memset(&user_index_value, 0x00, sizeof(user_index_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_clear_user_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10132,11 +10132,11 @@ void test_automatic_deduction_of_supported_commands()
       memset(&operation_event_source_value, 0x00, sizeof(operation_event_source_value));
       OperatingEventNotificationOperationEventCode operation_event_code_value;
       memset(&operation_event_code_value, 0x00, sizeof(operation_event_code_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
-      uint8_t pin_value;
+      const char* pin_value;
       memset(&pin_value, 0x00, sizeof(pin_value));
-      int32_t local_time_value;
+      uint32_t local_time_value;
       memset(&local_time_value, 0x00, sizeof(local_time_value));
       const char* data_value;
       memset(&data_value, 0x00, sizeof(data_value));
@@ -10163,15 +10163,15 @@ void test_automatic_deduction_of_supported_commands()
       memset(&program_event_source_value, 0x00, sizeof(program_event_source_value));
       ProgrammingEventNotificationProgramEventCode program_event_code_value;
       memset(&program_event_code_value, 0x00, sizeof(program_event_code_value));
-      int16_t userid_value;
+      uint16_t userid_value;
       memset(&userid_value, 0x00, sizeof(userid_value));
-      uint8_t pin_value;
+      const char* pin_value;
       memset(&pin_value, 0x00, sizeof(pin_value));
       DrlkUserType user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
       DrlkUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
-      int32_t local_time_value;
+      uint32_t local_time_value;
       memset(&local_time_value, 0x00, sizeof(local_time_value));
       const char* data_value;
       memset(&data_value, 0x00, sizeof(data_value));
@@ -10202,9 +10202,9 @@ void test_automatic_deduction_of_supported_commands()
       memset(&operation_type_value, 0x00, sizeof(operation_type_value));
       CredentialStruct credential_value;
       memset(&credential_value, 0x00, sizeof(credential_value));
-      uint8_t credential_data_value;
+      const char* credential_data_value;
       memset(&credential_data_value, 0x00, sizeof(credential_data_value));
-      int16_t user_index_value;
+      uint16_t user_index_value;
       memset(&user_index_value, 0x00, sizeof(user_index_value));
       DrlkSettableUserStatus user_status_value;
       memset(&user_status_value, 0x00, sizeof(user_status_value));
@@ -10265,7 +10265,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_door_lock_unbolt_door_callback) {
     // Dummy command parameters
-      uint8_t pin_code_value;
+      const char* pin_code_value;
       memset(&pin_code_value, 0x00, sizeof(pin_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_door_lock_unbolt_door_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10297,7 +10297,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_window_covering_go_to_lift_value_callback) {
     // Dummy command parameters
-      int16_t lift_value_value;
+      uint16_t lift_value_value;
       memset(&lift_value_value, 0x00, sizeof(lift_value_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_window_covering_go_to_lift_value_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10308,7 +10308,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback) {
     // Dummy command parameters
-      int8_t percentage_lift_value_value;
+      uint8_t percentage_lift_value_value;
       memset(&percentage_lift_value_value, 0x00, sizeof(percentage_lift_value_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10319,7 +10319,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback) {
     // Dummy command parameters
-      int16_t tilt_value_value;
+      uint16_t tilt_value_value;
       memset(&tilt_value_value, 0x00, sizeof(tilt_value_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10330,7 +10330,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback) {
     // Dummy command parameters
-      int8_t percentage_tilt_value_value;
+      uint8_t percentage_tilt_value_value;
       memset(&percentage_tilt_value_value, 0x00, sizeof(percentage_tilt_value_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10341,7 +10341,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_barrier_control_go_to_percent_callback) {
     // Dummy command parameters
-      int8_t percent_open_value;
+      uint8_t percent_open_value;
       memset(&percent_open_value, 0x00, sizeof(percent_open_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_barrier_control_go_to_percent_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10416,17 +10416,17 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback) {
     // Dummy command parameters
-      int16_t time_of_day_value;
+      uint16_t time_of_day_value;
       memset(&time_of_day_value, 0x00, sizeof(time_of_day_value));
       uint8_t relay_status_value;
       memset(&relay_status_value, 0x00, sizeof(relay_status_value));
       int16_t local_temperature_value;
       memset(&local_temperature_value, 0x00, sizeof(local_temperature_value));
-      int8_t humidity_percentage_value;
+      uint8_t humidity_percentage_value;
       memset(&humidity_percentage_value, 0x00, sizeof(humidity_percentage_value));
       int16_t set_point_value;
       memset(&set_point_value, 0x00, sizeof(set_point_value));
-      int16_t unread_entries_value;
+      uint16_t unread_entries_value;
       memset(&unread_entries_value, 0x00, sizeof(unread_entries_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10476,11 +10476,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_hue_callback) {
     // Dummy command parameters
-      int8_t hue_value;
+      uint8_t hue_value;
       memset(&hue_value, 0x00, sizeof(hue_value));
       CCDirection direction_value;
       memset(&direction_value, 0x00, sizeof(direction_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10505,7 +10505,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCMoveMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int8_t rate_value;
+      uint8_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10528,9 +10528,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int8_t step_size_value;
+      uint8_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int8_t transition_time_value;
+      uint8_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10553,9 +10553,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_saturation_callback) {
     // Dummy command parameters
-      int8_t saturation_value;
+      uint8_t saturation_value;
       memset(&saturation_value, 0x00, sizeof(saturation_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10578,7 +10578,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCMoveMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int8_t rate_value;
+      uint8_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10601,9 +10601,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int8_t step_size_value;
+      uint8_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int8_t transition_time_value;
+      uint8_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10626,11 +10626,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback) {
     // Dummy command parameters
-      int8_t hue_value;
+      uint8_t hue_value;
       memset(&hue_value, 0x00, sizeof(hue_value));
-      int8_t saturation_value;
+      uint8_t saturation_value;
       memset(&saturation_value, 0x00, sizeof(saturation_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10653,11 +10653,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_color_callback) {
     // Dummy command parameters
-      int16_t colorx_value;
+      uint16_t colorx_value;
       memset(&colorx_value, 0x00, sizeof(colorx_value));
-      int16_t colory_value;
+      uint16_t colory_value;
       memset(&colory_value, 0x00, sizeof(colory_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10707,7 +10707,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&stepx_value, 0x00, sizeof(stepx_value));
       int16_t stepy_value;
       memset(&stepy_value, 0x00, sizeof(stepy_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10730,9 +10730,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_move_to_color_temperature_callback) {
     // Dummy command parameters
-      int16_t color_temperature_mireds_value;
+      uint16_t color_temperature_mireds_value;
       memset(&color_temperature_mireds_value, 0x00, sizeof(color_temperature_mireds_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10753,11 +10753,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback) {
     // Dummy command parameters
-      int16_t enhanced_hue_value;
+      uint16_t enhanced_hue_value;
       memset(&enhanced_hue_value, 0x00, sizeof(enhanced_hue_value));
       CCDirection direction_value;
       memset(&direction_value, 0x00, sizeof(direction_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10782,7 +10782,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCMoveMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int16_t rate_value;
+      uint16_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10805,9 +10805,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int16_t step_size_value;
+      uint16_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10830,11 +10830,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback) {
     // Dummy command parameters
-      int16_t enhanced_hue_value;
+      uint16_t enhanced_hue_value;
       memset(&enhanced_hue_value, 0x00, sizeof(enhanced_hue_value));
-      int8_t saturation_value;
+      uint8_t saturation_value;
       memset(&saturation_value, 0x00, sizeof(saturation_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10863,9 +10863,9 @@ void test_automatic_deduction_of_supported_commands()
       memset(&action_value, 0x00, sizeof(action_value));
       CCColorLoopDirection direction_value;
       memset(&direction_value, 0x00, sizeof(direction_value));
-      int16_t time_value;
+      uint16_t time_value;
       memset(&time_value, 0x00, sizeof(time_value));
-      int16_t start_hue_value;
+      uint16_t start_hue_value;
       memset(&start_hue_value, 0x00, sizeof(start_hue_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10909,11 +10909,11 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCMoveMode move_mode_value;
       memset(&move_mode_value, 0x00, sizeof(move_mode_value));
-      int16_t rate_value;
+      uint16_t rate_value;
       memset(&rate_value, 0x00, sizeof(rate_value));
-      uint8_t * color_temperature_minimum_mireds_value;
+      uint16_t color_temperature_minimum_mireds_value;
       memset(&color_temperature_minimum_mireds_value, 0x00, sizeof(color_temperature_minimum_mireds_value));
-      uint8_t * color_temperature_maximum_mireds_value;
+      uint16_t color_temperature_maximum_mireds_value;
       memset(&color_temperature_maximum_mireds_value, 0x00, sizeof(color_temperature_maximum_mireds_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10940,13 +10940,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CCStepMode step_mode_value;
       memset(&step_mode_value, 0x00, sizeof(step_mode_value));
-      int16_t step_size_value;
+      uint16_t step_size_value;
       memset(&step_size_value, 0x00, sizeof(step_size_value));
-      int16_t transition_time_value;
+      uint16_t transition_time_value;
       memset(&transition_time_value, 0x00, sizeof(transition_time_value));
-      uint8_t * color_temperature_minimum_mireds_value;
+      uint16_t color_temperature_minimum_mireds_value;
       memset(&color_temperature_minimum_mireds_value, 0x00, sizeof(color_temperature_minimum_mireds_value));
-      uint8_t * color_temperature_maximum_mireds_value;
+      uint16_t color_temperature_maximum_mireds_value;
       memset(&color_temperature_maximum_mireds_value, 0x00, sizeof(color_temperature_maximum_mireds_value));
       uint8_t options_mask_value;
       memset(&options_mask_value, 0x00, sizeof(options_mask_value));
@@ -10975,7 +10975,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       ZoneEnrollResponseEnrollResponseCode enroll_response_code_value;
       memset(&enroll_response_code_value, 0x00, sizeof(enroll_response_code_value));
-      int8_t zoneid_value;
+      uint8_t zoneid_value;
       memset(&zoneid_value, 0x00, sizeof(zoneid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -10992,9 +10992,9 @@ void test_automatic_deduction_of_supported_commands()
       memset(&zone_status_value, 0x00, sizeof(zone_status_value));
       uint8_t extended_status_value;
       memset(&extended_status_value, 0x00, sizeof(extended_status_value));
-      int8_t zoneid_value;
+      uint8_t zoneid_value;
       memset(&zoneid_value, 0x00, sizeof(zoneid_value));
-      int16_t delay_value;
+      uint16_t delay_value;
       memset(&delay_value, 0x00, sizeof(delay_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11020,7 +11020,7 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       IasZoneType zone_type_value;
       memset(&zone_type_value, 0x00, sizeof(zone_type_value));
-      int16_t manufacturer_code_value;
+      uint16_t manufacturer_code_value;
       memset(&manufacturer_code_value, 0x00, sizeof(manufacturer_code_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11033,9 +11033,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback) {
     // Dummy command parameters
-      int8_t test_mode_duration_value;
+      uint8_t test_mode_duration_value;
       memset(&test_mode_duration_value, 0x00, sizeof(test_mode_duration_value));
-      int8_t current_zone_sensitivity_level_value;
+      uint8_t current_zone_sensitivity_level_value;
       memset(&current_zone_sensitivity_level_value, 0x00, sizeof(current_zone_sensitivity_level_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11050,9 +11050,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       uint8_t siren_configuration_value;
       memset(&siren_configuration_value, 0x00, sizeof(siren_configuration_value));
-      int16_t warning_duration_value;
+      uint16_t warning_duration_value;
       memset(&warning_duration_value, 0x00, sizeof(warning_duration_value));
-      int8_t strobe_duty_cycle_value;
+      uint8_t strobe_duty_cycle_value;
       memset(&strobe_duty_cycle_value, 0x00, sizeof(strobe_duty_cycle_value));
       IaswdLevel strobe_level_value;
       memset(&strobe_level_value, 0x00, sizeof(strobe_level_value));
@@ -11082,11 +11082,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback) {
     // Dummy command parameters
-      int8_t profile_count_value;
+      uint8_t profile_count_value;
       memset(&profile_count_value, 0x00, sizeof(profile_count_value));
       ProfileIntervalPeriod profile_interval_period_value;
       memset(&profile_interval_period_value, 0x00, sizeof(profile_interval_period_value));
-      int8_t max_number_of_intervals_value;
+      uint8_t max_number_of_intervals_value;
       memset(&max_number_of_intervals_value, 0x00, sizeof(max_number_of_intervals_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11110,15 +11110,15 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback) {
     // Dummy command parameters
-      uint8_t start_time_value;
+      uint32_t start_time_value;
       memset(&start_time_value, 0x00, sizeof(start_time_value));
       GetMeasurementProfileResponseStatus status_value;
       memset(&status_value, 0x00, sizeof(status_value));
       ProfileIntervalPeriod profile_interval_period_value;
       memset(&profile_interval_period_value, 0x00, sizeof(profile_interval_period_value));
-      int8_t number_of_intervals_delivered_value;
+      uint8_t number_of_intervals_delivered_value;
       memset(&number_of_intervals_delivered_value, 0x00, sizeof(number_of_intervals_delivered_value));
-      uint8_t attribute_id_value;
+      uint16_t attribute_id_value;
       memset(&attribute_id_value, 0x00, sizeof(attribute_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11139,11 +11139,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback) {
     // Dummy command parameters
-      uint8_t attributeid_value;
+      uint16_t attributeid_value;
       memset(&attributeid_value, 0x00, sizeof(attributeid_value));
-      uint8_t start_time_value;
+      uint32_t start_time_value;
       memset(&start_time_value, 0x00, sizeof(start_time_value));
-      int8_t number_of_intervals_value;
+      uint8_t number_of_intervals_value;
       memset(&number_of_intervals_value, 0x00, sizeof(number_of_intervals_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11164,13 +11164,13 @@ void test_automatic_deduction_of_supported_commands()
       memset(&destinationunid_value, 0x00, sizeof(destinationunid_value));
       bool transmission_successful_value;
       memset(&transmission_successful_value, 0x00, sizeof(transmission_successful_value));
-      int16_t transmission_time_ms_value;
+      uint16_t transmission_time_ms_value;
       memset(&transmission_time_ms_value, 0x00, sizeof(transmission_time_ms_value));
       int8_t tx_powerd_bm_value;
       memset(&tx_powerd_bm_value, 0x00, sizeof(tx_powerd_bm_value));
-      int8_t tx_channel_value;
+      uint8_t tx_channel_value;
       memset(&tx_channel_value, 0x00, sizeof(tx_channel_value));
-      int8_t routing_attempts_value;
+      uint8_t routing_attempts_value;
       memset(&routing_attempts_value, 0x00, sizeof(routing_attempts_value));
       bool route_changed_value;
       memset(&route_changed_value, 0x00, sizeof(route_changed_value));
@@ -11180,7 +11180,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&measured_noise_floord_bm_value, 0x00, sizeof(measured_noise_floord_bm_value));
       int8_t ackrssi_value;
       memset(&ackrssi_value, 0x00, sizeof(ackrssi_value));
-      int8_t ack_channel_value;
+      uint8_t ack_channel_value;
       memset(&ack_channel_value, 0x00, sizeof(ack_channel_value));
       const char* last_route_failed_link_functionalunid_value;
       memset(&last_route_failed_link_functionalunid_value, 0x00, sizeof(last_route_failed_link_functionalunid_value));
@@ -11283,7 +11283,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&cluster_name_value, 0x00, sizeof(cluster_name_value));
       const char* destination_unid_value;
       memset(&destination_unid_value, 0x00, sizeof(destination_unid_value));
-      int8_t destination_ep_value;
+      uint8_t destination_ep_value;
       memset(&destination_ep_value, 0x00, sizeof(destination_ep_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_binding_bind_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11302,7 +11302,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&cluster_name_value, 0x00, sizeof(cluster_name_value));
       const char* destination_unid_value;
       memset(&destination_unid_value, 0x00, sizeof(destination_unid_value));
-      int8_t destination_ep_value;
+      uint8_t destination_ep_value;
       memset(&destination_ep_value, 0x00, sizeof(destination_ep_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_binding_unbind_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11362,7 +11362,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback) {
     // Dummy command parameters
-      int16_t parameter_id_value;
+      uint16_t parameter_id_value;
       memset(&parameter_id_value, 0x00, sizeof(parameter_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11380,7 +11380,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_configuration_parameters_set_parameter_callback) {
     // Dummy command parameters
-      int16_t parameter_id_value;
+      uint16_t parameter_id_value;
       memset(&parameter_id_value, 0x00, sizeof(parameter_id_value));
       int64_t value_value;
       memset(&value_value, 0x00, sizeof(value_value));
@@ -11395,9 +11395,9 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback) {
     // Dummy command parameters
-      int16_t first_parameter_id_value;
+      uint16_t first_parameter_id_value;
       memset(&first_parameter_id_value, 0x00, sizeof(first_parameter_id_value));
-      int16_t last_parameter_id_value;
+      uint16_t last_parameter_id_value;
       memset(&last_parameter_id_value, 0x00, sizeof(last_parameter_id_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11410,7 +11410,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_add_user_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       UserTypeEnum user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -11420,7 +11420,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&credential_rule_value, 0x00, sizeof(credential_rule_value));
       const char* user_name_value;
       memset(&user_name_value, 0x00, sizeof(user_name_value));
-      int16_t expiring_timeout_minutes_value;
+      uint16_t expiring_timeout_minutes_value;
       memset(&expiring_timeout_minutes_value, 0x00, sizeof(expiring_timeout_minutes_value));
       UserNameEncodingType user_name_encoding_value;
       memset(&user_name_encoding_value, 0x00, sizeof(user_name_encoding_value));
@@ -11445,7 +11445,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_modify_user_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       UserTypeEnum user_type_value;
       memset(&user_type_value, 0x00, sizeof(user_type_value));
@@ -11455,7 +11455,7 @@ void test_automatic_deduction_of_supported_commands()
       memset(&credential_rule_value, 0x00, sizeof(credential_rule_value));
       const char* user_name_value;
       memset(&user_name_value, 0x00, sizeof(user_name_value));
-      int16_t expiring_timeout_minutes_value;
+      uint16_t expiring_timeout_minutes_value;
       memset(&expiring_timeout_minutes_value, 0x00, sizeof(expiring_timeout_minutes_value));
       UserNameEncodingType user_name_encoding_value;
       memset(&user_name_encoding_value, 0x00, sizeof(user_name_encoding_value));
@@ -11480,7 +11480,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_delete_user_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_user_credential_delete_user_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11491,11 +11491,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_add_credential_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
       const char* credential_data_value;
       memset(&credential_data_value, 0x00, sizeof(credential_data_value));
@@ -11514,11 +11514,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_modify_credential_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
       const char* credential_data_value;
       memset(&credential_data_value, 0x00, sizeof(credential_data_value));
@@ -11537,11 +11537,11 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_delete_credential_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_user_credential_delete_credential_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11581,7 +11581,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_delete_all_credentials_for_user_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_user_credential_delete_all_credentials_for_user_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11592,7 +11592,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_delete_all_credentials_for_user_by_type_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
@@ -11607,13 +11607,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_credential_learn_start_add_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
-      int8_t credential_learn_timeout_value;
+      uint8_t credential_learn_timeout_value;
       memset(&credential_learn_timeout_value, 0x00, sizeof(credential_learn_timeout_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_user_credential_credential_learn_start_add_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11630,13 +11630,13 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_credential_learn_start_modify_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t credential_slot_value;
+      uint16_t credential_slot_value;
       memset(&credential_slot_value, 0x00, sizeof(credential_slot_value));
-      int8_t credential_learn_timeout_value;
+      uint8_t credential_learn_timeout_value;
       memset(&credential_learn_timeout_value, 0x00, sizeof(credential_learn_timeout_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_user_credential_credential_learn_start_modify_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11662,13 +11662,13 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       CredType credential_type_value;
       memset(&credential_type_value, 0x00, sizeof(credential_type_value));
-      int16_t source_user_uniqueid_value;
+      uint16_t source_user_uniqueid_value;
       memset(&source_user_uniqueid_value, 0x00, sizeof(source_user_uniqueid_value));
-      int16_t source_credential_slot_value;
+      uint16_t source_credential_slot_value;
       memset(&source_credential_slot_value, 0x00, sizeof(source_credential_slot_value));
-      int16_t destination_user_uniqueid_value;
+      uint16_t destination_user_uniqueid_value;
       memset(&destination_user_uniqueid_value, 0x00, sizeof(destination_user_uniqueid_value));
-      int16_t destination_credential_slot_value;
+      uint16_t destination_credential_slot_value;
       memset(&destination_credential_slot_value, 0x00, sizeof(destination_credential_slot_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_user_credential_credential_association_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11687,7 +11687,7 @@ void test_automatic_deduction_of_supported_commands()
   }
   if (NULL != test_uic_mqtt_dotdot_user_credential_get_user_checksum_callback) {
     // Dummy command parameters
-      int16_t user_uniqueid_value;
+      uint16_t user_uniqueid_value;
       memset(&user_uniqueid_value, 0x00, sizeof(user_uniqueid_value));
   // Invoke with support check
     TEST_ASSERT_EQUAL(SL_STATUS_OK, test_uic_mqtt_dotdot_user_credential_get_user_checksum_callback(expected_unid,expected_endpoint_id,UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK
@@ -11772,9 +11772,9 @@ void test_automatic_deduction_of_supported_commands()
     // Dummy command parameters
       SetpointType type_value;
       memset(&type_value, 0x00, sizeof(type_value));
-      int8_t precision_value;
+      uint8_t precision_value;
       memset(&precision_value, 0x00, sizeof(precision_value));
-      int8_t scale_value;
+      uint8_t scale_value;
       memset(&scale_value, 0x00, sizeof(scale_value));
       int32_t value_value;
       memset(&value_value, 0x00, sizeof(value_value));
-- 
2.39.5

