/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

/**
 *
 * @defgroup aox_locator_configuration_attributes Configuration attributes
 * @ingroup aox_locator_configuration
 *
 * @brief This component provides type definitions and helpers for the
 * supported configuration of the AoXLocator cluster.
 *
 * @{
 */

#ifndef AOX_LOCATOR_CONFIGURATION_ATTRIBUTES_H
#define AOX_LOCATOR_CONFIGURATION_ATTRIBUTES_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#include "sl_status.h"
#include "uic_typedefs.h"
#include "zap-types.h"

typedef struct aox_locator_attributes_ {
  bool position_and_orientation_valid;
  CoordinateAndOrientation position_and_orientation;
  size_t azimuth_mask_count;
  MinMaxPair* azimuth_mask;
        size_t elevation_mask_count;
  MinMaxPair* elevation_mask;
        size_t allow_list_count;
  char** allow_list;
  uint8_t cte_mode;
} aox_locator_attributes_t;


#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


/**
 * @brief Reads in the AttributeStore/Datastore if AoXLocator attributes are
 * present and loads them into the configuration.
 *
 * @returns SL_STATUS_OK on success, any other status codes otherwise
 */
sl_status_t aox_locator_load_attributes_from_attribute_store(void);

/**
 * @brief Stores AoXLocator attributes in the AttributeStore/Datastore
 *
 * @returns SL_STATUS_OK on success, any other status codes otherwise
 */
sl_status_t aox_locator_store_attributes_in_attribute_store(void);

/**
 * @brief Publishes AoXLocator attributes to MQTT
 *
 * @returns SL_STATUS_OK on success, any other status codes otherwise
 */

sl_status_t publish_aox_locator_attributes_to_mqtt();


/**
 * @brief Sets the AoXLocator PositionAndOrientationValid Attribute
 *
 * @returns SL_STATUS_OK if successful, any other status code in case of error
 */
sl_status_t aox_locator_set_position_and_orientation_valid_attribute(
  bool position_and_orientation_valid
);
/**
 * @brief Sets the AoXLocator PositionAndOrientation Attribute
 *
 * @returns SL_STATUS_OK if successful, any other status code in case of error
 */
sl_status_t aox_locator_set_position_and_orientation_attribute(
  CoordinateAndOrientation position_and_orientation
);
/**
 * @brief Sets the AoXLocator AzimuthMask Attribute
 *
 * @returns SL_STATUS_OK if successful, any other status code in case of error
 */
sl_status_t aox_locator_set_azimuth_mask_attribute(
  size_t azimuth_mask_count,
  const MinMaxPair* azimuth_mask
      );
/**
 * @brief Sets the AoXLocator ElevationMask Attribute
 *
 * @returns SL_STATUS_OK if successful, any other status code in case of error
 */
sl_status_t aox_locator_set_elevation_mask_attribute(
  size_t elevation_mask_count,
  const MinMaxPair* elevation_mask
      );
/**
 * @brief Sets the AoXLocator AllowList Attribute
 *
 * @returns SL_STATUS_OK if successful, any other status code in case of error
 */
sl_status_t aox_locator_set_allow_list_attribute(
  size_t allow_list_count,
  const char** allow_list
);
/**
 * @brief Sets the AoXLocator CTEMode Attribute
 *
 * @returns SL_STATUS_OK if successful, any other status code in case of error
 */
sl_status_t aox_locator_set_cte_mode_attribute(
  uint8_t cte_mode
);


#ifdef __cplusplus
}
#endif // __cplusplus

#endif // AOX_LOCATOR_CONFIGURATION_ATTRIBUTES_H
/** @} end aox_locator_configuration_attributes */
