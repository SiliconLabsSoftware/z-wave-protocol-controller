/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

#ifndef DOTDOT_MQTT_TRANSLATORS_H
#define DOTDOT_MQTT_TRANSLATORS_H
#include <sstream>
#include <string>
#include <vector>
#include <map>

#include <nlohmann/json.hpp>

#include <zap-types.h>

{{#zcl_structs}}

/**
 * Parse {{asType label}} type from json object.
 *
 * @param jsn     JSON object to parse from.
 * @param field  field to be populated from JSON object.
 */
inline void from_json(const nlohmann::json& jsn, {{asType label}}& field)
{
{{#zcl_struct_items}}
  {{#if (isString type)}}
  field.{{asSymbol label}} = jsn.at("{{asSymbol label}}").get_ptr<const std::string*>()->c_str();
  {{else}}
  jsn.at("{{asSymbol label}}").get_to(field.{{asSymbol label}});
  {{/if}}
{{/zcl_struct_items}}
}


/**
 * Build JSON object from {{asType label}} type.
 *
 * @param jsn     JSON object to be populated.
 * @param field   Reference data.
 */
inline void to_json(nlohmann::json& jsn, const {{asType label}}& field)
{
{{#zcl_struct_items}}
{{#if isArray}}
  jsn["{{asSymbol label}}"] = std::vector< {{asType label}} >(
    field.{{asSymbol label}},
    field.{{asSymbol label}} + field.{{asSymbol label}}_count);
{{else}}
  jsn["{{asSymbol label}}"] = field.{{asSymbol label}};
{{/if}}
{{/zcl_struct_items}}
}

{{/zcl_structs}}

// END OF nlohmann parsers

#endif
