/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}

#include <cstring>
#include <string>

// Unify shared includes
#include <sl_log.h>
#include <dotdot_mqtt.h>

// ZigPC includes
#include <zigpc_ucl.hpp>
#include <zigpc_common_zigbee.h>
#include <zcl_definitions.h>


// Component includes
#include "attribute_management_int.h"

static const char LOG_TAG[] = "{{component_zigpc_attrmgmt_prefix}}";

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
sl_status_t {{component_zigpc_attrmgmt_prefix}}_{{asSnakeCaseLower label}}_publish(const char* unid_ep_topic, const zcl_attribute_id_t attr_id, const uint8_t *attr_value)
{
  sl_status_t status = SL_STATUS_OK;

  // NOTE: Only server cluster attributes are supported to be published
  switch(attr_id) {
{{#zcl_attributes_server}}
    case {{asZigPCZclAttributeType parent this}}:
      {
{{#if (isString type)}}
        // NOTE: the first byte is the string length
        uint8_t value_strlen = *attr_value;
        char value[value_strlen + 1];
        memcpy(value, attr_value + 1, sizeof(char) * value_strlen);
        value[value_strlen] = '\0';
{{else}}
        {{asUnderlyingType type}} value;
        memcpy(&value, attr_value, sizeof({{asUnderlyingType type}}));
{{/if}}
        status = {{component_dotdot_mqtt_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_publish(unid_ep_topic, value, UCL_MQTT_PUBLISH_TYPE_REPORTED);
      }
      break;
{{/zcl_attributes_server}}
    case ZIGPC_ZCL_GLOBAL_ATTR_CLUSTER_REVISION:
      {
        uint16_t value;
        memcpy(&value, attr_value, sizeof(uint16_t));
        if (value > {{revision}}) {
          value = {{revision}}; // take min of: device-reported vs. dotdot-spec-based
        }
        {{component_dotdot_mqtt_prefix}}_{{asSnakeCaseLower label}}_publish_cluster_revision(unid_ep_topic, value);
      }
      break;
    default:
      status = SL_STATUS_NOT_FOUND;
      break;
  }

  return status;
}
{{/if}}
{{/zcl_clusters}}

sl_status_t {{component_zigpc_attrmgmt_prefix}}_publish_reported(const zigbee_eui64_uint_t eui64, const zigbee_endpoint_id_t endpoint_id, const zcl_cluster_id_t cluster_id, const zcl_attribute_id_t attr_id, const uint8_t *attr_value)
{
  zigpc_ucl::mqtt::topic_data_t topic_data = {
    .eui64 = eui64,
    .endpoint_id = endpoint_id,
  };

  std::string unid_ep_topic;
  sl_status_t status = zigpc_ucl::mqtt::build_topic(
    zigpc_ucl::mqtt::topic_type_t::BY_UNID_NODE_EP,
    topic_data,
    unid_ep_topic);
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, "Failed to build topic for publishing attribute update: 0x%X",status);
    return status;
  }

  switch(cluster_id) {
{{#zcl_clusters}}
{{#if (supportedCluster label)}}
    case {{asZigPCZclClusterType this}}:
      status = {{component_zigpc_attrmgmt_prefix}}_{{asSnakeCaseLower label}}_publish(unid_ep_topic.c_str(), attr_id, attr_value);
      break;
{{/if}}
{{/zcl_clusters}}
    default:
      status = SL_STATUS_NOT_FOUND;
      break;
  }

  sl_log_info(LOG_TAG, "Unid:%s,Ep:%u,Cluster:0x%04X,Attr:0x%04X Reported publish status: 0x%X",
              zigpc_ucl::mqtt::build_unid(eui64).c_str(), endpoint_id, cluster_id, attr_id, status);

  return status;
}
