User Credential 
===============

Version supported : 1

.. warning:: 
    This command class specification is still in development.

.. note:: 
    You should always use the top level functions to interact with this command class.

    They are documented in ``applications/zpc/components/zwave_command_classes/src/zwave_command_class_user_credential.h``. You can also see which function is associated with which command (mostly all set commands) in this document. 
    
    They ensure command class is used correctly (respect the capabilities of the end device) and that the attribute store is updated correctly.
   

.. contents::
   :depth: 2
   :local:
   :backlinks: none

Interview process
*****************

#. :ref:`User Capabilities Get <user-capabilities-get>`
#. :ref:`Credential Capabilities Get <credential-capabilities-get>`

.. note:: 
    User discovery is done after the interviewing phase to prevent the inclusion to be too long.
    If ZPC already have users, it will not be discovered again.

Command Class Commands
**********************

.. _user-capabilities-get:

User Capabilities Get
---------------------

Trigger on undefined **reported** value of ``NUMBER_OF_USERS``

.. note:: 
    ``NUMBER_OF_USERS`` attribute existence is checked to see if a node supports User Credential.

.. _user-capabilities-report: 

User Capabilities Report 
------------------------------------

Mapping between Report command and attribute store : 

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Command Attribute 
    - Z-Wave Attribute Store
  * - Number of supported User Unique Identifiers
    - ``NUMBER_OF_USERS``
  * - Supported Credential Rules Bit Mask
    - ``SUPPORTED_CREDENTIAL_RULES``
  * - Max Length of User Name
    - ``MAX_USERNAME_LENGTH``
  * - User Schedule Support
    - ``SUPPORT_USER_SCHEDULE``
  * - All Users Checksum Support
    - ``SUPPORT_ALL_USERS_CHECKSUM``
  * - User Checksum Support
    - ``SUPPORT_USER_CHECKSUM``
  * - Supported User Types Bit Mask (1-N)
    - ``SUPPORTED_USER_TYPES``

.. note:: 
   Bit Mask 1-N will be merged in ``SUPPORTED_USER_TYPES``. Max bitmask length currently supported is N=4.
   You can increase this value by changing the underlying type of ``SUPPORTED_USER_TYPES`` (e.g. uint32_t -> uint64_t).

.. note:: 
   If ``SUPPORT_ALL_USERS_CHECKSUM`` is true, this command will create an empty ``ALL_USERS_CHECKSUM`` attribute to trigger the :ref:`All Users Checksum Get<all-users-checksum-get>` command.


.. _credential-capabilities-get:

Credential Capabilities Get
---------------------------

Trigger on undefined **reported** value of ``SUPPORT_CREDENTIAL_CHECKSUM``


Credential Capabilities Report 
------------------------------

Mapping between Report command and attribute store : 

.. list-table:: 
  :widths: 40 60
  :header-rows: 1

  * - Z-Wave Command Attribute 
    - Z-Wave Attribute Store
  * - Credential Checksum Support
    - ``SUPPORT_CREDENTIAL_CHECKSUM``
  * - Number of Supported Credential Types
    - None. Will create one ``SUPPORTED_CREDENTIAL_TYPE`` attribute for each supported credential type.
  * - Credential Type
    - ``SUPPORTED_CREDENTIAL_TYPE``
  * - CL Support
    - ``CREDENTIAL_LEARN_SUPPORT``
  * - Number of Supported Credential Slot
    - ``CREDENTIAL_SUPPORTED_SLOT_COUNT``
  * - Min Length of Credential Data
    - ``CREDENTIAL_MIN_LENGTH``
  * - Max Length of Credential Data
    - ``CREDENTIAL_MAX_LENGTH``
  * - CL Recommended Timeout
    - ``CREDENTIAL_LEARN_RECOMMENDED_TIMEOUT``
  * - CL Number of Steps
    - ``CREDENTIAL_LEARN_NUMBER_OF_STEPS``

.. _supported_credential_type_exception:

.. note:: 
    The report will also set the SupportedCredentialTypes of ``Unify_UserCredential.xml``. The value correspond to a bitmask for each credential type supported by the node.

User Set
--------
Trigger on new **desired** value of ``USER_OPERATION_TYPE``

Mapping between attribute store and Set command :

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Attribute Store
    - Attribute State
    - Z-Wave Set Field 
  * - ``USER_OPERATION_TYPE``
    - Desired
    - Operation Type
  * - ``USER_UNIQUE_ID``
    - Desired or Reported
    - User Unique Identifier
  * - ``USER_TYPE``
    - Desired or Reported
    - User Type
  * - ``USER_ACTIVE_STATE``
    - Desired or Reported
    - User Active State
  * - ``CREDENTIAL_RULE``
    - Desired or Reported
    - Credential Rule
  * - ``USER_EXPIRING_TIMEOUT_MINUTES``
    - Desired or Reported
    - Expiring Timeout Minutes
  * - ``USER_NAME_ENCODING``
    - Desired or Reported
    - User Name Encoding
  * - None. Deducted from ``USER_NAME`` c-string length
    - N/A
    - User Name Length
  * - ``USER_NAME``
    - Desired or Reported
    - User Name

.. note::
    If ``USER_OPERATION_TYPE`` is set to 0x02 (delete), the set command will only contains the ``USER_UNIQUE_ID`` and ``USER_OPERATION_TYPE``

.. note:: 
    The structure of the attribute store is : 

    .. code:: text
        
        |__ USER_UNIQUE_ID
            |__ USER_OPERATION_TYPE 
            |__ USER_TYPE
            |__ USER_ACTIVE_STATE
            |__ CREDENTIAL_RULE
            |__ USER_EXPIRING_TIMEOUT_MINUTES
            |__ USER_NAME_ENCODING
            |__ USER_NAME

    This means we can deduce the User Unique Identifier from the ``USER_OPERATION_TYPE`` and all other related attributes.
    
.. note::
    Top level function are exposed to ease the use of this set command : 

    - ``zwave_command_class_user_credential_add_user``
    - ``zwave_command_class_user_credential_modify_user``
    - ``zwave_command_class_user_credential_delete_user``
    - ``zwave_command_class_user_credential_delete_all_users``


User Get
--------

Trigger on undefined **reported** value of ``USER_UNIQUE_ID``


Mapping between attribute store and Get command :

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Attribute Store
    - Attribute State
    - Z-Wave Get Field 
  * - ``USER_UNIQUE_ID``
    - Desired
    - User Unique Identifier

.. _user_report:

User Report
-----------

Mapping between Report command and attribute store : 

.. list-table:: 
  :header-rows: 1
  :widths: 35 65

  * - Z-Wave Command Attribute 
    - Z-Wave Attribute Store
  * - Next User Unique Identifier
    - If 0 this value is ignored. Otherwise this value be put in a new ``USER_UNIQUE_ID`` attribute (desired value).
  * - User Modifier Type
    - If value is *USER_REPORT_DNE* the user with this ID will be removed. Otherwise value is stored in ``USER_MODIFIER_TYPE``
  * - User Modifier Node ID
    - ``USER_MODIFIER_NODE_ID``
  * - User Unique Identifier
    - Tries to find an ``USER_UNIQUE_ID`` with this desired value. If not found use ``USER_UNIQUE_ID`` with desired value of 0. Undefine desired value of this node and set the reported value.
  * - User Type
    - ``USER_TYPE``
  * - User Active State
    - ``USER_ACTIVE_STATE``
  * - Credential Rule
    - ``CREDENTIAL_RULE``
  * - Expiring Timeout Minutes
    - Ignored if 0. Otherwise stored in ``USER_EXPIRING_TIMEOUT_MINUTES``.
  * - User Name Encoding
    - ``USER_NAME_ENCODING``
  * - User Name Length
    - Not stored. Will be deduced from ``USER_NAME`` c-string length.
  * - User Name
    - ``USER_NAME``

.. note:: 
    This command will create a new ``CREDENTIAL_TYPE`` and ``CREDENTIAL_SLOT`` with a value of 0 to trigger a Credential Get and discover all the credentials for this user.


User Set Error Report
---------------------

This command does't change the value of attributes in the attribute store.

Based on the User Set Error Type it will remove (if possible) the User Unique Identifier reported by the error.

User Notification Report
------------------------

.. warning:: 
    This command is the Event/State parameters of a Notification Report Command

When received, ZPC will take an action based off the event code (add, modify, delete). 

- If adding or modifying, the attributes will be set as reported and have their desired value cleared.
- If deleting the user the user unique id will be removed.

See :ref:`User Report <user_report>` to see how the data is stored.
 
Credential Set
--------------

Trigger on new **desired** value of ``CREDENTIAL_OPERATION_TYPE``

Mapping between attribute store and Set command :

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Attribute Store
    - Attribute State
    - Z-Wave Set Field 
  * - ``USER_UNIQUE_ID``
    - Desired or Reported
    - User Unique Identifier
  * - ``CREDENTIAL_TYPE``
    - Desired or Reported
    - Credential Type
  * - ``CREDENTIAL_SLOT``
    - Desired or Reported
    - Credential Slot 
  * - ``CREDENTIAL_OPERATION_TYPE``
    - Desired
    - Operation Type
  * - ``CREDENTIAL_DATA_LENGTH``
    - Desired or Reported
    - Credential Length
  * - ``CREDENTIAL_DATA``
    - Desired or Reported
    - Credential Data

.. note::
    If ``CREDENTIAL_OPERATION_TYPE`` is set to 0x02 (delete), the set command Credential Length will be 0 and no credential data will be send.

.. note:: 
    The structure of the attribute store is : 

    .. code:: text

        |__ USER_UNIQUE_ID
            |__ CREDENTIAL_TYPE 
                |__ CREDENTIAL_SLOT
                    |__ CREDENTIAL_OPERATION_TYPE
                    |__ CREDENTIAL_DATA_LENGTH
                    |__ CREDENTIAL_DATA

    This means that with the operation type we can get the associated credential slot, type and user unique id and credential data.
                
.. note::
    Top level function are exposed to ease the use of this set command : 
    
    - ``zwave_command_class_user_credential_add_credential``
    - ``zwave_command_class_user_credential_modify_credential``
    - ``zwave_command_class_user_credential_delete_credential``
    - ``zwave_command_class_user_credential_delete_all_credentials``
    - ``zwave_command_class_user_credential_delete_all_credentials_by_type``
    - ``zwave_command_class_user_credential_delete_all_credentials_for_user``
    - ``zwave_command_class_user_credential_delete_all_credentials_for_user_by_type``



Credential Get
--------------

Trigger on undefined **reported** value of ``CREDENTIAL_SLOT``


Mapping between attribute store and Get command :

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Attribute Store
    - Attribute State
    - Z-Wave Get Field 
  * - ``USER_UNIQUE_ID``
    - Reported
    - User Unique Identifier
  * - ``CREDENTIAL_TYPE``
    - Reported
    - Credential Type
  * - ``CREDENTIAL_SLOT``
    - Desired
    - Credential Slot

.. note:: 
    The structure of the attribute store is : 

    .. code:: text

        |__ USER_UNIQUE_ID
            |__ CREDENTIAL_TYPE 
                |__ CREDENTIAL_SLOT

    This means that with only the credential slot we can get the associated credential type and user unique id.

.. _credential_report:

Credential Report
-----------------

Mapping between Report command and attribute store : 

.. list-table:: 
  :header-rows: 1
  :widths: 35 65

  * - Z-Wave Command Attribute 
    - Z-Wave Attribute Store
  * - User Unique Identifier
    - Tries to find an ``USER_UNIQUE_ID`` with this reported value. Will return an error otherwise.
  * - Credential Type
    - Tires to find an ``CREDENTIAL_TYPE`` with this reported value. Otherwise look for a ``CREDENTIAL_TYPE`` with a reported value of 0.
  * - Credential Slot
    - Tires to find an ``CREDENTIAL_SLOT`` with this reported OR desired value. Otherwise look for a ``CREDENTIAL_SLOT`` with a desired value of 0.
  * - CRB
    - ``CREDENTIAL_READ_BACK``
  * - Credential Length
    - ``CREDENTIAL_DATA_LENGTH``
  * - Credential Data
    - ``CREDENTIAL_DATA``
  * - Credential Modifier Type
    -  If value is *CREDENTIAL_REPORT_DNE* this credential will be removed. Otherwise value is stored in ``CREDENTIAL_MODIFIER_TYPE``
  * - Credential Modifier Node ID 
    - ``CREDENTIAL_MODIFIER_NODE_ID``
  * - Next Credential Type
    - If 0 this value is ignored. If this ``CREDENTIAL_TYPE`` already exists, do nothing. Otherwise this value be put in a new ``CREDENTIAL_TYPE`` attribute (reported value).
  * - Next Credential Slot
    - If 0 this value is ignored. If this ``CREDENTIAL_SLOT`` already exists, do nothing. Otherwise this value be put in a new ``CREDENTIAL_SLOT`` attribute (desired value).


Credential Set Error Report
---------------------------

This command does't change the value of attributes in the attribute store.

Based on the Credential Set Error Type it will remove (if possible) the given credential reported by the error.


Credential Notification Report
------------------------------

.. warning:: 
    This command is the Event/State parameters of a Notification Report Command

When received, ZPC will take an action based off the event code (add, modify, delete) : 

- If adding or modifying, the attributes will be set as reported and have their desired value cleared.
- If deleting the user the credential will be removed.

See :ref:`Credential Report <credential_report>` to see how the data is stored.


Credential Learn Start
----------------------

Trigger on new **desired** value of ``CREDENTIAL_LEARN_OPERATION_TYPE``

Mapping between attribute store and command :

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Attribute Store
    - Attribute State
    - Z-Wave Set Field 
  * - ``USER_UNIQUE_ID``
    - Desired or Reported
    - User Unique Identifier
  * - ``CREDENTIAL_TYPE``
    - Desired or Reported
    - Credential Type
  * - ``CREDENTIAL_SLOT``
    - Desired or Reported
    - Credential Slot 
  * - ``CREDENTIAL_LEARN_OPERATION_TYPE``
    - Desired
    - Operation Type
  * - ``CREDENTIAL_LEARN_TIMEOUT``
    - Desired or Reported
    - Credential Learn Timeout

.. note:: 
    The structure of the attribute store is : 

    .. code:: text

        |__ USER_UNIQUE_ID
            |__ CREDENTIAL_TYPE 
                |__ CREDENTIAL_SLOT
                    |__ CREDENTIAL_LEARN_OPERATION_TYPE
                    |__ CREDENTIAL_LEARN_TIMEOUT

    This means that with the operation type we can get the associated credential slot, type and user unique id and credential data.
                
.. note::
    Top level functions are exposed to ease the use of this command : 
    
    - ``zwave_command_class_user_credential_credential_learn_start_add``
    - ``zwave_command_class_user_credential_credential_learn_start_modify``


Credential Learn Cancel
-----------------------

Trigger on new **desired** value of ``CREDENTIAL_LEARN_STOP``. 

When triggered ``CREDENTIAL_LEARN_STOP`` will have its reported value set to 1 no matter the desired value.


Credential Learn Status Report
------------------------------ 

Mapping between Report command and attribute store : 

.. list-table:: 
  :header-rows: 1
  :widths: 35 65

  * - Z-Wave Command Attribute 
    - Z-Wave Attribute Store
  * - Credential Learn Status
    - ``CREDENTIAL_LEARN_STATUS``
  * - User Unique Identifier
    - Tries to find an ``USER_UNIQUE_ID`` with this desired OR reported value. Will return an error otherwise.
  * - Credential Type
    - Tires to find an ``CREDENTIAL_TYPE`` with this desired OR reported value. Will return an error otherwise.
  * - Credential Slot
    - Tires to find an ``CREDENTIAL_SLOT`` with this desired OR reported value. Will return an error otherwise.
  * - Credential Learn Steps Remaining
    - ``CREDENTIAL_LEARN_STEPS_REMAINING``

.. note:: 
    This command might remove the credential based on the Credential Learn Status and the operation type.


User Unique Identifier Credential Association Set
-------------------------------------------------

Trigger on new **desired** value of ``ASSOCIATION_DESTINATION_CREDENTIAL_SLOT``

.. warning:: 
    Use the associated top level function ``zwave_command_class_user_credential_uuic_association_set``, 
    or make sure to first define ``ASSOCIATION_DESTINATION_USER_ID`` **then** ``ASSOCIATION_DESTINATION_CREDENTIAL_SLOT``.

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Attribute Store
    - Attribute State
    - Z-Wave Set Field 
  * - ``USER_UNIQUE_ID``
    - Reported
    - Source User Unique Identifier
  * - ``CREDENTIAL_TYPE``
    - Reported
    - Source Credential Type
  * - ``CREDENTIAL_SLOT``
    - Reported
    - Source Credential Slot
  * - ``ASSOCIATION_DESTINATION_USER_ID``
    - Desired
    - Destination User Unique Identifier
  * - ``ASSOCIATION_DESTINATION_CREDENTIAL_SLOT``
    - Desired
    - Destination Credential Slot

.. note:: 
    The structure of the attribute store is : 

    .. code:: text

        |__ USER_UNIQUE_ID
            |__ CREDENTIAL_TYPE 
                |__ CREDENTIAL_SLOT
                    |__ ASSOCIATION_DESTINATION_USER_ID
                    |__ ASSOCIATION_DESTINATION_CREDENTIAL_SLOT

    This means that with the desired destination (user and credential) we can get the associated credential slot, type and user unique id and credential data.
                
.. note::
    Top level functions are exposed to ease the use of this command : 
    
    - ``zwave_command_class_user_credential_uuic_association_set``


User Unique Identifier Credential Association Report
----------------------------------------------------

Mapping between Report command and attribute store : 

.. list-table:: 
  :header-rows: 1
  :widths: 30 70

  * - Z-Wave Command Attribute 
    - Z-Wave Attribute Store
  * - Source User Unique Identifier
    - Tries to find an ``USER_UNIQUE_ID`` with this reported value. Will return an error otherwise.
  * - Source Credential Type
    - Tires to find an ``CREDENTIAL_TYPE`` with this reported value. Will return an error otherwise.
  * - Source Credential Slot
    - Tires to find an ``CREDENTIAL_SLOT`` with this reported value. Will return an error otherwise.
  * - Destination User Unique Identifier
    - If different from Source User Unique Identifier, change the reported value of this User to the new one. (if status is success)
  * - Destination Credential Slot
    - If different from Source Credential Slot, change the reported value of this Slot to the new one. (if status is success)
  * - User Credential Association Status
    - ``ASSOCIATION_STATUS``

.. note:: 
    If both Destination User Unique Identifier & Destination Credential Slot (and User Credential Association Status is success), the credential slot structure will be moved under the new user instead.

.. _all-users-checksum-get:

All Users Checksum Get 
----------------------

Trigger on undefined **reported** value of ``ALL_USERS_CHECKSUM``


.. note:: 
    Automatically sent when All User checksum is marked as supported in :ref:`User Capabilities Report <user-capabilities-report>`


All Users Checksum Report
-------------------------
.. list-table:: 
  :header-rows: 1

  * - Z-Wave Command Attribute 
    - Z-Wave Attribute Store
  * - All Users Checksum
    - ``ALL_USERS_CHECKSUM``

.. warning:: 
    This command doesn't compute the checksum for all users and only store the reported value.

    This will be updated in the future.


User Checksum Get
-----------------

Trigger on undefined **reported** value of ``USER_CHECKSUM``

Mapping between attribute store and Get command :

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Attribute Store
    - Attribute State
    - Z-Wave Get Field 
  * - ``USER_UNIQUE_ID``
    - Reported
    - User Unique Identifier


.. note:: 
    The structure of the attribute store is : 

    .. code:: text

        |__ USER_UNIQUE_ID
            |__ USER_CHECKSUM

    This means that with only the user checksum we can get the associated user unique id.

.. note::
    Top level functions are exposed to ease the use of this command : 
    
    - ``zwave_command_class_user_credential_get_user_checksum``

User Checksum Report
--------------------

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Command Attribute 
    - Z-Wave Attribute Store
  * - User Unique Identifier
    - Check if ``USER_UNIQUE_ID`` has this reported value. If not, return an error. 
  * - User Checksum
    - ``USER_CHECKSUM``

.. note:: 
    This function will compute the checksum for the user. If it doesn't match the reported checksum it will put in in the reported value of ``USER_CHECKSUM_MISMATCH_ERROR``


Credential Checksum Get
-----------------------

Trigger on undefined **reported** value of ``CREDENTIAL_CHECKSUM``

Mapping between attribute store and Get command :

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Attribute Store
    - Attribute State
    - Z-Wave Get Field 
  * - ``CREDENTIAL_TYPE``
    - Reported
    - Credential Type

.. warning::
    Since the checksum for a credential is based on the credential type, the parent of ``CREDENTIAL_CHECKSUM`` is ``SUPPORTED_CREDENTIAL_TYPE`` and not ``CREDENTIAL_TYPE``.
    ``CREDENTIAL_TYPE`` may appear multiples times in the tree while ``SUPPORTED_CREDENTIAL_TYPE`` will only appear once.

.. note::
    The structure of the attribute store is : 

    .. code:: text

        |__ SUPPORTED_CREDENTIAL_TYPE
            |__ CREDENTIAL_CHECKSUM

    This means that with only the checksum we can get the associated credential type.

.. note::
    Top level functions are exposed to ease the use of this command : 
    
    - ``zwave_command_class_user_credential_get_credential_checksum``


Credential Checksum Report
--------------------------

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Command Attribute 
    - Z-Wave Attribute Store
  * - Credential Type
    - Check if ``SUPPORTED_CREDENTIAL_TYPE`` has this reported value. If not, return an error. 
  * - Credential Checksum
    - ``CREDENTIAL_CHECKSUM``


.. note:: 
    This function will compute the checksum for the credential. If it doesn't match the reported checksum it will put in in the reported value of ``CREDENTIAL_CHECKSUM_MISMATCH_ERROR``


Unify Clusters
**************

.. _warning-unify-clusters:

.. warning:: 
  Most User Credential Bindings are not generated automatically like the other command classes.

  This is due to the "tree" architecture of the User Credential Command Class : 

    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/<attribute>/Reported``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/<attribute>/Credential/<credential_node>/<credential_type>/<attribute>/Reported``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/Credentials/<credential_type>/<attribute>/Reported``
  
   The user capabilities are generated automatically. 


UAM files
---------

.. list-table:: 
  :header-rows: 1

  * - UAM File
    - Cluster
    - Comments
  * - ``UserCredential.uam``
    - ``Unify_UserCredential.xml``
    - Not all attributes can be automatically generated. See :ref:`the warning above <warning-unify-clusters>` 
 
Bindings
--------

.. list-table:: 
  :header-rows: 1

  * - Z-Wave Attribute Store
    - Cluster attribute
    - Comments
  * - ``NUMBER_OF_USERS``
    - UnifyUserCredential SupportedUserUniqueIdentifiers
    - Z-Wave -> Cluster (Read only). 1:1 Mapping 
  * - ``SUPPORTED_CREDENTIAL_RULES``
    - UnifyUserCredential SupportedCredentialRules
    - Z-Wave -> Cluster (Read only). 1:1 Mapping 
  * - Directly set by the :ref:`Credential Capabilities Report <supported_credential_type_exception>`
    - UnifyUserCredential SupportedCredentialTypes
    - Z-Wave -> Cluster (Read only). 1:1 Mapping 
  * - ``SUPPORTED_USER_TYPES``
    - UnifyUserCredential SupportedUserTypes
    - Z-Wave -> Cluster (Read only). 1:1 Mapping 

.. note:: 
  In the ``Static variables`` section of ``applications/zpc/components/zcl_cluster_servers/src/user_credential_cluster_server.cpp``
  you can find the map between the Z-Wave attributes and the MQTT topics.

  The tables below is a summary of those maps.

User map : 

.. list-table:: 
  :header-rows: 1
  :widths: 20 60 20

  * - Z-Wave Attribute Store
    - MQTT Topic
    - Value type
  * - ``USER_TYPE``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/UserType/Reported``
    - UnifyUserCredential UserTypeEnum
  * - ``USER_ACTIVE_STATE``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/UserActiveState/Reported``
    - bool
  * - ``CREDENTIAL_RULE``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/CredentialRule/Reported``
    - UnifyUserCredential CredRule
  * - ``USER_EXPIRING_TIMEOUT_MINUTES``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/ExpiringTimeoutMinutes/Reported``
    - unsigned int
  * - ``USER_NAME_ENCODING``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/UserNameEncoding/Reported``
    - UnifyUserCredential UserNameEncodingType
  * - ``USER_MODIFIER_TYPE``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/UserModifierType/Reported``
    - UnifyUserCredential UserModifierType
  * - ``USER_MODIFIER_NODE_ID``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/UserModifierNodeId/Reported``
    - unsigned int enum
  * - ``USER_NAME``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/UserName/Reported``
    - utf-8 string
  * - ``USER_CHECKSUM``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/UserChecksum/Reported``
    - unsigned int
  * - ``USER_CHECKSUM_MISMATCH_ERROR``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/UserChecksumError/Reported``
    - unsigned int



Credential map : 

.. list-table:: 
  :header-rows: 1
  :widths: 20 60 20

  * - Z-Wave Attribute Store
    - MQTT Topic
    - Value type
  * - ``CREDENTIAL_READ_BACK``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/Credential/<credential_node>/<credential_type>/CredentialReadBack/Reported``
    - bool
  * - ``CREDENTIAL_MODIFIER_TYPE``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/Credential/<credential_node>/<credential_type>/CredentialModifierType/Reported``
    - UnifyUserCredential UserModifierType
  * - ``CREDENTIAL_MODIFIER_NODE_ID``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/Credential/<credential_node>/<credential_type>/CredentialModifierNodeId/Reported``
    - unsigned int
  * - ``CREDENTIAL_DATA``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/Credential/<credential_node>/<credential_type>/CredentialData/Reported``
    - utf-8 string
  * - ``ASSOCIATION_STATUS``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/Credential/<credential_node>/<credential_type>/AssociationStatus/Reported``
    - unsigned int
  * - ``CREDENTIAL_LEARN_STATUS``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/User/<user_id>/Credential/<credential_node>/<credential_type>/CredentialLearnStatus/Reported``
    - unsigned int



Credential rules map :

.. list-table:: 
  :header-rows: 1
  :widths: 20 60 20

  * - Z-Wave Attribute Store
    - MQTT Topic
    - Value type
  * - ``CREDENTIAL_LEARN_SUPPORT``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/Credentials/<credential_type>/LearnSupport/Reported``
    - bool
  * - ``CREDENTIAL_SUPPORTED_SLOT_COUNT``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/Credentials/<credential_type>/SupportedSlotCount/Reported``
    - unsigned int
  * - ``CREDENTIAL_MIN_LENGTH``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/Credentials/<credential_type>/CredentialMinLength/Reported``
    - unsigned int
  * - ``CREDENTIAL_MAX_LENGTH``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/Credentials/<credential_type>/CredentialMaxLength/Reported``
    - unsigned int
  * - ``CREDENTIAL_LEARN_RECOMMENDED_TIMEOUT``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/Credentials/<credential_type>/LearnRecommendedTimeout/Reported``
    - unsigned int
  * - ``CREDENTIAL_LEARN_NUMBER_OF_STEPS``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/Credentials/<credential_type>/LearnNumberOfSteps/Reported``
    - unsigned int
  * - ``CREDENTIAL_CHECKSUM``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/Credentials/<credential_type>/CredentialChecksum/Reported``
    - unsigned int
  * - ``CREDENTIAL_CHECKSUM_MISMATCH_ERROR``
    - ``ucl/by-unid/+/+/UserCredential/Attributes/Credentials/<credential_type>/CredentialChecksumError/Reported``
    - unsigned int


Command actions
---------------

.. list-table:: 
  :widths: 20 50 30
  :header-rows: 1

  * - Action
    - MQTT Topic
    - Comments
  * - Add new User
    - ``ucl/by-unid/+/+/UserCredential/Commands/AddUser`` ``{ "UserUniqueID": 15 ,"UserType": "ProgrammingUser" ,"UserActiveState": false, "CredentialRule": "Single", "UserName": "MARCEL TURBO", "ExpiringTimeoutMinutes": 0, "UserNameEncoding": "ASCII" }``
    - UserUniqueID must be != 0 and **doesn't** exists. ExpiringTimeoutMinutes will be ignored unless UserType is ExpiringUser. UserType must be in the supported user types.
  * - Modify existing User
    - ``ucl/by-unid/+/+/UserCredential/Commands/ModifyUser`` ``{ "UserUniqueID": 12 ,"UserType": "ProgrammingUser" ,"UserActiveState": true, "CredentialRule": "Dual", "UserName": "NEW ENGINE V12", "ExpiringTimeoutMinutes": 0, "UserNameEncoding": "ASCII" }``
    - UserUniqueID must be != 0 and exists. ExpiringTimeoutMinutes will be ignored unless UserType is ExpiringUser. UserType must be in the supported user types.
  * - Delete existing User
    - ``ucl/by-unid/+/+/UserCredential/Commands/DeleteUser`` ``{ "UserUniqueID": 3 }``
    - UserUniqueID must be != 0 and exists.
  * - Add new Credential
    - ``ucl/by-unid/+/+/UserCredential/Commands/AddCredential`` ``{ "UserUniqueID": 12,"CredentialType": "PINCode","CredentialSlot": 1, "CredentialData": "1234" }``
    - UserUniqueID must be != 0 and exists. CredentialType should be in the supported credential types. CredentialSlot must be != 0, **doesn't** exists and be in range of SupportedSlotCount.  CredentialData must be in the range of CredentialMinLength and CredentialMaxLength and respect its credential type (e.g. PINCode must include only numbers).
  * - Modify existing Credential
    - ``ucl/by-unid/+/+/UserCredential/Commands/ModifyCredential`` ``{ "UserUniqueID": 12,"CredentialType": "PINCode","CredentialSlot": 5, "CredentialData": "1234" }``
    - UserUniqueID must be != 0 and exists. CredentialType should exists. CredentialSlot must be != 0 and exists.  CredentialData must be in the range of CredentialMinLength and CredentialMaxLength and respect its credential type (e.g. PINCode must include only numbers).
  * - Delete existing Credential
    - ``ucl/by-unid/+/+/UserCredential/Commands/DeleteCredential`` ``{ "UserUniqueID": 12,"CredentialType": "PINCode","CredentialSlot": 1 }``
    - UserUniqueID must be != 0 and exists. CredentialType should exists. CredentialSlot must be != 0 and exists.
  * - Delete all users
    - ``ucl/by-unid/+/+/UserCredential/Commands/DeleteAllUsers`` ``{}``
    - Also delete their credentials
  * - Delete all credentials
    - ``ucl/by-unid/+/+/UserCredential/Commands/DeleteAllCredentials`` ``{}``
    -  
  * - Delete all credentials of a specific type
    - ``ucl/by-unid/+/+/UserCredential/Commands/DeleteAllCredentialsByType`` ``{ "CredentialType": "PINCode" }``
    - CredentialType should exists.
  * - Delete all credentials of an user
    - ``ucl/by-unid/+/+/UserCredential/Commands/DeleteAllCredentialsForUser`` ``{ "UserUniqueID": 12 }``
    - UserUniqueID must be != 0 and exists.
  * - Delete all credentials of a specific type associated with an specific user
    - ``ucl/by-unid/+/+/UserCredential/Commands/DeleteAllCredentialsForUserByType`` ``{ "UserUniqueID": 12, "CredentialType": "PINCode" }``
    - UserUniqueID must be != 0 and exists. CredentialType should exists.
  * - Start credential learn (of non existing credential)
    - ``ucl/by-unid/+/+/UserCredential/Commands/CredentialLearnStartAdd`` ``{ "UserUniqueID": 12,"CredentialType": "PINCode","CredentialSlot": 1, "CredentialLearnTimeout": 60 }``
    - UserUniqueID must be != 0 and exists. CredentialType must **doesn't** exists be supported an have it's LearnSupport property set to true. CredentialSlot must be != 0 and **doesn't** exists. CredentialLearnTimeout can be 0 (the default timeout will be sent to the end device).
  * - Start credential learn (of existing credential)
    - ``ucl/by-unid/+/+/UserCredential/Commands/CredentialLearnStartModify`` ``{ "UserUniqueID": 12,"CredentialType": "PINCode","CredentialSlot": 5, "CredentialLearnTimeout": 32 }``
    - UserUniqueID must be != 0 and exists. CredentialType must exists, be supported an have it's LearnSupport property set to true. CredentialSlot must be != 0 and exists. CredentialLearnTimeout can be 0 (the default timeout will be sent to the end device).
  * - Stop credential learn
    - ``ucl/by-unid/+/+/UserCredential/Commands/CredentialLearnStop`` ``{}``
    - Will trigger a stop for all credential learn operations.
  * - Move a credential (to another user or slot or both)
    - ``ucl/by-unid/+/+/UserCredential/Commands/CredentialAssociation`` ``{ "CredentialType": "PINCode", "SourceUserUniqueID": 11 ,"SourceCredentialSlot": 1, "DestinationUserUniqueID": 12, "DestinationCredentialSlot": 1 }``
    - SourceUserUniqueID & SourceCredentialSlot & CredentialType should exists. DestinationUserUniqueID & DestinationCredentialSlot should not exists or be the same a Source.
  * - Get checksum associated with a user
    - ``ucl/by-unid/+/+/UserCredential/Commands/GetUserChecksum`` ``{ "UserUniqueID": 12 }``
    - UserUniqueID must be != 0 and exists. Value will be reported in UserChecksum/UserChecksumError
  * - Get checksum associated with a credential type
    - ``ucl/by-unid/+/+/UserCredential/Commands/GetCredentialChecksum`` ``{ "CredentialType": "PINCode" }``
    - CredentialType must exists. Value will be reported in CredentialChecksum/CredentialChecksumError