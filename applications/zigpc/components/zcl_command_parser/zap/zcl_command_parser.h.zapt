/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}
{{#zcl_atomics}}{{zcl_type_map_set_item this.name this.name}}{{/zcl_atomics}}
{{#zcl_enums}}{{#if type}}{{zcl_type_map_set_item this.label this.type}}{{/if}}{{/zcl_enums}}
{{#zcl_bitmaps}}{{#if type}}{{zcl_type_map_set_item this.label this.type}}{{/if}}{{/zcl_bitmaps}}
{{#after}}

/**
 * @defgroup {{component_cmdparser_prefix}} ZigPC ZCL Command Parser
 * @ingroup zigpc_components
 * @brief Listen to ZCL command messages received by Protocol Controller from
 * its PAN nodes.
 *
 * This component allows other components to listen to ZCL cluster command
 * specific messages sent by PAN nodes to the Protocol Controller. This is
 * done by using ZAP to generate the supported cluster and command handlers.
 * If a callback is registered to a particular cluster/command combination
 * the registered callback will be called with the associated command data.
 *
 * @startuml
   hide footbox
   participant "Listener Component" as LC
   participant "ZigPC ZCL Command Parser" as CP
   participant "ZigPC Gateway" as GT

   === Initialization ==
   CP -> GT : Setup notifications for incoming Commands from PAN nodes
   ...
   LC -> CP: Register to receive Groups/AddGroupResponse command events
   ... Time goes by ...

   === ZCL Groups/AddGroupResponse Command Received from PAN node ==
   GT -> CP : Send Command data
   CP -> CP : Check cluster support
   alt Groups cluster not supported
   	 CP -> GT: Send back ZCL_CLUSTER_NOT_SUPPORTED status
   else Groups cluster parsing supported by component
   	 CP -> CP : Check Groups/AddGroupResponse support
     alt Groups/AddGroupResponse not supported
       CP -> GT: Send back ZCL_CLUSTER_COMMAND_NOT_SUPPORTED status
     else Groups/AddGroupResponse parsing supported by component
     	 CP -> CP: Parse payload for Groups/AddGroupResponse
     	 CP -> CP: Find registered callbacks for Groups/AddGroupResponse
         loop Groups/AddGroupResponse registered callbacks
           CP -> LC: Invoke callback with Groups/AddGroupResponse data
         end loop
      	 CP -> GT: Send back ZCL_STATUS_SUCCESS status
     end alt
   end alt
   @enduml
 *
 * @{
 */

#ifndef {{asSnakeCaseUpper (component_cmdparser_prefix)}}_H
#define {{asSnakeCaseUpper (component_cmdparser_prefix)}}_H

// Unify shared components
#include "sl_status.h"

#include "zigpc_common_zigbee.h"
#include "zcl_definitions.h"

#ifdef __cplusplus
extern "C" {
#endif

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_commands}}
{{#if (isEqual source "client")}}

/**
 * @brief Data for {{parent.label}}/{{label}} command.
 *
 */
typedef struct {
{{#zcl_command_arguments}}
{{#if (supportedStruct type)}}
  {{#if isArray}}uint8_t {{asSnakeCaseLower label}}_count; /**< Count of elements for list of {{type}} */{{/if}}
  {{asZigPCZclStructType type}} {{#if isArray}}*{{/if}}{{asSnakeCaseLower label}}; /**< {{caption}} */
{{else if isArray}}
  uint8_t {{asSnakeCaseLower label}}_count; /**< Count of elements for list of {{type}} */
  {{asUnderlyingType (zcl_type_map_get_item type)}} *{{asSnakeCaseLower label}}; /**< {{caption}} */
{{else if (isString type)}}
  uint8_t {{asSnakeCaseLower label}}_length; /**< String length for {{label}} */
  {{asUnderlyingType (zcl_type_map_get_item type)}} {{asSnakeCaseLower label}}; /**< {{caption}} */
{{else}}
  {{asUnderlyingType (zcl_type_map_get_item type)}} {{asSnakeCaseLower label}}; /**< {{caption}} */
{{/if}}
{{/zcl_command_arguments}}
} {{component_cmdparser_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_t;
{{/if}}
{{/zcl_commands}}
{{/if}}
{{/zcl_clusters}}

/**
 * @brief Container for the different types of command data that can be
 * received.
 */
typedef union {
{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_commands}}
{{#if (isEqual source "client")}}
  {{component_cmdparser_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_t {{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}};
{{/if}}
{{/zcl_commands}}
{{/if}}
{{/zcl_clusters}}
} {{component_cmdparser_prefix}}_callback_data_t;
{{/after}}

typedef void (*{{component_cmdparser_prefix}}_callback_t)(
  const zigbee_eui64_t eui64, /**< Device identifier */
  const zigbee_endpoint_id_t endpoint, /**< Device endpoint identifier */
  const {{component_cmdparser_prefix}}_callback_data_t *data  /**< Command data */
);

/**
 *
 * @brief Initialize the command parser component. This function should Listen
 * to gateway cluster commands received and initialize logic to parse the
 * incoming messages.
 *
 * @return sl_status_t  SL_STATUS_OK if initialization is successful. Error if
 * not.
 */
sl_status_t {{component_cmdparser_prefix}}_setup(void);

/**
 *
 * @brief Register a callback when a particular command is parsed based on the
 * ZCL Cluster ID + ZCL Command ID values passed in.
 *
 * @param cluster_id  ZCL cluster ID value.
 * @param cluster_id  ZCL command ID value.
 * @param callback    Pointer to function that receives this type of callback.
 * @return sl_status_t  SL_STATUS_OK if registration is successful. Error if
 * not.
 */
sl_status_t {{component_cmdparser_prefix}}_register_callback(zcl_cluster_id_t cluster_id,
                                                             zcl_command_id_t command_id,
                                                             {{component_cmdparser_prefix}}_callback_t callback);

/**
 *
 * @brief Remove a registered callback when a particular command is parsed
 * based on the ZCL Cluster ID + ZCL Command ID values passed in.
 *
 * @param cluster_id  ZCL cluster ID value.
 * @param cluster_id  ZCL command ID value.
 * @param callback  Pointer to function that receives this type of callback.
 * @return sl_status_t  SL_STATUS_OK if registration is successful. Error if
 * not.
 */
sl_status_t {{component_cmdparser_prefix}}_remove_callback(zcl_cluster_id_t cluster_id,
                                                           zcl_command_id_t command_id,
                                                           {{component_cmdparser_prefix}}_callback_t callback);

#ifdef __cplusplus
}
#endif

#endif /* {{asSnakeCaseUpper (component_cmdparser_prefix)}}_H */

/** @} end {{component_cmdparser_prefix}} */
