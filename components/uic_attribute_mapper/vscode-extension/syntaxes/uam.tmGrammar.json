{
  "scopeName": "source.uam",
  "foldingStartMarker" : "\\{\\s*$",
  "foldingStopMarker" : "^\\s*\\}",
  "patterns": [
    {
      "include": "#expression"
    }
  ],
  "repository": {
    "expression": {
      "patterns": [
        {
          "include": "#keyword"
        },
        {
          "include": "#parent-expression"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#multi-line-comment"
        },
        {
          "include": "#scope-settings"
        },
        {
          "include": "#rep_attribute"
        },
        {
          "include": "#des_attribute"
        },
        {
          "include": "#existence_of_attribute"
        },
        {
          "include": "#function"
        },
        {
          "include": "#numeric_constants"
        },
        {
          "include": "#instance_modifier"
        },
        {
          "include": "#clearance_modifier"
        }
      ]
    },
    "rep_attribute": {
      "match": "r'[\\.\\[\\]\\w]+",
      "name": "support.variable"
    },
    "des_attribute": {
      "match": "d'[\\.\\[\\]\\w]+",
      "name": "support.type"
    },
    "existence_of_attribute": {
      "match": "e'[\\.\\[\\]\\w]+",
      "name": "variable.language"
    },
    "instance_modifier": {
      "match": "i:",
      "name": "storage.modifier"
    },
    "clearance_modifier": {
      "match": "c:",
      "name": "storage.modifier"
    },
    "comment": {
      "match": "\\/\\/.*",
      "name": "comment"
    },
    "numeric_constants": {
      "match": "\\b(0x[0-9a-fA-F]+|[0-9]+|[0-9]+\\.?[0-9]?f)\\b",
      "name": "constant.numeric"
    },
    "function": {
      "match": "fn_[\\w]+[^\\w]",
      "name": "entity.name.function"
    },
    "keyword": {
      "match": "\\b(if|def|scope|or|undefined)\\b",
      "name": "keyword.control"
    },
    "scope-settings": {
      "match": "\\b(chain_reaction|clear_desired|create_attributes|common_parent_type)\\b",
      "name": "markup.heading"
    },
    "multi-line-comment": {
      "begin": "\\/\\*",
      "end": "\\*\\/",
      "name":"comment"
    },
    "parent-expression": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.parent.open"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.parent.close"
        }
      },
      "name": "expression.group",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    }
  }
}