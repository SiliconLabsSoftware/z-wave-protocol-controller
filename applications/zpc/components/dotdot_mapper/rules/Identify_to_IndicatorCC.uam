
// This represents the attributes in the DotDot Identify cluster
def DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME 0x00030000

def zwCOMMAND_CLASS_INDICATOR_VERSION 0x8701
def zwINDICATOR_INDICATOR_VALUE 0x8702
def zwINDICATOR_INDICATOR_ID 0x8703
def zwINDICATOR_PROPERTY_ID 0x8704
def zwINDICATOR_SUPPORTED_PROPERTY_SUPPORTED_BIT_MASK 0x8705
def zwINDICATOR_DESCRIPTION_DESCRIPTION 0x8706

// Meta attribute to keep track of timeout values
def zwINDICATOR_TIMEOUT 0x87F0

// From "Indicator Command Class, list of assigned indicators and Property IDs 5.9.0.xlsx"
def IDENTICATOR_NODE_IDENTIFY 0x50

//- 0x00 MUST be OFF
//- 0x01 .. 0x63 MUST be Lowest non-zero level to 100%
//- 0xFF MUST restore the most recent (non-zero) level
//For a node supporting both a multilevel for light and sound, this property ID MUST be used to actuate the light level and the property ID 0x09 MUST be used to control the indicator's volume.
//For a node supporting either multilevel for light and sound, this property ID MUST be used to actuate the light or sound level."
def PROPERTY_MULTILEVEL 0x01

//Binary	Turning the indicator On or Off	"Turn indication ON or OFF
//- 0x00 MUST be OFF
//- 0x01 .. 0x63 MUST be ON
//- 0xFF MUST be ON"
def PROPERTY_BINARY 0x02

//Toggling	On/Off Periods	"Starts toggling the indication between ON and OFF
//This property is used to set the duration in tenth of seconds of an On/Off period.
//0x00 .. 0xFF MUST represent 0 .. 25.5 seconds
//If this property ID is specified, the On/Off Cycles Property ID MUST also be specified."
def PROPERTY_ON_OFF_PERIOD 0x03


//Toggling	On/Off Cycles	"This property is used to set the number of On/Off periods to run
//- 0x00 .. 0xFE MUST represent 0 .. 254 times
//- 0xFF MUST indicate to run On/Off periods until stopped
//If this Property ID is specified, the On/Off Period Property ID MUST also be specified"
def PROPERTY_ON_CYCLES 0x04

//Toggling	 On time within an On/Off period		"This property is used to set the length of the On time during an On/Off period. It allows asymetic On/Off periods.
//- The value 0x00 MUST represent symmetric On/Off period (On time equal to Off time)
//- Values in the range 0x01 .. 0xFF MUST represent 0.1 .. 25.5 seconds
//e.g. 300ms ON and 500ms OFF is achieved by using : On/Off period (0x03) = 0x08 and On time within an On/Off Period (0x05) = 0x03
//This value MUST be ignored if On/Off periods (0x03) property ID is not defined.
//This value MUST be ignored if On/Off periods (0x03) property ID value is less than this value."
def PROPERTY_ON_OFF_DUTY_CYCLE 0x05


//Timeout	Timeout (hours)	3	"This property is used to set a timeout to the indicator. The indicator upon receiving this Property MUST remain in the current state for the duration specified by the property group, and the indicator MUST return to OFF after this time.
//- Values in the range 0x00..0xFF MUST represent 0. . 255 hours
//This value MUST be ignored if Toggling is defined (0x03 and 0x04 property IDs defined).
//if more Timeout Property Group Properties are supported, their value MUST be combined: e.g. 3 hours 2min and 35 seconds is achieved by using : Timeout (min) (0x0A) = 0x03, Timeout (min) (0x06) = 0x02 and Timeout (sec) (0x07) = 0x23
//If all property IDs within the Timeout Property Group are set to 0x00, the indicator will not time out automatically."
def PROPERTY_TOMEOUT_HOURS 0x0A

//Timeout	Timeout (minutes)	"This property is used to set a timeout to the indicator. The indicator upon receiving this Property MUST remain in the current state for the duration specified by the property group, and the indicator MUST return to OFF after this time.
//- Values in the range 0x00..0xFF MUST represent 0. . 255 minutes
//This value MUST be ignored if Toggling is defined (0x03 and 0x04 property IDs defined).
//if more Timeout Property Group Properties are supported, their value MUST be combined: e.g. 2min and 35 seconds is achieved by using : Timeout (min) (0x06) = 0x02 and Timeout (sec) (0x07) = 0x23
//If all property IDs within the Timeout Property Group are set to 0x00, the indicator will not time out automatically."
def PROPERTY_TIMEOUT_MINUTES 0x6

//Timeout	Timeout (seconds)	"This property is used to set a timeout to the indicator. The indicator upon receiving this Property MUST remain in the current state for the duration specified by the property group, and the indicator MUST return to OFF / Mute after this time.
//- Values in the range 0x00 .. 0x3B MUST represent 0 .. 59 seconds
//- Values in the range 0x3C .. 0xFF are reserved and MUST be ignored
//This value MUST be ignored if Toggling is defined (0x03 and 0x04 property IDs defined).
//if more Timeout Property Group Properties are supported, their value MUST be combined: e.g. 2min and 35 seconds is achieved by using : Timeout (min) (0x06) = 0x02 and Timeout (sec) (0x07) = 0x23
//If all property IDs within the Timeout Property Group are set to 0x00, the indicator will not time out automatically."
def PROPERTY_TIMEOUT_SECONDS 0x7

//Timeout	Timeout (1/100 of seconds)	"This property is used to set a timeout to the indicator. The indicator upon receiving this Property MUST remain in the current state for the duration specified by the property group, and the indicator MUST return to OFF / Mute after this time.
//- Values in the range 0x00 .. 0x63 MUST represent 0.00 .. 0.99 seconds
//- Values in the range 0x64..0xFF are reserved and MUST be ignored
//This value MUST be ignored if Toggling is defined (0x03 and 0x04 property IDs defined).
//if more Timeout Property Group Properties are supported, their value MUST be combined: e.g. 1.75 seconds is achieved by using : Timeout (sec) (0x07) = 0x01 and Timeout (100th sec) (0x08) = 0x4B
//If all property IDs within the Timeout Property Group are set to 0x00, the indicator will not time out automatically."
def PROPERTY_TIMEOUT_10ms 0x8

//Multilevel Sound level	Configures the sound volume of an indication	"This property is used to set the volume of a indicator.
//- The value 0x00 MUST represent Off/Mute in volume
//- Values 0x01 .. 0x64 MUST represent 1 .. 100%
//- Values in the range 0x65 .. 0xFE are reserved and MUST be ignored
//- 0xFF MUST restore the most recent (non-zero) level
//This property MUST NOT switch on the indication. "
def PROPERTY_SOUND_LEVEL 0x09


//ADVERTISE: Low power	The supporting node can return to sleep even if the
//indicator ID is still active	2	"AVERTISE ONLY: This property MUST NOT be used in
//a controlling Command and MUST be ignored by a supporting node.
//This property MAY be used to by a supporting node advertise that the indicator
//can continue working in sleep mode. The indicator may use LCD, e-paper or
//similar technologies to achieve this. If this property is not advertised as
//supported, the indicator MUST be switched OFF during power down. The indicator
//ID MUST keep OFF (i.e. all Property IDs values set to 0x00) when sleeping. If
//this property is advertised as supported, the sleeping node MAY return to sleep
//even if the Indicator ID is active (i.e. not all Property IDs set to 0x00)"
def PROPERTY_LOW_POWER 0x10

def TIMEOUT_HOURS r'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_PROPERTY_ID[PROPERTY_TOMEOUT_HOURS].zwINDICATOR_INDICATOR_VALUE
def TIMEOUT_MINUTES r'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_PROPERTY_ID[PROPERTY_TIMEOUT_MINUTES].zwINDICATOR_INDICATOR_VALUE
def TIMEOUT_SECONDS r'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_PROPERTY_ID[PROPERTY_TIMEOUT_SECONDS].zwINDICATOR_INDICATOR_VALUE
def TIMEOUT_10ms r'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_PROPERTY_ID[PROPERTY_TIMEOUT_10ms].zwINDICATOR_INDICATOR_VALUE

def PERIOD r'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_PROPERTY_ID[PROPERTY_ON_OFF_PERIOD].zwINDICATOR_INDICATOR_VALUE
def CYCLES r'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_PROPERTY_ID[PROPERTY_ON_CYCLES].zwINDICATOR_INDICATOR_VALUE

//Calculate the indicator timeout based on either toggle cycles or the plain timeout properties
def INDICATOR_TIMER_TIMEOUT
  (TIMEOUT_HOURS*1000*60*60 or 0 ) +
  (TIMEOUT_MINUTES*1000*60 or 0 ) +
  (TIMEOUT_SECONDS*1000 or 0 ) +
  (TIMEOUT_10ms*100 or 0 )
def INDICATOR_TOGGLE_TIMEOUT  CYCLES*PERIOD*100
def INDICATOR_TIMEOUT         (INDICATOR_TOGGLE_TIMEOUT or INDICATOR_TIMER_TIMEOUT )

scope 0 {
  d'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_PROPERTY_ID[PROPERTY_ON_OFF_PERIOD].zwINDICATOR_INDICATOR_VALUE = if(d'DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME>0 ) 8 undefined
  d'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_PROPERTY_ID[PROPERTY_ON_OFF_DUTY_CYCLE].zwINDICATOR_INDICATOR_VALUE = if(d'DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME>0) 6 undefined
  d'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_PROPERTY_ID[PROPERTY_ON_CYCLES].zwINDICATOR_INDICATOR_VALUE =  (d'DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME * 1000) / 800

  r'zwINDICATOR_INDICATOR_ID[IDENTICATOR_NODE_IDENTIFY].zwINDICATOR_TIMEOUT = INDICATOR_TIMEOUT
  r'DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME = INDICATOR_TIMEOUT / 1000
  // Future work: Start a delayed transition
  // d'DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME ... INDICATOR_TIMEOUT = 0
}