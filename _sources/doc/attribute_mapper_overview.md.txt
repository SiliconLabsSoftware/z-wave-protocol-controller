# Unify Attribute Mapper Overview

Note: For reference documentation please refer to related chapter of
[UnifySDK documentation](
https://siliconlabs.github.io/UnifySDK/
)

The following chapters, may be also relevent for z-wave-protocol-controller users/developers.

## Example Mapping between Z-Wave and DotDot

To establish a map that reports data on DotDot, we usually need to set
reported value of the DotDot attribute to match the reported value or the
Z-Wave Attribute.

DotDot attributes, once set, are detected and published automatically on MQTT.
This map will for example publish an OnOff attribute for a Binary Switch
value.

```bash
  // Binary switch Command Class
  def zwCOMMAND_CLASS_SWITCH_BINARY_VERSION 0x2501
  def zwSWITCH_BINARY_STATE 0x2502
  def zwSWITCH_BINARY_VALUE 0x2503

  // OnOff Cluster
  def zbON_OFF_CLUSTER_SWITCH 0x00060000

  scope 0 {
  // Linking reported attributes zwave -> zigbee
  r'zbON_OFF_CLUSTER_SWITCH = r'zwSWITCH_BINARY_STATE.zwSWITCH_BINARY_VALUE
```

Given that, only the reported is mapped, if an MQTT client tries to set the
DotDot OnOff attribute with a command, nothing will happen on the Z-Wave
side.

To make Z-Wave value updates based on DotDot commands, the desired value
change of a dotdot attribute should be mapped to an update of the desired
Z-Wave value:

```bash
  // Linking desired attributes zigbee -> zwave
  d'zwSWITCH_BINARY_STATE.zwSWITCH_BINARY_VALUE = d'zbON_OFF_CLUSTER_SWITCH
```

## Guide for the development of UAM files

1) Refer [How to Write UAM files](../doc/how_to_write_uam_files.rst)  to get more details abouthow  write UAM files and UAM grammar and scope settings.
2) Further examples of UAM implementation of Command class etc are explained in detail in ZPC Documentation.
