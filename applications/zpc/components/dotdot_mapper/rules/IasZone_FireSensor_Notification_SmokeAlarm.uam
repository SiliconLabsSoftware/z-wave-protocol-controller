// DotDot Attributes
// This represents the attributes in the DotDot IASZone cluster
def DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE 0x05000000
def DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE 0x05000001
def DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS 0x05000002
def DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS 0x05000010
def DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID 0x05000011
def DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED 0x05000012
def DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL 0x05000013

// Dotdot ZoneState Attributes
def IAS_ZONE_ZONE_STATE_NOT_ENROLLED 0

// Dotdot ZoneType Attributes
// We are mapping z-wave smoke alarm notifcation type to
// IASZone fire sensor zone type with alarm 2 zonestatus
def IAS_ZONE_TYPE_FIRE_SENSOR 0x0028

// Z-Wave Attributes
def zwSUPPORTED_NOTIFICATION_TYPES              0x7102
def zwNOTIFICATION_TYPE                         0x7103
def zwNOTIFICATION_SUPPORTED_STATES_OR_EVENTS   0x7104
def zwNOTIFICATION_STATE                        0x7105
def zwNOTIFICATION_EVENT                        0x7106
def zwNOTIFICATION_EVENT_PARAMETERS             0x7107
def zwBATTERY_BATTERY_LEVEL                     0x8002

// Z-Wave Notification Types
def NOTIFICATION_SMOKE_ALARM 0x01
///< Home Security Notification Type
def NOTIFICATION_TYPE_HOME_SECURITY 0x07

// Notification States
def NOTIFICATION_STATE_LAST_EVENT 0xff
def NOTIFICATION_STATE_SMOKE_ALARM_SENSOR_STATUS 0x0
def NOTIFICATION_STATE_SMOKE_ALARM_ALARM_STATUS 0x1
def COVER_STATUS_STATE_INDEX 0x1

// Z-Wave Notification States
def NOTIFICATION_SMOKE_ALARM_STATE_IDLE 0x00
def SMOKE_DETECTED_LOCATION_PROVIDED 0x01
def SMOKE_DETECTED 0x02
def SMOKE_DETECTED_TEST 0x03

def SMOKE_DETECTED_STATUS_EXIST e'zwNOTIFICATION_TYPE[NOTIFICATION_SMOKE_ALARM].zwNOTIFICATION_STATE[NOTIFICATION_STATE_SMOKE_ALARM_SENSOR_STATUS].zwNOTIFICATION_EVENT
def SMOKE_DETECTED_STATUS r'zwNOTIFICATION_TYPE[NOTIFICATION_SMOKE_ALARM].zwNOTIFICATION_STATE[NOTIFICATION_STATE_SMOKE_ALARM_SENSOR_STATUS].zwNOTIFICATION_EVENT

def SMOKE_DETECTED_TEST_STATUS_EXIST e'zwNOTIFICATION_TYPE[NOTIFICATION_SMOKE_ALARM].zwNOTIFICATION_STATE[NOTIFICATION_STATE_SMOKE_ALARM_ALARM_STATUS].zwNOTIFICATION_EVENT
def SMOKE_DETECTED_TEST_STATUS r'zwNOTIFICATION_TYPE[NOTIFICATION_SMOKE_ALARM].zwNOTIFICATION_STATE[NOTIFICATION_STATE_SMOKE_ALARM_ALARM_STATUS].zwNOTIFICATION_EVENT

def COVER_STATUS r'zwNOTIFICATION_TYPE[NOTIFICATION_TYPE_HOME_SECURITY].zwNOTIFICATION_STATE[COVER_STATUS_STATE_INDEX].zwNOTIFICATION_EVENT
def BATTERY_STATUS r'zwBATTERY_BATTERY_LEVEL

// tampering state type
def SECURITY_TAMPERING 0x03
// Low Battery
def BATTERY_LEVEL_LOW 0xFF

scope 6 {
  // For now zbIAS_ZONE_ZONE_STATE is always NOT ENROLLED
  r'DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE =
    if (e'zwNOTIFICATION_TYPE[NOTIFICATION_SMOKE_ALARM].zwNOTIFICATION_STATE[NOTIFICATION_STATE_SMOKE_ALARM_SENSOR_STATUS]) IAS_ZONE_ZONE_STATE_NOT_ENROLLED
    if (e'zwNOTIFICATION_TYPE[NOTIFICATION_SMOKE_ALARM].zwNOTIFICATION_STATE[NOTIFICATION_STATE_SMOKE_ALARM_ALARM_STATUS]) IAS_ZONE_ZONE_STATE_NOT_ENROLLED
    undefined
    
  // Always set type to FIRE SENSOR
  r'DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE =
    if (e'zwNOTIFICATION_TYPE[NOTIFICATION_SMOKE_ALARM].zwNOTIFICATION_STATE[NOTIFICATION_STATE_SMOKE_ALARM_SENSOR_STATUS]) IAS_ZONE_TYPE_FIRE_SENSOR
    if (e'zwNOTIFICATION_TYPE[NOTIFICATION_SMOKE_ALARM].zwNOTIFICATION_STATE[NOTIFICATION_STATE_SMOKE_ALARM_ALARM_STATUS]) IAS_ZONE_TYPE_FIRE_SENSOR
    undefined

  // If Fire detected (i.e., Smoke detected) set ALARM1 (bit 0) and otherwise set to 0
  r'DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS =
    if (SMOKE_DETECTED_STATUS_EXIST | SMOKE_DETECTED_TEST_STATUS_EXIST)
      ((if (SMOKE_DETECTED_STATUS == SMOKE_DETECTED_LOCATION_PROVIDED) 1 0)
        | (if (SMOKE_DETECTED_STATUS == SMOKE_DETECTED) 1 0)
        | (if (SMOKE_DETECTED_TEST_STATUS == SMOKE_DETECTED_TEST) 1 0)
        | (if (COVER_STATUS == SECURITY_TAMPERING) 4 0)
        | (if (BATTERY_STATUS == BATTERY_LEVEL_LOW) 8 0))
      undefined
}
