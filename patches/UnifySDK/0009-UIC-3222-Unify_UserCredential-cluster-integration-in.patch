From 7ecce320cb8f6727a508f0da13b43752181e624c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Boris=20Labb=C3=A9?= <boris.labbe@silabs.com>
Date: Tue, 17 Sep 2024 11:38:53 +0200
Subject: [PATCH] UIC-3222: Unify_UserCredential cluster integration in Dev-GUI

UIC-3222: Credential Commands improved in DevGUI
UIC-3222: Fix DevUi if no Users are on the device

Allow to send commands even if no user is currently defined
UIC-3222: Fix Credential deletion commands
UIC-3222: Fix Credential Defined slots in UI
UIC-3222: Learn Support in DevUI
UIC-3222: AdminPINCode in DevUI
---
 applications/dev_ui/dev_gui/src/App.tsx       |   2 +
 .../base-clusters/cluster-view-overrides.tsx  |  21 +-
 .../cred-dlg/cred-dlg-types.tsx               |  10 +
 .../user-credential/cred-dlg/cred-dlg.tsx     | 110 ++++++
 .../user-credential-attrs.tsx                 | 244 +++++++++++++
 .../user-credential/user-credential-types.tsx |  10 +
 .../pages/user-credential/user-credential.tsx | 326 ++++++++++++++++++
 .../user-dlg/user-dlg-types.tsx               |  10 +
 .../user-credential/user-dlg/user-dlg.tsx     | 130 +++++++
 .../dev_ui/dev_gui/zap/addon-helper.js        |   3 +-
 10 files changed, 864 insertions(+), 2 deletions(-)
 create mode 100644 applications/dev_ui/dev_gui/src/pages/user-credential/cred-dlg/cred-dlg-types.tsx
 create mode 100644 applications/dev_ui/dev_gui/src/pages/user-credential/cred-dlg/cred-dlg.tsx
 create mode 100644 applications/dev_ui/dev_gui/src/pages/user-credential/user-credential-attrs/user-credential-attrs.tsx
 create mode 100644 applications/dev_ui/dev_gui/src/pages/user-credential/user-credential-types.tsx
 create mode 100644 applications/dev_ui/dev_gui/src/pages/user-credential/user-credential.tsx
 create mode 100644 applications/dev_ui/dev_gui/src/pages/user-credential/user-dlg/user-dlg-types.tsx
 create mode 100644 applications/dev_ui/dev_gui/src/pages/user-credential/user-dlg/user-dlg.tsx

diff --git a/applications/dev_ui/dev_gui/src/App.tsx b/applications/dev_ui/dev_gui/src/App.tsx
index 880130d887..92e17f0c9a 100644
--- a/applications/dev_ui/dev_gui/src/App.tsx
+++ b/applications/dev_ui/dev_gui/src/App.tsx
@@ -32,6 +32,7 @@ import Scene from './pages/scenes/scene/scene';
 import EpScenes from './pages/scenes/ep-scenes/ep-scenes';
 import { CommissionableDevices } from './pages/commissionable-devices/commissionable-devices';
 import { Button, Modal, Spinner } from 'react-bootstrap';
+import UserCredential from './pages/user-credential/user-credential';
 
 class App extends Component<{}, AppState> {
   constructor(props: {}) {
@@ -276,6 +277,7 @@ class App extends Component<{}, AppState> {
                   <Route path='/networkmanagement' exact render={() => <NetworkManagement ref={this.changeNodes} {...baseProps} NodeList={this.state.NodeList} />} />
                   <Route path='/measurements' exact render={() => <Measurements {...baseProps} NodeList={this.state.NodeList} />} />
                   <Route path='/commissionabledevices' exact render={() => <CommissionableDevices {...baseProps} List={this.state.CommissionableDevices} />} />
+                  <Route path='/usercredential' exact render={() => <UserCredential  ref={this.changeConfParams} {...baseProps} NodeList={this.state.NodeList}  />} />
                   <Redirect from="/" exact to="/nodes" />
                   {Object.keys(ClusterTypes).map((type, index) =>
                     <Route key={index} path={NavbarItems.find(i => i.name === type)?.path} render={() =>
diff --git a/applications/dev_ui/dev_gui/src/pages/base-clusters/cluster-view-overrides.tsx b/applications/dev_ui/dev_gui/src/pages/base-clusters/cluster-view-overrides.tsx
index 662fc62c18..c696247586 100644
--- a/applications/dev_ui/dev_gui/src/pages/base-clusters/cluster-view-overrides.tsx
+++ b/applications/dev_ui/dev_gui/src/pages/base-clusters/cluster-view-overrides.tsx
@@ -10,7 +10,7 @@ import { ClusterTypes } from '../../cluster-types/cluster-types';
 import { ClusterViewOverride } from './base-cluster-types';
 import { Link } from 'react-router-dom';
 import { Tooltip } from '@mui/material';
-import { Button } from 'react-bootstrap';
+import { Button, Badge } from 'react-bootstrap';
 
 //Here you can find icons that can be used to customize you page: https://react-icons.github.io/react-icons/
 //Don`t forgot to check licence if you use something that is not in Licence.txt
@@ -749,4 +749,23 @@ export let ClusterViewOverrides = {
         } as NavbarItem,
         IsExpandable: true
     } as ClusterViewOverride,
+
+    UserCredential: {
+        NodesTooltip: (endpoint: string) =>
+            <Tooltip title={`Endpoint ${endpoint}: User Credential`}>
+                <span className="cursor-default">
+                    <Link to={`/usercredential`}>
+                        <RiIcons.RiUserSettingsFill color="#212529" />
+                    </Link>
+                </span>
+            </Tooltip>,
+        NavbarItem: {
+            name: "User Credential",
+            title: 'User Credential',
+            path: '/usercredential',
+            icon: <RiIcons.RiUserSettingsFill />,
+            cName: 'nav-text',
+            subMenu: SideMenu.Actuators
+        } as NavbarItem
+    } as ClusterViewOverride,
 }
\ No newline at end of file
diff --git a/applications/dev_ui/dev_gui/src/pages/user-credential/cred-dlg/cred-dlg-types.tsx b/applications/dev_ui/dev_gui/src/pages/user-credential/cred-dlg/cred-dlg-types.tsx
new file mode 100644
index 0000000000..76e9c0e53e
--- /dev/null
+++ b/applications/dev_ui/dev_gui/src/pages/user-credential/cred-dlg/cred-dlg-types.tsx
@@ -0,0 +1,10 @@
+export type UserDlgState = {
+    Command: any,
+    Unid: any,
+    ShowModal: boolean,
+    UserCredential: any
+}
+
+export type UserDlgProps = {
+    SocketServer: WebSocket
+}
\ No newline at end of file
diff --git a/applications/dev_ui/dev_gui/src/pages/user-credential/cred-dlg/cred-dlg.tsx b/applications/dev_ui/dev_gui/src/pages/user-credential/cred-dlg/cred-dlg.tsx
new file mode 100644
index 0000000000..638dd1b3f3
--- /dev/null
+++ b/applications/dev_ui/dev_gui/src/pages/user-credential/cred-dlg/cred-dlg.tsx
@@ -0,0 +1,110 @@
+import * as React from 'react';
+import { Button, Modal } from 'react-bootstrap';
+import { UserDlgProps, UserDlgState } from './cred-dlg-types';
+import UserCredentialAttrs from '../user-credential-attrs/user-credential-attrs';
+
+
+class CredDlg extends React.Component<UserDlgProps, UserDlgState> {
+    constructor(props: UserDlgProps) {
+        super(props);
+        this.sendCommand = this.sendCommand.bind(this);
+        this.toggleModal = this.toggleModal.bind(this);
+        this.state = {
+            Command: {},
+            Unid: "",
+            ShowModal: false,
+            UserCredential: {}
+        };
+        this.changeCommandAttrs = React.createRef();
+    }
+    changeCommandAttrs: any;
+
+    toggleModal(value: boolean) {
+        this.setState({ ShowModal: value });
+    }
+
+    getDefinedUserIDs(userCredential: any) {
+        var users = userCredential.User
+        if (!users) {
+            return [];
+        }
+        return Object.keys(users).map(user_id => {
+            return { label: user_id, id: parseInt(user_id) }
+        });
+    }
+
+    getSupportedEnum(enumData: any, supportedEnumField: any) {
+        if (!supportedEnumField) {
+            return enumData;
+        }
+        return enumData.filter((enumItem:any) => supportedEnumField[enumItem.name]);
+    }
+
+    updateState(unid: string, command: any, showModal: boolean, userCredential: any) {
+        let updatedCommand = structuredClone(command);
+
+        updatedCommand.fields = command.fields.map( (field: any) => {
+            switch (field.name) {
+                case "UserUniqueID":
+                    field.values = this.getDefinedUserIDs(userCredential);
+                    if (field.values.length !== 0) {
+                        field.defaultValue = field.values[0];
+                        field.default = field.values[0].id;
+                    }
+                    break;
+                case "CredentialType":
+                    field.enum = this.getSupportedEnum(field.enum, userCredential.SupportedCredentialTypes?.Reported);
+                    break;
+            }
+            return field;
+        });
+        
+
+        updatedCommand.UserList = userCredential.User;
+        updatedCommand.UserCredential = userCredential;
+        
+        this.setState({ Unid: unid, Command: updatedCommand, ShowModal: showModal, UserCredential: userCredential }, 
+            () => {
+                this.changeCommandAttrs.current.updateState(this.state.Command)
+            });
+
+    }
+
+    sendCommand() {
+        if (this.state.UserCredential !== undefined)
+            this.props.SocketServer.send(JSON.stringify(
+                {
+                    type: "run-cluster-command",
+                    data: {
+                        Unid: this.state.Unid,
+                        ClusterType: "UserCredential",
+                        Cmd: this.state.Command.name,
+                        Payload: this.changeCommandAttrs.current.state.Payload
+                    }
+                }));
+    }
+
+
+    render() {
+        return (
+            <Modal show={this.state.ShowModal} size="lg" onHide={() => this.toggleModal(false)}>
+                <Modal.Header closeButton>
+                    <Modal.Title>{this.state.Command.name}</Modal.Title>
+                </Modal.Header>
+                <Modal.Body>
+                    <UserCredentialAttrs ref={this.changeCommandAttrs} />
+                </Modal.Body>
+                <Modal.Footer>
+                    <Button variant="primary" onClick={() => { this.sendCommand(); this.toggleModal(false); }}>
+                        Send
+                    </Button>
+                    <Button variant="outline-primary" onClick={() => this.toggleModal(false)}>
+                        Cancel
+                    </Button>
+                </Modal.Footer>
+            </Modal>
+        );
+    }
+}
+
+export default CredDlg
\ No newline at end of file
diff --git a/applications/dev_ui/dev_gui/src/pages/user-credential/user-credential-attrs/user-credential-attrs.tsx b/applications/dev_ui/dev_gui/src/pages/user-credential/user-credential-attrs/user-credential-attrs.tsx
new file mode 100644
index 0000000000..005cca3dd1
--- /dev/null
+++ b/applications/dev_ui/dev_gui/src/pages/user-credential/user-credential-attrs/user-credential-attrs.tsx
@@ -0,0 +1,244 @@
+import * as React from 'react';
+import { Card, Form } from 'react-bootstrap';
+import * as FiIcons from 'react-icons/fi';
+import { Autocomplete, FormControlLabel, InputAdornment, MenuItem, Switch, TextField, Tooltip } from '@mui/material';
+import CommandAttrs from '../../../components/command-atts/command-attrs';
+
+class UserCredentialAttrs extends CommandAttrs  {
+    constructor(props: {}) {
+            super(props);
+    }
+
+    
+    // If the command is trying to modify a user or credential, we update the payload with the current data
+    // Otherwise we only update the payload UserUniqueID
+    updatePayloadBasedOnUserData(userID : any, payload: any, commandName: string, userList: any, credentialType: any, credentialSlot: any) {
+        if (!userList) {
+            return payload;
+        }
+
+        let modifyCommand = commandName.includes("Modify");
+        let credentialCommand = commandName.includes("Credential");
+
+        if (modifyCommand) {
+            let user = userList[userID];
+            if (credentialCommand) {
+                const userCred = user.Credential || {};
+                const credType = userCred[credentialType] || {};
+                const credSlot = credType[credentialSlot] || {};
+                const credData = credSlot.CredentialData?.Reported || "";
+                if (credData) {
+                    payload.CredentialData = credData;
+                } else {
+                    payload.CredentialData = "";
+                }
+            } else {
+                Object.keys(payload).forEach((key) => {
+                    if (user[key]) {
+                        payload[key] = user[key].Reported;
+                    }
+                });
+            }
+        }
+
+        return payload;
+    }
+
+
+    updateCredentials(userUniqueId: any, credentialType: any, userList: any, currentPayload: any, command: any) {
+        var slotItem  = command.fields.find((item: any) => item.name === "CredentialSlot");
+        if (!slotItem)
+            return currentPayload;
+
+        if (command.name.includes("Add")) {
+            slotItem.values = this.getAvailableSlots(command.UserCredential, userUniqueId, credentialType);
+        } else {
+            slotItem.values = this.getDefinedSlots(command.UserCredential, userUniqueId, credentialType);
+        }
+        const credentialSlot = slotItem.values[0]?.id || ''
+        let newPayload = this.updatePayloadBasedOnUserData(currentPayload.UserUniqueID, currentPayload, command.name,
+            userList, credentialType, credentialSlot);
+        newPayload["CredentialSlot"] = credentialSlot;
+        newPayload["CredentialType"] = credentialType;
+
+        return newPayload;
+    }
+    // Called when the User ID changes in the modal
+    onValueChange(valueObject: any, name: string) {
+        if (!valueObject) {
+            return;
+        }
+
+        let commandName = this.state.Command?.name;
+        let userList = this.state.Command?.UserList;
+        let currentPayload = this.state.Payload;
+        const rawValue = valueObject.value?.id || valueObject.id;
+        
+        if (!commandName || !userList) {
+            return;
+        }
+
+        let newPayload = [];
+        switch(name) {
+            case "UserUniqueID":
+                if (commandName.includes("Credential")) {
+                    newPayload = this.updateCredentials(rawValue, this.state.Payload.CredentialType, userList, currentPayload, this.state.Command);
+                }
+
+                // Update the payload based on the user ID
+                newPayload = this.updatePayloadBasedOnUserData(rawValue, newPayload.length == 0 ? currentPayload : newPayload, commandName, userList, currentPayload.CredentialType, currentPayload.CredentialSlot);
+
+                newPayload["UserUniqueID"] = rawValue;
+                this.setState({ Payload: newPayload });
+                break;
+            case "CredentialType":
+                    const userUniqueId = this.state.Payload.UserUniqueID;
+                    const credentialType = rawValue;
+                    newPayload = this.updateCredentials(userUniqueId, credentialType, userList, currentPayload, this.state.Command);
+                    // Needed in case we don't have a CredentialSlot/UserId field
+                    newPayload["CredentialType"] = credentialType;
+                    this.setState({ Payload: newPayload, Command: this.state.Command });
+                break;
+            case "CredentialSlot":
+                const credentialSlot = rawValue;
+                newPayload = this.updatePayloadBasedOnUserData(currentPayload.UserUniqueID, currentPayload, commandName, userList, currentPayload.CredentialType, credentialSlot);
+                newPayload["CredentialSlot"] = credentialSlot;
+                this.setState({ Payload: newPayload });
+                break;
+        }
+    }
+
+    getAutocompleteValue(payloadValue:any) {
+        return {label: payloadValue+"", id: payloadValue};
+    } 
+    
+    getAvailableSlots(userCredentials: any, currentUserID: any, credentialType: any) {
+        
+        var availableSlot = [];
+        var credentialTypeName = credentialType || "default";
+        var currentCredentialRule = userCredentials.Credentials[credentialTypeName] || {};
+        var maxSlot = currentCredentialRule.SupportedSlotCount?.Reported || 10;
+        var userObject = userCredentials.User || {};
+        var credentials = userObject[currentUserID]?.Credential || {};
+        var currentUserSlots = credentials[credentialType] || {};
+
+        for (let i = 1; i <= maxSlot; i++) {
+            if (currentUserSlots[i] === undefined) {
+                availableSlot.push({label: i +"", id: i});
+            }
+        }
+
+        return availableSlot;
+    }
+    getDefinedSlots(userCredential: any, currentUserID: any, credentialType: any) {
+        var userObject = userCredential.User || {};
+        var credentials = userObject[currentUserID]?.Credential || {};
+        var currentUserSlots = credentials[credentialType] || {};
+
+        return Object.keys(currentUserSlots).map( (slot_id) => ({label: slot_id +"", id: parseInt(slot_id)}))
+    }
+
+
+    // This is the default payload for the command
+    // We update it if we are modifying something
+    getPayload(command: any) {
+        let payload = super.getPayload(command);
+
+
+        if (command.name.includes("Credential")) {
+            payload = this.updateCredentials(payload.UserUniqueID, payload.CredentialType, command.UserList, payload, command);
+        }
+
+        return this.updatePayloadBasedOnUserData(payload.UserUniqueID, payload, command.name, command.UserList, payload.CredentialType, payload.CredentialSlot);
+    }
+
+    renderField = (item: any, payload: any, prefixNames: any[], index: any)  => {
+        var validationRegex = ""
+        // Expire timeout minutes is only for DuressUser
+        if (item.name === "ExpiringTimeoutMinutes" && this.state.Payload?.UserType !== "DuressUser") {
+            return;
+        }
+        if ((item.name === "CredentialData"
+            && this.state.Payload?.CredentialType === "PINCode") ||
+            item.name === "PINCode") {
+            validationRegex = "^[0-9]*$";
+        }
+
+        switch (item.type) {
+            case "number":
+            if (item.values) {
+                return (
+                    <div key={index} className="col-sm-6 inline margin-v-10">
+                        <Autocomplete
+                            disablePortal
+                            options={item.values}
+                            defaultValue={item.defaultValue}
+                            value={this.getAutocompleteValue(payload)}
+                            onChange={(_,value) => this.onValueChange({value}, item.name)}
+                            renderInput={(params) => <TextField {...params} className="flex-input" fullWidth={true} label={item.name} name={item.name}
+                                variant="outlined" 
+                            />}
+                        />
+                    </div>
+                )
+            }
+            break;
+            case "boolean":
+                return (
+                    <div key={index} className="col-sm-6 inline margin-v-10">
+                        <div className="col-sm-12">
+                            <div className="check-container">
+                                <FormControlLabel control={<Switch checked={payload} />} label={item.name} name={item.name} onChange={this.handleChange.bind(this, prefixNames, true, false)} />
+                            </div>
+                        </div>
+                    </div>
+                )
+            case "enum":
+                if (item.enum && item.enum.length) {
+                    return (
+                        <div key={index} className="col-sm-6 inline margin-v-10">
+                            <TextField size="small" className="flex-input" fullWidth={true} select label={item.name} name={item.name}
+                                value={payload} onChange=
+                                
+                                { (event)=> {
+                                    if (item.name == "CredentialType") {
+                                        this.onValueChange({id: event.target.value}, item.name);
+                                    } else {
+                                        this.handleChange(prefixNames, false, false, event)
+                                    }
+                                }
+                                } 
+                                variant="outlined">
+                                {item.enum.map((j: any, ind: number) => {
+                                    return <MenuItem key={ind} value={j.name}>
+                                        {j.name}
+                                    </MenuItem>
+                                })}
+                            </TextField>
+                        </div>
+                    )
+                }
+            break;
+        }
+        return (<div key={index} className={`col-sm-6 inline margin-v-10`}>
+                        <TextField size="small" className="flex-input" fullWidth={true} label={item.name} name={item.name} variant="outlined" type={item.type}
+                            value={this.getValue(item.type, payload)} 
+                            onChange={ (event: any) => {
+                                if (validationRegex !== "") {
+                                    if (!event.target.value.match(validationRegex)) {
+                                        return;
+                                    }
+                                }
+                                if (item.maxLength && item.maxLength < event.target.value.length) {
+                                    return
+                                }
+                                this.handleChange(prefixNames, false, item.type === "number", event)
+                            }} 
+                            onFocus={(event: any) => event.target.select()} inputProps={
+                                { readOnly: this.state.ReadOnly }
+                            } />
+                </div>)
+    }
+}
+
+export default UserCredentialAttrs
\ No newline at end of file
diff --git a/applications/dev_ui/dev_gui/src/pages/user-credential/user-credential-types.tsx b/applications/dev_ui/dev_gui/src/pages/user-credential/user-credential-types.tsx
new file mode 100644
index 0000000000..f1a2d96e13
--- /dev/null
+++ b/applications/dev_ui/dev_gui/src/pages/user-credential/user-credential-types.tsx
@@ -0,0 +1,10 @@
+export type UserCredentialProps = {
+  NodeList: any,
+  SocketServer: WebSocket,
+  IsConnected: boolean | null
+}
+
+export type UserCredentialState = {
+  List: Map<string, any>,
+  IsAllExpanded: boolean
+}
\ No newline at end of file
diff --git a/applications/dev_ui/dev_gui/src/pages/user-credential/user-credential.tsx b/applications/dev_ui/dev_gui/src/pages/user-credential/user-credential.tsx
new file mode 100644
index 0000000000..0c0881ca1a
--- /dev/null
+++ b/applications/dev_ui/dev_gui/src/pages/user-credential/user-credential.tsx
@@ -0,0 +1,326 @@
+import React, { Fragment } from 'react';
+import * as FiIcons from 'react-icons/fi';
+import * as BsIcons from 'react-icons/bs';
+import * as RiIcons from 'react-icons/ri';
+import { Button, Col, Dropdown, DropdownButton, Row, Table, Badge, Modal} from 'react-bootstrap';
+import * as CgIcons from 'react-icons/cg';
+import { Link } from 'react-router-dom';
+import { UserCredentialProps, UserCredentialState } from './user-credential-types';
+import EditableAttribute from '../../components/editable-attribute/editable-attribute';
+import UserDlg from './user-dlg/user-dlg';
+import CredDlg from './cred-dlg/cred-dlg';
+import { ClusterTypeAttrs } from '../../cluster-types/cluster-type-attributes';
+import { Tooltip } from '@mui/material';
+
+
+export class UserCredential extends React.Component<UserCredentialProps, UserCredentialState> {
+  constructor(props: UserCredentialProps) {
+    super(props);
+    this.state = {
+      List: this.getList(this.props.NodeList),
+      IsAllExpanded: false
+    }
+    this.userCommandDlg = React.createRef();
+    this.credCommandDlg = React.createRef();
+  }
+
+  userCommandDlg: any;
+  credCommandDlg: any;
+  UserCredentialType = "UserCredential";
+
+  // https://stackoverflow.com/questions/45167565/does-react-js-support-html5-datalist
+  // Datalist ?
+  // https://stackoverflow.com/questions/57401738/how-to-make-react-input-a-text-and-select
+  // Use custom modal and preSendCommand to send MQTT command 
+
+  preSendCommand(unid: string, endPoint: string, cmd: string) {
+    let command = ClusterTypeAttrs[this.UserCredentialType].server.commands.find((i: { name: string; }) => i.name === cmd);
+    if (!command)
+      return;
+
+    if (command && command.fields && command.fields.length) {
+      let userCredential = this.state.List.get(unid + endPoint)?.UserCredential
+      // Order matter here, a credential command should display the credCommandDlg even if it contains "user"
+      if (command.name.includes("Credential") || command.name.includes("PIN")) {
+        this.credCommandDlg.current.updateState(`${unid}/${endPoint}`, command, true, userCredential);
+      } else if (command.name.includes("User")) {
+        this.userCommandDlg.current.updateState(`${unid}/${endPoint}`, command, true, userCredential);
+      } 
+    } else
+      this.props.SocketServer.send(JSON.stringify(
+        {
+          type: "run-cluster-command",
+          data: {
+            Unid: `${unid}/${endPoint}`,
+            ClusterType: this.UserCredentialType,
+            Cmd: command.name,
+            Payload: {}
+          }
+        }));
+  }
+
+  updateState(nodeList: any) {
+    this.setState({ List: this.getList(nodeList) });
+  }
+
+  getList(nodeList: any) {
+    let list = new Map<string, any>();
+    nodeList.forEach((item: any) => {
+      if (!item.ep)
+        return;
+      Object.keys(item.ep).forEach(ep => {
+        if (!item.ep[ep].Clusters?.UserCredential)
+          return;
+        let userCredential = item.ep[ep].Clusters?.UserCredential?.Attributes;
+        console.log("UserCredential : ", userCredential);
+        list.set(item.Unid + ep, {
+          Node: item,
+          EndPoint: ep,
+          UserCredential: userCredential,
+          IsExpanded: (this.state && this.state.List && this.state.List.get(item.Unid + ep)?.IsExpanded) ?? userCredential?.length < 3
+        });
+      });
+    });
+    return list;
+  }
+
+  getUsersHeaders = () => {
+    return (<tr>
+      <th>UID</th>
+      <th>User Name</th>
+      <th>User Type</th>
+      <th>Credential Rule</th>
+      <th>User Active</th>
+    </tr>)
+  }
+  getUsersContents = (user_id: number, user: any) => {
+    return (
+      <>
+        <td rowSpan={2}>
+          <Tooltip title={<span>{["Modifier Type : " + user.UserModifierType?.Reported ,<br />,"Modifier Node ID : " + user.UserModifierNodeId?.Reported]}</span>}>
+            <span>{user_id}</span>
+          </Tooltip>
+        </td>
+        <td>
+          <Tooltip title={"Encoding : " + user.UserNameEncoding?.Reported}>
+            {user.UserName?.Reported}
+          </Tooltip>
+        </td>
+        <td>
+          <Tooltip title={user.ExpiringTimeoutMinutes?.Reported ? "Expiring timeout (minutes) :" + user.ExpiringTimeoutMinutes.Reported : ""}>
+            <Badge pill variant="secondary">{user.UserType?.Reported}</Badge>
+          </Tooltip>
+        </td>
+        <td><Badge pill variant="secondary">{user.CredentialRule?.Reported}</Badge></td>
+        <td>{user.UserActiveState?.Reported == 1 ? <Badge pill variant="success">Active</Badge> : <Badge pill variant="danger">Inactive</Badge>}</td>
+      </>
+    );
+  }
+
+  getBadges = (value: any) => {
+     return (value != null ? <div>
+                  {Object.entries(value).map( ([key, value]) => {
+                    return value ? <Badge pill variant="primary" key={key}>{key}</Badge> : '';
+                  })}
+                 </div>
+             : "-");
+  }
+  getSupportedCredentialType(credentialsTypes: any, credentialRules: any) {
+    return (credentialsTypes != null ? <div>
+      {Object.entries(credentialsTypes).map(([credentialsType, supported]) => {
+        var currentCredentialRule = credentialRules[credentialsType] || {};
+        var learnSupport = currentCredentialRule.LearnSupport?.Reported;
+        var supportedSlotCount = currentCredentialRule.SupportedSlotCount?.Reported;
+        var credMinLength = currentCredentialRule.CredentialMinLength?.Reported;
+        var credMaxLength = currentCredentialRule.CredentialMaxLength?.Reported;
+
+        return supported ? (
+        <Badge pill variant="primary" key={credentialsType}>
+          <Tooltip title={["Learn Support : " + learnSupport, <br/>, "Supported Slot Count : " + supportedSlotCount, <br/>, "Credential Min Length : " + credMinLength, <br/>, "Credential Max Length : " + credMaxLength]}>
+            <span>{credentialsType}</span>
+          </Tooltip>
+        </Badge>)
+          : '';
+      })}
+    </div>
+      : "-");
+  }
+
+  getCredentialsTable = (credential : any) => {
+    if (Object.keys(credential).length === 0) {
+      return (<td colSpan={8} className="cluster-info text-center"><i><b>Not credential found</b></i></td>)
+    }
+    return (
+      <td colSpan={8} style={{backgroundColor: 'rgba(0,0,0,0.05)'}}>
+        <Table size="sm">
+          <thead>
+            <tr>
+              <th>Credential Type</th>
+              <th>Credential Slot</th>
+              <th className='text-center'><Tooltip title="Credential Read Back"><span>CRB</span></Tooltip></th>
+              <th>Credential Data</th>
+            </tr>
+          </thead>
+          <tbody>
+            {
+              Object.entries(credential).map(([credentialType, slots], index) => {
+                var slotObjects = slots as object;
+                var slotCount = Object.keys(slotObjects).length;
+                return (
+                    <>
+                    {
+                      Object.entries(slotObjects).map(([slotID, slotData], index) => {
+                        return (<>
+                          <tr key={index}>
+                          { index === 0 ? <td rowSpan={slotCount}><Badge pill variant="secondary">{credentialType}</Badge></td> : <></>}
+                          <td>
+                            <Tooltip key={index} title={<span>{["Modifier Type : " + slotData.CredentialModifierType?.Reported, <br />, "Modifier Node ID : " + slotData.CredentialModifierNodeId?.Reported]}</span>}>
+                              <span>{slotID}</span>
+                            </Tooltip>
+                          </td>
+                          <td className="text-center">{slotData.CredentialReadBack?.Reported ? <RiIcons.RiCheckboxCircleFill color="green"></RiIcons.RiCheckboxCircleFill> : <RiIcons.RiCloseCircleFill color="red"></RiIcons.RiCloseCircleFill>} </td>
+                          <td>{slotData.CredentialData?.Reported}</td>
+                          </tr>
+                        </>
+                        )
+                      })
+                    }
+                    </>
+                )
+              })}
+          </tbody>
+        </Table>
+      </td>
+    )
+  }
+
+  toggleIsAllExpanded = () => {
+    this.state.List.forEach((value: any, key: string) => {
+      value.IsExpanded = !this.state.IsAllExpanded;
+    });
+    this.setState({ IsAllExpanded: !this.state.IsAllExpanded });
+  }
+
+  render() {
+    return (
+      <>
+        <h3>User Credential</h3>
+        {(this.state.List.size === 0 || !this.props.IsConnected)
+          ? <Row>
+            <Col xs={12} className="text-center">
+              <span className="no-content">No Content</span>
+            </Col>
+          </Row>
+          : <Table>
+              <thead>
+                <tr>
+                  <th className="no-padding-h">
+                    <span className='icon small' onClick={this.toggleIsAllExpanded}>
+                      {this.state.IsAllExpanded ? <BsIcons.BsDashSquare /> : <BsIcons.BsPlusSquare />}
+                    </span>
+                  </th>
+                  <th>Node</th>
+                  <th>Max Users</th>
+                  <th>Supported User Types</th>
+                  <th>Supported Credential Types</th>
+                  <th>Supported Credential Rules</th>
+                  <th>Supported Commands</th>
+                </tr>
+              </thead>
+              <tbody>
+                {[...this.state.List.values()].map((item: any, index: number) => {
+                  
+                  let isOffline = item.Node.NetworkStatus === "Offline" || item.Node.NetworkStatus === "Unavailable";
+                  let commands = item.Node.ep[item.EndPoint].Clusters.UserCredential.SupportedCommands && item.Node.ep[item.EndPoint].Clusters.UserCredential.SupportedCommands.filter((cmd: any) => cmd !== "WriteAttributes");
+                  let userList = item.UserCredential?.User || {};
+                  let userCount = Object.keys(userList).length;
+                  return (
+                    <Fragment key={index}>
+                      <Tooltip key={index} title={isOffline ? "Node is Offline" : ""}>
+                        <tr className={isOffline ? "disabled" : ""}>
+                          <td rowSpan={2} className="no-padding-h">
+                            <span className='icon small' onClick={() => { item.IsExpanded = !item.IsExpanded; }} hidden={!userCount}>
+                              {item.IsExpanded ? <BsIcons.BsDashSquare /> : <BsIcons.BsPlusSquare />}</span>
+                          </td>
+                          <td rowSpan={2}>
+                            <EditableAttribute Node={item.Node} EpName={item.EndPoint} Cluster={item.Node.ep[item.EndPoint].Clusters.NameAndLocation} ClusterName="NameAndLocation" FieldName="Name"
+                              SocketServer={this.props.SocketServer} ReplaceNameWithUnid={true} Disabled={isOffline} />
+                          </td>
+            
+                          <td>{item.UserCredential?.SupportedUserUniqueIdentifiers?.Reported}</td>
+                          <td>{this.getBadges(item.UserCredential?.SupportedUserTypes?.Reported)}</td>
+                          <td>{this.getSupportedCredentialType(item.UserCredential?.SupportedCredentialTypes?.Reported, item.UserCredential?.Credentials)}</td>
+                          <td>{this.getBadges(item.UserCredential?.SupportedCredentialRules?.Reported)}</td>
+                          <td className="float-left">
+                            {commands && commands.length
+                              ? <DropdownButton menuAlign={'right'} variant="outline-primary" title="Commands" className="float-right" disabled={isOffline} size="sm">
+                                {commands.map((cmd: string, cmdIndex: number) => {
+                                  return (
+                                    <Dropdown.Item key={cmdIndex} onClick={this.preSendCommand.bind(this, item.Node.Unid, item.EndPoint, cmd)}> {cmd}</Dropdown.Item>
+                                  )
+                                })
+                                }
+                              </DropdownButton>
+                              : <></>}
+                          </td>
+                        </tr>
+                      </Tooltip>
+                      <tr className={isOffline ? "disabled" : ""}>
+                        {userCount && item.IsExpanded
+                          ? 
+                          (
+                            <td colSpan={8}>
+                            <Table>
+                              <thead>
+                                {this.getUsersHeaders()}
+                              </thead>
+                              <tbody>
+                                  {Object.entries(userList).map((user: any, indexParam: number) => {
+                                    var userId = user[0];
+                                    var userObject = user[1];
+
+                                    if (!userObject) {
+                                      return;
+                                    }
+
+                                    var credentials = userObject.Credential || {};
+
+                                    return (
+                                    <>
+                                    <tr key={indexParam} className={isOffline ? "disabled" : ""}>
+                                      {this.getUsersContents(userId, userObject)}
+                                    </tr>
+                                    {this.getCredentialsTable(credentials)}
+                                    </>
+                                    )
+                                  })
+                                  }
+                                  
+                              </tbody>
+                            </Table>
+                            </td>
+                          )
+                          : <td colSpan={8} className="cluster-info text-center"><i><b>User Count:</b> {userCount}</i></td>
+                        }
+                      </tr>
+                    </Fragment>
+                  )
+                })}
+              </tbody>
+            </Table>
+        }
+        
+        <UserDlg ref={this.userCommandDlg}
+          SocketServer={this.props.SocketServer}
+        />
+
+        <CredDlg ref={this.credCommandDlg}
+          SocketServer={this.props.SocketServer}
+        />
+
+      </>
+    )
+  };
+}
+
+export default UserCredential;
\ No newline at end of file
diff --git a/applications/dev_ui/dev_gui/src/pages/user-credential/user-dlg/user-dlg-types.tsx b/applications/dev_ui/dev_gui/src/pages/user-credential/user-dlg/user-dlg-types.tsx
new file mode 100644
index 0000000000..76e9c0e53e
--- /dev/null
+++ b/applications/dev_ui/dev_gui/src/pages/user-credential/user-dlg/user-dlg-types.tsx
@@ -0,0 +1,10 @@
+export type UserDlgState = {
+    Command: any,
+    Unid: any,
+    ShowModal: boolean,
+    UserCredential: any
+}
+
+export type UserDlgProps = {
+    SocketServer: WebSocket
+}
\ No newline at end of file
diff --git a/applications/dev_ui/dev_gui/src/pages/user-credential/user-dlg/user-dlg.tsx b/applications/dev_ui/dev_gui/src/pages/user-credential/user-dlg/user-dlg.tsx
new file mode 100644
index 0000000000..7b04cff24e
--- /dev/null
+++ b/applications/dev_ui/dev_gui/src/pages/user-credential/user-dlg/user-dlg.tsx
@@ -0,0 +1,130 @@
+import * as React from 'react';
+import { Button, Modal } from 'react-bootstrap';
+import { UserDlgProps, UserDlgState } from './user-dlg-types';
+import UserCredentialAttrs from '../user-credential-attrs/user-credential-attrs';
+
+
+class UserDlg extends React.Component<UserDlgProps, UserDlgState> {
+    constructor(props: UserDlgProps) {
+        super(props);
+        this.sendCommand = this.sendCommand.bind(this);
+        this.toggleModal = this.toggleModal.bind(this);
+        this.state = {
+            Command: {},
+            Unid: "",
+            ShowModal: false,
+            UserCredential: {}
+        };
+        this.changeCommandAttrs = React.createRef();
+    }
+    changeCommandAttrs: any;
+
+    toggleModal(value: boolean) {
+        this.setState({ ShowModal: value });
+    }
+
+    getAvailableUserID(userCredential: any) {
+        let availableUserID = []
+        var users = userCredential.User || {}
+        let maxUsers = userCredential.SupportedUserUniqueIdentifiers.Reported;
+        for (let i = 1; i <= maxUsers; i++) {
+            if (users[i] === undefined) {
+                availableUserID.push({label: i +"", id: i});
+            }
+        }
+
+        return availableUserID;
+    }
+
+    getDefinedUserIDs(userCredential: any) {
+        var users = userCredential.User
+        if (!users) {
+            return [];
+        }
+        return Object.keys(users).map(user_id => {
+            return { label: user_id, id: parseInt(user_id) }
+        });
+    }
+
+    getSupportedEnum(enumData: any, supportedEnumField: any) {
+        if (!supportedEnumField) {
+            return enumData;
+        }
+        return enumData.filter((enumItem:any) => supportedEnumField[enumItem.name]);
+    }
+
+    updateState(unid: string, command: any, showModal: boolean, userCredential: any) {
+        let updatedCommand = structuredClone(command);
+
+        updatedCommand.fields = command.fields.map( (field: any) => {
+            switch (field.name) {
+                case "UserUniqueID":
+                    if (command.name.includes("Add")) {
+                        field.values = this.getAvailableUserID(userCredential);
+                    } else {
+                        field.values = this.getDefinedUserIDs(userCredential);
+                    }
+                    if (field.values.length !== 0) {
+                        field.defaultValue = field.values[0];
+                        field.default = field.values[0].id;
+                    }
+                    break;
+                case "UserType":
+                    field.enum = this.getSupportedEnum(field.enum, userCredential.SupportedUserTypes?.Reported);
+                    break;
+                case "CredentialRule":
+                    field.enum = this.getSupportedEnum(field.enum, userCredential.SupportedCredentialRules?.Reported);
+                    break;
+                case "UserActiveState":
+                    field.default = true;
+                    break;
+            }
+            return field;
+        });
+        
+        updatedCommand.UserList = userCredential.User;
+
+        this.setState({ Unid: unid, Command: updatedCommand, ShowModal: showModal, UserCredential: userCredential }, 
+            () => {
+                this.changeCommandAttrs.current.updateState(this.state.Command)
+            });
+
+    }
+
+    sendCommand() {
+        if (this.state.UserCredential !== undefined)
+            this.props.SocketServer.send(JSON.stringify(
+                {
+                    type: "run-cluster-command",
+                    data: {
+                        Unid: this.state.Unid,
+                        ClusterType: "UserCredential",
+                        Cmd: this.state.Command.name,
+                        Payload: this.changeCommandAttrs.current.state.Payload
+                    }
+                }));
+    }
+
+    render() {
+        return (
+            <Modal show={this.state.ShowModal} size="lg" onHide={() => this.toggleModal(false)}>
+                <Modal.Header closeButton>
+                    <Modal.Title>{this.state.Command.name}</Modal.Title>
+                </Modal.Header>
+                <Modal.Body>
+                    <UserCredentialAttrs ref={this.changeCommandAttrs} />
+                </Modal.Body>
+                <Modal.Footer>
+                    <Button variant="primary" onClick={() => { this.sendCommand(); this.toggleModal(false); }}>
+                        Send
+                    </Button>
+                    <Button variant="outline-primary" onClick={() => this.toggleModal(false)}>
+                        Cancel
+                    </Button>
+                </Modal.Footer>
+            </Modal>
+        );
+    }
+}
+
+export default UserDlg
\ No newline at end of file
diff --git a/applications/dev_ui/dev_gui/zap/addon-helper.js b/applications/dev_ui/dev_gui/zap/addon-helper.js
index aa013c9f1a..5fcd8c22bb 100644
--- a/applications/dev_ui/dev_gui/zap/addon-helper.js
+++ b/applications/dev_ui/dev_gui/zap/addon-helper.js
@@ -32,7 +32,8 @@ const supportedClusters = [
     "TemperatureMeasurement",
     "Thermostat",
     "WindSpeedMeasurement",
-    "WindowCovering"
+    "WindowCovering",
+    "UserCredential"
 ];
 
 let enums = new Set();
-- 
2.39.5

