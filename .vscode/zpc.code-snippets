{
  // Place your zpc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "ZPC Header": {
    "scope": "c,cpp",
    "prefix": "zpc",
    "body": [
      "/******************************************************************************",
      " * # License",
      " * <b>Copyright ${CURRENT_YEAR} Silicon Laboratories Inc. www.silabs.com</b>",
      " ******************************************************************************",
      " * The licensor of this software is Silicon Laboratories Inc. Your use of this",
      " * software is governed by the terms of Silicon Labs Master Software License",
      " * Agreement (MSLA) available at",
      " * www.silabs.com/about-us/legal/master-software-license-agreement. This",
      " * software is distributed to you in Source Code format and is governed by the",
      " * sections of the MSLA applicable to Source Code.",
      " *",
      " *****************************************************************************/",
      "",
      "/**",
      " * @defgroup ${TM_FILENAME_BASE}",
      " * @brief TODO: Write brief for ${TM_FILENAME_BASE}",
      " *",
      " * TODO: Write component description for ${TM_FILENAME_BASE}",
      " *",
      " * @{",
      " */",
      " ",
      "#ifndef ${TM_FILENAME/(.*)\\.(.*)/${1:/upcase}_${2:/upcase}/}",
      "#define ${TM_FILENAME/(.*)\\.(.*)/${1:/upcase}_${2:/upcase}/}",
      "",
      "#ifdef __cplusplus",
      "extern \"C\" {",
      "#endif",
      "",
      "#ifdef __cplusplus",
      "}",
      "#endif",
      "",
      "#endif  //${TM_FILENAME/(.*)\\.(.*)/${1:/upcase}_${2:/upcase}/}",
      "/** @} end ${TM_FILENAME_BASE} */",
      ""
    ],
    "description": "ZPC C Header"
  },
  "ZPC Source": {
    "prefix": "zpc",
    "scope": "c,cpp",
    "body": [
      "/******************************************************************************",
      " * # License",
      " * <b>Copyright ${CURRENT_YEAR} Silicon Laboratories Inc. www.silabs.com</b>",
      " ******************************************************************************",
      " * The licensor of this software is Silicon Laboratories Inc. Your use of this",
      " * software is governed by the terms of Silicon Labs Master Software License",
      " * Agreement (MSLA) available at",
      " * www.silabs.com/about-us/legal/master-software-license-agreement. This",
      " * software is distributed to you in Source Code format and is governed by the",
      " * sections of the MSLA applicable to Source Code.",
      " *",
      " *****************************************************************************/",
      "#include \"${TM_FILENAME_BASE}.h\"",
    ],
    "description": "ZPC C Source"
  },
  "Contiki Process": {
    "scope": "c,cpp",
    "prefix": "zpc",
    "body": [
      "PROCESS(${1:${TM_FILENAME_BASE}_process}, \"$1\");",
      "",
      "PROCESS_THREAD($1, ev, data)",
      "{",
      "",
      "  PROCESS_BEGIN();",
      " while (1) {",
      "   if (ev == PROCESS_EVENT_INIT) {",
      "    } else if (ev == PROCESS_EVENT_EXIT) {",
      "    }",
      "    PROCESS_WAIT_EVENT();",
      "  }",
      "  PROCESS_END()",
      "}"
    ],
    "description": "Add Contiki process"
  },
  "Unity Test": {
    "prefix": "zpc",
    "scope": "c,cpp",
    "body": [
      "/******************************************************************************",
      " * # License",
      " * <b>Copyright ${CURRENT_YEAR} Silicon Laboratories Inc. www.silabs.com</b>",
      " ******************************************************************************",
      " * The licensor of this software is Silicon Laboratories Inc. Your use of this",
      " * software is governed by the terms of Silicon Labs Master Software License",
      " * Agreement (MSLA) available at",
      " * www.silabs.com/about-us/legal/master-software-license-agreement. This",
      " * software is distributed to you in Source Code format and is governed by the",
      " * sections of the MSLA applicable to Source Code.",
      " *",
      " *****************************************************************************/",
      "#include \"unity.h\"",
      "/// Setup the test suite (called once before all test_xxx functions are called)",
      "void suiteSetUp() {}",
      "",
      "/// Teardown the test suite (called once after all test_xxx functions are called)",
      "int suiteTearDown(int num_failures)",
      "{",
      "return num_failures;",
      "}",
      "",
      "/// Called before each and every test",
      "void setUp() {}",
      "",
      "void test_${TM_FILENAME_BASE}(){}"
    ],
    "description": "Unity Test"
  },
  "ZPC Unity Test with Attribute Store and contiki helpers": {
    "prefix": "zpc",
    "scope": "c,cpp",
    "body": [
      "/******************************************************************************",
      " * # License",
      " * <b>Copyright ${CURRENT_YEAR} Silicon Laboratories Inc. www.silabs.com</b>",
      " ******************************************************************************",
      " * The licensor of this software is Silicon Laboratories Inc. Your use of this",
      " * software is governed by the terms of Silicon Labs Master Software License",
      " * Agreement (MSLA) available at",
      " * www.silabs.com/about-us/legal/master-software-license-agreement. This",
      " * software is distributed to you in Source Code format and is governed by the",
      " * sections of the MSLA applicable to Source Code.",
      " *",
      " *****************************************************************************/",
      "#include \"unity.h\"",
      "",
      "// Includes from other components",
      "#include \"datastore.h\"",
      "#include \"attribute_store.h\"",
      "#include \"attribute_store_helper.h\"",
      "#include \"attribute_store_fixt.h\"",
      "",
      "// Interface includes",
      "#include \"attribute_store_defined_attribute_types.h\"",
      "",
      "// ZPC includes",
      "#include \"zpc_attribute_store_type_registration.h\"",
      "#include \"zwave_utils.h\"",
      "#include \"zwave_controller_types.h\"",
      "",
      "// Test helpers",
      "#include \"zpc_attribute_store_test_helper.h\"",
      "#include \"contiki_test_helper.h\"",
      "",
      "// Mock includes",
      "",
      "",
      "",
      "/// Setup the test suite (called once before all test_xxx functions are called)",
      "void suiteSetUp()",
      "{",
      "  datastore_init(\":memory:\");",
      "  attribute_store_init();",
      "  zpc_attribute_store_register_known_attribute_types();",
      "  zpc_attribute_store_test_helper_create_network();",
      "  zwave_unid_set_home_id(home_id);",
      "  contiki_test_helper_init();",
      "}",
      "",
      "/// Teardown the test suite (called once after all test_xxx functions are called)",
      "int suiteTearDown(int num_failures)",
      "{",
      "  attribute_store_teardown();",
      "  datastore_teardown();",
      "  return num_failures;",
      "}",
      "",
      "/// Called before each and every test",
      "void setUp()",
      "{}",
      "",
      "/// Called after each and every test",
      "void tearDown()",
      "{}",
      "",
      "void test_${TM_FILENAME_BASE}(){}"
    ],
    "description": "ZPC Unity Test with Attribute Store and contiki helpers"
  },
  "Rust file": {
    "prefix": "zpc",
    "scope": "rust",
    "body": [
      "///////////////////////////////////////////////////////////////////////////////",
      "// # License",
      "// <b>Copyright ${CURRENT_YEAR}  Silicon Laboratories Inc. www.silabs.com</b>",
      "///////////////////////////////////////////////////////////////////////////////",
      "// The licensor of this software is Silicon Laboratories Inc. Your use of this",
      "// software is governed by the terms of Silicon Labs Master Software License",
      "// Agreement (MSLA) available at",
      "// www.silabs.com/about-us/legal/master-software-license-agreement. This",
      "// software is distributed to you in Source Code format and is governed by the",
      "// sections of the MSLA applicable to Source Code.",
      "//",
      "///////////////////////////////////////////////////////////////////////////////",
    ],
    "description": "UIC rust source file"
  },
  "Python file": {
    "prefix": "zpc",
    "scope": "python",
    "body": [
      "###############################################################################",
      "## License",
      "## <b>Copyright ${CURRENT_YEAR}  Silicon Laboratories Inc. www.silabs.com</b>",
      "###############################################################################",
      "## The licensor of this software is Silicon Laboratories Inc. Your use of this",
      "## software is governed by the terms of Silicon Labs Master Software License",
      "## Agreement (MSLA) available at",
      "## www.silabs.com/about-us/legal/master-software-license-agreement. This",
      "## software is distributed to you in Source Code format and is governed by the",
      "## sections of the MSLA applicable to Source Code.",
      "##",
      "###############################################################################",
    ],
    "description": "UIC python source file"
  }
}