/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @defgroup unify_dotdot_attribute_store_helpers DotDot Attributes Helper functions
 * @ingroup unify_dotdot_attribute_store
 * @brief Set of helper functions to manipulate DotDot attributes under a node/endpoint.
 *
 * @{
 */
{{zap_header}}
#ifndef UNIFY_DOTDOT_ATTRIBUTE_STORE_HELPERS_H
#define UNIFY_DOTDOT_ATTRIBUTE_STORE_HELPERS_H

#include <stdint.h>
#include <stdbool.h>

#include "sl_status.h"
#include "zap-types.h"
#include "uic_typedefs.h"
#include "attribute_store.h"
#include "attribute_store_helper.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster {{label}}
////////////////////////////////////////////////////////////////////////////////
{{#zcl_attributes}}
// {{parent.label}} {{label}}
/**
 * @brief Verifies if the DotDot {{parent.label}} - {{label}} is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if {{label}} is supported
 * @returns false if {{label}} is not supported
 */
bool {{asAttributeIsSupportedFunction parent.label label}} (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot {{parent.label}} - {{label}} attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * {{#if (isString type)}}
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * {{/if}}
 *
 * @returns {{label}} attribute
 */
{{asUnderlyingType type}} {{asAttributeGetFunction parent.label label}}(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot {{parent.label}} - {{label}} attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * {{#if (isMonotonousArray label)}}
 * @param new_{{asSnakeCaseLower label}}_count Number of elements in the array
 * {{/if}}
 * @param new_{{asSnakeCaseLower label}} new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t {{asAttributeSetFunction parent.label label}}(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  {{#if (isMonotonousArray label)}}
  size_t new_{{asSnakeCaseLower label}}_count,
  {{#unless (isString type)}}const {{/unless}}{{asUnderlyingType type}}* new_{{asSnakeCaseLower label}}
  {{else}}
  {{asUnderlyingType type}} new_{{asSnakeCaseLower label}}
  {{/if}}
  );

/**
 * @brief Undefines the Reported value of the the DotDot {{parent.label}} - {{label}}
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t {{asAttributeUndefineReportedFunction parent.label label}}(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * {{parent.label}} - {{label}} attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t {{asAttributeUndefineDesiredFunction parent.label label}}(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * {{parent.label}} - {{label}} attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool {{asAttributeIsReportedDefinedFunction parent.label label}}(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * {{parent.label}} - {{label}} attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool {{asAttributeIsDesiredDefinedFunction parent.label label}}(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot {{parent.label}} - {{label}} attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t {{asAttributeCreateFunction parent.label label}}(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
{{/zcl_attributes}}

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the {{label}}
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_{{asSnakeCaseLower label}}_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * {{label}} Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_{{asSnakeCaseLower label}}_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

{{/if}}
{{/zcl_clusters}}
#ifdef __cplusplus
}
#endif // __cplusplus
#endif // UNIFY_DOTDOT_ATTRIBUTE_STORE_HELPERS_H
/** @} end unify_dotdot_attribute_store_helpers */
