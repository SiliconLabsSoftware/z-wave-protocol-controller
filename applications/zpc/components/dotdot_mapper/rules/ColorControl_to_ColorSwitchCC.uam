// (Level or OnOff) + Color Switch CC <-> ColorControl

// Z-Wave Attributes
def zwSTATE              0x3303
def zwCOMPONENT_ID       0x3304
def zwCOLOR_VALUE        0x3305
def zwCOLOR_DURATION     0x3306

// Z-Wave Multilevel Switch
def zwMULTILEVEL_STATE     0x2602
def zwMULTILEVEL_VALUE     0x2603

// Z-Wave Binary Switch
def zwSWITCH_BINARY_STATE 0x2502
def zwSWITCH_BINARY_VALUE 0x2503

// Z-Wave Indictes for the Component IDs
def WARM_WHITE 0
def COLD_WHITE 1
def RED 2
def GREEN 3
def BLUE 4

// Aliases
def r_zwDURATION      r'zwSTATE.zwCOLOR_DURATION
def r_zw_WARM_WHITE   (r'zwSTATE.zwCOMPONENT_ID[WARM_WHITE].zwCOLOR_VALUE)
def r_zw_COLD_WHITE   (r'zwSTATE.zwCOMPONENT_ID[COLD_WHITE].zwCOLOR_VALUE)
def r_zw_RED          (r'zwSTATE.zwCOMPONENT_ID[RED].zwCOLOR_VALUE)
def r_zw_GREEN        (r'zwSTATE.zwCOMPONENT_ID[GREEN].zwCOLOR_VALUE)
def r_zw_BLUE         (r'zwSTATE.zwCOMPONENT_ID[BLUE].zwCOLOR_VALUE)
def d_zw_WARM_WHITE   (d'zwSTATE.zwCOMPONENT_ID[WARM_WHITE].zwCOLOR_VALUE)
def d_zw_COLD_WHITE   (d'zwSTATE.zwCOMPONENT_ID[COLD_WHITE].zwCOLOR_VALUE)
def d_zw_RED          (d'zwSTATE.zwCOMPONENT_ID[RED].zwCOLOR_VALUE)
def d_zw_GREEN        (d'zwSTATE.zwCOMPONENT_ID[GREEN].zwCOLOR_VALUE)
def d_zw_BLUE         (d'zwSTATE.zwCOMPONENT_ID[BLUE].zwCOLOR_VALUE)
def e_zw_WARM_WHITE   e'zwSTATE.zwCOMPONENT_ID[WARM_WHITE].zwCOLOR_VALUE
def e_zw_COLD_WHITE   e'zwSTATE.zwCOMPONENT_ID[COLD_WHITE].zwCOLOR_VALUE
def e_zw_RED          e'zwSTATE.zwCOMPONENT_ID[RED].zwCOLOR_VALUE
def e_zw_GREEN        e'zwSTATE.zwCOMPONENT_ID[GREEN].zwCOLOR_VALUE
def e_zw_BLUE         e'zwSTATE.zwCOMPONENT_ID[BLUE].zwCOLOR_VALUE
def d_zwDURATION      d'zwSTATE.zwCOLOR_DURATION

// ZCL ColorControl attributes
def zbREMAINING_TIME            0x03000002
def zbCURRENT_HUE               0x03000000
def zbCURRENT_SATURATION        0x03000001
def zbCOLOR_MODE                0x03000008
def zbCOLOR_CAPABILITIES        0x0300400A
def zbENHANCED_COLOR_MODE       0x03004001
def zbCOLOR_TEMPERATURE         0x03000007
def zbMIN_COLOR_TEMPERATURE     0x0300400B
def zbMAX_COLOR_TEMPERATURE     0x0300400C

// ZCL Level attributes
def zbLEVEL                           0x00080000
def zbLEVEL_CLUSTER_MIN_LEVEL         0x00080002
def zbLEVEL_CLUSTER_MAX_LEVEL         0x00080003
def zbLEVEL_CLUSTER_TRANSITION_TIME   0x00080010
// ZCL OnOff attributes
def zbON_OFF                    0x00060000

// Shortcut to check if any of the Hue / Level / Saturation attribute has a desired value
def zcl_no_desired_value fn_are_all_undefined(d'zbCURRENT_SATURATION, d'zbLEVEL, d'zbCURRENT_HUE)

// ZCL OnOff value
def zcl_on_off (d'zbON_OFF or r'zbON_OFF)

// Check if any of the RGB colors or Multilevel Switch have desired values
// Warning: Command Class handlers do not undefine the desired, they align it to the reported.
def zwave_desired_rgb_defined ((d_zw_RED != r_zw_RED) | (d_zw_GREEN != r_zw_GREEN) | (d_zw_BLUE != r_zw_BLUE))
// Check if Color Switch exists for the endpoint
def zwave_color_exists (((r'zwSTATE.zwCOMPONENT_ID) or 1000) != 1000)

// Intermediate calculations
// Hue/Saturation/Level is just a lot easier than CieXY.
// See https://www.rapidtables.com/convert/color/hsv-to-rgb.html

////////////////////////////////////////////////////////////////
// The first direction HSV to RGB
// https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB
////////////////////////////////////////////////////////////////
// Here, we have 0 < V < Vmax instead of 0 < V < 1.
// Here, we have 0 < Ss < Sv_max instead of 0 < Sv < 1.
def Vmax (r'zbLEVEL_CLUSTER_MAX_LEVEL)
def Sv_max (254)

// Scale our values
// V from [0..Lmax] to [0;1]
def V ((d'zbLEVEL or r'zbLEVEL) / Vmax)
// Sv from [0..Smax] to [0;1]
def Sv ((d'zbCURRENT_SATURATION or r'zbCURRENT_SATURATION) / Sv_max)
// Determine the Chroma:
def C (V * Sv)

// H Calculation:
def H_degrees ((d'zbCURRENT_HUE or r'zbCURRENT_HUE) * 360 / 254)
def H_prime (H_degrees / 60)

// X Component
def X (C * (1 - fn_absolute_value((H_prime % 2) -1)))

// Desired Colors (dC / dX / d0)
def dC ((C + (V-C))*255)
def dX ((X + (V-C))*255)
def d0 (((V-C))*255)

////////////////////////////////////////////////////////////////
// The other direction RGB to HSV
// https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB
////////////////////////////////////////////////////////////////

// Xmax is the highest value of the RGB component values.
def Xmax (fn_max_value(r_zw_RED, r_zw_GREEN, r_zw_BLUE) / 255)
def desired_Xmax (fn_max_value(d_zw_RED, d_zw_GREEN, d_zw_BLUE) / 255)

// Xmin is the lowest value of the RGB component values.
def Xmin (fn_min_value(r_zw_RED, r_zw_GREEN, r_zw_BLUE) / 255)
def desired_Xmin (fn_min_value(d_zw_RED, d_zw_GREEN, d_zw_BLUE) / 255)

// Cx, which is the range between Xmax and Xmin
def Cx (Xmax - Xmin)
def desired_Cx (desired_Xmax - desired_Xmin)

////////////////////////////////////////////////////////////////
/// Color temperatures
// https://en.wikipedia.org/wiki/Color_temperature
// https://en.wikipedia.org/wiki/Mired
// We directly invert kelvin temperatures by a million
// We assume Warm White on Z-Wave is at 3000K
// We assume Cold White on Z-Wave is at 5000K
////////////////////////////////////////////////////////////////
scope 100 chain_reaction(1) clear_desired(0) {
  // ZCL -> ZCL
  // Color mode will be toggled by incoming ZCL commands, or by scenes.
  // At start, we try to based it on the reported state of the node.
  // Color mode mirrors the value from the Enhanced Color Mode here.
  r'zbCOLOR_MODE =
    if (fn_are_all_defined(d'zbENHANCED_COLOR_MODE) & (d'zbENHANCED_COLOR_MODE<3)) d'zbENHANCED_COLOR_MODE
    if (fn_are_all_defined(d'zbCOLOR_MODE)) d'zbCOLOR_MODE
    if (e_zw_RED & (r_zw_RED)>0) 0
    if (e_zw_BLUE & (r_zw_BLUE)>0) 0
    if (e_zw_GREEN & (r_zw_GREEN)>0) 0
    if (e_zw_WARM_WHITE & (r_zw_WARM_WHITE)>0) 2
    if (e_zw_COLD_WHITE & (r_zw_COLD_WHITE)>0) 2
    undefined
  d'zbCOLOR_MODE =
    if (fn_are_all_defined(d'zbENHANCED_COLOR_MODE) & (d'zbENHANCED_COLOR_MODE<3)) d'zbENHANCED_COLOR_MODE
    undefined
  r'zbENHANCED_COLOR_MODE =
    if (fn_are_all_defined(d'zbENHANCED_COLOR_MODE)) d'zbENHANCED_COLOR_MODE
    if (e_zw_RED) 0 if (e_zw_WARM_WHITE) 2 undefined
}

scope 100 chain_reaction(0) clear_desired(0) {
  // ZCL to Z-Wave
  // Light temperature, only if color mode is 2:
  // We do a linear fit where warm = 0 at 5000K and warm = zbLEVEL at 4000K or lower
  d'zwSTATE.zwCOMPONENT_ID[WARM_WHITE].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE != 2) 0 (V * 255 * (5000 - (1000000 / d'zbCOLOR_TEMPERATURE)) / 2000 )
  // We do a linear fit where cold = 0 at 3000K and cold = zbLEVEL at 5000K
  d'zwSTATE.zwCOMPONENT_ID[COLD_WHITE].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE != 2) 0 (V * 255 * ((1000000 / d'zbCOLOR_TEMPERATURE) - 3000) / 2000 )

  // Adjust the desired transition time under all Color components ID
  d'zwSTATE.zwCOLOR_DURATION  =
    if ( d'zbREMAINING_TIME < 10) 0
    if ( d'zbREMAINING_TIME < 1270 ) (d'zbREMAINING_TIME / 10)
    (127 + d'zbREMAINING_TIME / 600)

  // Z-Wave to ZCL
  // Temperature, average of the Warm/Cold white components
  r'zbCOLOR_TEMPERATURE =
    if ((r'zbCOLOR_CAPABILITIES & 0x10) == 0) undefined
    if (r'zbCOLOR_MODE != 2) 0 (1000000 / (((r_zw_WARM_WHITE * 3000) + (r_zw_COLD_WHITE * 5000)) / (r_zw_COLD_WHITE+r_zw_WARM_WHITE)))
  d'zbCOLOR_TEMPERATURE =
    if ((r'zbCOLOR_CAPABILITIES & 0x10) == 0) undefined
    if (r'zbCOLOR_MODE != 2) 0 (1000000 / (((d_zw_WARM_WHITE * 3000) + (d_zw_COLD_WHITE * 5000)) / (d_zw_COLD_WHITE+d_zw_WARM_WHITE)))

  // Hue and Saturation
  r'zbCURRENT_HUE =
    if ((r'zbCOLOR_CAPABILITIES & 0x1) == 0) undefined
    if (r'zbCOLOR_MODE != 0) 0
    if ((zcl_on_off == 0) & fn_are_all_defined(d'zbCURRENT_HUE)) (d'zbCURRENT_HUE)
    if (Cx == 0) 0
    if ((Xmax == (r_zw_RED / 255)) & (r_zw_GREEN >= r_zw_BLUE)) (((0 + 60 * (r_zw_GREEN - r_zw_BLUE) / 255 / Cx) / 360) * 254)
    if ((Xmax == (r_zw_RED / 255)) & (r_zw_GREEN < r_zw_BLUE))  (((360 + 60 * (r_zw_GREEN - r_zw_BLUE) / 255 / Cx) / 360) * 254)
    if (Xmax == (r_zw_GREEN / 255)) (((120 + 60 * (r_zw_BLUE - r_zw_RED) / 255 / Cx) / 360) * 254)
      (((240 + 60 * (r_zw_RED - r_zw_GREEN) / 255 / Cx) / 360 ) * 254)
  d'zbCURRENT_HUE =
    if ((r'zbCOLOR_CAPABILITIES & 0x1) == 0) undefined
    if (r'zbCOLOR_MODE != 0) 0
    if (desired_Cx == 0) 0
    if ((desired_Xmax == (d_zw_RED / 255)) & (d_zw_GREEN >= d_zw_BLUE)) (((0 + 60 * (d_zw_GREEN - d_zw_BLUE) / 255 / desired_Cx) / 360 ) * 254)
    if ((desired_Xmax == (d_zw_RED / 255)) & (d_zw_GREEN < d_zw_BLUE)) (((360 + 60 * (d_zw_GREEN - d_zw_BLUE) / 255 / desired_Cx) / 360 ) * 254)
    if (desired_Xmax == (d_zw_RED / 255)) (((0 + 60 * (d_zw_GREEN - d_zw_BLUE) / 255 / desired_Cx) / 360 ) * 254)
    if (desired_Xmax == (d_zw_GREEN / 255)) (((120 + 60 * (d_zw_BLUE - d_zw_RED) / 255 / desired_Cx) / 360 ) * 254)
      (((240 + 60 * (d_zw_RED - d_zw_GREEN) / 255 / desired_Cx) / 360 ) * 254)

  r'zbCURRENT_SATURATION =
    if ((r'zbCOLOR_CAPABILITIES & 0x1) == 0) undefined
    if (r'zbCOLOR_MODE != 0) 0
    if ((zcl_on_off == 0) & fn_are_all_defined(d'zbCURRENT_SATURATION)) (d'zbCURRENT_SATURATION)
    if (Xmax == 0) 0 (Cx / Xmax * Sv_max)
  d'zbCURRENT_SATURATION =
    if ((r'zbCOLOR_CAPABILITIES & 0x1) == 0) undefined
    if (r'zbCOLOR_MODE != 0) 0
    if (desired_Xmax == 0) 0 (desired_Cx / desired_Xmax * Sv_max)

  // Adjust the ZCL level back, if the node reported Color components to a new value.
  r'zbLEVEL =
    if (zcl_on_off == 0) undefined
    if (e'zwMULTILEVEL_STATE) undefined
    if (r'zbCOLOR_MODE == 0) (Xmax * r'zbLEVEL_CLUSTER_MAX_LEVEL)
    undefined

  r'zbREMAINING_TIME  =
    if ( r_zwDURATION == 0 ) 0
    if ( r_zwDURATION == 0xFF ) 0
    if ( r_zwDURATION == 0xFE ) 0
    if ( r_zwDURATION < 0x80 ) (r_zwDURATION * 10)
    if ( r_zwDURATION < 0xEC ) ((r_zwDURATION-127) * 600)
    if ( r_zwDURATION > 0xEB ) 65535
    undefined

  r'zbCOLOR_CAPABILITIES =
   if (e_zw_RED | e_zw_GREEN | e_zw_BLUE | e_zw_COLD_WHITE | e_zw_WARM_WHITE)
   ((( e_zw_RED & e_zw_GREEN & e_zw_BLUE) * 1) | (( e_zw_COLD_WHITE | e_zw_WARM_WHITE) * 0x10))
   undefined

  // Color temperature capabilities. We consider Warm White = 3000K and e_zw_COLD_WHITE = 5000K
  r'zbMIN_COLOR_TEMPERATURE =
    if ( e_zw_COLD_WHITE ) (1000000 / 5000)
    if ( e_zw_WARM_WHITE ) (1000000 / 3000)
    undefined

  r'zbMAX_COLOR_TEMPERATURE =
    if ( e_zw_WARM_WHITE ) (1000000 / 3000)
    if ( e_zw_COLD_WHITE ) (1000000 / 5000)
    undefined
}

scope 0 chain_reaction(1) clear_desired(0) {

  // When the device tells us a new desired color, we adjust back the Z-Wave
  // Level to keep matching HSV / RGB
  // If the map above updated the desired color, i.e. desired Xmax, this
  // evaluation does not get triggered because it is configured chain_reaction(0)
  d'zbLEVEL =
    if (zcl_on_off == 0) undefined
    if (e'zwMULTILEVEL_STATE) undefined
    if (r'zbCOLOR_MODE == 0) (desired_Xmax * r'zbLEVEL_CLUSTER_MAX_LEVEL)
    undefined

  // RGB Colors:
  // Only if color mode is 0:
  // Leaving chain_reaction here will adjust the estimated desired Hue/Saturation
  // which will prevent desired/reported values mistmatches due to drift.
  d'zwSTATE.zwCOMPONENT_ID[RED].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE != 0) 0
    if (zcl_no_desired_value) undefined
    if (zcl_on_off == 0) undefined
    if (H_degrees < 60) dC
    if (H_degrees < 120) dX
    if (H_degrees < 240) d0
    if (H_degrees < 300) dX dC
  d'zwSTATE.zwCOMPONENT_ID[GREEN].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE != 0) 0
    if (zcl_no_desired_value) undefined
    if (zcl_on_off == 0) undefined
    if (H_degrees < 60) dX
    if (H_degrees < 180) dC
    if (H_degrees < 240) dX d0
  d'zwSTATE.zwCOMPONENT_ID[BLUE].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE != 0) 0
    if (zcl_no_desired_value) undefined
    if (zcl_on_off == 0) undefined
    if (H_degrees < 120) d0
    if (H_degrees < 180) dX
    if (H_degrees < 300) dC dX
}
