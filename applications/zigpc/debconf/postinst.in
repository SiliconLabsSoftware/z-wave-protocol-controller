#!/bin/sh -e
# postinst script for uic
#
# see: dh_installdeb(1)

. /usr/share/debconf/confmodule

# ZigPC data directories
UIC_VAR_DIR="${CPACK_PACKAGING_INSTALL_PREFIX}/var/lib/uic"
ZIGPC_OTA_DIR="$UIC_VAR_DIR/ota-files"

# ZigPC config file variables
UIC_CONFDIR=${CPACK_PACKAGING_INSTALL_PREFIX}/etc/uic
UIC_CONFFILE=$UIC_CONFDIR/uic.cfg

# Defaults for required arguments
ZIGPC_DEFAULT_CFG_SERIAL="/dev/ttyACM0"
ZIGPC_DEFAULT_CFG_DATSTORE_FILE="$UIC_VAR_DIR/zigpc.db"

setup_uic_user() {
  if ! getent group uic >/dev/null; then
    addgroup --quiet --system uic
  fi

  if ! getent passwd uic >/dev/null; then
    adduser --quiet --system --no-create-home --ingroup uic --home "$UIC_VAR_DIR" --shell /usr/sbin/nologin uic
    usermod -a -G dialout uic
  fi
}

fix_permissions() {
  mkdir -p $UIC_VAR_DIR
  chown uic $UIC_VAR_DIR
  mkdir -p $ZIGPC_OTA_DIR
  ln -sf $ZIGPC_OTA_DIR ${CPACK_PACKAGING_INSTALL_PREFIX}/usr/bin/ota-files
  chown uic $ZIGPC_OTA_DIR

}

enable_start_uic_zigpc() {
  if type "systemctl" >/dev/null; then
    systemctl --system daemon-reload || true
    systemctl start uic-zigpc || true
    systemctl enable uic-zigpc || true
  fi
}

handle_conf() {
  if ! grep -q "zigpc:" $UIC_CONFFILE; then
    mkdir -p $UIC_CONFDIR
    echo "zigpc:" >> $UIC_CONFFILE
    echo "  serial: $ZIGPC_DEFAULT_CFG_SERIAL" >> $UIC_CONFFILE
    echo "  datastore_file: $ZIGPC_DEFAULT_CFG_DATSTORE_FILE" >> $UIC_CONFFILE
  fi

  db_get uic-zigpc/serial_port
  CFG_ZIGPC_SERIAL="$RET"
  if [ "$RET" = "" ]; then
    CFG_ZIGPC_SERIAL="$ZIGPC_DEFAULT_CFG_SERIAL"
  fi

  db_get uic-zigpc/datastore_file
  CFG_DATASTORE_FILE="$RET"
  if [ "$RET" = "" ]; then
    CFG_DATASTORE_FILE="$ZIGPC_DEFAULT_CFG_DATSTORE_FILE"
  fi

  # Update configuration file with outcome of configuration
  # This is a small state machine that can update the Unify config file, which is written in YAML
  state=""
  while IFS= read line #Read IFS https://en.wikipedia.org/wiki/Input_Field_Separators
  do
    # Set the state depending on the line read from the config file
    case "$line" in
      "zigpc:" )   # State: zigpc
        state="zigpc"
        ;;
      " "* | "-"* )   # Lines starting with '-' or ' ' don't trigger state change.
        # Do nothing.
        ;;
      *) state="" ;;    # Set state to empty, Any unknown text, that doesn't begin with '-' or ' '
    esac
    leftside=$(echo "$line" | cut -f1 -d":")
    # STM to update entries under 'zigpc:'
    case $state in
      "zigpc" )
        case "$line" in
        "zigpc:" )
          echo "$line" ;;                   # zigpc should not be indented
        *"serial:"*)
          echo "$leftside: $CFG_ZIGPC_SERIAL" ;;
        *"datastore_file:"*)
          echo "$leftside: $CFG_DATASTORE_FILE" ;;
        *)
          echo "$line" ;;                 # Anything inside zigpc we indent
        esac ;;
      *)
        echo "$line" ;;                     # Anything else we just echo the line
                        # Without IFS= , echo here would remove the leading spaces and ruin the yaml formatting
    esac
  done < "$UIC_CONFFILE" > "$UIC_CONFFILE.tmp"
 
  mv "$UIC_CONFFILE.tmp" "$UIC_CONFFILE"

  echo "==="
  echo "$UIC_CONFFILE new contents:"
  echo "==="
  cat "$UIC_CONFFILE"
  echo "==="
  
}

case "$1" in
configure)
  handle_conf
  setup_uic_user
  fix_permissions
  ;;

abort-upgrade | abort-remove | abort-deconfigure) ;;

\
  *)
  echo "postinst called with unknown argument \`$1'" >&2
  exit 1
  ;;
esac

# Reload AppArmor profile
APP_PROFILE="/etc/apparmor.d/usr.sbin.uic"
if [ -f "$APP_PROFILE" ] && aa-status --enabled 2>/dev/null; then
  apparmor_parser -r "$APP_PROFILE" || true
fi

#DEBHELPER#

# Enable and start UIC_ZIGPC daemon
enable_start_uic_zigpc

exit 0
