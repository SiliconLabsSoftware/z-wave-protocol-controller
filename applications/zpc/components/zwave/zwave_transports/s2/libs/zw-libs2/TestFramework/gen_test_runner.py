#!/usr/bin/python

# Copyright (c) 2018 Silicon Laboratories Inc.

import sys
import os
import re
from io import open
from string import Template

test_runner_template = '''
/* AUTOGENERATED FILE. DO NOT EDIT. */

${EXTERN_C_CPP_START}
#include "unity.h"
#include "unity_internals.h"
#include "string.h"
${EXTERN_C_CPP_END}

int verbose;

${FUNCTION_PROTOTYPES}

// Inspired by how Unity creates the setUp and tearDown functions
// Purpose is a setup and teardown method called before suite is run,
// and after suite is run.
#if defined(UNITY_WEAK_ATTRIBUTE)
    void setUpSuite(void);
    void tearDownSuite(void);
    UNITY_WEAK_ATTRIBUTE void setUpSuite(void) { }
    UNITY_WEAK_ATTRIBUTE void tearDownSuite(void) { }
#elif defined(UNITY_WEAK_PRAGMA)
#pragma weak setUpSuite
    void setUpSuite(void);
#pragma weak tearDownSuite
    void tearDownSuite(void);
#else
    void setUpSuite(void);
    void tearDownSuite(void);
#endif

int main(int argc, char** argp) {
    int ret;
    setUpSuite();

    // Disable all print buffering. This ensures output is written to stdout as early as possible
    // and minimizes risk of lost print messages if program seg faults.
    setvbuf(stdout, NULL, _IONBF, 0);
    setvbuf(stderr, NULL, _IONBF, 0);

    UNITY_BEGIN();


    if(argc==2) {
        verbose=1;

${FUNCTION_CALLS_VERBOSE}

    } else {

${FUNCTION_CALLS}

    }

    ret = UNITY_END();
    tearDownSuite();
    return ret;
}
'''

if __name__ == '__main__':
    
    if len(sys.argv) != 2:
        exit(f"usage: {sys.argv[0]} <filename>")
    
    filename, file_type = os.path.splitext(sys.argv[1])

    funcs = []
    function_prototypes = ''
    function_calls_verbose = ''
    function_calls = ''

    regexp = r'^void (test_[A-Za-z0-9_]+)\(.*\).*'

    line = 0
    for l in open(sys.argv[1], encoding='utf-8'):
        m = re.search(regexp, l)
        if(m):
            # adds a tuple (function_name, line number)
            funcs.append( (m.group(1).strip(), line) )
        line+=1

    for f in funcs:
        # f[0] is the function name, f[1] is the line number
        function_prototypes     += f"void {f[0]}();\n"
        function_calls_verbose  += f'        if(strcmp(argp[1],"{f[0]}") == 0) UnityDefaultTestRun(&{f[0]}, "{f[0]}", {f[1]});\n'
        function_calls          += f'        UnityDefaultTestRun(&{f[0]}, "{f[0]}", {f[1]});\n'

    t = Template(test_runner_template).substitute({
        'EXTERN_C_CPP_START':       'extern "C" {'  if file_type == '.cpp' else '',
        'EXTERN_C_CPP_END':         '}'             if file_type == '.cpp' else '',
        'FUNCTION_PROTOTYPES':      function_prototypes,
        'FUNCTION_CALLS_VERBOSE':   function_calls_verbose,
        'FUNCTION_CALLS':           function_calls
    })

    print(t)
